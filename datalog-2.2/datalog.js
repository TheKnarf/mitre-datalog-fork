var CompiledModule = function(Module,wrapperPreInit) {try {
	Module;
	if (typeof Module === "undefined") throw new Error();
} catch (err) {
	Module = {}; // NB: Module global
}
Module["preInit"] = function() {
	try {
		wrapperPreInit({"createDataFile":FS.createDataFile}); 
	} catch (err) {
		var nfs = require("fs");
                FS.createDataFile('/', process["argv"][4], nfs["readFileSync"](process["argv"][4], "utf-8"), true, false);
                FS.createDataFile('/', process["argv"][3], nfs["readFileSync"](process["argv"][3], "utf-8"), true, false);
	}
};

// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// TODO: " u s e   s t r i c t ";

try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
} else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
} else if (ENVIRONMENT_IS_WEB) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }

  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
} else if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...

  Module['load'] = importScripts;

} else {
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  bitshift64: function (low, high, op, bits) {
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case 'shl':
          return [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
        case 'ashr':
          return [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
        case 'lshr':
          return [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
      }
    } else if (bits == 32) {
      switch (op) {
        case 'shl':
          return [0, low];
        case 'ashr':
          return [high, (high|0) < 0 ? ander : 0];
        case 'lshr':
          return [high, 0];
      }
    } else { // bits > 32
      switch (op) {
        case 'shl':
          return [0, low << (bits - 32)];
        case 'ashr':
          return [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
        case 'lshr':
          return [high >>>  (bits - 32) , 0];
      }
    }
    abort('unknown bitshift64 op: ' + [value, op, bits]);
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type[type.length-1] == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  addFunction: function (func) {
    var ret = FUNCTION_TABLE.length;
    FUNCTION_TABLE.push(func);
    FUNCTION_TABLE.push(0);
    return ret;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func) {
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        FUNCTION_TABLE[func].apply(null, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP += size;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP += size;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



var CorrectionsMonitor = {
  MAX_ALLOWED: 0, // XXX
  corrections: 0,
  sigs: {},

  note: function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort('\n\nToo many corrections!');
    }
  },

  print: function() {
  }
};





//========================================
// Runtime essentials
//========================================

var __THREW__ = false; // Used in checking for thrown exceptions.

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Adding
//
//         __attribute__((used))
//
//       to the function definition will prevent that.
//
// Note: Closure optimizations will minify function names, making
//       functions no longer callable. If you run closure (on by default
//       in -O2 and above), you should export the functions you will call
//       by calling emcc with something like
//
//         -s EXPORTED_FUNCTIONS='["_func1","_func2"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
Module["ccall"] = ccall;

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  // TODO: optimize this, eval the whole function once instead of going through ccall each time
  return function() {
    return ccall(ident, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type[type.length-1] === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': HEAP32[((ptr)>>2)]=value; break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (tempDoubleF64[0]=value,HEAP32[((ptr)>>2)]=tempDoubleI32[0],HEAP32[(((ptr)+(4))>>2)]=tempDoubleI32[1]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type[type.length-1] === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (tempDoubleI32[0]=HEAP32[((ptr)>>2)],tempDoubleI32[1]=HEAP32[(((ptr)+(4))>>2)],tempDoubleF64[0]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

// Allocates memory for some data and initializes it properly.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;

function allocate(slab, types, allocator) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));

  if (zeroinit) {
      _memset(ret, 0, size);
      return ret;
  }
  
  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var utf8 = new Runtime.UTF8Processor();
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
    t = HEAPU8[((ptr)+(i))];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var FUNCTION_TABLE; // XXX: In theory the indexes here can be equal to pointers to stacked or malloced memory. Such comparisons should
                    //      be false, but can turn out true. We should probably set the top bit to prevent such issues.

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and STATICTOP is the new top.
  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [STATICTOP, TOTAL_MEMORY]);
  assert(STATICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite
  while (TOTAL_MEMORY <= STATICTOP) { // Simple heuristic. Override enlargeMemory() if your program has something more optimal for it
    TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY);
  }
  var oldHEAP8 = HEAP8;
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);
  HEAP8.set(oldHEAP8);
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 10485760;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
  assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
         'Cannot fallback to non-typed array case: Code is too specialized');

  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);

  // Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 255;
  assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = STACK_ROOT + TOTAL_STACK;

var tempDoublePtr = Runtime.alignMemory(STACK_MAX, 8);
var tempDoubleI8  = HEAP8.subarray(tempDoublePtr);
var tempDoubleI32 = HEAP32.subarray(tempDoublePtr >> 2);
var tempDoubleF32 = HEAPF32.subarray(tempDoublePtr >> 2);
var tempDoubleF64 = HEAPF64.subarray(tempDoublePtr >> 3);
function copyTempFloat(ptr) { // functions, because inlining this code is increases code size too much
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr+1];
  tempDoubleI8[2] = HEAP8[ptr+2];
  tempDoubleI8[3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr+1];
  tempDoubleI8[2] = HEAP8[ptr+2];
  tempDoubleI8[3] = HEAP8[ptr+3];
  tempDoubleI8[4] = HEAP8[ptr+4];
  tempDoubleI8[5] = HEAP8[ptr+5];
  tempDoubleI8[6] = HEAP8[ptr+6];
  tempDoubleI8[7] = HEAP8[ptr+7];
}
STACK_MAX = tempDoublePtr + 8;

STATICTOP = alignMemoryPage(STACK_MAX);

var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STATIC);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);

  // Print summary of correction activity
  CorrectionsMonitor.print();
}

function String_len(ptr) {
  var i = ptr;
  while (HEAP8[(i++)]) {}; // Note: should be |!= 0|, technically. But this helps catch bugs with undefineds
  return i - ptr - 1;
}
Module['String_len'] = String_len;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[((buffer)+(i))]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer)+(i))]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

var STRING_TABLE = [];

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
  // TODO: clean up previous line
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    if (!calledRun) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

// === Body ===




function _main($argc, $argv) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $interact;
      var $nointeractbias;
      var $input;
      var $output;
      var $lua;
      var $in;
      var $db;
      var $rc;
      var $s;
      $1=0;
      $2=$argc;
      $3=$argv;
      var $4=$2;
      var $5=(($4)|0)!=6;
      if ($5) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $7=$2;
      var $8=(($7)|0)!=4;
      if ($8) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $10=HEAP32[((_stderr)>>2)];
      var $11=_fprintf($10, ((STRING_TABLE.__str)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=1;
      __label__ = 33; break;
    case 5: 
      var $13=$2;
      var $14=(($13)|0)==6;
      var $15=$14 ? 1 : 0;
      $interact=$15;
      $nointeractbias=0;
      var $16=$interact;
      var $17=(($16)|0)!=0;
      if ($17) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      $nointeractbias=-1;
      __label__ = 7; break;
    case 7: 
      $input=0;
      $output=0;
      $lua=0;
      $in=0;
      var $20=$nointeractbias;
      var $21=((($20)+(4))|0);
      var $22=$3;
      var $23=(($22+($21<<2))|0);
      var $24=HEAP32[(($23)>>2)];
      $input=$24;
      var $25=$input;
      var $26=_strcmp(((STRING_TABLE.__str1)|0), $25);
      var $27=(($26)|0)!=0;
      if ($27) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $29=$input;
      var $30=_fopen($29, ((STRING_TABLE.__str2)|0));
      $in=$30;
      var $31=$in;
      var $32=(($31)|0)!=0;
      if ($32) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $34=$input;
      _perror($34);
      $1=1;
      __label__ = 33; break;
    case 10: 
      __label__ = 12; break;
    case 11: 
      var $37=HEAP32[((_stdin)>>2)];
      $in=$37;
      __label__ = 12; break;
    case 12: 
      var $39=_dl_open();
      $db=$39;
      var $40=$db;
      var $41=(($40)|0)!=0;
      if ($41) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      var $43=HEAP32[((_stderr)>>2)];
      var $44=_fprintf($43, ((STRING_TABLE.__str3)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=1;
      __label__ = 33; break;
    case 14: 
      var $46=$nointeractbias;
      var $47=((($46)+(3))|0);
      var $48=$3;
      var $49=(($48+($47<<2))|0);
      var $50=HEAP32[(($49)>>2)];
      $lua=$50;
      var $51=$interact;
      var $52=(($51)|0)!=0;
      if ($52) { __label__ = 15; break; } else { __label__ = 18; break; }
    case 15: 
      var $54=$nointeractbias;
      var $55=((($54)+(5))|0);
      var $56=$3;
      var $57=(($56+($55<<2))|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=_fopen($58, ((STRING_TABLE.__str2)|0));
      HEAP32[((_query_file)>>2)]=$59;
      var $60=HEAP32[((_query_file)>>2)];
      var $61=(($60)|0)!=0;
      if ($61) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $63=HEAP32[((_stderr)>>2)];
      var $64=_fprintf($63, ((STRING_TABLE.__str4)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=1;
      __label__ = 33; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $67=$lua;
      var $68=(($67)|0)!=0;
      if ($68) { __label__ = 19; break; } else { __label__ = 27; break; }
    case 19: 
      var $70=$db;
      var $71=$lua;
      var $72=_luaL_loadfile($70, $71);
      var $73=(($72)|0)!=0;
      if ($73) { var $79 = 1;__label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      var $75=$db;
      var $76=_lua_pcall($75, 0, -1, 0);
      var $77=(($76)|0)!=0;
      var $79 = $77;__label__ = 21; break;
    case 21: 
      var $79;
      var $80=(($79)&1);
      $rc=$80;
      var $81=$rc;
      var $82=(($81)|0)!=0;
      if ($82) { __label__ = 22; break; } else { __label__ = 26; break; }
    case 22: 
      var $84=$db;
      var $85=_lua_tolstring($84, -1, 0);
      $s=$85;
      var $86=$s;
      var $87=(($86)|0)!=0;
      if ($87) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $89=HEAP32[((_stderr)>>2)];
      var $90=$lua;
      var $91=$s;
      var $92=_fprintf($89, ((STRING_TABLE.__str5)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$90,HEAP32[(((tempInt)+(4))>>2)]=$91,tempInt));
      __label__ = 25; break;
    case 24: 
      var $94=HEAP32[((_stderr)>>2)];
      var $95=$lua;
      var $96=_fprintf($94, ((STRING_TABLE.__str6)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$95,tempInt));
      __label__ = 25; break;
    case 25: 
      $1=1;
      __label__ = 33; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      $rc=0;
      var $100=$in;
      var $101=(($100)|0)!=0;
      if ($101) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $103=$db;
      var $104=$in;
      var $105=$input;
      var $106=_loadfile($103, $104, $105);
      $rc=$106;
      __label__ = 29; break;
    case 29: 
      var $108=$interact;
      var $109=(($108)|0)!=0;
      if ($109) { __label__ = 30; break; } else { __label__ = 32; break; }
    case 30: 
      var $111=$rc;
      var $112=(($111)|0)!=0;
      if ($112) { __label__ = 32; break; } else { __label__ = 31; break; }
    case 31: 
      var $114=$db;
      var $115=_interp($114);
      $rc=$115;
      __label__ = 32; break;
    case 32: 
      var $117=$db;
      _dl_close($117);
      var $118=$rc;
      $1=$118;
      __label__ = 33; break;
    case 33: 
      var $120=$1;
      STACKTOP = __stackBase__;
      return $120;
    default: assert(0, "bad label: " + __label__);
  }
}
Module["_main"] = _main;_main["X"]=1;

function _loadfile($db, $in, $filename) {
  var __stackBase__  = STACKTOP; STACKTOP += 1036; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $rc;
      var $a=__stackBase__;
      var $lf=(__stackBase__)+(4);
      $2=$db;
      $3=$in;
      $4=$filename;
      var $5=$4;
      var $6=(($lf+4)|0);
      HEAP32[(($6)>>2)]=$5;
      var $7=$3;
      var $8=(($lf)|0);
      HEAP32[(($8)>>2)]=$7;
      var $9=$2;
      var $10=$lf;
      var $11=_dl_load($9, 2, 4, $10);
      $rc=$11;
      var $12=$rc;
      var $13=(($12)|0)!=0;
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $15=$rc;
      var $16=$3;
      var $17=_leave($15, $16);
      $1=$17;
      __label__ = 7; break;
    case 4: 
      var $19=$2;
      var $20=_dl_ask($19, $a);
      $rc=$20;
      var $21=$rc;
      var $22=(($21)|0)!=0;
      if ($22) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $24=$rc;
      var $25=$3;
      var $26=_leave($24, $25);
      $1=$26;
      __label__ = 7; break;
    case 6: 
      var $28=HEAP32[(($a)>>2)];
      var $29=_print_answers($28);
      var $30=$3;
      var $31=_leave($29, $30);
      $1=$31;
      __label__ = 7; break;
    case 7: 
      var $33=$1;
      STACKTOP = __stackBase__;
      return $33;
    default: assert(0, "bad label: " + __label__);
  }
}


function _interp($db) {
  var __stackBase__  = STACKTOP; STACKTOP += 148; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $a=__stackBase__;
      var $rc;
      var $lb=(__stackBase__)+(4);
      $2=$db;
      var $3=$2;
      var $4=(($lb)|0);
      HEAP32[(($4)>>2)]=$3;
      __label__ = 3; break;
    case 3: 
      var $6=(($lb+4)|0);
      HEAP32[(($6)>>2)]=0;
      var $7=(($lb+8)|0);
      HEAP32[(($7)>>2)]=0;
      var $8=$2;
      var $9=$lb;
      var $10=_dl_load($8, 6, 8, $9);
      $rc=$10;
      var $11=$rc;
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 10; break; } else { __label__ = 4; break; }
    case 4: 
      var $14=$2;
      var $15=_dl_ask($14, $a);
      $rc=$15;
      var $16=$rc;
      var $17=(($16)|0)!=0;
      if ($17) { __label__ = 8; break; } else { __label__ = 5; break; }
    case 5: 
      var $19=HEAP32[(($a)>>2)];
      var $20=_print_answers($19);
      var $21=(($20)|0)!=0;
      if ($21) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $23=HEAP32[((_stderr)>>2)];
      var $24=_fprintf($23, ((STRING_TABLE.__str7)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 7; break;
    case 7: 
      __label__ = 9; break;
    case 8: 
      var $27=HEAP32[((_stderr)>>2)];
      var $28=_fprintf($27, ((STRING_TABLE.__str8)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=1;
      __label__ = 15; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $32=(($lb+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|0)!=0;
      var $35=$34 ^ 1;
      if ($35) { __label__ = 3; break; } else { __label__ = 12; break; }
    case 12: 
      var $37=_printf(((STRING_TABLE.__str9)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $38=HEAP32[((_stdin)>>2)];
      var $39=_ferror($38);
      var $40=(($39)|0)!=0;
      if ($40) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      _perror(((STRING_TABLE.__str10)|0));
      $1=1;
      __label__ = 15; break;
    case 14: 
      $1=0;
      __label__ = 15; break;
    case 15: 
      var $44=$1;
      STACKTOP = __stackBase__;
      return $44;
    default: assert(0, "bad label: " + __label__);
  }
}
_interp["X"]=1;

function _getaline($data, $size) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $lb;
      var $buf;
      var $nofiles;
      var $prompt;
      var $in;
      var $n;
      $2=$data;
      $3=$size;
      var $4=$2;
      var $5=$4;
      $lb=$5;
      var $6=$lb;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      $nofiles=$8;
      var $9=$lb;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|0)!=0;
      var $13=$12 ? (((STRING_TABLE.__str21)|0)) : (((STRING_TABLE.__str22)|0));
      $prompt=$13;
      var $14=$lb;
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|0)!=0;
      if ($17) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 29; break;
    case 4: 
      var $20=$lb;
      var $21=(($20+8)|0);
      HEAP32[(($21)>>2)]=1;
      var $22=$lb;
      var $23=(($22+12)|0);
      HEAP32[(($23)>>2)]=0;
      var $24=$lb;
      var $25=(($24+16)|0);
      var $26=(($25)|0);
      var $27=HEAP32[((_query_file)>>2)];
      var $28=_fgets($26, 128, $27);
      $buf=$28;
      var $29=$buf;
      var $30=(($29)|0)!=0;
      if ($30) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $32=$lb;
      var $33=(($32+4)|0);
      HEAP32[(($33)>>2)]=1;
      var $34=$lb;
      var $35=(($34+12)|0);
      HEAP32[(($35)>>2)]=1;
      $1=0;
      __label__ = 29; break;
    case 6: 
      var $37=$buf;
      var $38=_strlen($37);
      $n=$38;
      var $39=$n;
      var $40=(($39)|0)==0;
      if ($40) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $42=$lb;
      var $43=(($42+4)|0);
      HEAP32[(($43)>>2)]=1;
      var $44=$lb;
      var $45=(($44+12)|0);
      HEAP32[(($45)>>2)]=1;
      $1=0;
      __label__ = 29; break;
    case 8: 
      var $47=$buf;
      var $48=(($47)|0)!=0;
      if ($48) { __label__ = 9; break; } else { __label__ = 12; break; }
    case 9: 
      var $50=$buf;
      var $51=_printf(((STRING_TABLE.__str23)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$50,tempInt));
      var $52=$buf;
      var $53=_strlen($52);
      var $54=((($53)-(1))|0);
      var $55=$buf;
      var $56=(($55+$54)|0);
      var $57=HEAP8[($56)];
      var $58=(($57 << 24) >> 24);
      var $59=(($58)|0)!=10;
      if ($59) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $61=_puts(((__str24)|0));
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $64=$nofiles;
      var $65=(($64)|0)!=0;
      if ($65) { __label__ = 20; break; } else { __label__ = 13; break; }
    case 13: 
      var $67=$buf;
      var $68=(($67)|0);
      var $69=HEAP8[($68)];
      var $70=(($69 << 24) >> 24);
      var $71=(($70)|0)==61;
      if ($71) { __label__ = 14; break; } else { __label__ = 20; break; }
    case 14: 
      var $73=$n;
      var $74=((($73)-(1))|0);
      var $75=$buf;
      var $76=(($75+$74)|0);
      var $77=HEAP8[($76)];
      var $78=(($77 << 24) >> 24);
      var $79=(($78)|0)!=10;
      if ($79) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $81=HEAP32[((_stderr)>>2)];
      var $82=_fprintf($81, ((STRING_TABLE.__str25)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=0;
      __label__ = 29; break;
    case 16: 
      var $84=$n;
      var $85=((($84)-(1))|0);
      var $86=$buf;
      var $87=(($86+$85)|0);
      HEAP8[($87)]=0;
      var $88=$buf;
      var $89=(($88+1)|0);
      var $90=_fopen($89, ((STRING_TABLE.__str2)|0));
      $in=$90;
      var $91=$in;
      var $92=(($91)|0)!=0;
      if ($92) { __label__ = 18; break; } else { __label__ = 17; break; }
    case 17: 
      var $94=$buf;
      var $95=(($94+1)|0);
      _perror($95);
      __label__ = 19; break;
    case 18: 
      var $97=$lb;
      var $98=(($97)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=$in;
      var $101=$buf;
      var $102=(($101+1)|0);
      var $103=_loadfile($99, $100, $102);
      __label__ = 19; break;
    case 19: 
      var $105=$lb;
      var $106=(($105+4)|0);
      HEAP32[(($106)>>2)]=1;
      $1=0;
      __label__ = 29; break;
    case 20: 
      var $108=$n;
      var $109=((($108)-(1))|0);
      var $110=$buf;
      var $111=(($110+$109)|0);
      var $112=HEAP8[($111)];
      var $113=(($112 << 24) >> 24);
      var $114=(($113)|0)!=10;
      if ($114) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $116=$lb;
      var $117=(($116+4)|0);
      HEAP32[(($117)>>2)]=0;
      var $118=$n;
      var $119=$3;
      HEAP32[(($119)>>2)]=$118;
      __label__ = 27; break;
    case 22: 
      var $121=$n;
      var $122=(($121)>>>0) > 1;
      if ($122) { __label__ = 23; break; } else { __label__ = 25; break; }
    case 23: 
      var $124=$n;
      var $125=((($124)-(2))|0);
      var $126=$buf;
      var $127=(($126+$125)|0);
      var $128=HEAP8[($127)];
      var $129=(($128 << 24) >> 24);
      var $130=(($129)|0)==92;
      if ($130) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $132=$lb;
      var $133=(($132+4)|0);
      HEAP32[(($133)>>2)]=0;
      var $134=$n;
      var $135=((($134)-(2))|0);
      var $136=$3;
      HEAP32[(($136)>>2)]=$135;
      __label__ = 26; break;
    case 25: 
      var $138=$lb;
      var $139=(($138+4)|0);
      HEAP32[(($139)>>2)]=1;
      var $140=$n;
      var $141=$3;
      HEAP32[(($141)>>2)]=$140;
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $145=$buf;
      $1=$145;
      __label__ = 29; break;
    case 29: 
      var $147=$1;
      STACKTOP = __stackBase__;
      return $147;
    default: assert(0, "bad label: " + __label__);
  }
}
_getaline["X"]=1;

function _lineerror($data, $lineno, $colno, $msg) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$data;
  $2=$lineno;
  $3=$colno;
  $4=$msg;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=HEAP32[((_stderr)>>2)];
  var $9=$4;
  var $10=_fprintf($8, ((STRING_TABLE.__str20)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$9,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _print_answers($a) {
  ;
  var __label__;

  var $1;
  var $rc;
  $1=$a;
  var $2=$1;
  var $3=_print_answers_as_tab_separated_values($2);
  var $4=$1;
  var $5=_print_answers_as_datalog($4);
  var $6=$5 << 16;
  var $7=$3 | $6;
  $rc=$7;
  var $8=$1;
  _dl_free($8);
  var $9=$rc;
  ;
  return $9;
}


function _print_answers_as_tab_separated_values($a) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $j;
      var $n;
      $2=$a;
      var $3=$2;
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=0;
      __label__ = 16; break;
    case 4: 
      var $7=$2;
      var $8=_dl_getpredarity($7);
      $n=$8;
      var $9=$n;
      var $10=(($9)|0)==0;
      if ($10) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $12=_printf(((STRING_TABLE.__str17)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 15; break;
    case 6: 
      $i=0;
      __label__ = 7; break;
    case 7: 
      var $15=$2;
      var $16=$i;
      var $17=_dl_getconst($15, $16, 0);
      var $18=(($17)|0)!=0;
      if ($18) { __label__ = 8; break; } else { __label__ = 14; break; }
    case 8: 
      var $20=_printf(((STRING_TABLE.__str18)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $21=HEAP32[((_stdout)>>2)];
      var $22=$2;
      var $23=$i;
      var $24=_dl_getconst($22, $23, 0);
      var $25=$2;
      var $26=$i;
      var $27=_dl_getconstlen($25, $26, 0);
      _dl_putlconst($21, $24, $27);
      $j=1;
      __label__ = 9; break;
    case 9: 
      var $29=$j;
      var $30=$n;
      var $31=(($29)|0) < (($30)|0);
      if ($31) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $33=_printf(((STRING_TABLE.__str19)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $34=HEAP32[((_stdout)>>2)];
      var $35=$2;
      var $36=$i;
      var $37=$j;
      var $38=_dl_getconst($35, $36, $37);
      var $39=$2;
      var $40=$i;
      var $41=$j;
      var $42=_dl_getconstlen($39, $40, $41);
      _dl_putlconst($34, $38, $42);
      __label__ = 11; break;
    case 11: 
      var $44=$j;
      var $45=((($44)+(1))|0);
      $j=$45;
      __label__ = 9; break;
    case 12: 
      var $47=_printf(((STRING_TABLE.__str9)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 13; break;
    case 13: 
      var $49=$i;
      var $50=((($49)+(1))|0);
      $i=$50;
      __label__ = 7; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      $1=0;
      __label__ = 16; break;
    case 16: 
      var $54=$1;
      STACKTOP = __stackBase__;
      return $54;
    default: assert(0, "bad label: " + __label__);
  }
}
_print_answers_as_tab_separated_values["X"]=1;

function _print_answers_as_datalog($a) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $j;
      var $n;
      var $p;
      var $s;
      $2=$a;
      var $3=$2;
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=0;
      __label__ = 25; break;
    case 4: 
      var $7=$2;
      var $8=_dl_getpredarity($7);
      $n=$8;
      var $9=$2;
      var $10=_dl_getpred($9);
      $p=$10;
      var $11=$2;
      var $12=_dl_getpredlen($11);
      $s=$12;
      var $13=$n;
      var $14=(($13)|0)==0;
      if ($14) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $16=HEAP32[((_stdout)>>2)];
      var $17=$p;
      var $18=$s;
      _dl_putlconst($16, $17, $18);
      var $19=_printf(((STRING_TABLE.__str11)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 24; break;
    case 6: 
      var $21=$n;
      var $22=(($21)|0)==2;
      if ($22) { __label__ = 7; break; } else { __label__ = 14; break; }
    case 7: 
      var $24=$p;
      var $25=_strcmp($24, ((STRING_TABLE.__str12)|0));
      var $26=(($25)|0)!=0;
      if ($26) { __label__ = 14; break; } else { __label__ = 8; break; }
    case 8: 
      var $28=$s;
      var $29=(($28)|0)==1;
      if ($29) { __label__ = 9; break; } else { __label__ = 14; break; }
    case 9: 
      $i=0;
      __label__ = 10; break;
    case 10: 
      var $32=$2;
      var $33=$i;
      var $34=_dl_getconst($32, $33, 0);
      var $35=(($34)|0)!=0;
      if ($35) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $37=HEAP32[((_stdout)>>2)];
      var $38=$2;
      var $39=$i;
      var $40=_dl_getconst($38, $39, 0);
      var $41=$2;
      var $42=$i;
      var $43=_dl_getconstlen($41, $42, 0);
      _dl_putlconst($37, $40, $43);
      var $44=_printf(((STRING_TABLE.__str13)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $45=HEAP32[((_stdout)>>2)];
      var $46=$2;
      var $47=$i;
      var $48=_dl_getconst($46, $47, 1);
      var $49=$2;
      var $50=$i;
      var $51=_dl_getconstlen($49, $50, 1);
      _dl_putlconst($45, $48, $51);
      var $52=_printf(((STRING_TABLE.__str11)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 12; break;
    case 12: 
      var $54=$i;
      var $55=((($54)+(1))|0);
      $i=$55;
      __label__ = 10; break;
    case 13: 
      __label__ = 23; break;
    case 14: 
      $i=0;
      __label__ = 15; break;
    case 15: 
      var $59=$2;
      var $60=$i;
      var $61=_dl_getconst($59, $60, 0);
      var $62=(($61)|0)!=0;
      if ($62) { __label__ = 16; break; } else { __label__ = 22; break; }
    case 16: 
      var $64=HEAP32[((_stdout)>>2)];
      var $65=$p;
      var $66=$s;
      _dl_putlconst($64, $65, $66);
      var $67=_printf(((STRING_TABLE.__str14)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $68=HEAP32[((_stdout)>>2)];
      var $69=$2;
      var $70=$i;
      var $71=_dl_getconst($69, $70, 0);
      var $72=$2;
      var $73=$i;
      var $74=_dl_getconstlen($72, $73, 0);
      _dl_putlconst($68, $71, $74);
      $j=1;
      __label__ = 17; break;
    case 17: 
      var $76=$j;
      var $77=$n;
      var $78=(($76)|0) < (($77)|0);
      if ($78) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      var $80=_printf(((STRING_TABLE.__str15)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $81=HEAP32[((_stdout)>>2)];
      var $82=$2;
      var $83=$i;
      var $84=$j;
      var $85=_dl_getconst($82, $83, $84);
      var $86=$2;
      var $87=$i;
      var $88=$j;
      var $89=_dl_getconstlen($86, $87, $88);
      _dl_putlconst($81, $85, $89);
      __label__ = 19; break;
    case 19: 
      var $91=$j;
      var $92=((($91)+(1))|0);
      $j=$92;
      __label__ = 17; break;
    case 20: 
      var $94=_printf(((STRING_TABLE.__str16)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 21; break;
    case 21: 
      var $96=$i;
      var $97=((($96)+(1))|0);
      $i=$97;
      __label__ = 15; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      $1=0;
      __label__ = 25; break;
    case 25: 
      var $102=$1;
      STACKTOP = __stackBase__;
      return $102;
    default: assert(0, "bad label: " + __label__);
  }
}
_print_answers_as_datalog["X"]=1;

function _loaderror($data, $lineno, $colno, $msg) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $lf;
  var $filename;
  $1=$data;
  $2=$lineno;
  $3=$colno;
  $4=$msg;
  var $5=$1;
  var $6=$5;
  $lf=$6;
  var $7=$lf;
  var $8=(($7+4)|0);
  var $9=HEAP32[(($8)>>2)];
  $filename=$9;
  var $10=HEAP32[((_stderr)>>2)];
  var $11=$filename;
  var $12=$2;
  var $13=$3;
  var $14=$4;
  var $15=_fprintf($10, ((STRING_TABLE.__str26)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$11,HEAP32[(((tempInt)+(4))>>2)]=$12,HEAP32[(((tempInt)+(8))>>2)]=$13,HEAP32[(((tempInt)+(12))>>2)]=$14,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _getbuf($data, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $lf;
      var $in;
      var $n;
      $1=$data;
      $2=$size;
      var $3=$1;
      var $4=$3;
      $lf=$4;
      var $5=$lf;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      $in=$7;
      var $8=$lf;
      var $9=(($8+8)|0);
      var $10=(($9)|0);
      var $11=$in;
      var $12=_fread($10, 1, 1024, $11);
      $n=$12;
      var $13=$n;
      var $14=(($13)>>>0) < 1024;
      if ($14) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $16=$in;
      var $17=_ferror($16);
      var $18=(($17)|0)!=0;
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $20=$lf;
      var $21=(($20+4)|0);
      var $22=HEAP32[(($21)>>2)];
      _perror($22);
      _exit(1);
      throw "Reached an unreachable!"
    case 5: 
      var $24=$n;
      var $25=$2;
      HEAP32[(($25)>>2)]=$24;
      var $26=$n;
      var $27=(($26)>>>0) > 0;
      if ($27) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $29=$lf;
      var $30=(($29+8)|0);
      var $31=(($30)|0);
      var $34 = $31;__label__ = 8; break;
    case 7: 
      var $34 = 0;__label__ = 8; break;
    case 8: 
      var $34;
      ;
      return $34;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_getpred($a) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$a;
      var $3=$2;
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      $1=$10;
      __label__ = 5; break;
    case 4: 
      $1=0;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_getpredlen($a) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$a;
      var $3=$2;
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8+4)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$2;
      var $12=(($11+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$10;
      var $17=$15;
      var $18=((($16)-($17))|0);
      var $19=((($18)-(1))|0);
      $1=$19;
      __label__ = 5; break;
    case 4: 
      $1=0;
      __label__ = 5; break;
    case 5: 
      var $22=$1;
      ;
      return $22;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_getpredarity($a) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$a;
      var $3=$2;
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $6=$2;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      $1=$8;
      __label__ = 5; break;
    case 4: 
      $1=0;
      __label__ = 5; break;
    case 5: 
      var $11=$1;
      ;
      return $11;
    default: assert(0, "bad label: " + __label__);
  }
}


function _leave($rc, $in) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$rc;
      $2=$in;
      var $3=$2;
      var $4=HEAP32[((_stdin)>>2)];
      var $5=(($3)|0)!=(($4)|0);
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $7=$2;
      var $8=_fclose($7);
      __label__ = 4; break;
    case 4: 
      var $10=$1;
      ;
      return $10;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_open() {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $L;
      var $lib;
      var $2=_luaL_newstate();
      $L=$2;
      $lib=((_lualibs)|0);
      __label__ = 3; break;
    case 3: 
      var $4=$lib;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $9=$L;
      var $10=$lib;
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      _lua_pushcclosure($9, $12, 0);
      var $13=$L;
      var $14=$lib;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      _lua_pushstring($13, $16);
      var $17=$L;
      _lua_call($17, 1, 0);
      __label__ = 5; break;
    case 5: 
      var $19=$lib;
      var $20=(($19+8)|0);
      $lib=$20;
      __label__ = 3; break;
    case 6: 
      var $22=$L;
      var $23=_dl_lua($22);
      var $24=(($23)|0)!=0;
      if ($24) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $1=0;
      __label__ = 9; break;
    case 8: 
      var $27=$L;
      $1=$27;
      __label__ = 9; break;
    case 9: 
      var $29=$1;
      ;
      return $29;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_lua($L) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $s;
      $2=$L;
      var $3=$2;
      var $4=_luaL_loadbuffer($3, ((STRING_TABLE._datalog_lua_bytes)|0), 22223, ((STRING_TABLE._datalog_lua_source)|0));
      $i=$4;
      var $5=$i;
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $8=$2;
      var $9=_lua_tolstring($8, -1, 0);
      $s=$9;
      var $10=$s;
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $13=HEAP32[((_stderr)>>2)];
      var $14=$s;
      var $15=_fprintf($13, ((STRING_TABLE.__str1643)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$14,tempInt));
      __label__ = 6; break;
    case 5: 
      var $17=HEAP32[((_stderr)>>2)];
      var $18=_fprintf($17, ((STRING_TABLE.__str1744)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 6; break;
    case 6: 
      var $20=$2;
      _lua_settop($20, -2);
      var $21=$i;
      $1=$21;
      __label__ = 8; break;
    case 7: 
      var $23=$2;
      var $24=_dl_pcall($23, 0, 0);
      $1=$24;
      __label__ = 8; break;
    case 8: 
      var $26=$1;
      STACKTOP = __stackBase__;
      return $26;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_close($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  _lua_close($2);
  ;
  return;
}


function _dl_pushlstring($L, $s, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$L;
      $3=$s;
      $4=$n;
      var $5=$2;
      var $6=_lua_checkstack($5, 1);
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=1;
      __label__ = 5; break;
    case 4: 
      var $10=$2;
      var $11=$3;
      var $12=$4;
      _lua_pushlstring($10, $11, $12);
      $1=0;
      __label__ = 5; break;
    case 5: 
      var $14=$1;
      ;
      return $14;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_pushstring($L, $s) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$L;
      $3=$s;
      var $4=$2;
      var $5=_lua_checkstack($4, 1);
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=1;
      __label__ = 5; break;
    case 4: 
      var $9=$2;
      var $10=$3;
      _lua_pushstring($9, $10);
      $1=0;
      __label__ = 5; break;
    case 5: 
      var $12=$1;
      ;
      return $12;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_concat($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  _lua_concat($2, 2);
  ;
  return 0;
}


function _dl_pushliteral($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2;
      var $4=_lua_checkstack($3, 1);
      var $5=(($4)|0)!=0;
      if ($5) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=1;
      __label__ = 5; break;
    case 4: 
      var $8=$2;
      _lua_getfield($8, -10002, ((STRING_TABLE.__str128)|0));
      var $9=$2;
      var $10=_dl_pcall($9, 0, 1);
      $1=$10;
      __label__ = 5; break;
    case 5: 
      var $12=$1;
      ;
      return $12;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_pcall($L, $nargs, $nresults) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $s;
      $1=$L;
      $2=$nargs;
      $3=$nresults;
      var $4=$1;
      var $5=$2;
      var $6=$3;
      var $7=_lua_pcall($4, $5, $6, 0);
      $i=$7;
      var $8=$i;
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $11=$1;
      var $12=_lua_tolstring($11, -1, 0);
      $s=$12;
      var $13=$s;
      var $14=(($13)|0)!=0;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $16=HEAP32[((_stderr)>>2)];
      var $17=$s;
      var $18=_fprintf($16, ((STRING_TABLE.__str1643)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$17,tempInt));
      __label__ = 6; break;
    case 5: 
      var $20=HEAP32[((_stderr)>>2)];
      var $21=_fprintf($20, ((STRING_TABLE.__str1744)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 6; break;
    case 6: 
      var $23=$1;
      _lua_settop($23, -2);
      __label__ = 7; break;
    case 7: 
      var $25=$i;
      STACKTOP = __stackBase__;
      return $25;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_addpred($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2;
      var $4=_lua_checkstack($3, 1);
      var $5=(($4)|0)!=0;
      if ($5) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=1;
      __label__ = 5; break;
    case 4: 
      var $8=$2;
      _lua_getfield($8, -10002, ((STRING_TABLE.__str229)|0));
      var $9=$2;
      _lua_insert($9, -3);
      var $10=$2;
      var $11=_dl_pcall($10, 2, 1);
      $1=$11;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_addvar($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2;
      var $4=_lua_checkstack($3, 1);
      var $5=(($4)|0)!=0;
      if ($5) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=1;
      __label__ = 5; break;
    case 4: 
      var $8=$2;
      _lua_getfield($8, -10002, ((STRING_TABLE.__str330)|0));
      var $9=$2;
      _lua_insert($9, -3);
      var $10=$2;
      var $11=_dl_pcall($10, 2, 1);
      $1=$11;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_addconst($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2;
      var $4=_lua_checkstack($3, 1);
      var $5=(($4)|0)!=0;
      if ($5) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=1;
      __label__ = 5; break;
    case 4: 
      var $8=$2;
      _lua_getfield($8, -10002, ((STRING_TABLE.__str431)|0));
      var $9=$2;
      _lua_insert($9, -3);
      var $10=$2;
      var $11=_dl_pcall($10, 2, 1);
      $1=$11;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_makeliteral($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2;
      var $4=_lua_checkstack($3, 1);
      var $5=(($4)|0)!=0;
      if ($5) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=1;
      __label__ = 5; break;
    case 4: 
      var $8=$2;
      _lua_getfield($8, -10002, ((STRING_TABLE.__str532)|0));
      var $9=$2;
      _lua_insert($9, -2);
      var $10=$2;
      var $11=_dl_pcall($10, 1, 1);
      $1=$11;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_pushhead($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2;
      var $4=_lua_checkstack($3, 1);
      var $5=(($4)|0)!=0;
      if ($5) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=1;
      __label__ = 5; break;
    case 4: 
      var $8=$2;
      _lua_getfield($8, -10002, ((STRING_TABLE.__str633)|0));
      var $9=$2;
      _lua_insert($9, -2);
      var $10=$2;
      var $11=_dl_pcall($10, 1, 1);
      $1=$11;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_addliteral($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2;
      var $4=_lua_checkstack($3, 1);
      var $5=(($4)|0)!=0;
      if ($5) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=1;
      __label__ = 5; break;
    case 4: 
      var $8=$2;
      _lua_getfield($8, -10002, ((STRING_TABLE.__str734)|0));
      var $9=$2;
      _lua_insert($9, -3);
      var $10=$2;
      var $11=_dl_pcall($10, 2, 1);
      $1=$11;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_makeclause($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2;
      var $4=_lua_checkstack($3, 1);
      var $5=(($4)|0)!=0;
      if ($5) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=1;
      __label__ = 5; break;
    case 4: 
      var $8=$2;
      _lua_getfield($8, -10002, ((STRING_TABLE.__str835)|0));
      var $9=$2;
      _lua_insert($9, -2);
      var $10=$2;
      var $11=_dl_pcall($10, 1, 1);
      $1=$11;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_assert($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      $2=$L;
      var $3=$2;
      var $4=_lua_checkstack($3, 1);
      var $5=(($4)|0)!=0;
      if ($5) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=1;
      __label__ = 7; break;
    case 4: 
      var $8=$2;
      _lua_getfield($8, -10002, ((STRING_TABLE.__str936)|0));
      var $9=$2;
      _lua_insert($9, -2);
      var $10=$2;
      var $11=_dl_pcall($10, 1, 1);
      $i=$11;
      var $12=$i;
      var $13=(($12)|0)!=0;
      if ($13) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $15=$i;
      $1=$15;
      __label__ = 7; break;
    case 6: 
      var $17=$2;
      var $18=_lua_type($17, -1);
      var $19=(($18)|0)==0;
      var $20=(($19)&1);
      $i=$20;
      var $21=$2;
      _lua_settop($21, -2);
      var $22=$i;
      var $23=(((-$22))|0);
      $1=$23;
      __label__ = 7; break;
    case 7: 
      var $25=$1;
      ;
      return $25;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_retract($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2;
      var $4=_lua_checkstack($3, 1);
      var $5=(($4)|0)!=0;
      if ($5) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=1;
      __label__ = 5; break;
    case 4: 
      var $8=$2;
      _lua_getfield($8, -10002, ((STRING_TABLE.__str1037)|0));
      var $9=$2;
      _lua_insert($9, -2);
      var $10=$2;
      var $11=_dl_pcall($10, 1, 0);
      $1=$11;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_free($a) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$a;
      var $2=$1;
      var $3=(($2)|0)!=0;
      if ($3) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      _free($9);
      var $10=$1;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      _free($13);
      var $14=$1;
      var $15=$14;
      _free($15);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_ask($L, $a) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $j;
      var $n;
      var $arity;
      var $size;
      var $len=__stackBase__;
      var $s;
      var $ls;
      var $p;
      var $b;
      $2=$L;
      $3=$a;
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      var $5=$2;
      var $6=_lua_checkstack($5, 1);
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=1;
      __label__ = 39; break;
    case 4: 
      var $10=$2;
      _lua_getfield($10, -10002, ((STRING_TABLE.__str1138)|0));
      var $11=$2;
      _lua_insert($11, -2);
      var $12=$2;
      var $13=_dl_pcall($12, 1, 1);
      $i=$13;
      var $14=$i;
      var $15=(($14)|0)!=0;
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $17=$i;
      $1=$17;
      __label__ = 39; break;
    case 6: 
      var $19=$2;
      var $20=_lua_type($19, -1);
      var $21=(($20)|0)==5;
      if ($21) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $23=$2;
      var $24=_lua_type($23, -1);
      var $25=(($24)|0)==0;
      var $26=$25 ^ 1;
      var $27=(($26)&1);
      $i=$27;
      var $28=$2;
      _lua_settop($28, -2);
      var $29=$i;
      $1=$29;
      __label__ = 39; break;
    case 8: 
      var $31=$2;
      _lua_pushstring($31, ((STRING_TABLE.__str1239)|0));
      var $32=$2;
      _lua_rawget($32, -2);
      var $33=$2;
      var $34=_lua_isnumber($33, -1);
      var $35=(($34)|0)!=0;
      if ($35) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $37=$2;
      _lua_settop($37, -3);
      $1=1;
      __label__ = 39; break;
    case 10: 
      var $39=$2;
      var $40=_lua_tointeger($39, -1);
      $n=$40;
      var $41=$2;
      _lua_settop($41, -2);
      var $42=$n;
      var $43=(($42)|0)==0;
      if ($43) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      $1=0;
      __label__ = 39; break;
    case 12: 
      var $46=$2;
      _lua_pushstring($46, ((STRING_TABLE.__str1340)|0));
      var $47=$2;
      _lua_rawget($47, -2);
      var $48=$2;
      var $49=_lua_isnumber($48, -1);
      var $50=(($49)|0)!=0;
      if ($50) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      var $52=$2;
      _lua_settop($52, -3);
      $1=1;
      __label__ = 39; break;
    case 14: 
      var $54=$2;
      var $55=_lua_tointeger($54, -1);
      $arity=$55;
      var $56=$2;
      _lua_settop($56, -2);
      var $57=$2;
      _lua_pushstring($57, ((STRING_TABLE.__str1441)|0));
      var $58=$2;
      _lua_rawget($58, -2);
      var $59=$2;
      var $60=_lua_isnumber($59, -1);
      var $61=(($60)|0)!=0;
      if ($61) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $63=$2;
      _lua_settop($63, -3);
      $1=1;
      __label__ = 39; break;
    case 16: 
      var $65=$2;
      var $66=_lua_tointeger($65, -1);
      $size=$66;
      var $67=$2;
      _lua_settop($67, -2);
      var $68=$n;
      var $69=(($68)|0) < 0;
      if ($69) { __label__ = 19; break; } else { __label__ = 17; break; }
    case 17: 
      var $71=$arity;
      var $72=(($71)|0) < 0;
      if ($72) { __label__ = 19; break; } else { __label__ = 18; break; }
    case 18: 
      var $74=$size;
      var $75=(($74)|0) < 0;
      if ($75) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      $1=1;
      __label__ = 39; break;
    case 20: 
      var $78=$size;
      var $79=_malloc($78);
      $s=$79;
      var $80=$n;
      var $81=$arity;
      var $82=((($80)*($81))|0);
      var $83=((($82)+(2))|0);
      var $84=((($83<<2))|0);
      var $85=_malloc($84);
      var $86=$85;
      $p=$86;
      var $87=$n;
      var $88=((($87<<2))|0);
      var $89=((($88)+(12))|0);
      var $90=_malloc($89);
      var $91=$90;
      $b=$91;
      var $92=$s;
      var $93=(($92)|0)!=0;
      if ($93) { __label__ = 21; break; } else { __label__ = 23; break; }
    case 21: 
      var $95=$p;
      var $96=(($95)|0)!=0;
      if ($96) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $98=$b;
      var $99=(($98)|0)!=0;
      if ($99) { __label__ = 24; break; } else { __label__ = 23; break; }
    case 23: 
      $1=1;
      __label__ = 39; break;
    case 24: 
      var $102=$arity;
      var $103=$b;
      var $104=(($103)|0);
      HEAP32[(($104)>>2)]=$102;
      var $105=$n;
      var $106=$b;
      var $107=(($106+4)|0);
      HEAP32[(($107)>>2)]=$105;
      var $108=$s;
      var $109=$p;
      var $110=(($109)|0);
      HEAP32[(($110)>>2)]=$108;
      var $111=$p;
      var $112=$b;
      var $113=(($112+8)|0);
      HEAP32[(($113)>>2)]=$111;
      var $114=$2;
      _lua_pushstring($114, ((STRING_TABLE.__str1542)|0));
      var $115=$2;
      _lua_rawget($115, -2);
      var $116=$2;
      var $117=_lua_isstring($116, -1);
      var $118=(($117)|0)!=0;
      if ($118) { __label__ = 26; break; } else { __label__ = 25; break; }
    case 25: 
      var $120=$2;
      _lua_settop($120, -3);
      var $121=$b;
      _dl_free($121);
      $1=1;
      __label__ = 39; break;
    case 26: 
      var $123=$2;
      var $124=_lua_tolstring($123, -1, $len);
      $ls=$124;
      var $125=HEAP32[(($len)>>2)];
      var $126=((($125)+(1))|0);
      HEAP32[(($len)>>2)]=$126;
      var $127=$s;
      var $128=$ls;
      var $129=HEAP32[(($len)>>2)];
      assert($129 % 1 === 0, 'memcpy given ' + $129 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($127, $128, $129, 1);
      var $130=HEAP32[(($len)>>2)];
      var $131=$s;
      var $132=(($131+$130)|0);
      $s=$132;
      var $133=$s;
      var $134=$p;
      var $135=(($134+4)|0);
      $p=$135;
      HEAP32[(($135)>>2)]=$133;
      var $136=$2;
      _lua_settop($136, -2);
      $i=0;
      __label__ = 27; break;
    case 27: 
      var $138=$i;
      var $139=$n;
      var $140=(($138)|0) < (($139)|0);
      if ($140) { __label__ = 28; break; } else { __label__ = 38; break; }
    case 28: 
      var $142=$p;
      var $143=$i;
      var $144=$b;
      var $145=(($144+12)|0);
      var $146=(($145+($143<<2))|0);
      tempBigInt=$142;HEAP8[($146)]=tempBigInt&0xff;tempBigInt>>=8;HEAP8[(($146)+(1))]=tempBigInt&0xff;tempBigInt>>=8;HEAP8[(($146)+(2))]=tempBigInt&0xff;tempBigInt>>=8;HEAP8[(($146)+(3))]=tempBigInt&0xff;
      var $147=$2;
      var $148=$i;
      var $149=((($148)+(1))|0);
      _lua_rawgeti($147, -1, $149);
      var $150=$2;
      var $151=_lua_type($150, -1);
      var $152=(($151)|0)==5;
      if ($152) { __label__ = 30; break; } else { __label__ = 29; break; }
    case 29: 
      var $154=$2;
      _lua_settop($154, -3);
      var $155=$b;
      _dl_free($155);
      $1=1;
      __label__ = 39; break;
    case 30: 
      $j=1;
      __label__ = 31; break;
    case 31: 
      var $158=$j;
      var $159=$arity;
      var $160=(($158)|0) <= (($159)|0);
      if ($160) { __label__ = 32; break; } else { __label__ = 36; break; }
    case 32: 
      var $162=$2;
      var $163=$j;
      _lua_rawgeti($162, -1, $163);
      var $164=$2;
      var $165=_lua_isstring($164, -1);
      var $166=(($165)|0)!=0;
      if ($166) { __label__ = 34; break; } else { __label__ = 33; break; }
    case 33: 
      var $168=$2;
      _lua_settop($168, -4);
      var $169=$b;
      _dl_free($169);
      $1=1;
      __label__ = 39; break;
    case 34: 
      var $171=$2;
      var $172=_lua_tolstring($171, -1, $len);
      $ls=$172;
      var $173=HEAP32[(($len)>>2)];
      var $174=((($173)+(1))|0);
      HEAP32[(($len)>>2)]=$174;
      var $175=$s;
      var $176=$ls;
      var $177=HEAP32[(($len)>>2)];
      assert($177 % 1 === 0, 'memcpy given ' + $177 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($175, $176, $177, 1);
      var $178=HEAP32[(($len)>>2)];
      var $179=$s;
      var $180=(($179+$178)|0);
      $s=$180;
      var $181=$s;
      var $182=$p;
      var $183=(($182+4)|0);
      $p=$183;
      HEAP32[(($183)>>2)]=$181;
      var $184=$2;
      _lua_settop($184, -2);
      __label__ = 35; break;
    case 35: 
      var $186=$j;
      var $187=((($186)+(1))|0);
      $j=$187;
      __label__ = 31; break;
    case 36: 
      var $189=$2;
      _lua_settop($189, -2);
      __label__ = 37; break;
    case 37: 
      var $191=$i;
      var $192=((($191)+(1))|0);
      $i=$192;
      __label__ = 27; break;
    case 38: 
      var $194=$2;
      _lua_settop($194, -2);
      var $195=$b;
      var $196=$3;
      HEAP32[(($196)>>2)]=$195;
      $1=0;
      __label__ = 39; break;
    case 39: 
      var $198=$1;
      STACKTOP = __stackBase__;
      return $198;
    default: assert(0, "bad label: " + __label__);
  }
}
_dl_ask["X"]=1;

function _dl_getconst($a, $i, $j) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$a;
      $3=$i;
      $4=$j;
      var $5=$2;
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $8=$3;
      var $9=(($8)|0) < 0;
      if ($9) { __label__ = 7; break; } else { __label__ = 4; break; }
    case 4: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+4)|0);
      var $14=HEAPU32[(($13)>>2)];
      var $15=(($11)>>>0) >= (($14)>>>0);
      if ($15) { __label__ = 7; break; } else { __label__ = 5; break; }
    case 5: 
      var $17=$4;
      var $18=(($17)|0) < 0;
      if ($18) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $20=$4;
      var $21=$2;
      var $22=(($21)|0);
      var $23=HEAPU32[(($22)>>2)];
      var $24=(($20)>>>0) >= (($23)>>>0);
      if ($24) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $1=0;
      __label__ = 9; break;
    case 8: 
      var $27=$4;
      var $28=$3;
      var $29=$2;
      var $30=(($29+12)|0);
      var $31=(($30+($28<<2))|0);
      var $32=((((HEAPU8[($31)])|(HEAPU8[(($31)+(1))]<<8)|(HEAPU8[(($31)+(2))]<<16)|(HEAPU8[(($31)+(3))]<<24))|0));
      var $33=(($32+($27<<2))|0);
      var $34=HEAP32[(($33)>>2)];
      $1=$34;
      __label__ = 9; break;
    case 9: 
      var $36=$1;
      ;
      return $36;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_getconstlen($a, $i, $j) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$a;
      $3=$i;
      $4=$j;
      var $5=$2;
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $8=$3;
      var $9=(($8)|0) < 0;
      if ($9) { __label__ = 7; break; } else { __label__ = 4; break; }
    case 4: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+4)|0);
      var $14=HEAPU32[(($13)>>2)];
      var $15=(($11)>>>0) >= (($14)>>>0);
      if ($15) { __label__ = 7; break; } else { __label__ = 5; break; }
    case 5: 
      var $17=$4;
      var $18=(($17)|0) < 0;
      if ($18) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $20=$4;
      var $21=$2;
      var $22=(($21)|0);
      var $23=HEAPU32[(($22)>>2)];
      var $24=(($20)>>>0) >= (($23)>>>0);
      if ($24) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $1=0;
      __label__ = 9; break;
    case 8: 
      var $27=$4;
      var $28=((($27)+(1))|0);
      var $29=$3;
      var $30=$2;
      var $31=(($30+12)|0);
      var $32=(($31+($29<<2))|0);
      var $33=((((HEAPU8[($32)])|(HEAPU8[(($32)+(1))]<<8)|(HEAPU8[(($32)+(2))]<<16)|(HEAPU8[(($32)+(3))]<<24))|0));
      var $34=(($33+($28<<2))|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$4;
      var $37=$3;
      var $38=$2;
      var $39=(($38+12)|0);
      var $40=(($39+($37<<2))|0);
      var $41=((((HEAPU8[($40)])|(HEAPU8[(($40)+(1))]<<8)|(HEAPU8[(($40)+(2))]<<16)|(HEAPU8[(($40)+(3))]<<24))|0));
      var $42=(($41+($36<<2))|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$35;
      var $45=$43;
      var $46=((($44)-($45))|0);
      var $47=((($46)-(1))|0);
      $1=$47;
      __label__ = 9; break;
    case 9: 
      var $49=$1;
      ;
      return $49;
    default: assert(0, "bad label: " + __label__);
  }
}
_dl_getconstlen["X"]=1;

function _dl_mark($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  var $3=_lua_gettop($2);
  ;
  return $3;
}


function _dl_reset($L, $m) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L;
  $2=$m;
  var $3=$1;
  var $4=$2;
  _lua_settop($3, $4);
  ;
  return 0;
}


function _dl_load($db, $r, $le, $d) {
  var __stackBase__  = STACKTOP; STACKTOP += 84; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  var setjmpTable = {"2": function(value) { __label__ = 12; $10 = value },dummy: 0};
  while(1) try { switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $l=__stackBase__;
      var $mark;
      var $status;
      $2=$db;
      $3=$r;
      $4=$le;
      $5=$d;
      var $6=$2;
      var $7=_dl_mark($6);
      $mark=$7;
      var $8=(($l+44)|0);
      var $9=(($8)|0);
      var $10=(HEAP32[(($9)>>2)]=__label__, 0);
      __label__ = 12; break;
    case 12: 
      $status=$10;
      var $11=$status;
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $14=$2;
      var $15=$mark;
      var $16=_dl_reset($14, $15);
      var $17=$status;
      $1=$17;
      __label__ = 11; break;
    case 4: 
      var $19=$2;
      var $20=(($19)|0)!=0;
      if ($20) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      _err($l, ((STRING_TABLE.__str66)|0));
      __label__ = 6; break;
    case 6: 
      var $23=$2;
      var $24=(($l)|0);
      HEAP32[(($24)>>2)]=$23;
      var $25=$3;
      var $26=(($25)|0)!=0;
      if ($26) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      _err($l, ((STRING_TABLE.__str167)|0));
      __label__ = 8; break;
    case 8: 
      var $29=$3;
      var $30=(($l+16)|0);
      HEAP32[(($30)>>2)]=$29;
      var $31=$4;
      var $32=(($31)|0)!=0;
      if ($32) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      _err($l, ((STRING_TABLE.__str268)|0));
      __label__ = 10; break;
    case 10: 
      var $35=$4;
      var $36=(($l+20)|0);
      HEAP32[(($36)>>2)]=$35;
      var $37=$5;
      var $38=(($l+12)|0);
      HEAP32[(($38)>>2)]=$37;
      _initscan($l);
      _program($l);
      $1=0;
      __label__ = 11; break;
    case 11: 
      var $40=$1;
      STACKTOP = __stackBase__;
      return $40;
    default: assert(0, "bad label: " + __label__);
  } } catch(e) { if (!e.longjmp) throw(e); setjmpTable[e.label](e.value) }
}
_dl_load["X"]=1;

function _initscan($l) {
  ;
  var __label__;

  var $1;
  $1=$l;
  var $2=$1;
  var $3=(($2+24)|0);
  HEAP32[(($3)>>2)]=0;
  var $4=$1;
  var $5=(($4+32)|0);
  HEAP32[(($5)>>2)]=0;
  var $6=$1;
  var $7=(($6+36)|0);
  HEAP32[(($7)>>2)]=0;
  var $8=$1;
  var $9=(($8+40)|0);
  HEAP32[(($9)>>2)]=1;
  var $10=$1;
  _getbuf91($10);
  ;
  return;
}


function _program($l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $i;
      var $token;
      $1=$l;
      __label__ = 3; break;
    case 3: 
      var $3=$1;
      var $4=$1;
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=_dl_pushliteral($6);
      _chk_file_line($3, $7, ((STRING_TABLE.__str470)|0), 678);
      var $8=$1;
      var $9=_scan($8);
      $token=$9;
      var $10=$token;
      var $11=(($10)|0)==10;
      if ($11) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $13=$1;
      _falsehood($13);
      __label__ = 16; break;
    case 5: 
      var $15=$1;
      var $16=$token;
      var $17=_literal($15, $16);
      $token=$17;
      var $18=$token;
      if ((($18)|0) == 7) {
        __label__ = 6; break;
      }
      else if ((($18)|0) == 8) {
        __label__ = 9; break;
      }
      else if ((($18)|0) == 9) {
        __label__ = 10; break;
      }
      else if ((($18)|0) == 6) {
        __label__ = 13; break;
      }
      else {
      __label__ = 14; break;
      }
      
    case 6: 
      var $20=$1;
      var $21=$1;
      var $22=(($21)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=_dl_pushhead($23);
      _chk_file_line($20, $24, ((STRING_TABLE.__str470)|0), 687);
      var $25=$1;
      var $26=$1;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=_dl_makeclause($28);
      _chk_file_line($25, $29, ((STRING_TABLE.__str470)|0), 688);
      var $30=$1;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=_dl_assert($32);
      $i=$33;
      var $34=$i;
      var $35=(($34)|0)==-1;
      if ($35) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $37=$1;
      _err($37, ((STRING_TABLE.__str571)|0));
      __label__ = 8; break;
    case 8: 
      var $39=$1;
      var $40=$i;
      _chk_file_line($39, $40, ((STRING_TABLE.__str470)|0), 692);
      __label__ = 15; break;
    case 9: 
      var $42=$1;
      var $43=$1;
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=_dl_pushhead($45);
      _chk_file_line($42, $46, ((STRING_TABLE.__str470)|0), 695);
      var $47=$1;
      var $48=$1;
      var $49=(($48)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=_dl_makeclause($50);
      _chk_file_line($47, $51, ((STRING_TABLE.__str470)|0), 696);
      var $52=$1;
      var $53=$1;
      var $54=(($53)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=_dl_retract($55);
      _chk_file_line($52, $56, ((STRING_TABLE.__str470)|0), 697);
      __label__ = 15; break;
    case 10: 
      var $58=$1;
      var $59=_scan($58);
      $token=$59;
      var $60=$token;
      var $61=(($60)|0)!=10;
      if ($61) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $63=$1;
      _err($63, ((STRING_TABLE.__str672)|0));
      __label__ = 12; break;
    case 12: 
      __label__ = 16; break;
    case 13: 
      var $66=$1;
      _rule($66);
      __label__ = 15; break;
    case 14: 
      var $68=$1;
      _err($68, ((STRING_TABLE.__str773)|0));
      __label__ = 15; break;
    case 15: 
      __label__ = 3; break;
    case 16: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_program["X"]=1;

function _islidentifier($s, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $t;
      $2=$s;
      $3=$n;
      var $4=$2;
      var $5=$3;
      var $6=(($4+$5)|0);
      $t=$6;
      var $7=$2;
      var $8=(($7+1)|0);
      $2=$8;
      var $9=HEAP8[($7)];
      var $10=(($9 << 24) >> 24);
      var $11=_isidstart($10);
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=0;
      __label__ = 10; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $16=$2;
      var $17=$t;
      var $18=(($16)>>>0) < (($17)>>>0);
      if ($18) { __label__ = 6; break; } else { __label__ = 9; break; }
    case 6: 
      var $20=$2;
      var $21=(($20+1)|0);
      $2=$21;
      var $22=HEAP8[($20)];
      var $23=(($22 << 24) >> 24);
      var $24=_isidpart($23);
      var $25=(($24)|0)!=0;
      if ($25) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      $1=0;
      __label__ = 10; break;
    case 8: 
      __label__ = 5; break;
    case 9: 
      $1=1;
      __label__ = 10; break;
    case 10: 
      var $30=$1;
      ;
      return $30;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_putlconst($out, $s, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $t;
      $1=$out;
      $2=$s;
      $3=$n;
      var $4=$2;
      var $5=$3;
      var $6=(($4+$5)|0);
      $t=$6;
      var $7=$2;
      var $8=$3;
      var $9=_islidentifier($7, $8);
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$t;
      var $15=(($13)>>>0) < (($14)>>>0);
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $17=$2;
      var $18=(($17+1)|0);
      $2=$18;
      var $19=HEAP8[($17)];
      var $20=(($19 << 24) >> 24);
      var $21=$1;
      var $22=_putc($20, $21);
      __label__ = 4; break;
    case 6: 
      __label__ = 11; break;
    case 7: 
      var $25=$1;
      var $26=_putc(34, $25);
      __label__ = 8; break;
    case 8: 
      var $28=$2;
      var $29=$t;
      var $30=(($28)>>>0) < (($29)>>>0);
      if ($30) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $32=$2;
      var $33=(($32+1)|0);
      $2=$33;
      var $34=HEAP8[($32)];
      var $35=(($34 << 24) >> 24);
      var $36=$1;
      _dl_putc($35, $36);
      __label__ = 8; break;
    case 10: 
      var $38=$1;
      var $39=_putc(34, $38);
      __label__ = 11; break;
    case 11: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _dl_putc($c, $out) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$c;
      $2=$out;
      var $3=$1;
      if ((($3)|0) == 7) {
        __label__ = 3; break;
      }
      else if ((($3)|0) == 8) {
        __label__ = 4; break;
      }
      else if ((($3)|0) == 12) {
        __label__ = 5; break;
      }
      else if ((($3)|0) == 10) {
        __label__ = 6; break;
      }
      else if ((($3)|0) == 13) {
        __label__ = 7; break;
      }
      else if ((($3)|0) == 9) {
        __label__ = 8; break;
      }
      else if ((($3)|0) == 11) {
        __label__ = 9; break;
      }
      else if ((($3)|0) == 92) {
        __label__ = 10; break;
      }
      else if ((($3)|0) == 34) {
        __label__ = 11; break;
      }
      else {
      __label__ = 12; break;
      }
      
    case 3: 
      $1=97;
      __label__ = 16; break;
    case 4: 
      $1=98;
      __label__ = 16; break;
    case 5: 
      $1=102;
      __label__ = 16; break;
    case 6: 
      $1=110;
      __label__ = 16; break;
    case 7: 
      $1=114;
      __label__ = 16; break;
    case 8: 
      $1=116;
      __label__ = 16; break;
    case 9: 
      $1=118;
      __label__ = 16; break;
    case 10: 
      $1=92;
      __label__ = 16; break;
    case 11: 
      $1=34;
      __label__ = 16; break;
    case 12: 
      var $14=$1;
      var $15=_isprint($14);
      var $16=(($15)|0)!=0;
      if ($16) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $18=$1;
      var $19=$2;
      var $20=_putc($18, $19);
      __label__ = 15; break;
    case 14: 
      var $22=$2;
      var $23=$1;
      var $24=(($23) & 255);
      var $25=(($24)&255);
      var $26=_fprintf($22, ((STRING_TABLE.__str369)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$25,tempInt));
      __label__ = 15; break;
    case 15: 
      __label__ = 17; break;
    case 16: 
      var $29=$2;
      var $30=_putc(92, $29);
      var $31=$1;
      var $32=$2;
      var $33=_putc($31, $32);
      __label__ = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _isidstart($ch) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$ch;
      var $2=$1;
      var $3=_isidpart($2);
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 3; break; } else { var $11 = 0;__label__ = 4; break; }
    case 3: 
      var $6=$1;
      var $7=_isvarstart($6);
      var $8=(($7)|0)!=0;
      var $9=$8 ^ 1;
      var $11 = $9;__label__ = 4; break;
    case 4: 
      var $11;
      var $12=(($11)&1);
      ;
      return $12;
    default: assert(0, "bad label: " + __label__);
  }
}


function _isidpart($ch) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$ch;
      var $3=$2;
      if ((($3)|0) == 40 || (($3)|0) == 41 || (($3)|0) == 61 || (($3)|0) == 44 || (($3)|0) == 46 || (($3)|0) == 126 || (($3)|0) == 63 || (($3)|0) == 58 || (($3)|0) == 34 || (($3)|0) == 37) {
        __label__ = 3; break;
      }
      else {
      __label__ = 4; break;
      }
      
    case 3: 
      $1=0;
      __label__ = 5; break;
    case 4: 
      var $6=$2;
      var $7=_isgraph($6);
      $1=$7;
      __label__ = 5; break;
    case 5: 
      var $9=$1;
      ;
      return $9;
    default: assert(0, "bad label: " + __label__);
  }
}


function _isvarstart($ch) {
  ;
  var __label__;

  var $1;
  $1=$ch;
  var $2=$1;
  var $3=_isupper($2);
  ;
  return $3;
}


function _chk_file_line($l, $i, $file, $line) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$l;
      $2=$i;
      $3=$file;
      $4=$line;
      var $5=$3;
      var $6=$4;
      var $7=$2;
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$1;
      _err($10, ((STRING_TABLE.__str2086)|0));
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _scan($l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $ch;
      $2=$l;
      __label__ = 3; break;
    case 3: 
      __label__ = 4; break;
    case 4: 
      var $5=$2;
      var $6=_getch($5);
      $ch=$6;
      var $7=$ch;
      var $8=(($7)|0)==-1;
      if ($8) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=10;
      __label__ = 33; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $12=$ch;
      var $13=_isspace($12);
      var $14=(($13)|0)!=0;
      if ($14) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 8: 
      var $16=$ch;
      var $17=(($16)|0)!=37;
      if ($17) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      __label__ = 16; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $21=$2;
      var $22=_getch($21);
      $ch=$22;
      var $23=$ch;
      var $24=(($23)|0)==-1;
      if ($24) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $1=10;
      __label__ = 33; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $28=$ch;
      var $29=(($28)|0)!=10;
      if ($29) { __label__ = 11; break; } else { __label__ = 15; break; }
    case 15: 
      __label__ = 3; break;
    case 16: 
      var $32=$ch;
      if ((($32)|0) == 40) {
        __label__ = 17; break;
      }
      else if ((($32)|0) == 41) {
        __label__ = 18; break;
      }
      else if ((($32)|0) == 61) {
        __label__ = 19; break;
      }
      else if ((($32)|0) == 44) {
        __label__ = 20; break;
      }
      else if ((($32)|0) == 46) {
        __label__ = 21; break;
      }
      else if ((($32)|0) == 126) {
        __label__ = 22; break;
      }
      else if ((($32)|0) == 63) {
        __label__ = 23; break;
      }
      else if ((($32)|0) == 58) {
        __label__ = 24; break;
      }
      else if ((($32)|0) == 34) {
        __label__ = 27; break;
      }
      else {
      __label__ = 28; break;
      }
      
    case 17: 
      $1=2;
      __label__ = 33; break;
    case 18: 
      $1=3;
      __label__ = 33; break;
    case 19: 
      $1=4;
      __label__ = 33; break;
    case 20: 
      $1=5;
      __label__ = 33; break;
    case 21: 
      $1=7;
      __label__ = 33; break;
    case 22: 
      $1=8;
      __label__ = 33; break;
    case 23: 
      $1=9;
      __label__ = 33; break;
    case 24: 
      var $41=$2;
      var $42=_getch($41);
      $ch=$42;
      var $43=$ch;
      var $44=(($43)|0)==45;
      if ($44) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      $1=6;
      __label__ = 33; break;
    case 26: 
      $1=11;
      __label__ = 33; break;
    case 27: 
      var $48=$2;
      var $49=_addstr($48);
      $1=$49;
      __label__ = 33; break;
    case 28: 
      var $51=$ch;
      var $52=_isidstart($51);
      var $53=(($52)|0)!=0;
      if ($53) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $55=$2;
      var $56=_addid($55);
      $1=$56;
      __label__ = 33; break;
    case 30: 
      var $58=$ch;
      var $59=_isvarstart($58);
      var $60=(($59)|0)!=0;
      if ($60) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $62=$2;
      var $63=_addvar($62);
      $1=$63;
      __label__ = 33; break;
    case 32: 
      $1=11;
      __label__ = 33; break;
    case 33: 
      var $66=$1;
      ;
      return $66;
    default: assert(0, "bad label: " + __label__);
  }
}
_scan["X"]=1;

function _falsehood($l) {
  ;
  var __label__;

  var $1;
  $1=$l;
  var $2=$1;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=_dl_pushstring($5, ((STRING_TABLE.__str1682)|0));
  _chk_file_line($2, $6, ((STRING_TABLE.__str470)|0), 663);
  var $7=$1;
  var $8=$1;
  var $9=(($8)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=_dl_addconst($10);
  _chk_file_line($7, $11, ((STRING_TABLE.__str470)|0), 664);
  var $12=$1;
  var $13=$1;
  var $14=(($13)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=_dl_pushstring($15, ((STRING_TABLE.__str1076)|0));
  _chk_file_line($12, $16, ((STRING_TABLE.__str470)|0), 665);
  var $17=$1;
  var $18=$1;
  var $19=(($18)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=_dl_addpred($20);
  _chk_file_line($17, $21, ((STRING_TABLE.__str470)|0), 666);
  var $22=$1;
  var $23=$1;
  var $24=(($23)|0);
  var $25=HEAP32[(($24)>>2)];
  var $26=_dl_pushstring($25, ((STRING_TABLE.__str1783)|0));
  _chk_file_line($22, $26, ((STRING_TABLE.__str470)|0), 667);
  var $27=$1;
  var $28=$1;
  var $29=(($28)|0);
  var $30=HEAP32[(($29)>>2)];
  var $31=_dl_addconst($30);
  _chk_file_line($27, $31, ((STRING_TABLE.__str470)|0), 668);
  var $32=$1;
  var $33=$1;
  var $34=(($33)|0);
  var $35=HEAP32[(($34)>>2)];
  var $36=_dl_makeliteral($35);
  _chk_file_line($32, $36, ((STRING_TABLE.__str470)|0), 669);
  ;
  return;
}


function _err($l, $msg) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$l;
  $2=$msg;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$1;
  var $7=(($6+12)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$1;
  var $10=(($9+40)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=$1;
  var $13=(($12+36)|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=$2;
  FUNCTION_TABLE[$5]($8, $11, $14, $15);
  var $16=$1;
  var $17=(($16+44)|0);
  var $18=(($17)|0);
  _longjmp($18, 1);
  throw "Reached an unreachable!"
  ;
  return;
}


function _literal($l, $token) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$l;
      $3=$token;
      var $4=$3;
      var $5=(($4)|0)==0;
      if ($5) { __label__ = 3; break; } else { __label__ = 15; break; }
    case 3: 
      var $7=$2;
      var $8=_scan($7);
      $3=$8;
      var $9=$3;
      if ((($9)|0) == 4) {
        __label__ = 4; break;
      }
      else if ((($9)|0) == 7 || (($9)|0) == 5 || (($9)|0) == 6 || (($9)|0) == 8 || (($9)|0) == 9) {
        __label__ = 5; break;
      }
      else if ((($9)|0) == 2) {
        __label__ = 6; break;
      }
      else {
      __label__ = 14; break;
      }
      
    case 4: 
      var $11=$2;
      var $12=$2;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=_dl_addconst($14);
      _chk_file_line($11, $15, ((STRING_TABLE.__str470)|0), 577);
      var $16=$2;
      var $17=$2;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=_dl_pushstring($19, ((STRING_TABLE.__str1076)|0));
      _chk_file_line($16, $20, ((STRING_TABLE.__str470)|0), 578);
      var $21=$2;
      var $22=$2;
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=_dl_addpred($24);
      _chk_file_line($21, $25, ((STRING_TABLE.__str470)|0), 579);
      var $26=$2;
      _term($26);
      var $27=$2;
      var $28=$2;
      var $29=(($28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=_dl_makeliteral($30);
      _chk_file_line($27, $31, ((STRING_TABLE.__str470)|0), 581);
      var $32=$2;
      var $33=_scan($32);
      $1=$33;
      __label__ = 23; break;
    case 5: 
      var $35=$2;
      var $36=$2;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=_dl_addpred($38);
      _chk_file_line($35, $39, ((STRING_TABLE.__str470)|0), 588);
      var $40=$2;
      var $41=$2;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=_dl_makeliteral($43);
      _chk_file_line($40, $44, ((STRING_TABLE.__str470)|0), 589);
      var $45=$3;
      $1=$45;
      __label__ = 23; break;
    case 6: 
      var $47=$2;
      var $48=$2;
      var $49=(($48)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=_dl_addpred($50);
      _chk_file_line($47, $51, ((STRING_TABLE.__str470)|0), 592);
      var $52=$2;
      _term($52);
      __label__ = 7; break;
    case 7: 
      var $54=$2;
      var $55=_scan($54);
      $3=$55;
      var $56=$3;
      var $57=(($56)|0)==3;
      if ($57) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $59=$2;
      var $60=$2;
      var $61=(($60)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=_dl_makeliteral($62);
      _chk_file_line($59, $63, ((STRING_TABLE.__str470)|0), 597);
      var $64=$2;
      var $65=_scan($64);
      $1=$65;
      __label__ = 23; break;
    case 9: 
      var $67=$3;
      var $68=(($67)|0)==5;
      if ($68) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $70=$2;
      _term($70);
      __label__ = 12; break;
    case 11: 
      var $72=$2;
      _err($72, ((STRING_TABLE.__str1177)|0));
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      __label__ = 7; break;
    case 14: 
      var $76=$3;
      $1=$76;
      __label__ = 23; break;
    case 15: 
      var $78=$3;
      var $79=(($78)|0)==1;
      if ($79) { __label__ = 16; break; } else { __label__ = 22; break; }
    case 16: 
      var $81=$2;
      var $82=$2;
      var $83=(($82)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=_dl_addvar($84);
      _chk_file_line($81, $85, ((STRING_TABLE.__str470)|0), 610);
      var $86=$2;
      var $87=_scan($86);
      $3=$87;
      var $88=$3;
      var $89=(($88)|0)!=4;
      if ($89) { __label__ = 17; break; } else { __label__ = 21; break; }
    case 17: 
      var $91=$3;
      var $92=(($91)|0)==2;
      if ($92) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $94=$2;
      _err($94, ((STRING_TABLE.__str1278)|0));
      __label__ = 20; break;
    case 19: 
      var $96=$2;
      _err($96, ((STRING_TABLE.__str1379)|0));
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $99=$2;
      var $100=$2;
      var $101=(($100)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=_dl_pushstring($102, ((STRING_TABLE.__str1076)|0));
      _chk_file_line($99, $103, ((STRING_TABLE.__str470)|0), 618);
      var $104=$2;
      var $105=$2;
      var $106=(($105)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=_dl_addpred($107);
      _chk_file_line($104, $108, ((STRING_TABLE.__str470)|0), 619);
      var $109=$2;
      _term($109);
      var $110=$2;
      var $111=$2;
      var $112=(($111)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=_dl_makeliteral($113);
      _chk_file_line($110, $114, ((STRING_TABLE.__str470)|0), 621);
      var $115=$2;
      var $116=_scan($115);
      $1=$116;
      __label__ = 23; break;
    case 22: 
      var $118=$2;
      _err($118, ((STRING_TABLE.__str1480)|0));
      $1=11;
      __label__ = 23; break;
    case 23: 
      var $120=$1;
      ;
      return $120;
    default: assert(0, "bad label: " + __label__);
  }
}
_literal["X"]=1;

function _rule($l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $i;
      var $token;
      $1=$l;
      var $2=$1;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=_dl_pushhead($5);
      _chk_file_line($2, $6, ((STRING_TABLE.__str470)|0), 635);
      var $7=$1;
      var $8=$1;
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=_dl_pushliteral($10);
      _chk_file_line($7, $11, ((STRING_TABLE.__str470)|0), 636);
      var $12=$1;
      var $13=$1;
      var $14=_scan($13);
      var $15=_literal($12, $14);
      $token=$15;
      __label__ = 3; break;
    case 3: 
      var $17=$token;
      var $18=(($17)|0)==5;
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $20=$1;
      var $21=$1;
      var $22=(($21)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=_dl_addliteral($23);
      _chk_file_line($20, $24, ((STRING_TABLE.__str470)|0), 639);
      var $25=$1;
      var $26=$1;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=_dl_pushliteral($28);
      _chk_file_line($25, $29, ((STRING_TABLE.__str470)|0), 640);
      var $30=$1;
      var $31=$1;
      var $32=_scan($31);
      var $33=_literal($30, $32);
      $token=$33;
      __label__ = 3; break;
    case 5: 
      var $35=$1;
      var $36=$1;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=_dl_addliteral($38);
      _chk_file_line($35, $39, ((STRING_TABLE.__str470)|0), 643);
      var $40=$1;
      var $41=$1;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=_dl_makeclause($43);
      _chk_file_line($40, $44, ((STRING_TABLE.__str470)|0), 644);
      var $45=$token;
      if ((($45)|0) == 7) {
        __label__ = 6; break;
      }
      else if ((($45)|0) == 8) {
        __label__ = 9; break;
      }
      else {
      __label__ = 10; break;
      }
      
    case 6: 
      var $47=$1;
      var $48=(($47)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=_dl_assert($49);
      $i=$50;
      var $51=$i;
      var $52=(($51)|0)==-1;
      if ($52) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $54=$1;
      _err($54, ((STRING_TABLE.__str874)|0));
      __label__ = 8; break;
    case 8: 
      var $56=$1;
      var $57=$i;
      _chk_file_line($56, $57, ((STRING_TABLE.__str470)|0), 650);
      __label__ = 11; break;
    case 9: 
      var $59=$1;
      var $60=$1;
      var $61=(($60)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=_dl_retract($62);
      _chk_file_line($59, $63, ((STRING_TABLE.__str470)|0), 653);
      __label__ = 11; break;
    case 10: 
      var $65=$1;
      _err($65, ((STRING_TABLE.__str975)|0));
      __label__ = 11; break;
    case 11: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_rule["X"]=1;

function _term($l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $token;
      $1=$l;
      var $2=$1;
      var $3=_scan($2);
      $token=$3;
      var $4=$token;
      if ((($4)|0) == 0) {
        __label__ = 3; break;
      }
      else if ((($4)|0) == 1) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      var $6=$1;
      var $7=$1;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=_dl_addconst($9);
      _chk_file_line($6, $10, ((STRING_TABLE.__str470)|0), 560);
      __label__ = 6; break;
    case 4: 
      var $12=$1;
      var $13=$1;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=_dl_addvar($15);
      _chk_file_line($12, $16, ((STRING_TABLE.__str470)|0), 563);
      __label__ = 6; break;
    case 5: 
      var $18=$1;
      _err($18, ((STRING_TABLE.__str1581)|0));
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _getch($l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $ch;
      $2=$l;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$2;
      var $9=(($8+24)|0);
      HEAP32[(($9)>>2)]=0;
      var $10=$2;
      var $11=(($10+28)|0);
      var $12=HEAP32[(($11)>>2)];
      $ch=$12;
      __label__ = 12; break;
    case 4: 
      var $14=$2;
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|0)!=0;
      if ($17) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      $1=-1;
      __label__ = 16; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $21=$2;
      var $22=(($21+4)|0);
      var $23=HEAPU32[(($22)>>2)];
      var $24=$2;
      var $25=(($24+8)|0);
      var $26=HEAPU32[(($25)>>2)];
      var $27=(($23)>>>0) >= (($26)>>>0);
      if ($27) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $29=$2;
      _getbuf91($29);
      var $30=$2;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|0)!=0;
      if ($33) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      $1=-1;
      __label__ = 16; break;
    case 10: 
      __label__ = 7; break;
    case 11: 
      var $37=$2;
      var $38=(($37+4)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+1)|0);
      HEAP32[(($38)>>2)]=$40;
      var $41=HEAPU8[($39)];
      var $42=(($41)&255);
      $ch=$42;
      __label__ = 12; break;
    case 12: 
      var $44=$ch;
      var $45=(($44)|0)==10;
      if ($45) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $47=$2;
      var $48=(($47+40)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=((($49)+(1))|0);
      HEAP32[(($48)>>2)]=$50;
      var $51=$2;
      var $52=(($51+36)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$2;
      var $55=(($54+32)|0);
      HEAP32[(($55)>>2)]=$53;
      var $56=$2;
      var $57=(($56+36)|0);
      HEAP32[(($57)>>2)]=0;
      __label__ = 15; break;
    case 14: 
      var $59=$2;
      var $60=(($59+36)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=((($61)+(1))|0);
      HEAP32[(($60)>>2)]=$62;
      __label__ = 15; break;
    case 15: 
      var $64=$ch;
      $1=$64;
      __label__ = 16; break;
    case 16: 
      var $66=$1;
      ;
      return $66;
    default: assert(0, "bad label: " + __label__);
  }
}
_getch["X"]=1;

function _addstr($l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $more;
      var $mark;
      var $s1;
      var $ch;
      var $s0;
      var $quote;
      var $pushback;
      $2=$l;
      $more=0;
      var $3=$2;
      var $4=(($3+4)|0);
      var $5=HEAP32[(($4)>>2)];
      $mark=$5;
      $s1=-1;
      __label__ = 3; break;
    case 3: 
      var $7=$s1;
      $s0=$7;
      var $8=$s0;
      var $9=(($8)|0)!=-1;
      var $10=(($9)&1);
      $quote=$10;
      $pushback=4096;
      __label__ = 4; break;
    case 4: 
      var $12=$2;
      var $13=(($12+4)|0);
      var $14=HEAPU32[(($13)>>2)];
      var $15=$2;
      var $16=(($15+8)|0);
      var $17=HEAPU32[(($16)>>2)];
      var $18=(($14)>>>0) < (($17)>>>0);
      if ($18) { __label__ = 5; break; } else { __label__ = 41; break; }
    case 5: 
      var $20=$pushback;
      var $21=(($20)|0)==4096;
      if ($21) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $23=$2;
      var $24=_getch($23);
      $ch=$24;
      __label__ = 8; break;
    case 7: 
      var $26=$pushback;
      $ch=$26;
      $pushback=4096;
      __label__ = 8; break;
    case 8: 
      var $28=$ch;
      var $29=(($28)|0)==-1;
      if ($29) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $31=$2;
      _err($31, ((STRING_TABLE.__str1884)|0));
      __label__ = 10; break;
    case 10: 
      var $33=$s1;
      var $34=(($33)|0)==-1;
      if ($34) { __label__ = 11; break; } else { __label__ = 25; break; }
    case 11: 
      var $36=$ch;
      var $37=(($36)|0)==34;
      if ($37) { __label__ = 12; break; } else { __label__ = 18; break; }
    case 12: 
      var $39=$quote;
      var $40=(($39)|0)!=0;
      if ($40) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $42=$2;
      var $43=$2;
      var $44=$s0;
      var $45=$mark;
      var $46=$2;
      var $47=(($46+4)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$mark;
      var $50=$48;
      var $51=$49;
      var $52=((($50)-($51))|0);
      var $53=((($52)-(1))|0);
      var $54=_pushstring($43, $44, 1, $45, $53);
      _chk_file_line($42, $54, ((STRING_TABLE.__str470)|0), 431);
      __label__ = 15; break;
    case 14: 
      var $56=$2;
      var $57=$2;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$mark;
      var $61=$2;
      var $62=(($61+4)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$mark;
      var $65=$63;
      var $66=$64;
      var $67=((($65)-($66))|0);
      var $68=((($67)-(1))|0);
      var $69=_dl_pushlstring($59, $60, $68);
      _chk_file_line($56, $69, ((STRING_TABLE.__str470)|0), 433);
      __label__ = 15; break;
    case 15: 
      var $71=$more;
      var $72=(($71)|0)!=0;
      if ($72) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $74=$2;
      var $75=$2;
      var $76=(($75)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=_dl_concat($77);
      _chk_file_line($74, $78, ((STRING_TABLE.__str470)|0), 435);
      __label__ = 17; break;
    case 17: 
      $1=0;
      __label__ = 67; break;
    case 18: 
      var $81=$ch;
      var $82=(($81)|0)==92;
      if ($82) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      $s1=-2;
      $quote=1;
      __label__ = 23; break;
    case 20: 
      var $85=$ch;
      var $86=(($85)|0)==10;
      if ($86) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $88=$2;
      _err($88, ((STRING_TABLE.__str1985)|0));
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      __label__ = 40; break;
    case 25: 
      var $93=$s1;
      var $94=(($93)|0)==-2;
      if ($94) { __label__ = 26; break; } else { __label__ = 30; break; }
    case 26: 
      var $96=$ch;
      var $97=_isodigit($96);
      var $98=(($97)|0)!=0;
      if ($98) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $100=$ch;
      var $101=_toint($100);
      $s1=$101;
      __label__ = 29; break;
    case 28: 
      $s1=-1;
      __label__ = 29; break;
    case 29: 
      __label__ = 39; break;
    case 30: 
      var $105=$s1;
      var $106=(($105)|0) < 4096;
      if ($106) { __label__ = 31; break; } else { __label__ = 35; break; }
    case 31: 
      var $108=$ch;
      var $109=_isodigit($108);
      var $110=(($109)|0)!=0;
      if ($110) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $112=$s1;
      var $113=((($112<<3))|0);
      var $114=((($113)+(4096))|0);
      var $115=$ch;
      var $116=_toint($115);
      var $117=((($114)+($116))|0);
      $s1=$117;
      __label__ = 34; break;
    case 33: 
      var $119=$ch;
      $pushback=$119;
      $s1=-1;
      __label__ = 34; break;
    case 34: 
      __label__ = 38; break;
    case 35: 
      var $122=$ch;
      var $123=_isodigit($122);
      var $124=(($123)|0)!=0;
      if ($124) { __label__ = 37; break; } else { __label__ = 36; break; }
    case 36: 
      var $126=$ch;
      $pushback=$126;
      __label__ = 37; break;
    case 37: 
      $s1=-1;
      __label__ = 38; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      __label__ = 4; break;
    case 41: 
      var $132=$pushback;
      var $133=(($132)|0)==34;
      if ($133) { __label__ = 42; break; } else { __label__ = 48; break; }
    case 42: 
      var $135=$quote;
      var $136=(($135)|0)!=0;
      if ($136) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $138=$2;
      var $139=$2;
      var $140=$s0;
      var $141=$mark;
      var $142=$2;
      var $143=(($142+4)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=$mark;
      var $146=$144;
      var $147=$145;
      var $148=((($146)-($147))|0);
      var $149=((($148)-(1))|0);
      var $150=_pushstring($139, $140, 1, $141, $149);
      _chk_file_line($138, $150, ((STRING_TABLE.__str470)|0), 468);
      __label__ = 45; break;
    case 44: 
      var $152=$2;
      var $153=$2;
      var $154=(($153)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=$mark;
      var $157=$2;
      var $158=(($157+4)|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=$mark;
      var $161=$159;
      var $162=$160;
      var $163=((($161)-($162))|0);
      var $164=((($163)-(1))|0);
      var $165=_dl_pushlstring($155, $156, $164);
      _chk_file_line($152, $165, ((STRING_TABLE.__str470)|0), 470);
      __label__ = 45; break;
    case 45: 
      var $167=$more;
      var $168=(($167)|0)!=0;
      if ($168) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $170=$2;
      var $171=$2;
      var $172=(($171)|0);
      var $173=HEAP32[(($172)>>2)];
      var $174=_dl_concat($173);
      _chk_file_line($170, $174, ((STRING_TABLE.__str470)|0), 472);
      __label__ = 47; break;
    case 47: 
      $1=0;
      __label__ = 67; break;
    case 48: 
      var $177=$pushback;
      var $178=(($177)|0)==92;
      if ($178) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      $s1=-2;
      __label__ = 53; break;
    case 50: 
      var $181=$pushback;
      var $182=(($181)|0)==10;
      if ($182) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $184=$2;
      _err($184, ((STRING_TABLE.__str1985)|0));
      __label__ = 52; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      __label__ = 54; break;
    case 54: 
      var $188=$quote;
      var $189=(($188)|0)!=0;
      if ($189) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      var $191=$2;
      var $192=$2;
      var $193=$s0;
      var $194=$mark;
      var $195=$2;
      var $196=(($195+4)|0);
      var $197=HEAP32[(($196)>>2)];
      var $198=$mark;
      var $199=$197;
      var $200=$198;
      var $201=((($199)-($200))|0);
      var $202=_pushstring($192, $193, 0, $194, $201);
      _chk_file_line($191, $202, ((STRING_TABLE.__str470)|0), 483);
      __label__ = 57; break;
    case 56: 
      var $204=$2;
      var $205=$2;
      var $206=(($205)|0);
      var $207=HEAP32[(($206)>>2)];
      var $208=$mark;
      var $209=$2;
      var $210=(($209+4)|0);
      var $211=HEAP32[(($210)>>2)];
      var $212=$mark;
      var $213=$211;
      var $214=$212;
      var $215=((($213)-($214))|0);
      var $216=_dl_pushlstring($207, $208, $215);
      _chk_file_line($204, $216, ((STRING_TABLE.__str470)|0), 485);
      __label__ = 57; break;
    case 57: 
      var $218=$more;
      var $219=(($218)|0)!=0;
      if ($219) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: 
      var $221=$2;
      var $222=$2;
      var $223=(($222)|0);
      var $224=HEAP32[(($223)>>2)];
      var $225=_dl_concat($224);
      _chk_file_line($221, $225, ((STRING_TABLE.__str470)|0), 487);
      __label__ = 60; break;
    case 59: 
      $more=1;
      __label__ = 60; break;
    case 60: 
      var $228=$2;
      var $229=_getch($228);
      $ch=$229;
      var $230=$ch;
      var $231=(($230)|0)==-1;
      if ($231) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      var $233=$2;
      _err($233, ((STRING_TABLE.__str1884)|0));
      __label__ = 62; break;
    case 62: 
      var $235=$s1;
      var $236=(($235)|0)==-1;
      if ($236) { __label__ = 63; break; } else { __label__ = 65; break; }
    case 63: 
      var $238=$ch;
      var $239=(($238)|0)==34;
      if ($239) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      $1=0;
      __label__ = 67; break;
    case 65: 
      var $242=$2;
      var $243=$ch;
      _ungetch($242, $243);
      __label__ = 66; break;
    case 66: 
      var $245=$2;
      var $246=(($245+4)|0);
      var $247=HEAP32[(($246)>>2)];
      var $248=((($247)-(1))|0);
      $mark=$248;
      __label__ = 3; break;
    case 67: 
      var $250=$1;
      ;
      return $250;
    default: assert(0, "bad label: " + __label__);
  }
}
_addstr["X"]=1;

function _toescape($ch) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$ch;
      var $3=$2;
      if ((($3)|0) == 97) {
        __label__ = 3; break;
      }
      else if ((($3)|0) == 98) {
        __label__ = 4; break;
      }
      else if ((($3)|0) == 102) {
        __label__ = 5; break;
      }
      else if ((($3)|0) == 110) {
        __label__ = 6; break;
      }
      else if ((($3)|0) == 114) {
        __label__ = 7; break;
      }
      else if ((($3)|0) == 116) {
        __label__ = 8; break;
      }
      else if ((($3)|0) == 118) {
        __label__ = 9; break;
      }
      else if ((($3)|0) == 92) {
        __label__ = 10; break;
      }
      else if ((($3)|0) == 39) {
        __label__ = 11; break;
      }
      else if ((($3)|0) == 34) {
        __label__ = 12; break;
      }
      else if ((($3)|0) == 63) {
        __label__ = 13; break;
      }
      else {
      __label__ = 14; break;
      }
      
    case 3: 
      $1=7;
      __label__ = 15; break;
    case 4: 
      $1=8;
      __label__ = 15; break;
    case 5: 
      $1=12;
      __label__ = 15; break;
    case 6: 
      $1=10;
      __label__ = 15; break;
    case 7: 
      $1=13;
      __label__ = 15; break;
    case 8: 
      $1=9;
      __label__ = 15; break;
    case 9: 
      $1=11;
      __label__ = 15; break;
    case 10: 
      $1=92;
      __label__ = 15; break;
    case 11: 
      $1=39;
      __label__ = 15; break;
    case 12: 
      $1=34;
      __label__ = 15; break;
    case 13: 
      $1=63;
      __label__ = 15; break;
    case 14: 
      var $16=$2;
      $1=$16;
      __label__ = 15; break;
    case 15: 
      var $18=$1;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function _isodigit($ch) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$ch;
      var $2=$1;
      var $3=48 <= (($2)|0);
      if ($3) { __label__ = 3; break; } else { var $8 = 0;__label__ = 4; break; }
    case 3: 
      var $5=$1;
      var $6=(($5)|0) <= 55;
      var $8 = $6;__label__ = 4; break;
    case 4: 
      var $8;
      var $9=(($8)&1);
      ;
      return $9;
    default: assert(0, "bad label: " + __label__);
  }
}


function _toint($ch) {
  ;
  var __label__;

  var $1;
  $1=$ch;
  var $2=$1;
  var $3=((($2)-(48))|0);
  ;
  return $3;
}


function _ungetch($l, $ch) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$l;
      $2=$ch;
      var $3=$2;
      var $4=$1;
      var $5=(($4+28)|0);
      HEAP32[(($5)>>2)]=$3;
      var $6=$1;
      var $7=(($6+24)|0);
      HEAP32[(($7)>>2)]=1;
      var $8=$2;
      var $9=(($8)|0)==10;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$1;
      var $12=(($11+40)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=((($13)-(1))|0);
      HEAP32[(($12)>>2)]=$14;
      var $15=$1;
      var $16=(($15+32)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$1;
      var $19=(($18+36)|0);
      HEAP32[(($19)>>2)]=$17;
      __label__ = 5; break;
    case 4: 
      var $21=$1;
      var $22=(($21+36)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=((($23)-(1))|0);
      HEAP32[(($22)>>2)]=$24;
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_setlevel($from, $to) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$from;
  $2=$to;
  var $3=$1;
  var $4=(($3+52)|0);
  var $5=HEAP16[(($4)>>1)];
  var $6=$2;
  var $7=(($6+52)|0);
  HEAP16[(($7)>>1)]=$5;
  ;
  return;
}


function _lua_atpanic($L, $panicf) {
  ;
  var __label__;

  var $1;
  var $2;
  var $old;
  $1=$L;
  $2=$panicf;
  var $3=$1;
  var $4=(($3+16)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+88)|0);
  var $7=HEAP32[(($6)>>2)];
  $old=$7;
  var $8=$2;
  var $9=$1;
  var $10=(($9+16)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=(($11+88)|0);
  HEAP32[(($12)>>2)]=$8;
  var $13=$old;
  ;
  return $13;
}


function _lua_gettop($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=$1;
  var $6=(($5+12)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$4;
  var $9=$7;
  var $10=((($8)-($9))|0);
  var $11=((((($10)|0))/(12))&-1);
  ;
  return $11;
}


function _addid($l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $more;
      var $mark;
      var $ch;
      $2=$l;
      $more=0;
      __label__ = 3; break;
    case 3: 
      var $4=$2;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=((($6)-(1))|0);
      $mark=$7;
      __label__ = 4; break;
    case 4: 
      var $9=$2;
      var $10=(($9+4)|0);
      var $11=HEAPU32[(($10)>>2)];
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAPU32[(($13)>>2)];
      var $15=(($11)>>>0) < (($14)>>>0);
      if ($15) { __label__ = 5; break; } else { __label__ = 10; break; }
    case 5: 
      var $17=$2;
      var $18=_getch($17);
      $ch=$18;
      var $19=$ch;
      var $20=_isidpart($19);
      var $21=(($20)|0)!=0;
      if ($21) { __label__ = 9; break; } else { __label__ = 6; break; }
    case 6: 
      var $23=$2;
      var $24=$ch;
      _ungetch($23, $24);
      var $25=$2;
      var $26=$2;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$mark;
      var $30=$2;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$mark;
      var $34=$32;
      var $35=$33;
      var $36=((($34)-($35))|0);
      var $37=((($36)-(1))|0);
      var $38=_dl_pushlstring($28, $29, $37);
      _chk_file_line($25, $38, ((STRING_TABLE.__str470)|0), 204);
      var $39=$more;
      var $40=(($39)|0)!=0;
      if ($40) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $42=$2;
      var $43=$2;
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=_dl_concat($45);
      _chk_file_line($42, $46, ((STRING_TABLE.__str470)|0), 206);
      __label__ = 8; break;
    case 8: 
      $1=0;
      __label__ = 16; break;
    case 9: 
      __label__ = 4; break;
    case 10: 
      var $50=$2;
      var $51=$2;
      var $52=(($51)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$mark;
      var $55=$2;
      var $56=(($55+4)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$mark;
      var $59=$57;
      var $60=$58;
      var $61=((($59)-($60))|0);
      var $62=_dl_pushlstring($53, $54, $61);
      _chk_file_line($50, $62, ((STRING_TABLE.__str470)|0), 211);
      var $63=$more;
      var $64=(($63)|0)!=0;
      if ($64) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $66=$2;
      var $67=$2;
      var $68=(($67)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=_dl_concat($69);
      _chk_file_line($66, $70, ((STRING_TABLE.__str470)|0), 213);
      __label__ = 13; break;
    case 12: 
      $more=1;
      __label__ = 13; break;
    case 13: 
      var $73=$2;
      var $74=_getch($73);
      $ch=$74;
      var $75=$2;
      var $76=$ch;
      _ungetch($75, $76);
      var $77=$ch;
      var $78=_isidpart($77);
      var $79=(($78)|0)!=0;
      if ($79) { __label__ = 15; break; } else { __label__ = 14; break; }
    case 14: 
      $1=0;
      __label__ = 16; break;
    case 15: 
      __label__ = 3; break;
    case 16: 
      var $83=$1;
      ;
      return $83;
    default: assert(0, "bad label: " + __label__);
  }
}
_addid["X"]=1;

function _addvar($l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $more;
      var $mark;
      var $ch;
      $2=$l;
      $more=0;
      __label__ = 3; break;
    case 3: 
      var $4=$2;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=((($6)-(1))|0);
      $mark=$7;
      __label__ = 4; break;
    case 4: 
      var $9=$2;
      var $10=(($9+4)|0);
      var $11=HEAPU32[(($10)>>2)];
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAPU32[(($13)>>2)];
      var $15=(($11)>>>0) < (($14)>>>0);
      if ($15) { __label__ = 5; break; } else { __label__ = 10; break; }
    case 5: 
      var $17=$2;
      var $18=_getch($17);
      $ch=$18;
      var $19=$ch;
      var $20=_isvarpart($19);
      var $21=(($20)|0)!=0;
      if ($21) { __label__ = 9; break; } else { __label__ = 6; break; }
    case 6: 
      var $23=$2;
      var $24=$ch;
      _ungetch($23, $24);
      var $25=$2;
      var $26=$2;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$mark;
      var $30=$2;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$mark;
      var $34=$32;
      var $35=$33;
      var $36=((($34)-($35))|0);
      var $37=((($36)-(1))|0);
      var $38=_dl_pushlstring($28, $29, $37);
      _chk_file_line($25, $38, ((STRING_TABLE.__str470)|0), 237);
      var $39=$more;
      var $40=(($39)|0)!=0;
      if ($40) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $42=$2;
      var $43=$2;
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=_dl_concat($45);
      _chk_file_line($42, $46, ((STRING_TABLE.__str470)|0), 239);
      __label__ = 8; break;
    case 8: 
      $1=1;
      __label__ = 16; break;
    case 9: 
      __label__ = 4; break;
    case 10: 
      var $50=$2;
      var $51=$2;
      var $52=(($51)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$mark;
      var $55=$2;
      var $56=(($55+4)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$mark;
      var $59=$57;
      var $60=$58;
      var $61=((($59)-($60))|0);
      var $62=_dl_pushlstring($53, $54, $61);
      _chk_file_line($50, $62, ((STRING_TABLE.__str470)|0), 244);
      var $63=$more;
      var $64=(($63)|0)!=0;
      if ($64) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $66=$2;
      var $67=$2;
      var $68=(($67)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=_dl_concat($69);
      _chk_file_line($66, $70, ((STRING_TABLE.__str470)|0), 246);
      __label__ = 13; break;
    case 12: 
      $more=1;
      __label__ = 13; break;
    case 13: 
      var $73=$2;
      var $74=_getch($73);
      $ch=$74;
      var $75=$2;
      var $76=$ch;
      _ungetch($75, $76);
      var $77=$ch;
      var $78=_isidpart($77);
      var $79=(($78)|0)!=0;
      if ($79) { __label__ = 15; break; } else { __label__ = 14; break; }
    case 14: 
      $1=1;
      __label__ = 16; break;
    case 15: 
      __label__ = 3; break;
    case 16: 
      var $83=$1;
      ;
      return $83;
    default: assert(0, "bad label: " + __label__);
  }
}
_addvar["X"]=1;

function _isvarpart($ch) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$ch;
      var $2=$1;
      var $3=_isalnum($2);
      var $4=(($3)|0)!=0;
      if ($4) { var $9 = 1;__label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $6=$1;
      var $7=(($6)|0)==95;
      var $9 = $7;__label__ = 4; break;
    case 4: 
      var $9;
      var $10=(($9)&1);
      ;
      return $10;
    default: assert(0, "bad label: " + __label__);
  }
}


function _pushstring($l, $s0, $last, $s, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $end;
      var $6;
      var $b;
      var $i;
      var $ch;
      var $7;
      $1=$l;
      $2=$s0;
      $3=$last;
      $4=$s;
      $5=$n;
      var $8=$4;
      var $9=$5;
      var $10=(($8+$9)|0);
      $end=$10;
      var $11=$5;
      var $12=((($11)+(1))|0);
      var $13=_llvm_stacksave();
      $6=$13;
      var $14=STACKTOP;STACKTOP += $12;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack");
      $b=$14;
      __label__ = 3; break;
    case 3: 
      var $16=$4;
      var $17=$end;
      var $18=(($16)>>>0) < (($17)>>>0);
      if ($18) { __label__ = 4; break; } else { __label__ = 32; break; }
    case 4: 
      var $20=$4;
      var $21=HEAP8[($20)];
      var $22=(($21 << 24) >> 24);
      $ch=$22;
      var $23=$2;
      var $24=(($23)|0)==-1;
      if ($24) { __label__ = 5; break; } else { __label__ = 12; break; }
    case 5: 
      var $26=$ch;
      var $27=(($26)|0)==92;
      if ($27) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $2=-2;
      __label__ = 11; break;
    case 7: 
      var $30=$ch;
      var $31=(($30)|0)==10;
      if ($31) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $33=$1;
      _err($33, ((STRING_TABLE.__str1985)|0));
      __label__ = 10; break;
    case 9: 
      var $35=$ch;
      var $36=(($35) & 255);
      var $37=$b;
      var $38=(($37+1)|0);
      $b=$38;
      HEAP8[($37)]=$36;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      __label__ = 30; break;
    case 12: 
      var $42=$2;
      var $43=(($42)|0)==-2;
      if ($43) { __label__ = 13; break; } else { __label__ = 19; break; }
    case 13: 
      var $45=$ch;
      var $46=_isodigit($45);
      var $47=(($46)|0)!=0;
      if ($47) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $49=$ch;
      var $50=_toint($49);
      $2=$50;
      __label__ = 18; break;
    case 15: 
      var $52=$ch;
      var $53=(($52)|0)!=10;
      if ($53) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $55=$ch;
      var $56=_toescape($55);
      var $57=(($56) & 255);
      var $58=$b;
      var $59=(($58+1)|0);
      $b=$59;
      HEAP8[($58)]=$57;
      __label__ = 17; break;
    case 17: 
      $2=-1;
      __label__ = 18; break;
    case 18: 
      __label__ = 29; break;
    case 19: 
      var $63=$2;
      var $64=(($63)|0) < 4096;
      if ($64) { __label__ = 20; break; } else { __label__ = 24; break; }
    case 20: 
      var $66=$ch;
      var $67=_isodigit($66);
      var $68=(($67)|0)!=0;
      if ($68) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $70=$2;
      var $71=((($70<<3))|0);
      var $72=((($71)+(4096))|0);
      var $73=$ch;
      var $74=_toint($73);
      var $75=((($72)+($74))|0);
      $2=$75;
      __label__ = 23; break;
    case 22: 
      var $77=$2;
      var $78=(($77) & 255);
      var $79=$b;
      var $80=(($79+1)|0);
      $b=$80;
      HEAP8[($79)]=$78;
      var $81=$4;
      var $82=((($81)-(1))|0);
      $4=$82;
      $2=-1;
      __label__ = 23; break;
    case 23: 
      __label__ = 28; break;
    case 24: 
      var $85=$2;
      var $86=((($85)-(4096))|0);
      $2=$86;
      var $87=$ch;
      var $88=_isodigit($87);
      var $89=(($88)|0)!=0;
      if ($89) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $91=$2;
      var $92=((($91<<3))|0);
      var $93=$ch;
      var $94=_toint($93);
      var $95=((($92)+($94))|0);
      var $96=(($95) & 255);
      var $97=$b;
      var $98=(($97+1)|0);
      $b=$98;
      HEAP8[($97)]=$96;
      __label__ = 27; break;
    case 26: 
      var $100=$2;
      var $101=(($100) & 255);
      var $102=$b;
      var $103=(($102+1)|0);
      $b=$103;
      HEAP8[($102)]=$101;
      var $104=$4;
      var $105=((($104)-(1))|0);
      $4=$105;
      __label__ = 27; break;
    case 27: 
      $2=-1;
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      var $111=$4;
      var $112=(($111+1)|0);
      $4=$112;
      __label__ = 3; break;
    case 32: 
      var $114=$3;
      var $115=(($114)|0)!=0;
      if ($115) { __label__ = 33; break; } else { __label__ = 39; break; }
    case 33: 
      var $117=$2;
      var $118=(($117)|0) >= 4096;
      if ($118) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $120=$2;
      var $121=((($120)-(4096))|0);
      var $122=(($121) & 255);
      var $123=$b;
      var $124=(($123+1)|0);
      $b=$124;
      HEAP8[($123)]=$122;
      __label__ = 38; break;
    case 35: 
      var $126=$2;
      var $127=(($126)|0) >= 0;
      if ($127) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $129=$2;
      var $130=(($129) & 255);
      var $131=$b;
      var $132=(($131+1)|0);
      $b=$132;
      HEAP8[($131)]=$130;
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      var $136=$1;
      var $137=(($136)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=$b;
      var $140=$139;
      var $141=$14;
      var $142=((($140)-($141))|0);
      var $143=_dl_pushlstring($138, $14, $142);
      $i=$143;
      var $144=$i;
      $7=1;
      var $145=$6;
      _llvm_stackrestore($145);
      ;
      return $144;
    default: assert(0, "bad label: " + __label__);
  }
}
_pushstring["X"]=1;

function _getbuf91($l) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $size=__stackBase__;
      $1=$l;
      var $2=$1;
      var $3=(($2+16)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=$1;
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=FUNCTION_TABLE[$4]($7, $size);
      var $9=$1;
      var $10=(($9+4)|0);
      HEAP32[(($10)>>2)]=$8;
      var $11=$1;
      var $12=(($11+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0)!=0;
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $16=$1;
      var $17=(($16+4)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=HEAP32[(($size)>>2)];
      var $20=(($18+$19)|0);
      var $23 = $20;__label__ = 5; break;
    case 4: 
      var $23 = 0;__label__ = 5; break;
    case 5: 
      var $23;
      var $24=$1;
      var $25=(($24+8)|0);
      HEAP32[(($25)>>2)]=$23;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_checkstack($L, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $res;
      $1=$L;
      $2=$size;
      $res=1;
      var $3=$2;
      var $4=(($3)|0) > 8000;
      if ($4) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $6=$1;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$1;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$8;
      var $13=$11;
      var $14=((($12)-($13))|0);
      var $15=((((($14)|0))/(12))&-1);
      var $16=$2;
      var $17=((($15)+($16))|0);
      var $18=(($17)|0) > 8000;
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $res=0;
      __label__ = 13; break;
    case 5: 
      var $21=$2;
      var $22=(($21)|0) > 0;
      if ($22) { __label__ = 6; break; } else { __label__ = 12; break; }
    case 6: 
      var $24=$1;
      var $25=(($24+28)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$26;
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      var $32=$27;
      var $33=$31;
      var $34=((($32)-($33))|0);
      var $35=$2;
      var $36=((($35)*(12))|0);
      var $37=(($34)|0) <= (($36)|0);
      if ($37) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $39=$1;
      var $40=$2;
      _luaD_growstack($39, $40);
      __label__ = 9; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $43=$1;
      var $44=(($43+20)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+8)|0);
      var $47=HEAPU32[(($46)>>2)];
      var $48=$1;
      var $49=(($48+8)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$2;
      var $52=(($50+($51)*(12))|0);
      var $53=(($47)>>>0) < (($52)>>>0);
      if ($53) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $55=$1;
      var $56=(($55+8)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$2;
      var $59=(($57+($58)*(12))|0);
      var $60=$1;
      var $61=(($60+20)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+8)|0);
      HEAP32[(($63)>>2)]=$59;
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $67=$res;
      ;
      return $67;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_checkstack["X"]=1;

function _lua_xmove($from, $to, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $o2;
      var $o1;
      $1=$from;
      $2=$to;
      $3=$n;
      var $4=$1;
      var $5=$2;
      var $6=(($4)|0)==(($5)|0);
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 8; break;
    case 4: 
      var $9=$1;
      var $10=$1;
      var $11=$1;
      var $12=$3;
      var $13=$1;
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(((-$12))|0);
      var $17=(($15+($16)*(12))|0);
      HEAP32[(($14)>>2)]=$17;
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $19=$i;
      var $20=$3;
      var $21=(($19)|0) < (($20)|0);
      if ($21) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $23=$1;
      var $24=(($23+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$i;
      var $27=(($25+($26)*(12))|0);
      $o2=$27;
      var $28=$2;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+12)|0);
      HEAP32[(($29)>>2)]=$31;
      $o1=$30;
      var $32=$o1;
      var $33=(($32)|0);
      var $34=$o2;
      var $35=(($34)|0);
      var $36=$33;
      var $37=$35;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];
      var $38=$o2;
      var $39=(($38+8)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$o1;
      var $42=(($41+8)|0);
      HEAP32[(($42)>>2)]=$40;
      __label__ = 7; break;
    case 7: 
      var $44=$i;
      var $45=((($44)+(1))|0);
      $i=$45;
      __label__ = 5; break;
    case 8: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_xmove["X"]=1;

function _lua_newthread($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $L1;
      var $i_o;
      $1=$L;
      var $2=$1;
      var $3=(($2+16)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4+68)|0);
      var $6=HEAPU32[(($5)>>2)];
      var $7=$1;
      var $8=(($7+16)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9+64)|0);
      var $11=HEAPU32[(($10)>>2)];
      var $12=(($6)>>>0) >= (($11)>>>0);
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $14=$1;
      _luaC_step($14);
      __label__ = 4; break;
    case 4: 
      var $16=$1;
      var $17=_luaE_newthread($16);
      $L1=$17;
      var $18=$1;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      $i_o=$20;
      var $21=$L1;
      var $22=$21;
      var $23=$i_o;
      var $24=(($23)|0);
      var $25=$24;
      HEAP32[(($25)>>2)]=$22;
      var $26=$i_o;
      var $27=(($26+8)|0);
      HEAP32[(($27)>>2)]=8;
      var $28=$1;
      var $29=$1;
      var $30=(($29+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+12)|0);
      HEAP32[(($30)>>2)]=$32;
      var $33=$1;
      var $34=$L1;
      ;
      return $34;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_settop($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$idx;
      var $3=$2;
      var $4=(($3)|0) >= 0;
      if ($4) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $6=$1;
      __label__ = 4; break;
    case 4: 
      var $8=$1;
      var $9=(($8+8)|0);
      var $10=HEAPU32[(($9)>>2)];
      var $11=$1;
      var $12=(($11+12)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$2;
      var $15=(($13+($14)*(12))|0);
      var $16=(($10)>>>0) < (($15)>>>0);
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $18=$1;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+12)|0);
      HEAP32[(($19)>>2)]=$21;
      var $22=(($20+8)|0);
      HEAP32[(($22)>>2)]=0;
      __label__ = 4; break;
    case 6: 
      var $24=$1;
      var $25=(($24+12)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$2;
      var $28=(($26+($27)*(12))|0);
      var $29=$1;
      var $30=(($29+8)|0);
      HEAP32[(($30)>>2)]=$28;
      __label__ = 8; break;
    case 7: 
      var $32=$1;
      var $33=$2;
      var $34=((($33)+(1))|0);
      var $35=$1;
      var $36=(($35+8)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+($34)*(12))|0);
      HEAP32[(($36)>>2)]=$38;
      __label__ = 8; break;
    case 8: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _index2adr($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $o;
      var $func;
      var $i_o;
      var $func1;
      $2=$L;
      $3=$idx;
      var $4=$3;
      var $5=(($4)|0) > 0;
      if ($5) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $7=$2;
      var $8=(($7+12)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$3;
      var $11=((($10)-(1))|0);
      var $12=(($9+($11)*(12))|0);
      $o=$12;
      var $13=$2;
      var $14=$o;
      var $15=$2;
      var $16=(($15+8)|0);
      var $17=HEAPU32[(($16)>>2)];
      var $18=(($14)>>>0) >= (($17)>>>0);
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $1=_luaO_nilobject_;
      __label__ = 16; break;
    case 5: 
      var $21=$o;
      $1=$21;
      __label__ = 16; break;
    case 6: 
      var $23=$3;
      var $24=(($23)|0) > -10000;
      if ($24) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $26=$2;
      var $27=$2;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$3;
      var $31=(($29+($30)*(12))|0);
      $1=$31;
      __label__ = 16; break;
    case 8: 
      var $33=$3;
      if ((($33)|0) == -10000) {
        __label__ = 9; break;
      }
      else if ((($33)|0) == -10001) {
        __label__ = 10; break;
      }
      else if ((($33)|0) == -10002) {
        __label__ = 11; break;
      }
      else {
      __label__ = 12; break;
      }
      
    case 9: 
      var $35=$2;
      var $36=(($35+16)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+92)|0);
      $1=$38;
      __label__ = 16; break;
    case 10: 
      var $40=$2;
      var $41=(($40+20)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+4)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44)|0);
      var $46=$45;
      var $47=HEAP32[(($46)>>2)];
      var $48=$47;
      $func=$48;
      var $49=$2;
      var $50=(($49+84)|0);
      $i_o=$50;
      var $51=$func;
      var $52=$51;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$54;
      var $56=$i_o;
      var $57=(($56)|0);
      var $58=$57;
      HEAP32[(($58)>>2)]=$55;
      var $59=$i_o;
      var $60=(($59+8)|0);
      HEAP32[(($60)>>2)]=5;
      var $61=$2;
      var $62=(($61+84)|0);
      $1=$62;
      __label__ = 16; break;
    case 11: 
      var $64=$2;
      var $65=(($64+72)|0);
      $1=$65;
      __label__ = 16; break;
    case 12: 
      var $67=$2;
      var $68=(($67+20)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+4)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71)|0);
      var $73=$72;
      var $74=HEAP32[(($73)>>2)];
      var $75=$74;
      $func1=$75;
      var $76=$3;
      var $77=(((-10002)-($76))|0);
      $3=$77;
      var $78=$3;
      var $79=$func1;
      var $80=$79;
      var $81=(($80+7)|0);
      var $82=HEAPU8[($81)];
      var $83=(($82)&255);
      var $84=(($78)|0) <= (($83)|0);
      if ($84) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $86=$3;
      var $87=((($86)-(1))|0);
      var $88=$func1;
      var $89=$88;
      var $90=(($89+20)|0);
      var $91=(($90+($87)*(12))|0);
      var $94 = $91;__label__ = 15; break;
    case 14: 
      var $94 = _luaO_nilobject_;__label__ = 15; break;
    case 15: 
      var $94;
      $1=$94;
      __label__ = 16; break;
    case 16: 
      var $96=$1;
      ;
      return $96;
    default: assert(0, "bad label: " + __label__);
  }
}
_index2adr["X"]=1;

function _lua_typename($L, $t) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$t;
      var $3=$1;
      var $4=$2;
      var $5=(($4)|0)==-1;
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $12 = ((STRING_TABLE.__str193)|0);__label__ = 5; break;
    case 4: 
      var $8=$2;
      var $9=((_luaT_typenames+($8<<2))|0);
      var $10=((((HEAPU8[($9)])|(HEAPU8[(($9)+(1))]<<8)|(HEAPU8[(($9)+(2))]<<16)|(HEAPU8[(($9)+(3))]<<24))|0));
      var $12 = $10;__label__ = 5; break;
    case 5: 
      var $12;
      ;
      return $12;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_remove($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $p;
      var $o2;
      var $o1;
      $1=$L;
      $2=$idx;
      var $3=$1;
      var $4=$2;
      var $5=_index2adr($3, $4);
      $p=$5;
      var $6=$1;
      __label__ = 3; break;
    case 3: 
      var $8=$p;
      var $9=(($8+12)|0);
      $p=$9;
      var $10=$1;
      var $11=(($10+8)|0);
      var $12=HEAPU32[(($11)>>2)];
      var $13=(($9)>>>0) < (($12)>>>0);
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $15=$p;
      $o2=$15;
      var $16=$p;
      var $17=((($16)-(12))|0);
      $o1=$17;
      var $18=$o1;
      var $19=(($18)|0);
      var $20=$o2;
      var $21=(($20)|0);
      var $22=$19;
      var $23=$21;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];
      var $24=$o2;
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$o1;
      var $28=(($27+8)|0);
      HEAP32[(($28)>>2)]=$26;
      __label__ = 3; break;
    case 5: 
      var $30=$1;
      var $31=(($30+8)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=((($32)-(12))|0);
      HEAP32[(($31)>>2)]=$33;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_insert($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $p;
      var $q;
      var $o2;
      var $o1;
      var $o21;
      var $o12;
      $1=$L;
      $2=$idx;
      var $3=$1;
      var $4=$2;
      var $5=_index2adr($3, $4);
      $p=$5;
      var $6=$1;
      var $7=$1;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      $q=$9;
      __label__ = 3; break;
    case 3: 
      var $11=$q;
      var $12=$p;
      var $13=(($11)>>>0) > (($12)>>>0);
      if ($13) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $15=$q;
      var $16=((($15)-(12))|0);
      $o2=$16;
      var $17=$q;
      $o1=$17;
      var $18=$o1;
      var $19=(($18)|0);
      var $20=$o2;
      var $21=(($20)|0);
      var $22=$19;
      var $23=$21;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];
      var $24=$o2;
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$o1;
      var $28=(($27+8)|0);
      HEAP32[(($28)>>2)]=$26;
      __label__ = 5; break;
    case 5: 
      var $30=$q;
      var $31=((($30)-(12))|0);
      $q=$31;
      __label__ = 3; break;
    case 6: 
      var $33=$1;
      var $34=(($33+8)|0);
      var $35=HEAP32[(($34)>>2)];
      $o21=$35;
      var $36=$p;
      $o12=$36;
      var $37=$o12;
      var $38=(($37)|0);
      var $39=$o21;
      var $40=(($39)|0);
      var $41=$38;
      var $42=$40;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];
      var $43=$o21;
      var $44=(($43+8)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$o12;
      var $47=(($46+8)|0);
      HEAP32[(($47)>>2)]=$45;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_insert["X"]=1;

function _lua_replace($L, $idx) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      var $func;
      var $o2;
      var $o1;
      $1=$L;
      $2=$idx;
      var $3=$2;
      var $4=(($3)|0)==-10001;
      if ($4) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $6=$1;
      var $7=(($6+20)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$1;
      var $10=(($9+40)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($8)|0)==(($11)|0);
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $14=$1;
      _luaG_runerror($14, ((STRING_TABLE.__str92)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 5; break;
    case 5: 
      var $16=$1;
      var $17=$1;
      var $18=$2;
      var $19=_index2adr($17, $18);
      $o=$19;
      var $20=$1;
      var $21=$2;
      var $22=(($21)|0)==-10001;
      if ($22) { __label__ = 6; break; } else { __label__ = 11; break; }
    case 6: 
      var $24=$1;
      var $25=(($24+20)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+4)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0);
      var $30=$29;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      $func=$32;
      var $33=$1;
      var $34=$1;
      var $35=(($34+8)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36)-(12))|0);
      var $38=(($37)|0);
      var $39=$38;
      var $40=HEAP32[(($39)>>2)];
      var $41=$40;
      var $42=$func;
      var $43=$42;
      var $44=(($43+12)|0);
      HEAP32[(($44)>>2)]=$41;
      var $45=$1;
      var $46=(($45+8)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(12))|0);
      var $49=(($48+8)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50)|0) >= 4;
      if ($51) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $53=$1;
      var $54=(($53+8)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=((($55)-(12))|0);
      var $57=(($56)|0);
      var $58=$57;
      var $59=HEAP32[(($58)>>2)];
      var $60=$59;
      var $61=(($60+5)|0);
      var $62=HEAPU8[($61)];
      var $63=(($62)&255);
      var $64=$63 & 3;
      var $65=(($64)|0)!=0;
      if ($65) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $67=$func;
      var $68=$67;
      var $69=$68;
      var $70=(($69+5)|0);
      var $71=HEAPU8[($70)];
      var $72=(($71)&255);
      var $73=$72 & 4;
      var $74=(($73)|0)!=0;
      if ($74) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $76=$1;
      var $77=$func;
      var $78=$77;
      var $79=$1;
      var $80=(($79+8)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=((($81)-(12))|0);
      var $83=(($82)|0);
      var $84=$83;
      var $85=HEAP32[(($84)>>2)];
      _luaC_barrierf($76, $78, $85);
      __label__ = 10; break;
    case 10: 
      __label__ = 18; break;
    case 11: 
      var $88=$1;
      var $89=(($88+8)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=((($90)-(12))|0);
      $o2=$91;
      var $92=$o;
      $o1=$92;
      var $93=$o1;
      var $94=(($93)|0);
      var $95=$o2;
      var $96=(($95)|0);
      var $97=$94;
      var $98=$96;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($97)>>2)]=HEAP32[(($98)>>2)];HEAP32[((($97)+(4))>>2)]=HEAP32[((($98)+(4))>>2)];
      var $99=$o2;
      var $100=(($99+8)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$o1;
      var $103=(($102+8)|0);
      HEAP32[(($103)>>2)]=$101;
      var $104=$2;
      var $105=(($104)|0) < -10002;
      if ($105) { __label__ = 12; break; } else { __label__ = 17; break; }
    case 12: 
      var $107=$1;
      var $108=(($107+8)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=((($109)-(12))|0);
      var $111=(($110+8)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=(($112)|0) >= 4;
      if ($113) { __label__ = 13; break; } else { __label__ = 16; break; }
    case 13: 
      var $115=$1;
      var $116=(($115+8)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=((($117)-(12))|0);
      var $119=(($118)|0);
      var $120=$119;
      var $121=HEAP32[(($120)>>2)];
      var $122=$121;
      var $123=(($122+5)|0);
      var $124=HEAPU8[($123)];
      var $125=(($124)&255);
      var $126=$125 & 3;
      var $127=(($126)|0)!=0;
      if ($127) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $129=$1;
      var $130=(($129+20)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=(($131+4)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=(($133)|0);
      var $135=$134;
      var $136=HEAP32[(($135)>>2)];
      var $137=$136;
      var $138=$137;
      var $139=$138;
      var $140=(($139+5)|0);
      var $141=HEAPU8[($140)];
      var $142=(($141)&255);
      var $143=$142 & 4;
      var $144=(($143)|0)!=0;
      if ($144) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $146=$1;
      var $147=$1;
      var $148=(($147+20)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=(($149+4)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=(($151)|0);
      var $153=$152;
      var $154=HEAP32[(($153)>>2)];
      var $155=$154;
      var $156=$155;
      var $157=$1;
      var $158=(($157+8)|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=((($159)-(12))|0);
      var $161=(($160)|0);
      var $162=$161;
      var $163=HEAP32[(($162)>>2)];
      _luaC_barrierf($146, $156, $163);
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $167=$1;
      var $168=(($167+8)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=((($169)-(12))|0);
      HEAP32[(($168)>>2)]=$170;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_replace["X"]=1;

function _lua_pushvalue($L, $idx) {
  ;
  var __label__;

  var $1;
  var $2;
  var $o2;
  var $o1;
  $1=$L;
  $2=$idx;
  var $3=$1;
  var $4=$2;
  var $5=_index2adr($3, $4);
  $o2=$5;
  var $6=$1;
  var $7=(($6+8)|0);
  var $8=HEAP32[(($7)>>2)];
  $o1=$8;
  var $9=$o1;
  var $10=(($9)|0);
  var $11=$o2;
  var $12=(($11)|0);
  var $13=$10;
  var $14=$12;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
  var $15=$o2;
  var $16=(($15+8)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=$o1;
  var $19=(($18+8)|0);
  HEAP32[(($19)>>2)]=$17;
  var $20=$1;
  var $21=$1;
  var $22=(($21+8)|0);
  var $23=HEAP32[(($22)>>2)];
  var $24=(($23+12)|0);
  HEAP32[(($22)>>2)]=$24;
  ;
  return;
}


function _lua_type($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      $1=$L;
      $2=$idx;
      var $3=$1;
      var $4=$2;
      var $5=_index2adr($3, $4);
      $o=$5;
      var $6=$o;
      var $7=(($6)|0)==((_luaO_nilobject_)|0);
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $14 = -1;__label__ = 5; break;
    case 4: 
      var $10=$o;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $14 = $12;__label__ = 5; break;
    case 5: 
      var $14;
      ;
      return $14;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_iscfunction($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      $1=$L;
      $2=$idx;
      var $3=$1;
      var $4=$2;
      var $5=_index2adr($3, $4);
      $o=$5;
      var $6=$o;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)==6;
      if ($9) { __label__ = 3; break; } else { var $22 = 0;__label__ = 4; break; }
    case 3: 
      var $11=$o;
      var $12=(($11)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      var $16=$15;
      var $17=(($16+6)|0);
      var $18=HEAPU8[($17)];
      var $19=(($18)&255);
      var $20=(($19)|0)!=0;
      var $22 = $20;__label__ = 4; break;
    case 4: 
      var $22;
      var $23=(($22)&1);
      ;
      return $23;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_isnumber($L, $idx) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $n=__stackBase__;
      var $o;
      $1=$L;
      $2=$idx;
      var $3=$1;
      var $4=$2;
      var $5=_index2adr($3, $4);
      $o=$5;
      var $6=$o;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)==3;
      if ($9) { var $15 = 1;__label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $11=$o;
      var $12=_luaV_tonumber($11, $n);
      $o=$12;
      var $13=(($12)|0)!=0;
      var $15 = $13;__label__ = 4; break;
    case 4: 
      var $15;
      var $16=(($15)&1);
      STACKTOP = __stackBase__;
      return $16;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_isstring($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $t;
      $1=$L;
      $2=$idx;
      var $3=$1;
      var $4=$2;
      var $5=_lua_type($3, $4);
      $t=$5;
      var $6=$t;
      var $7=(($6)|0)==4;
      if ($7) { var $12 = 1;__label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $9=$t;
      var $10=(($9)|0)==3;
      var $12 = $10;__label__ = 4; break;
    case 4: 
      var $12;
      var $13=(($12)&1);
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_rawequal($L, $index1, $index2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $o1;
      var $o2;
      $1=$L;
      $2=$index1;
      $3=$index2;
      var $4=$1;
      var $5=$2;
      var $6=_index2adr($4, $5);
      $o1=$6;
      var $7=$1;
      var $8=$3;
      var $9=_index2adr($7, $8);
      $o2=$9;
      var $10=$o1;
      var $11=(($10)|0)==((_luaO_nilobject_)|0);
      if ($11) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $13=$o2;
      var $14=(($13)|0)==((_luaO_nilobject_)|0);
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $21 = 0;__label__ = 6; break;
    case 5: 
      var $17=$o1;
      var $18=$o2;
      var $19=_luaO_rawequalObj($17, $18);
      var $21 = $19;__label__ = 6; break;
    case 6: 
      var $21;
      ;
      return $21;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_lessthan($L, $index1, $index2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $o1;
      var $o2;
      var $i;
      $1=$L;
      $2=$index1;
      $3=$index2;
      var $4=$1;
      var $5=$2;
      var $6=_index2adr($4, $5);
      $o1=$6;
      var $7=$1;
      var $8=$3;
      var $9=_index2adr($7, $8);
      $o2=$9;
      var $10=$o1;
      var $11=(($10)|0)==((_luaO_nilobject_)|0);
      if ($11) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $13=$o2;
      var $14=(($13)|0)==((_luaO_nilobject_)|0);
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $22 = 0;__label__ = 6; break;
    case 5: 
      var $17=$1;
      var $18=$o1;
      var $19=$o2;
      var $20=_luaV_lessthan($17, $18, $19);
      var $22 = $20;__label__ = 6; break;
    case 6: 
      var $22;
      $i=$22;
      var $23=$i;
      ;
      return $23;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_tonumber($L, $idx) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $n=__stackBase__;
      var $o;
      $2=$L;
      $3=$idx;
      var $4=$2;
      var $5=$3;
      var $6=_index2adr($4, $5);
      $o=$6;
      var $7=$o;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0)==3;
      if ($10) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $12=$o;
      var $13=_luaV_tonumber($12, $n);
      $o=$13;
      var $14=(($13)|0)!=0;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $16=$o;
      var $17=(($16)|0);
      var $18=$17;
      var $19=(tempDoubleI32[0]=HEAP32[(($18)>>2)],tempDoubleI32[1]=HEAP32[((($18)+(4))>>2)],tempDoubleF64[0]);
      $1=$19;
      __label__ = 6; break;
    case 5: 
      $1=0;
      __label__ = 6; break;
    case 6: 
      var $22=$1;
      STACKTOP = __stackBase__;
      return $22;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_tointeger($L, $idx) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $n=__stackBase__;
      var $o;
      var $res;
      var $num;
      $2=$L;
      $3=$idx;
      var $4=$2;
      var $5=$3;
      var $6=_index2adr($4, $5);
      $o=$6;
      var $7=$o;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0)==3;
      if ($10) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $12=$o;
      var $13=_luaV_tonumber($12, $n);
      $o=$13;
      var $14=(($13)|0)!=0;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $16=$o;
      var $17=(($16)|0);
      var $18=$17;
      var $19=(tempDoubleI32[0]=HEAP32[(($18)>>2)],tempDoubleI32[1]=HEAP32[((($18)+(4))>>2)],tempDoubleF64[0]);
      $num=$19;
      var $20=$num;
      var $21=(($20)&-1);
      $res=$21;
      var $22=$res;
      $1=$22;
      __label__ = 6; break;
    case 5: 
      $1=0;
      __label__ = 6; break;
    case 6: 
      var $25=$1;
      STACKTOP = __stackBase__;
      return $25;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_toboolean($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      $1=$L;
      $2=$idx;
      var $3=$1;
      var $4=$2;
      var $5=_index2adr($3, $4);
      $o=$5;
      var $6=$o;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)==0;
      if ($9) { var $24 = 1;__label__ = 6; break; } else { __label__ = 3; break; }
    case 3: 
      var $11=$o;
      var $12=(($11+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0)==1;
      if ($14) { __label__ = 4; break; } else { var $22 = 0;__label__ = 5; break; }
    case 4: 
      var $16=$o;
      var $17=(($16)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|0)==0;
      var $22 = $20;__label__ = 5; break;
    case 5: 
      var $22;
      var $24 = $22;__label__ = 6; break;
    case 6: 
      var $24;
      var $25=$24 ^ 1;
      var $26=(($25)&1);
      ;
      return $26;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_pushnil($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+8)|0);
  HEAP32[(($5)>>2)]=0;
  var $6=$1;
  var $7=$1;
  var $8=(($7+8)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=(($9+12)|0);
  HEAP32[(($8)>>2)]=$10;
  ;
  return;
}


function _lua_pushnumber($L, $n) {
  ;
  var __label__;

  var $1;
  var $2;
  var $i_o;
  $1=$L;
  $2=$n;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=HEAP32[(($4)>>2)];
  $i_o=$5;
  var $6=$2;
  var $7=$i_o;
  var $8=(($7)|0);
  var $9=$8;
  (tempDoubleF64[0]=$6,HEAP32[(($9)>>2)]=tempDoubleI32[0],HEAP32[((($9)+(4))>>2)]=tempDoubleI32[1]);
  var $10=$i_o;
  var $11=(($10+8)|0);
  HEAP32[(($11)>>2)]=3;
  var $12=$1;
  var $13=$1;
  var $14=(($13+8)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=(($15+12)|0);
  HEAP32[(($14)>>2)]=$16;
  ;
  return;
}


function _lua_pushinteger($L, $n) {
  ;
  var __label__;

  var $1;
  var $2;
  var $i_o;
  $1=$L;
  $2=$n;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=HEAP32[(($4)>>2)];
  $i_o=$5;
  var $6=$2;
  var $7=(($6)|0);
  var $8=$i_o;
  var $9=(($8)|0);
  var $10=$9;
  (tempDoubleF64[0]=$7,HEAP32[(($10)>>2)]=tempDoubleI32[0],HEAP32[((($10)+(4))>>2)]=tempDoubleI32[1]);
  var $11=$i_o;
  var $12=(($11+8)|0);
  HEAP32[(($12)>>2)]=3;
  var $13=$1;
  var $14=$1;
  var $15=(($14+8)|0);
  var $16=HEAP32[(($15)>>2)];
  var $17=(($16+12)|0);
  HEAP32[(($15)>>2)]=$17;
  ;
  return;
}


function _getcurrenv($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $func;
      $2=$L;
      var $3=$2;
      var $4=(($3+20)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$2;
      var $7=(($6+40)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($5)|0)==(($8)|0);
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$2;
      var $12=(($11+72)|0);
      var $13=(($12)|0);
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15;
      $1=$16;
      __label__ = 5; break;
    case 4: 
      var $18=$2;
      var $19=(($18+20)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+4)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|0);
      var $24=$23;
      var $25=HEAP32[(($24)>>2)];
      var $26=$25;
      $func=$26;
      var $27=$func;
      var $28=$27;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      $1=$30;
      __label__ = 5; break;
    case 5: 
      var $32=$1;
      ;
      return $32;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_pushboolean($L, $b) {
  ;
  var __label__;

  var $1;
  var $2;
  var $i_o;
  $1=$L;
  $2=$b;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=HEAP32[(($4)>>2)];
  $i_o=$5;
  var $6=$2;
  var $7=(($6)|0)!=0;
  var $8=(($7)&1);
  var $9=$i_o;
  var $10=(($9)|0);
  var $11=$10;
  HEAP32[(($11)>>2)]=$8;
  var $12=$i_o;
  var $13=(($12+8)|0);
  HEAP32[(($13)>>2)]=1;
  var $14=$1;
  var $15=$1;
  var $16=(($15+8)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=(($17+12)|0);
  HEAP32[(($16)>>2)]=$18;
  ;
  return;
}


function _lua_pushthread($L) {
  ;
  var __label__;

  var $1;
  var $i_o;
  $1=$L;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=HEAP32[(($3)>>2)];
  $i_o=$4;
  var $5=$1;
  var $6=$5;
  var $7=$i_o;
  var $8=(($7)|0);
  var $9=$8;
  HEAP32[(($9)>>2)]=$6;
  var $10=$i_o;
  var $11=(($10+8)|0);
  HEAP32[(($11)>>2)]=8;
  var $12=$1;
  var $13=$1;
  var $14=(($13+8)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=(($15+12)|0);
  HEAP32[(($14)>>2)]=$16;
  var $17=$1;
  var $18=(($17+16)|0);
  var $19=HEAP32[(($18)>>2)];
  var $20=(($19+104)|0);
  var $21=HEAP32[(($20)>>2)];
  var $22=$1;
  var $23=(($21)|0)==(($22)|0);
  var $24=(($23)&1);
  ;
  return $24;
}


function _lua_tolstring($L, $idx, $len) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $o;
      $2=$L;
      $3=$idx;
      $4=$len;
      var $5=$2;
      var $6=$3;
      var $7=_index2adr($5, $6);
      $o=$7;
      var $8=$o;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0)==4;
      if ($11) { __label__ = 10; break; } else { __label__ = 3; break; }
    case 3: 
      var $13=$2;
      var $14=$o;
      var $15=_luaV_tostring($13, $14);
      var $16=(($15)|0)!=0;
      if ($16) { __label__ = 7; break; } else { __label__ = 4; break; }
    case 4: 
      var $18=$4;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $21=$4;
      HEAP32[(($21)>>2)]=0;
      __label__ = 6; break;
    case 6: 
      $1=0;
      __label__ = 13; break;
    case 7: 
      var $24=$2;
      var $25=(($24+16)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+68)|0);
      var $28=HEAPU32[(($27)>>2)];
      var $29=$2;
      var $30=(($29+16)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+64)|0);
      var $33=HEAPU32[(($32)>>2)];
      var $34=(($28)>>>0) >= (($33)>>>0);
      if ($34) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $36=$2;
      _luaC_step($36);
      __label__ = 9; break;
    case 9: 
      var $38=$2;
      var $39=$3;
      var $40=_index2adr($38, $39);
      $o=$40;
      __label__ = 10; break;
    case 10: 
      var $42=$4;
      var $43=(($42)|0)!=0;
      if ($43) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $45=$o;
      var $46=(($45)|0);
      var $47=$46;
      var $48=HEAP32[(($47)>>2)];
      var $49=$48;
      var $50=$49;
      var $51=(($50+12)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$4;
      HEAP32[(($53)>>2)]=$52;
      __label__ = 12; break;
    case 12: 
      var $55=$o;
      var $56=(($55)|0);
      var $57=$56;
      var $58=HEAP32[(($57)>>2)];
      var $59=$58;
      var $60=(($59+16)|0);
      var $61=$60;
      $1=$61;
      __label__ = 13; break;
    case 13: 
      var $63=$1;
      ;
      return $63;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_tolstring["X"]=1;

function _lua_objlen($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $o;
      var $l;
      $2=$L;
      $3=$idx;
      var $4=$2;
      var $5=$3;
      var $6=_index2adr($4, $5);
      $o=$6;
      var $7=$o;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      if ((($9)|0) == 4) {
        __label__ = 3; break;
      }
      else if ((($9)|0) == 7) {
        __label__ = 4; break;
      }
      else if ((($9)|0) == 5) {
        __label__ = 5; break;
      }
      else if ((($9)|0) == 3) {
        __label__ = 6; break;
      }
      else {
      __label__ = 10; break;
      }
      
    case 3: 
      var $11=$o;
      var $12=(($11)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      var $16=$15;
      var $17=(($16+12)|0);
      var $18=HEAP32[(($17)>>2)];
      $1=$18;
      __label__ = 11; break;
    case 4: 
      var $20=$o;
      var $21=(($20)|0);
      var $22=$21;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23;
      var $25=$24;
      var $26=(($25+16)|0);
      var $27=HEAP32[(($26)>>2)];
      $1=$27;
      __label__ = 11; break;
    case 5: 
      var $29=$o;
      var $30=(($29)|0);
      var $31=$30;
      var $32=HEAP32[(($31)>>2)];
      var $33=$32;
      var $34=_luaH_getn($33);
      $1=$34;
      __label__ = 11; break;
    case 6: 
      var $36=$2;
      var $37=$o;
      var $38=_luaV_tostring($36, $37);
      var $39=(($38)|0)!=0;
      if ($39) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $41=$o;
      var $42=(($41)|0);
      var $43=$42;
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      var $46=$45;
      var $47=(($46+12)|0);
      var $48=HEAP32[(($47)>>2)];
      var $51 = $48;__label__ = 9; break;
    case 8: 
      var $51 = 0;__label__ = 9; break;
    case 9: 
      var $51;
      $l=$51;
      var $52=$l;
      $1=$52;
      __label__ = 11; break;
    case 10: 
      $1=0;
      __label__ = 11; break;
    case 11: 
      var $55=$1;
      ;
      return $55;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_objlen["X"]=1;

function _lua_touserdata($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $o;
      $2=$L;
      $3=$idx;
      var $4=$2;
      var $5=$3;
      var $6=_index2adr($4, $5);
      $o=$6;
      var $7=$o;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      if ((($9)|0) == 7) {
        __label__ = 3; break;
      }
      else if ((($9)|0) == 2) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      var $11=$o;
      var $12=(($11)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      var $16=(($15+20)|0);
      var $17=$16;
      $1=$17;
      __label__ = 6; break;
    case 4: 
      var $19=$o;
      var $20=(($19)|0);
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      $1=$22;
      __label__ = 6; break;
    case 5: 
      $1=0;
      __label__ = 6; break;
    case 6: 
      var $25=$1;
      ;
      return $25;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_tothread($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      $1=$L;
      $2=$idx;
      var $3=$1;
      var $4=$2;
      var $5=_index2adr($3, $4);
      $o=$5;
      var $6=$o;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)==8;
      if ($9) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $18 = 0;__label__ = 5; break;
    case 4: 
      var $12=$o;
      var $13=(($12)|0);
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15;
      var $18 = $16;__label__ = 5; break;
    case 5: 
      var $18;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_topointer($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $o;
      $2=$L;
      $3=$idx;
      var $4=$2;
      var $5=$3;
      var $6=_index2adr($4, $5);
      $o=$6;
      var $7=$o;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      if ((($9)|0) == 5) {
        __label__ = 3; break;
      }
      else if ((($9)|0) == 6) {
        __label__ = 4; break;
      }
      else if ((($9)|0) == 8) {
        __label__ = 5; break;
      }
      else if ((($9)|0) == 7 || (($9)|0) == 2) {
        __label__ = 6; break;
      }
      else {
      __label__ = 7; break;
      }
      
    case 3: 
      var $11=$o;
      var $12=(($11)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      var $16=$15;
      $1=$16;
      __label__ = 8; break;
    case 4: 
      var $18=$o;
      var $19=(($18)|0);
      var $20=$19;
      var $21=HEAP32[(($20)>>2)];
      var $22=$21;
      var $23=$22;
      $1=$23;
      __label__ = 8; break;
    case 5: 
      var $25=$o;
      var $26=(($25)|0);
      var $27=$26;
      var $28=HEAP32[(($27)>>2)];
      var $29=$28;
      var $30=$29;
      $1=$30;
      __label__ = 8; break;
    case 6: 
      var $32=$2;
      var $33=$3;
      var $34=_lua_touserdata($32, $33);
      $1=$34;
      __label__ = 8; break;
    case 7: 
      $1=0;
      __label__ = 8; break;
    case 8: 
      var $37=$1;
      ;
      return $37;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_pushlstring($L, $s, $len) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i_o;
      $1=$L;
      $2=$s;
      $3=$len;
      var $4=$1;
      var $5=(($4+16)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+68)|0);
      var $8=HEAPU32[(($7)>>2)];
      var $9=$1;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+64)|0);
      var $13=HEAPU32[(($12)>>2)];
      var $14=(($8)>>>0) >= (($13)>>>0);
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $16=$1;
      _luaC_step($16);
      __label__ = 4; break;
    case 4: 
      var $18=$1;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      $i_o=$20;
      var $21=$1;
      var $22=$2;
      var $23=$3;
      var $24=_luaS_newlstr($21, $22, $23);
      var $25=$24;
      var $26=$i_o;
      var $27=(($26)|0);
      var $28=$27;
      HEAP32[(($28)>>2)]=$25;
      var $29=$i_o;
      var $30=(($29+8)|0);
      HEAP32[(($30)>>2)]=4;
      var $31=$1;
      var $32=$1;
      var $33=(($32+8)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+12)|0);
      HEAP32[(($33)>>2)]=$35;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_pushstring($L, $s) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$s;
      var $3=$2;
      var $4=(($3)|0)==0;
      if ($4) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $6=$1;
      _lua_pushnil($6);
      __label__ = 5; break;
    case 4: 
      var $8=$1;
      var $9=$2;
      var $10=$2;
      var $11=_strlen($10);
      _lua_pushlstring($8, $9, $11);
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_pushvfstring($L, $fmt, $argp) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$L;
      $2=$fmt;
      $3=$argp;
      var $4=$1;
      var $5=(($4+16)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+68)|0);
      var $8=HEAPU32[(($7)>>2)];
      var $9=$1;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+64)|0);
      var $13=HEAPU32[(($12)>>2)];
      var $14=(($8)>>>0) >= (($13)>>>0);
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $16=$1;
      _luaC_step($16);
      __label__ = 4; break;
    case 4: 
      var $18=$1;
      var $19=$2;
      var $20=$3;
      var $21=_luaO_pushvfstring($18, $19, $20);
      $ret=$21;
      var $22=$ret;
      ;
      return $22;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_pushfstring($L, $fmt) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $ret;
      var $argp=__stackBase__;
      $1=$L;
      $2=$fmt;
      var $3=$1;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+68)|0);
      var $7=HEAPU32[(($6)>>2)];
      var $8=$1;
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10+64)|0);
      var $12=HEAPU32[(($11)>>2)];
      var $13=(($7)>>>0) >= (($12)>>>0);
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $15=$1;
      _luaC_step($15);
      __label__ = 4; break;
    case 4: 
      var $17=$argp;
      HEAP32[(($17)>>2)]=arguments[_lua_pushfstring.length];
      var $18=$1;
      var $19=$2;
      var $20=HEAP32[(($argp)>>2)];
      var $21=_luaO_pushvfstring($18, $19, $20);
      $ret=$21;
      var $22=$argp;
      ;
      var $23=$ret;
      STACKTOP = __stackBase__;
      return $23;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_pushcclosure($L, $fn, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $cl;
      var $o2;
      var $o1;
      var $i_o;
      $1=$L;
      $2=$fn;
      $3=$n;
      var $4=$1;
      var $5=(($4+16)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+68)|0);
      var $8=HEAPU32[(($7)>>2)];
      var $9=$1;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+64)|0);
      var $13=HEAPU32[(($12)>>2)];
      var $14=(($8)>>>0) >= (($13)>>>0);
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $16=$1;
      _luaC_step($16);
      __label__ = 4; break;
    case 4: 
      var $18=$1;
      var $19=$1;
      var $20=$3;
      var $21=$1;
      var $22=_getcurrenv($21);
      var $23=_luaF_newCclosure($19, $20, $22);
      $cl=$23;
      var $24=$2;
      var $25=$cl;
      var $26=$25;
      var $27=(($26+16)|0);
      HEAP32[(($27)>>2)]=$24;
      var $28=$3;
      var $29=$1;
      var $30=(($29+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(((-$28))|0);
      var $33=(($31+($32)*(12))|0);
      HEAP32[(($30)>>2)]=$33;
      __label__ = 5; break;
    case 5: 
      var $35=$3;
      var $36=((($35)-(1))|0);
      $3=$36;
      var $37=(($35)|0)!=0;
      if ($37) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $39=$1;
      var $40=(($39+8)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$3;
      var $43=(($41+($42)*(12))|0);
      $o2=$43;
      var $44=$3;
      var $45=$cl;
      var $46=$45;
      var $47=(($46+20)|0);
      var $48=(($47+($44)*(12))|0);
      $o1=$48;
      var $49=$o1;
      var $50=(($49)|0);
      var $51=$o2;
      var $52=(($51)|0);
      var $53=$50;
      var $54=$52;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($53)>>2)]=HEAP32[(($54)>>2)];HEAP32[((($53)+(4))>>2)]=HEAP32[((($54)+(4))>>2)];
      var $55=$o2;
      var $56=(($55+8)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$o1;
      var $59=(($58+8)|0);
      HEAP32[(($59)>>2)]=$57;
      __label__ = 5; break;
    case 7: 
      var $61=$1;
      var $62=(($61+8)|0);
      var $63=HEAP32[(($62)>>2)];
      $i_o=$63;
      var $64=$cl;
      var $65=$64;
      var $66=$i_o;
      var $67=(($66)|0);
      var $68=$67;
      HEAP32[(($68)>>2)]=$65;
      var $69=$i_o;
      var $70=(($69+8)|0);
      HEAP32[(($70)>>2)]=6;
      var $71=$1;
      var $72=$1;
      var $73=(($72+8)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74+12)|0);
      HEAP32[(($73)>>2)]=$75;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_pushcclosure["X"]=1;

function _lua_gettable($L, $idx) {
  ;
  var __label__;

  var $1;
  var $2;
  var $t;
  $1=$L;
  $2=$idx;
  var $3=$1;
  var $4=$2;
  var $5=_index2adr($3, $4);
  $t=$5;
  var $6=$1;
  var $7=$1;
  var $8=$t;
  var $9=$1;
  var $10=(($9+8)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=((($11)-(12))|0);
  var $13=$1;
  var $14=(($13+8)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=((($15)-(12))|0);
  _luaV_gettable($7, $8, $12, $16);
  ;
  return;
}


function _lua_getfield($L, $idx, $k) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $t;
  var $key=__stackBase__;
  var $i_o;
  $1=$L;
  $2=$idx;
  $3=$k;
  var $4=$1;
  var $5=$2;
  var $6=_index2adr($4, $5);
  $t=$6;
  var $7=$1;
  $i_o=$key;
  var $8=$1;
  var $9=$3;
  var $10=$3;
  var $11=_strlen($10);
  var $12=_luaS_newlstr($8, $9, $11);
  var $13=$12;
  var $14=$i_o;
  var $15=(($14)|0);
  var $16=$15;
  HEAP32[(($16)>>2)]=$13;
  var $17=$i_o;
  var $18=(($17+8)|0);
  HEAP32[(($18)>>2)]=4;
  var $19=$1;
  var $20=$t;
  var $21=$1;
  var $22=(($21+8)|0);
  var $23=HEAP32[(($22)>>2)];
  _luaV_gettable($19, $20, $key, $23);
  var $24=$1;
  var $25=$1;
  var $26=(($25+8)|0);
  var $27=HEAP32[(($26)>>2)];
  var $28=(($27+12)|0);
  HEAP32[(($26)>>2)]=$28;
  STACKTOP = __stackBase__;
  return;
}


function _lua_rawget($L, $idx) {
  ;
  var __label__;

  var $1;
  var $2;
  var $t;
  var $o2;
  var $o1;
  $1=$L;
  $2=$idx;
  var $3=$1;
  var $4=$2;
  var $5=_index2adr($3, $4);
  $t=$5;
  var $6=$1;
  var $7=$t;
  var $8=(($7)|0);
  var $9=$8;
  var $10=HEAP32[(($9)>>2)];
  var $11=$10;
  var $12=$1;
  var $13=(($12+8)|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=((($14)-(12))|0);
  var $16=_luaH_get($11, $15);
  $o2=$16;
  var $17=$1;
  var $18=(($17+8)|0);
  var $19=HEAP32[(($18)>>2)];
  var $20=((($19)-(12))|0);
  $o1=$20;
  var $21=$o1;
  var $22=(($21)|0);
  var $23=$o2;
  var $24=(($23)|0);
  var $25=$22;
  var $26=$24;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];
  var $27=$o2;
  var $28=(($27+8)|0);
  var $29=HEAP32[(($28)>>2)];
  var $30=$o1;
  var $31=(($30+8)|0);
  HEAP32[(($31)>>2)]=$29;
  ;
  return;
}


function _lua_rawgeti($L, $idx, $n) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $o;
  var $o2;
  var $o1;
  $1=$L;
  $2=$idx;
  $3=$n;
  var $4=$1;
  var $5=$2;
  var $6=_index2adr($4, $5);
  $o=$6;
  var $7=$1;
  var $8=$o;
  var $9=(($8)|0);
  var $10=$9;
  var $11=HEAP32[(($10)>>2)];
  var $12=$11;
  var $13=$3;
  var $14=_luaH_getnum($12, $13);
  $o2=$14;
  var $15=$1;
  var $16=(($15+8)|0);
  var $17=HEAP32[(($16)>>2)];
  $o1=$17;
  var $18=$o1;
  var $19=(($18)|0);
  var $20=$o2;
  var $21=(($20)|0);
  var $22=$19;
  var $23=$21;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];
  var $24=$o2;
  var $25=(($24+8)|0);
  var $26=HEAP32[(($25)>>2)];
  var $27=$o1;
  var $28=(($27+8)|0);
  HEAP32[(($28)>>2)]=$26;
  var $29=$1;
  var $30=$1;
  var $31=(($30+8)|0);
  var $32=HEAP32[(($31)>>2)];
  var $33=(($32+12)|0);
  HEAP32[(($31)>>2)]=$33;
  ;
  return;
}


function _lua_createtable($L, $narray, $nrec) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i_o;
      $1=$L;
      $2=$narray;
      $3=$nrec;
      var $4=$1;
      var $5=(($4+16)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+68)|0);
      var $8=HEAPU32[(($7)>>2)];
      var $9=$1;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+64)|0);
      var $13=HEAPU32[(($12)>>2)];
      var $14=(($8)>>>0) >= (($13)>>>0);
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $16=$1;
      _luaC_step($16);
      __label__ = 4; break;
    case 4: 
      var $18=$1;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      $i_o=$20;
      var $21=$1;
      var $22=$2;
      var $23=$3;
      var $24=_luaH_new($21, $22, $23);
      var $25=$24;
      var $26=$i_o;
      var $27=(($26)|0);
      var $28=$27;
      HEAP32[(($28)>>2)]=$25;
      var $29=$i_o;
      var $30=(($29+8)|0);
      HEAP32[(($30)>>2)]=5;
      var $31=$1;
      var $32=$1;
      var $33=(($32+8)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+12)|0);
      HEAP32[(($33)>>2)]=$35;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_getmetatable($L, $objindex) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $obj;
      var $mt;
      var $res;
      var $i_o;
      $1=$L;
      $2=$objindex;
      $mt=0;
      var $3=$1;
      var $4=$2;
      var $5=_index2adr($3, $4);
      $obj=$5;
      var $6=$obj;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      if ((($8)|0) == 5) {
        __label__ = 3; break;
      }
      else if ((($8)|0) == 7) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      var $10=$obj;
      var $11=(($10)|0);
      var $12=$11;
      var $13=HEAP32[(($12)>>2)];
      var $14=$13;
      var $15=(($14+8)|0);
      var $16=HEAP32[(($15)>>2)];
      $mt=$16;
      __label__ = 6; break;
    case 4: 
      var $18=$obj;
      var $19=(($18)|0);
      var $20=$19;
      var $21=HEAP32[(($20)>>2)];
      var $22=$21;
      var $23=$22;
      var $24=(($23+8)|0);
      var $25=HEAP32[(($24)>>2)];
      $mt=$25;
      __label__ = 6; break;
    case 5: 
      var $27=$obj;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$1;
      var $31=(($30+16)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+132)|0);
      var $34=(($33+($29<<2))|0);
      var $35=HEAP32[(($34)>>2)];
      $mt=$35;
      __label__ = 6; break;
    case 6: 
      var $37=$mt;
      var $38=(($37)|0)==0;
      if ($38) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $res=0;
      __label__ = 9; break;
    case 8: 
      var $41=$1;
      var $42=(($41+8)|0);
      var $43=HEAP32[(($42)>>2)];
      $i_o=$43;
      var $44=$mt;
      var $45=$44;
      var $46=$i_o;
      var $47=(($46)|0);
      var $48=$47;
      HEAP32[(($48)>>2)]=$45;
      var $49=$i_o;
      var $50=(($49+8)|0);
      HEAP32[(($50)>>2)]=5;
      var $51=$1;
      var $52=$1;
      var $53=(($52+8)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+12)|0);
      HEAP32[(($53)>>2)]=$55;
      $res=1;
      __label__ = 9; break;
    case 9: 
      var $57=$res;
      ;
      return $57;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_getmetatable["X"]=1;

function _lua_getfenv($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      var $i_o;
      var $i_o1;
      var $o2;
      var $o1;
      $1=$L;
      $2=$idx;
      var $3=$1;
      var $4=$2;
      var $5=_index2adr($3, $4);
      $o=$5;
      var $6=$1;
      var $7=$o;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      if ((($9)|0) == 6) {
        __label__ = 3; break;
      }
      else if ((($9)|0) == 7) {
        __label__ = 4; break;
      }
      else if ((($9)|0) == 8) {
        __label__ = 5; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 3: 
      var $11=$1;
      var $12=(($11+8)|0);
      var $13=HEAP32[(($12)>>2)];
      $i_o=$13;
      var $14=$o;
      var $15=(($14)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      var $19=$18;
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$21;
      var $23=$i_o;
      var $24=(($23)|0);
      var $25=$24;
      HEAP32[(($25)>>2)]=$22;
      var $26=$i_o;
      var $27=(($26+8)|0);
      HEAP32[(($27)>>2)]=5;
      __label__ = 7; break;
    case 4: 
      var $29=$1;
      var $30=(($29+8)|0);
      var $31=HEAP32[(($30)>>2)];
      $i_o1=$31;
      var $32=$o;
      var $33=(($32)|0);
      var $34=$33;
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      var $37=$36;
      var $38=(($37+12)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$39;
      var $41=$i_o1;
      var $42=(($41)|0);
      var $43=$42;
      HEAP32[(($43)>>2)]=$40;
      var $44=$i_o1;
      var $45=(($44+8)|0);
      HEAP32[(($45)>>2)]=5;
      __label__ = 7; break;
    case 5: 
      var $47=$o;
      var $48=(($47)|0);
      var $49=$48;
      var $50=HEAP32[(($49)>>2)];
      var $51=$50;
      var $52=(($51+72)|0);
      $o2=$52;
      var $53=$1;
      var $54=(($53+8)|0);
      var $55=HEAP32[(($54)>>2)];
      $o1=$55;
      var $56=$o1;
      var $57=(($56)|0);
      var $58=$o2;
      var $59=(($58)|0);
      var $60=$57;
      var $61=$59;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($60)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];
      var $62=$o2;
      var $63=(($62+8)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$o1;
      var $66=(($65+8)|0);
      HEAP32[(($66)>>2)]=$64;
      __label__ = 7; break;
    case 6: 
      var $68=$1;
      var $69=(($68+8)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+8)|0);
      HEAP32[(($71)>>2)]=0;
      __label__ = 7; break;
    case 7: 
      var $73=$1;
      var $74=$1;
      var $75=(($74+8)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76+12)|0);
      HEAP32[(($75)>>2)]=$77;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_getfenv["X"]=1;

function _lua_settable($L, $idx) {
  ;
  var __label__;

  var $1;
  var $2;
  var $t;
  $1=$L;
  $2=$idx;
  var $3=$1;
  var $4=$1;
  var $5=$2;
  var $6=_index2adr($4, $5);
  $t=$6;
  var $7=$1;
  var $8=$1;
  var $9=$t;
  var $10=$1;
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  var $13=((($12)-(24))|0);
  var $14=$1;
  var $15=(($14+8)|0);
  var $16=HEAP32[(($15)>>2)];
  var $17=((($16)-(12))|0);
  _luaV_settable($8, $9, $13, $17);
  var $18=$1;
  var $19=(($18+8)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=((($20)-(24))|0);
  HEAP32[(($19)>>2)]=$21;
  ;
  return;
}


function _lua_setfield($L, $idx, $k) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $t;
  var $key=__stackBase__;
  var $i_o;
  $1=$L;
  $2=$idx;
  $3=$k;
  var $4=$1;
  var $5=$1;
  var $6=$2;
  var $7=_index2adr($5, $6);
  $t=$7;
  var $8=$1;
  $i_o=$key;
  var $9=$1;
  var $10=$3;
  var $11=$3;
  var $12=_strlen($11);
  var $13=_luaS_newlstr($9, $10, $12);
  var $14=$13;
  var $15=$i_o;
  var $16=(($15)|0);
  var $17=$16;
  HEAP32[(($17)>>2)]=$14;
  var $18=$i_o;
  var $19=(($18+8)|0);
  HEAP32[(($19)>>2)]=4;
  var $20=$1;
  var $21=$t;
  var $22=$1;
  var $23=(($22+8)|0);
  var $24=HEAP32[(($23)>>2)];
  var $25=((($24)-(12))|0);
  _luaV_settable($20, $21, $key, $25);
  var $26=$1;
  var $27=(($26+8)|0);
  var $28=HEAP32[(($27)>>2)];
  var $29=((($28)-(12))|0);
  HEAP32[(($27)>>2)]=$29;
  STACKTOP = __stackBase__;
  return;
}


function _lua_rawset($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $t;
      var $o2;
      var $o1;
      $1=$L;
      $2=$idx;
      var $3=$1;
      var $4=$1;
      var $5=$2;
      var $6=_index2adr($4, $5);
      $t=$6;
      var $7=$1;
      var $8=$1;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=((($10)-(12))|0);
      $o2=$11;
      var $12=$1;
      var $13=$t;
      var $14=(($13)|0);
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=$16;
      var $18=$1;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=((($20)-(24))|0);
      var $22=_luaH_set($12, $17, $21);
      $o1=$22;
      var $23=$o1;
      var $24=(($23)|0);
      var $25=$o2;
      var $26=(($25)|0);
      var $27=$24;
      var $28=$26;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];
      var $29=$o2;
      var $30=(($29+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$o1;
      var $33=(($32+8)|0);
      HEAP32[(($33)>>2)]=$31;
      var $34=$1;
      var $35=(($34+8)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36)-(12))|0);
      var $38=(($37+8)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)|0) >= 4;
      if ($40) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $42=$1;
      var $43=(($42+8)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=((($44)-(12))|0);
      var $46=(($45)|0);
      var $47=$46;
      var $48=HEAP32[(($47)>>2)];
      var $49=$48;
      var $50=(($49+5)|0);
      var $51=HEAPU8[($50)];
      var $52=(($51)&255);
      var $53=$52 & 3;
      var $54=(($53)|0)!=0;
      if ($54) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $56=$t;
      var $57=(($56)|0);
      var $58=$57;
      var $59=HEAP32[(($58)>>2)];
      var $60=$59;
      var $61=$60;
      var $62=$61;
      var $63=(($62+5)|0);
      var $64=HEAPU8[($63)];
      var $65=(($64)&255);
      var $66=$65 & 4;
      var $67=(($66)|0)!=0;
      if ($67) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $69=$1;
      var $70=$t;
      var $71=(($70)|0);
      var $72=$71;
      var $73=HEAP32[(($72)>>2)];
      var $74=$73;
      _luaC_barrierback($69, $74);
      __label__ = 6; break;
    case 6: 
      var $76=$1;
      var $77=(($76+8)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=((($78)-(24))|0);
      HEAP32[(($77)>>2)]=$79;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_rawset["X"]=1;

function _lua_rawseti($L, $idx, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $o;
      var $o2;
      var $o1;
      $1=$L;
      $2=$idx;
      $3=$n;
      var $4=$1;
      var $5=$1;
      var $6=$2;
      var $7=_index2adr($5, $6);
      $o=$7;
      var $8=$1;
      var $9=$1;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=((($11)-(12))|0);
      $o2=$12;
      var $13=$1;
      var $14=$o;
      var $15=(($14)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      var $19=$3;
      var $20=_luaH_setnum($13, $18, $19);
      $o1=$20;
      var $21=$o1;
      var $22=(($21)|0);
      var $23=$o2;
      var $24=(($23)|0);
      var $25=$22;
      var $26=$24;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];
      var $27=$o2;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$o1;
      var $31=(($30+8)|0);
      HEAP32[(($31)>>2)]=$29;
      var $32=$1;
      var $33=(($32+8)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=((($34)-(12))|0);
      var $36=(($35+8)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|0) >= 4;
      if ($38) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $40=$1;
      var $41=(($40+8)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=((($42)-(12))|0);
      var $44=(($43)|0);
      var $45=$44;
      var $46=HEAP32[(($45)>>2)];
      var $47=$46;
      var $48=(($47+5)|0);
      var $49=HEAPU8[($48)];
      var $50=(($49)&255);
      var $51=$50 & 3;
      var $52=(($51)|0)!=0;
      if ($52) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $54=$o;
      var $55=(($54)|0);
      var $56=$55;
      var $57=HEAP32[(($56)>>2)];
      var $58=$57;
      var $59=$58;
      var $60=$59;
      var $61=(($60+5)|0);
      var $62=HEAPU8[($61)];
      var $63=(($62)&255);
      var $64=$63 & 4;
      var $65=(($64)|0)!=0;
      if ($65) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $67=$1;
      var $68=$o;
      var $69=(($68)|0);
      var $70=$69;
      var $71=HEAP32[(($70)>>2)];
      var $72=$71;
      _luaC_barrierback($67, $72);
      __label__ = 6; break;
    case 6: 
      var $74=$1;
      var $75=(($74+8)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=((($76)-(12))|0);
      HEAP32[(($75)>>2)]=$77;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_rawseti["X"]=1;

function _lua_setmetatable($L, $objindex) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $obj;
      var $mt;
      $1=$L;
      $2=$objindex;
      var $3=$1;
      var $4=$1;
      var $5=$2;
      var $6=_index2adr($4, $5);
      $obj=$6;
      var $7=$1;
      var $8=$1;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=((($10)-(12))|0);
      var $12=(($11+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0)==0;
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $mt=0;
      __label__ = 5; break;
    case 4: 
      var $17=$1;
      var $18=$1;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=((($20)-(12))|0);
      var $22=(($21)|0);
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      $mt=$25;
      __label__ = 5; break;
    case 5: 
      var $27=$obj;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      if ((($29)|0) == 5) {
        __label__ = 6; break;
      }
      else if ((($29)|0) == 7) {
        __label__ = 12; break;
      }
      else {
      __label__ = 18; break;
      }
      
    case 6: 
      var $31=$mt;
      var $32=$obj;
      var $33=(($32)|0);
      var $34=$33;
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      var $37=(($36+8)|0);
      HEAP32[(($37)>>2)]=$31;
      var $38=$mt;
      var $39=(($38)|0)!=0;
      if ($39) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $41=$mt;
      var $42=$41;
      var $43=$42;
      var $44=(($43+5)|0);
      var $45=HEAPU8[($44)];
      var $46=(($45)&255);
      var $47=$46 & 3;
      var $48=(($47)|0)!=0;
      if ($48) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $50=$obj;
      var $51=(($50)|0);
      var $52=$51;
      var $53=HEAP32[(($52)>>2)];
      var $54=$53;
      var $55=$54;
      var $56=$55;
      var $57=(($56+5)|0);
      var $58=HEAPU8[($57)];
      var $59=(($58)&255);
      var $60=$59 & 4;
      var $61=(($60)|0)!=0;
      if ($61) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $63=$1;
      var $64=$obj;
      var $65=(($64)|0);
      var $66=$65;
      var $67=HEAP32[(($66)>>2)];
      var $68=$67;
      _luaC_barrierback($63, $68);
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      __label__ = 19; break;
    case 12: 
      var $72=$mt;
      var $73=$obj;
      var $74=(($73)|0);
      var $75=$74;
      var $76=HEAP32[(($75)>>2)];
      var $77=$76;
      var $78=$77;
      var $79=(($78+8)|0);
      HEAP32[(($79)>>2)]=$72;
      var $80=$mt;
      var $81=(($80)|0)!=0;
      if ($81) { __label__ = 13; break; } else { __label__ = 17; break; }
    case 13: 
      var $83=$mt;
      var $84=$83;
      var $85=$84;
      var $86=(($85+5)|0);
      var $87=HEAPU8[($86)];
      var $88=(($87)&255);
      var $89=$88 & 3;
      var $90=(($89)|0)!=0;
      if ($90) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $92=$obj;
      var $93=(($92)|0);
      var $94=$93;
      var $95=HEAP32[(($94)>>2)];
      var $96=$95;
      var $97=$96;
      var $98=$97;
      var $99=(($98+5)|0);
      var $100=HEAPU8[($99)];
      var $101=(($100)&255);
      var $102=$101 & 4;
      var $103=(($102)|0)!=0;
      if ($103) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $105=$1;
      var $106=$obj;
      var $107=(($106)|0);
      var $108=$107;
      var $109=HEAP32[(($108)>>2)];
      var $110=$109;
      var $111=$110;
      var $112=$mt;
      var $113=$112;
      _luaC_barrierf($105, $111, $113);
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      __label__ = 19; break;
    case 18: 
      var $117=$mt;
      var $118=$obj;
      var $119=(($118+8)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$1;
      var $122=(($121+16)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+132)|0);
      var $125=(($124+($120<<2))|0);
      HEAP32[(($125)>>2)]=$117;
      __label__ = 19; break;
    case 19: 
      var $127=$1;
      var $128=(($127+8)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=((($129)-(12))|0);
      HEAP32[(($128)>>2)]=$130;
      ;
      return 1;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_setmetatable["X"]=1;

function _lua_setfenv($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      var $res;
      var $i_o;
      $1=$L;
      $2=$idx;
      $res=1;
      var $3=$1;
      var $4=$1;
      var $5=$2;
      var $6=_index2adr($4, $5);
      $o=$6;
      var $7=$1;
      var $8=$1;
      var $9=$o;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      if ((($11)|0) == 6) {
        __label__ = 3; break;
      }
      else if ((($11)|0) == 7) {
        __label__ = 4; break;
      }
      else if ((($11)|0) == 8) {
        __label__ = 5; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 3: 
      var $13=$1;
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=((($15)-(12))|0);
      var $17=(($16)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      var $21=$o;
      var $22=(($21)|0);
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      var $26=$25;
      var $27=(($26+12)|0);
      HEAP32[(($27)>>2)]=$20;
      __label__ = 7; break;
    case 4: 
      var $29=$1;
      var $30=(($29+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=((($31)-(12))|0);
      var $33=(($32)|0);
      var $34=$33;
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      var $37=$o;
      var $38=(($37)|0);
      var $39=$38;
      var $40=HEAP32[(($39)>>2)];
      var $41=$40;
      var $42=$41;
      var $43=(($42+12)|0);
      HEAP32[(($43)>>2)]=$36;
      __label__ = 7; break;
    case 5: 
      var $45=$o;
      var $46=(($45)|0);
      var $47=$46;
      var $48=HEAP32[(($47)>>2)];
      var $49=$48;
      var $50=(($49+72)|0);
      $i_o=$50;
      var $51=$1;
      var $52=(($51+8)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=((($53)-(12))|0);
      var $55=(($54)|0);
      var $56=$55;
      var $57=HEAP32[(($56)>>2)];
      var $58=$57;
      var $59=$58;
      var $60=$i_o;
      var $61=(($60)|0);
      var $62=$61;
      HEAP32[(($62)>>2)]=$59;
      var $63=$i_o;
      var $64=(($63+8)|0);
      HEAP32[(($64)>>2)]=5;
      __label__ = 7; break;
    case 6: 
      $res=0;
      __label__ = 7; break;
    case 7: 
      var $67=$res;
      var $68=(($67)|0)!=0;
      if ($68) { __label__ = 8; break; } else { __label__ = 12; break; }
    case 8: 
      var $70=$1;
      var $71=(($70+8)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=((($72)-(12))|0);
      var $74=(($73)|0);
      var $75=$74;
      var $76=HEAP32[(($75)>>2)];
      var $77=$76;
      var $78=$77;
      var $79=$78;
      var $80=(($79+5)|0);
      var $81=HEAPU8[($80)];
      var $82=(($81)&255);
      var $83=$82 & 3;
      var $84=(($83)|0)!=0;
      if ($84) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $86=$o;
      var $87=(($86)|0);
      var $88=$87;
      var $89=HEAP32[(($88)>>2)];
      var $90=$89;
      var $91=(($90+5)|0);
      var $92=HEAPU8[($91)];
      var $93=(($92)&255);
      var $94=$93 & 4;
      var $95=(($94)|0)!=0;
      if ($95) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $97=$1;
      var $98=$o;
      var $99=(($98)|0);
      var $100=$99;
      var $101=HEAP32[(($100)>>2)];
      var $102=$1;
      var $103=(($102+8)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=((($104)-(12))|0);
      var $106=(($105)|0);
      var $107=$106;
      var $108=HEAP32[(($107)>>2)];
      var $109=$108;
      var $110=$109;
      _luaC_barrierf($97, $101, $110);
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $113=$1;
      var $114=(($113+8)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=((($115)-(12))|0);
      HEAP32[(($114)>>2)]=$116;
      var $117=$res;
      ;
      return $117;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_setfenv["X"]=1;

function _lua_call($L, $nargs, $nresults) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $func;
      $1=$L;
      $2=$nargs;
      $3=$nresults;
      var $4=$1;
      var $5=$1;
      var $6=$1;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$2;
      var $10=((($9)+(1))|0);
      var $11=(((-$10))|0);
      var $12=(($8+($11)*(12))|0);
      $func=$12;
      var $13=$1;
      var $14=$func;
      var $15=$3;
      _luaD_call($13, $14, $15);
      var $16=$3;
      var $17=(($16)|0)==-1;
      if ($17) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $19=$1;
      var $20=(($19+8)|0);
      var $21=HEAPU32[(($20)>>2)];
      var $22=$1;
      var $23=(($22+20)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+8)|0);
      var $26=HEAPU32[(($25)>>2)];
      var $27=(($21)>>>0) >= (($26)>>>0);
      if ($27) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $29=$1;
      var $30=(($29+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$1;
      var $33=(($32+20)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+8)|0);
      HEAP32[(($35)>>2)]=$31;
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_pcall($L, $nargs, $nresults, $errfunc) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $c=__stackBase__;
      var $status;
      var $func;
      var $o;
      $1=$L;
      $2=$nargs;
      $3=$nresults;
      $4=$errfunc;
      var $5=$1;
      var $6=$1;
      var $7=$4;
      var $8=(($7)|0)==0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $func=0;
      __label__ = 5; break;
    case 4: 
      var $11=$1;
      var $12=$4;
      var $13=_index2adr($11, $12);
      $o=$13;
      var $14=$1;
      var $15=$o;
      var $16=$15;
      var $17=$1;
      var $18=(($17+32)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      var $21=$16;
      var $22=$20;
      var $23=((($21)-($22))|0);
      $func=$23;
      __label__ = 5; break;
    case 5: 
      var $25=$1;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$2;
      var $29=((($28)+(1))|0);
      var $30=(((-$29))|0);
      var $31=(($27+($30)*(12))|0);
      var $32=(($c)|0);
      HEAP32[(($32)>>2)]=$31;
      var $33=$3;
      var $34=(($c+4)|0);
      HEAP32[(($34)>>2)]=$33;
      var $35=$1;
      var $36=$c;
      var $37=(($c)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$38;
      var $40=$1;
      var $41=(($40+32)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$42;
      var $44=$39;
      var $45=$43;
      var $46=((($44)-($45))|0);
      var $47=$func;
      var $48=_luaD_pcall($35, 10, $36, $46, $47);
      $status=$48;
      var $49=$3;
      var $50=(($49)|0)==-1;
      if ($50) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $52=$1;
      var $53=(($52+8)|0);
      var $54=HEAPU32[(($53)>>2)];
      var $55=$1;
      var $56=(($55+20)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+8)|0);
      var $59=HEAPU32[(($58)>>2)];
      var $60=(($54)>>>0) >= (($59)>>>0);
      if ($60) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $62=$1;
      var $63=(($62+8)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$1;
      var $66=(($65+20)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+8)|0);
      HEAP32[(($68)>>2)]=$64;
      __label__ = 8; break;
    case 8: 
      var $70=$status;
      STACKTOP = __stackBase__;
      return $70;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_pcall["X"]=1;

function _f_call($L, $ud) {
  ;
  var __label__;

  var $1;
  var $2;
  var $c;
  $1=$L;
  $2=$ud;
  var $3=$2;
  var $4=$3;
  $c=$4;
  var $5=$1;
  var $6=$c;
  var $7=(($6)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$c;
  var $10=(($9+4)|0);
  var $11=HEAP32[(($10)>>2)];
  _luaD_call($5, $8, $11);
  ;
  return;
}


function _lua_status($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  var $3=(($2+6)|0);
  var $4=HEAPU8[($3)];
  var $5=(($4)&255);
  ;
  return $5;
}


function _lua_load($L, $reader, $data, $chunkname) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $z=__stackBase__;
      var $status;
      $1=$L;
      $2=$reader;
      $3=$data;
      $4=$chunkname;
      var $5=$4;
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $4=((STRING_TABLE.__str294)|0);
      __label__ = 4; break;
    case 4: 
      var $9=$1;
      var $10=$2;
      var $11=$3;
      _luaZ_init($9, $z, $10, $11);
      var $12=$1;
      var $13=$4;
      var $14=_luaD_protectedparser($12, $z, $13);
      $status=$14;
      var $15=$status;
      STACKTOP = __stackBase__;
      return $15;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_dump($L, $writer, $data) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $status;
      var $o;
      $1=$L;
      $2=$writer;
      $3=$data;
      var $4=$1;
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=((($7)-(12))|0);
      $o=$8;
      var $9=$o;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|0)==6;
      if ($12) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $14=$o;
      var $15=(($14)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      var $19=$18;
      var $20=(($19+6)|0);
      var $21=HEAP8[($20)];
      var $22=(($21 << 24) >> 24)!=0;
      if ($22) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $24=$1;
      var $25=$o;
      var $26=(($25)|0);
      var $27=$26;
      var $28=HEAP32[(($27)>>2)];
      var $29=$28;
      var $30=$29;
      var $31=(($30+16)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$2;
      var $34=$3;
      var $35=_luaU_dump($24, $32, $33, $34, 0);
      $status=$35;
      __label__ = 6; break;
    case 5: 
      $status=1;
      __label__ = 6; break;
    case 6: 
      var $38=$status;
      ;
      return $38;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_gc($L, $what, $data) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $res;
      var $g;
      var $a;
      $1=$L;
      $2=$what;
      $3=$data;
      $res=0;
      var $4=$1;
      var $5=(($4+16)|0);
      var $6=HEAP32[(($5)>>2)];
      $g=$6;
      var $7=$2;
      if ((($7)|0) == 0) {
        __label__ = 3; break;
      }
      else if ((($7)|0) == 1) {
        __label__ = 4; break;
      }
      else if ((($7)|0) == 2) {
        __label__ = 5; break;
      }
      else if ((($7)|0) == 3) {
        __label__ = 6; break;
      }
      else if ((($7)|0) == 4) {
        __label__ = 7; break;
      }
      else if ((($7)|0) == 5) {
        __label__ = 8; break;
      }
      else if ((($7)|0) == 6) {
        __label__ = 17; break;
      }
      else if ((($7)|0) == 7) {
        __label__ = 18; break;
      }
      else {
      __label__ = 19; break;
      }
      
    case 3: 
      var $9=$g;
      var $10=(($9+64)|0);
      HEAP32[(($10)>>2)]=-3;
      __label__ = 20; break;
    case 4: 
      var $12=$g;
      var $13=(($12+68)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$g;
      var $16=(($15+64)|0);
      HEAP32[(($16)>>2)]=$14;
      __label__ = 20; break;
    case 5: 
      var $18=$1;
      _luaC_fullgc($18);
      __label__ = 20; break;
    case 6: 
      var $20=$g;
      var $21=(($20+68)|0);
      var $22=HEAPU32[(($21)>>2)];
      var $23=$22 >>> 10;
      $res=$23;
      __label__ = 20; break;
    case 7: 
      var $25=$g;
      var $26=(($25+68)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$27 & 1023;
      $res=$28;
      __label__ = 20; break;
    case 8: 
      var $30=$3;
      var $31=$30 << 10;
      $a=$31;
      var $32=$a;
      var $33=$g;
      var $34=(($33+68)|0);
      var $35=HEAPU32[(($34)>>2)];
      var $36=(($32)>>>0) <= (($35)>>>0);
      if ($36) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $38=$g;
      var $39=(($38+68)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$a;
      var $42=((($40)-($41))|0);
      var $43=$g;
      var $44=(($43+64)|0);
      HEAP32[(($44)>>2)]=$42;
      __label__ = 11; break;
    case 10: 
      var $46=$g;
      var $47=(($46+64)|0);
      HEAP32[(($47)>>2)]=0;
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $50=$g;
      var $51=(($50+64)|0);
      var $52=HEAPU32[(($51)>>2)];
      var $53=$g;
      var $54=(($53+68)|0);
      var $55=HEAPU32[(($54)>>2)];
      var $56=(($52)>>>0) <= (($55)>>>0);
      if ($56) { __label__ = 13; break; } else { __label__ = 16; break; }
    case 13: 
      var $58=$1;
      _luaC_step($58);
      var $59=$g;
      var $60=(($59+21)|0);
      var $61=HEAPU8[($60)];
      var $62=(($61)&255);
      var $63=(($62)|0)==0;
      if ($63) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      $res=1;
      __label__ = 16; break;
    case 15: 
      __label__ = 12; break;
    case 16: 
      __label__ = 20; break;
    case 17: 
      var $68=$g;
      var $69=(($68+80)|0);
      var $70=HEAP32[(($69)>>2)];
      $res=$70;
      var $71=$3;
      var $72=$g;
      var $73=(($72+80)|0);
      HEAP32[(($73)>>2)]=$71;
      __label__ = 20; break;
    case 18: 
      var $75=$g;
      var $76=(($75+84)|0);
      var $77=HEAP32[(($76)>>2)];
      $res=$77;
      var $78=$3;
      var $79=$g;
      var $80=(($79+84)|0);
      HEAP32[(($80)>>2)]=$78;
      __label__ = 20; break;
    case 19: 
      $res=-1;
      __label__ = 20; break;
    case 20: 
      var $83=$res;
      ;
      return $83;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_gc["X"]=1;

function _lua_error($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  var $3=$1;
  _luaG_errormsg($3);
  ;
  return 0;
}


function _lua_next($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $t;
      var $more;
      $1=$L;
      $2=$idx;
      var $3=$1;
      var $4=$2;
      var $5=_index2adr($3, $4);
      $t=$5;
      var $6=$1;
      var $7=$1;
      var $8=$t;
      var $9=(($8)|0);
      var $10=$9;
      var $11=HEAP32[(($10)>>2)];
      var $12=$11;
      var $13=$1;
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=((($15)-(12))|0);
      var $17=_luaH_next($7, $12, $16);
      $more=$17;
      var $18=$more;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $21=$1;
      var $22=$1;
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+12)|0);
      HEAP32[(($23)>>2)]=$25;
      __label__ = 5; break;
    case 4: 
      var $27=$1;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=((($29)-(12))|0);
      HEAP32[(($28)>>2)]=$30;
      __label__ = 5; break;
    case 5: 
      var $32=$more;
      ;
      return $32;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_concat($L, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i_o;
      $1=$L;
      $2=$n;
      var $3=$1;
      var $4=$2;
      var $5=(($4)|0) >= 2;
      if ($5) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $7=$1;
      var $8=(($7+16)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9+68)|0);
      var $11=HEAPU32[(($10)>>2)];
      var $12=$1;
      var $13=(($12+16)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14+64)|0);
      var $16=HEAPU32[(($15)>>2)];
      var $17=(($11)>>>0) >= (($16)>>>0);
      if ($17) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $19=$1;
      _luaC_step($19);
      __label__ = 5; break;
    case 5: 
      var $21=$1;
      var $22=$2;
      var $23=$1;
      var $24=(($23+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$1;
      var $27=(($26+12)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$25;
      var $30=$28;
      var $31=((($29)-($30))|0);
      var $32=((((($31)|0))/(12))&-1);
      var $33=((($32)-(1))|0);
      _luaV_concat($21, $22, $33);
      var $34=$2;
      var $35=((($34)-(1))|0);
      var $36=$1;
      var $37=(($36+8)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(((-$35))|0);
      var $40=(($38+($39)*(12))|0);
      HEAP32[(($37)>>2)]=$40;
      __label__ = 9; break;
    case 6: 
      var $42=$2;
      var $43=(($42)|0)==0;
      if ($43) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $45=$1;
      var $46=(($45+8)|0);
      var $47=HEAP32[(($46)>>2)];
      $i_o=$47;
      var $48=$1;
      var $49=_luaS_newlstr($48, ((__str395)|0), 0);
      var $50=$49;
      var $51=$i_o;
      var $52=(($51)|0);
      var $53=$52;
      HEAP32[(($53)>>2)]=$50;
      var $54=$i_o;
      var $55=(($54+8)|0);
      HEAP32[(($55)>>2)]=4;
      var $56=$1;
      var $57=$1;
      var $58=(($57+8)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+12)|0);
      HEAP32[(($58)>>2)]=$60;
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_concat["X"]=1;

function _lua_newuserdata($L, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $u;
      var $i_o;
      $1=$L;
      $2=$size;
      var $3=$1;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+68)|0);
      var $7=HEAPU32[(($6)>>2)];
      var $8=$1;
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10+64)|0);
      var $12=HEAPU32[(($11)>>2)];
      var $13=(($7)>>>0) >= (($12)>>>0);
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $15=$1;
      _luaC_step($15);
      __label__ = 4; break;
    case 4: 
      var $17=$1;
      var $18=$2;
      var $19=$1;
      var $20=_getcurrenv($19);
      var $21=_luaS_newudata($17, $18, $20);
      $u=$21;
      var $22=$1;
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      $i_o=$24;
      var $25=$u;
      var $26=$25;
      var $27=$i_o;
      var $28=(($27)|0);
      var $29=$28;
      HEAP32[(($29)>>2)]=$26;
      var $30=$i_o;
      var $31=(($30+8)|0);
      HEAP32[(($31)>>2)]=7;
      var $32=$1;
      var $33=$1;
      var $34=(($33+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+12)|0);
      HEAP32[(($34)>>2)]=$36;
      var $37=$u;
      var $38=(($37+20)|0);
      var $39=$38;
      ;
      return $39;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_newuserdata["X"]=1;

function _luaL_argerror($L, $narg, $extramsg) {
  var __stackBase__  = STACKTOP; STACKTOP += 100; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ar=__stackBase__;
      $2=$L;
      $3=$narg;
      $4=$extramsg;
      var $5=$2;
      var $6=_lua_getstack($5, 0, $ar);
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $9=$2;
      var $10=$3;
      var $11=$4;
      var $12=_luaL_error($9, ((STRING_TABLE.__str132)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$10,HEAP32[(((tempInt)+(4))>>2)]=$11,tempInt));
      $1=$12;
      __label__ = 11; break;
    case 4: 
      var $14=$2;
      var $15=_lua_getinfo($14, ((STRING_TABLE.__str1133)|0), $ar);
      var $16=(($ar+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=_strcmp($17, ((STRING_TABLE.__str2134)|0));
      var $19=(($18)|0)==0;
      if ($19) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $21=$3;
      var $22=((($21)-(1))|0);
      $3=$22;
      var $23=$3;
      var $24=(($23)|0)==0;
      if ($24) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $26=$2;
      var $27=(($ar+4)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$4;
      var $30=_luaL_error($26, ((STRING_TABLE.__str3135)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$28,HEAP32[(((tempInt)+(4))>>2)]=$29,tempInt));
      $1=$30;
      __label__ = 11; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $33=(($ar+4)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34)|0)==0;
      if ($35) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $37=(($ar+4)|0);
      HEAP32[(($37)>>2)]=((STRING_TABLE.__str4136)|0);
      __label__ = 10; break;
    case 10: 
      var $39=$2;
      var $40=$3;
      var $41=(($ar+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$4;
      var $44=_luaL_error($39, ((STRING_TABLE.__str5137)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$40,HEAP32[(((tempInt)+(4))>>2)]=$42,HEAP32[(((tempInt)+(8))>>2)]=$43,tempInt));
      $1=$44;
      __label__ = 11; break;
    case 11: 
      var $46=$1;
      STACKTOP = __stackBase__;
      return $46;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaL_argerror["X"]=1;

function _luaL_error($L, $fmt) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $argp=__stackBase__;
  $1=$L;
  $2=$fmt;
  var $3=$argp;
  HEAP32[(($3)>>2)]=arguments[_luaL_error.length];
  var $4=$1;
  _luaL_where($4, 1);
  var $5=$1;
  var $6=$2;
  var $7=HEAP32[(($argp)>>2)];
  var $8=_lua_pushvfstring($5, $6, $7);
  var $9=$argp;
  ;
  var $10=$1;
  _lua_concat($10, 2);
  var $11=$1;
  var $12=_lua_error($11);
  STACKTOP = __stackBase__;
  return $12;
}


function _luaL_typerror($L, $narg, $tname) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $msg;
  $1=$L;
  $2=$narg;
  $3=$tname;
  var $4=$1;
  var $5=$3;
  var $6=$1;
  var $7=$1;
  var $8=$2;
  var $9=_lua_type($7, $8);
  var $10=_lua_typename($6, $9);
  var $11=_lua_pushfstring($4, ((STRING_TABLE.__str6138)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$5,HEAP32[(((tempInt)+(4))>>2)]=$10,tempInt));
  $msg=$11;
  var $12=$1;
  var $13=$2;
  var $14=$msg;
  var $15=_luaL_argerror($12, $13, $14);
  STACKTOP = __stackBase__;
  return $15;
}


function _luaL_where($L, $level) {
  var __stackBase__  = STACKTOP; STACKTOP += 100; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $ar=__stackBase__;
      $1=$L;
      $2=$level;
      var $3=$1;
      var $4=$2;
      var $5=_lua_getstack($3, $4, $ar);
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $8=$1;
      var $9=_lua_getinfo($8, ((STRING_TABLE.__str7139)|0), $ar);
      var $10=(($ar+20)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|0) > 0;
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $14=$1;
      var $15=(($ar+36)|0);
      var $16=(($15)|0);
      var $17=(($ar+20)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=_lua_pushfstring($14, ((STRING_TABLE.__str8140)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$16,HEAP32[(((tempInt)+(4))>>2)]=$18,tempInt));
      __label__ = 7; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $22=$1;
      _lua_pushlstring($22, ((__str9141)|0), 0);
      __label__ = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_checkoption($L, $narg, $def, $lst) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $name;
      var $i;
      $2=$L;
      $3=$narg;
      $4=$def;
      $5=$lst;
      var $6=$4;
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$2;
      var $10=$3;
      var $11=$4;
      var $12=_luaL_optlstring($9, $10, $11, 0);
      var $18 = $12;__label__ = 5; break;
    case 4: 
      var $14=$2;
      var $15=$3;
      var $16=_luaL_checklstring($14, $15, 0);
      var $18 = $16;__label__ = 5; break;
    case 5: 
      var $18;
      $name=$18;
      $i=0;
      __label__ = 6; break;
    case 6: 
      var $20=$i;
      var $21=$5;
      var $22=(($21+($20<<2))|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|0)!=0;
      if ($24) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $26=$i;
      var $27=$5;
      var $28=(($27+($26<<2))|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$name;
      var $31=_strcmp($29, $30);
      var $32=(($31)|0)==0;
      if ($32) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $34=$i;
      $1=$34;
      __label__ = 12; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $37=$i;
      var $38=((($37)+(1))|0);
      $i=$38;
      __label__ = 6; break;
    case 11: 
      var $40=$2;
      var $41=$3;
      var $42=$2;
      var $43=$name;
      var $44=_lua_pushfstring($42, ((STRING_TABLE.__str10142)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$43,tempInt));
      var $45=_luaL_argerror($40, $41, $44);
      $1=$45;
      __label__ = 12; break;
    case 12: 
      var $47=$1;
      STACKTOP = __stackBase__;
      return $47;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaL_checkoption["X"]=1;

function _luaL_optlstring($L, $narg, $def, $len) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $2=$L;
      $3=$narg;
      $4=$def;
      $5=$len;
      var $6=$2;
      var $7=$3;
      var $8=_lua_type($6, $7);
      var $9=(($8)|0) <= 0;
      if ($9) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $11=$5;
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $14=$4;
      var $15=(($14)|0)!=0;
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $17=$4;
      var $18=_strlen($17);
      var $21 = $18;__label__ = 7; break;
    case 6: 
      var $21 = 0;__label__ = 7; break;
    case 7: 
      var $21;
      var $22=$5;
      HEAP32[(($22)>>2)]=$21;
      __label__ = 8; break;
    case 8: 
      var $24=$4;
      $1=$24;
      __label__ = 10; break;
    case 9: 
      var $26=$2;
      var $27=$3;
      var $28=$5;
      var $29=_luaL_checklstring($26, $27, $28);
      $1=$29;
      __label__ = 10; break;
    case 10: 
      var $31=$1;
      ;
      return $31;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_checklstring($L, $narg, $len) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $s;
      $1=$L;
      $2=$narg;
      $3=$len;
      var $4=$1;
      var $5=$2;
      var $6=$3;
      var $7=_lua_tolstring($4, $5, $6);
      $s=$7;
      var $8=$s;
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $11=$1;
      var $12=$2;
      _tag_error($11, $12, 4);
      __label__ = 4; break;
    case 4: 
      var $14=$s;
      ;
      return $14;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_checkstack($L, $space, $mes) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$L;
      $2=$space;
      $3=$mes;
      var $4=$1;
      var $5=$2;
      var $6=_lua_checkstack($4, $5);
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $9=$1;
      var $10=$3;
      var $11=_luaL_error($9, ((STRING_TABLE.__str11143)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$10,tempInt));
      __label__ = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_checktype($L, $narg, $t) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$L;
      $2=$narg;
      $3=$t;
      var $4=$1;
      var $5=$2;
      var $6=_lua_type($4, $5);
      var $7=$3;
      var $8=(($6)|0)!=(($7)|0);
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$1;
      var $11=$2;
      var $12=$3;
      _tag_error($10, $11, $12);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _tag_error($L, $narg, $tag) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$L;
  $2=$narg;
  $3=$tag;
  var $4=$1;
  var $5=$2;
  var $6=$1;
  var $7=$3;
  var $8=_lua_typename($6, $7);
  var $9=_luaL_typerror($4, $5, $8);
  ;
  return;
}


function _luaL_checkany($L, $narg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$narg;
      var $3=$1;
      var $4=$2;
      var $5=_lua_type($3, $4);
      var $6=(($5)|0)==-1;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$1;
      var $9=$2;
      var $10=_luaL_argerror($8, $9, ((STRING_TABLE.__str12144)|0));
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_checknumber($L, $narg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $d;
      $1=$L;
      $2=$narg;
      var $3=$1;
      var $4=$2;
      var $5=_lua_tonumber($3, $4);
      $d=$5;
      var $6=$d;
      var $7=$6 == 0;
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $9=$1;
      var $10=$2;
      var $11=_lua_isnumber($9, $10);
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $14=$1;
      var $15=$2;
      _tag_error($14, $15, 3);
      __label__ = 5; break;
    case 5: 
      var $17=$d;
      ;
      return $17;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_checkinteger($L, $narg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $d;
      $1=$L;
      $2=$narg;
      var $3=$1;
      var $4=$2;
      var $5=_lua_tointeger($3, $4);
      $d=$5;
      var $6=$d;
      var $7=(($6)|0)==0;
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $9=$1;
      var $10=$2;
      var $11=_lua_isnumber($9, $10);
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $14=$1;
      var $15=$2;
      _tag_error($14, $15, 3);
      __label__ = 5; break;
    case 5: 
      var $17=$d;
      ;
      return $17;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_optinteger($L, $narg, $def) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$L;
      $2=$narg;
      $3=$def;
      var $4=$1;
      var $5=$2;
      var $6=_lua_type($4, $5);
      var $7=(($6)|0) <= 0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$3;
      var $15 = $9;__label__ = 5; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13=_luaL_checkinteger($11, $12);
      var $15 = $13;__label__ = 5; break;
    case 5: 
      var $15;
      ;
      return $15;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_getmetafield($L, $obj, $event) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$L;
      $3=$obj;
      $4=$event;
      var $5=$2;
      var $6=$3;
      var $7=_lua_getmetatable($5, $6);
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=0;
      __label__ = 7; break;
    case 4: 
      var $11=$2;
      var $12=$4;
      _lua_pushstring($11, $12);
      var $13=$2;
      _lua_rawget($13, -2);
      var $14=$2;
      var $15=_lua_type($14, -1);
      var $16=(($15)|0)==0;
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $18=$2;
      _lua_settop($18, -3);
      $1=0;
      __label__ = 7; break;
    case 6: 
      var $20=$2;
      _lua_remove($20, -2);
      $1=1;
      __label__ = 7; break;
    case 7: 
      var $22=$1;
      ;
      return $22;
    default: assert(0, "bad label: " + __label__);
  }
}


function _libsize($l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $size;
      $1=$l;
      $size=0;
      __label__ = 3; break;
    case 3: 
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $8=$size;
      var $9=((($8)+(1))|0);
      $size=$9;
      __label__ = 5; break;
    case 5: 
      var $11=$1;
      var $12=(($11+8)|0);
      $1=$12;
      __label__ = 3; break;
    case 6: 
      var $14=$size;
      ;
      return $14;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_buffinit($L, $B) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L;
  $2=$B;
  var $3=$1;
  var $4=$2;
  var $5=(($4+8)|0);
  HEAP32[(($5)>>2)]=$3;
  var $6=$2;
  var $7=(($6+12)|0);
  var $8=(($7)|0);
  var $9=$2;
  var $10=(($9)|0);
  HEAP32[(($10)>>2)]=$8;
  var $11=$2;
  var $12=(($11+4)|0);
  HEAP32[(($12)>>2)]=0;
  ;
  return;
}


function _luaL_callmeta($L, $obj, $event) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$L;
      $3=$obj;
      $4=$event;
      var $5=$3;
      var $6=(($5)|0) > 0;
      if ($6) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $8=$3;
      var $9=(($8)|0) <= -10000;
      if ($9) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $11=$3;
      var $19 = $11;__label__ = 6; break;
    case 5: 
      var $13=$2;
      var $14=_lua_gettop($13);
      var $15=$3;
      var $16=((($14)+($15))|0);
      var $17=((($16)+(1))|0);
      var $19 = $17;__label__ = 6; break;
    case 6: 
      var $19;
      $3=$19;
      var $20=$2;
      var $21=$3;
      var $22=$4;
      var $23=_luaL_getmetafield($20, $21, $22);
      var $24=(($23)|0)!=0;
      if ($24) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      $1=0;
      __label__ = 9; break;
    case 8: 
      var $27=$2;
      var $28=$3;
      _lua_pushvalue($27, $28);
      var $29=$2;
      _lua_call($29, 1, 1);
      $1=1;
      __label__ = 9; break;
    case 9: 
      var $31=$1;
      ;
      return $31;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_register($L, $libname, $l) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$L;
  $2=$libname;
  $3=$l;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  _luaL_openlib($4, $5, $6, 0);
  ;
  return;
}


function _luaL_openlib($L, $libname, $l, $nup) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $size;
      var $i;
      $1=$L;
      $2=$libname;
      $3=$l;
      $4=$nup;
      var $5=$2;
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $8=$3;
      var $9=_libsize($8);
      $size=$9;
      var $10=$1;
      var $11=_luaL_findtable($10, -10000, ((STRING_TABLE.__str13145)|0), 1);
      var $12=$1;
      var $13=$2;
      _lua_getfield($12, -1, $13);
      var $14=$1;
      var $15=_lua_type($14, -1);
      var $16=(($15)|0)==5;
      if ($16) { __label__ = 7; break; } else { __label__ = 4; break; }
    case 4: 
      var $18=$1;
      _lua_settop($18, -2);
      var $19=$1;
      var $20=$2;
      var $21=$size;
      var $22=_luaL_findtable($19, -10002, $20, $21);
      var $23=(($22)|0)!=0;
      if ($23) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $25=$1;
      var $26=$2;
      var $27=_luaL_error($25, ((STRING_TABLE.__str14146)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$26,tempInt));
      __label__ = 6; break;
    case 6: 
      var $29=$1;
      _lua_pushvalue($29, -1);
      var $30=$1;
      var $31=$2;
      _lua_setfield($30, -3, $31);
      __label__ = 7; break;
    case 7: 
      var $33=$1;
      _lua_remove($33, -2);
      var $34=$1;
      var $35=$4;
      var $36=((($35)+(1))|0);
      var $37=(((-$36))|0);
      _lua_insert($34, $37);
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $40=$3;
      var $41=(($40)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42)|0)!=0;
      if ($43) { __label__ = 10; break; } else { __label__ = 16; break; }
    case 10: 
      $i=0;
      __label__ = 11; break;
    case 11: 
      var $46=$i;
      var $47=$4;
      var $48=(($46)|0) < (($47)|0);
      if ($48) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $50=$1;
      var $51=$4;
      var $52=(((-$51))|0);
      _lua_pushvalue($50, $52);
      __label__ = 13; break;
    case 13: 
      var $54=$i;
      var $55=((($54)+(1))|0);
      $i=$55;
      __label__ = 11; break;
    case 14: 
      var $57=$1;
      var $58=$3;
      var $59=(($58+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$4;
      _lua_pushcclosure($57, $60, $61);
      var $62=$1;
      var $63=$4;
      var $64=((($63)+(2))|0);
      var $65=(((-$64))|0);
      var $66=$3;
      var $67=(($66)|0);
      var $68=HEAP32[(($67)>>2)];
      _lua_setfield($62, $65, $68);
      __label__ = 15; break;
    case 15: 
      var $70=$3;
      var $71=(($70+8)|0);
      $3=$71;
      __label__ = 9; break;
    case 16: 
      var $73=$1;
      var $74=$4;
      var $75=(((-$74))|0);
      var $76=((($75)-(1))|0);
      _lua_settop($73, $76);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaL_openlib["X"]=1;

function _luaL_findtable($L, $idx, $fname, $szhint) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $e;
      $2=$L;
      $3=$idx;
      $4=$fname;
      $5=$szhint;
      var $6=$2;
      var $7=$3;
      _lua_pushvalue($6, $7);
      __label__ = 3; break;
    case 3: 
      var $9=$4;
      var $10=_strchr($9, 46);
      $e=$10;
      var $11=$e;
      var $12=(($11)|0)==0;
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $14=$4;
      var $15=$4;
      var $16=_strlen($15);
      var $17=(($14+$16)|0);
      $e=$17;
      __label__ = 5; break;
    case 5: 
      var $19=$2;
      var $20=$4;
      var $21=$e;
      var $22=$4;
      var $23=$21;
      var $24=$22;
      var $25=((($23)-($24))|0);
      _lua_pushlstring($19, $20, $25);
      var $26=$2;
      _lua_rawget($26, -2);
      var $27=$2;
      var $28=_lua_type($27, -1);
      var $29=(($28)|0)==0;
      if ($29) { __label__ = 6; break; } else { __label__ = 10; break; }
    case 6: 
      var $31=$2;
      _lua_settop($31, -2);
      var $32=$2;
      var $33=$e;
      var $34=HEAP8[($33)];
      var $35=(($34 << 24) >> 24);
      var $36=(($35)|0)==46;
      if ($36) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $41 = 1;__label__ = 9; break;
    case 8: 
      var $39=$5;
      var $41 = $39;__label__ = 9; break;
    case 9: 
      var $41;
      _lua_createtable($32, 0, $41);
      var $42=$2;
      var $43=$4;
      var $44=$e;
      var $45=$4;
      var $46=$44;
      var $47=$45;
      var $48=((($46)-($47))|0);
      _lua_pushlstring($42, $43, $48);
      var $49=$2;
      _lua_pushvalue($49, -2);
      var $50=$2;
      _lua_settable($50, -4);
      __label__ = 13; break;
    case 10: 
      var $52=$2;
      var $53=_lua_type($52, -1);
      var $54=(($53)|0)==5;
      if ($54) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $56=$2;
      _lua_settop($56, -3);
      var $57=$4;
      $1=$57;
      __label__ = 16; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $60=$2;
      _lua_remove($60, -2);
      var $61=$e;
      var $62=(($61+1)|0);
      $4=$62;
      __label__ = 14; break;
    case 14: 
      var $64=$e;
      var $65=HEAP8[($64)];
      var $66=(($65 << 24) >> 24);
      var $67=(($66)|0)==46;
      if ($67) { __label__ = 3; break; } else { __label__ = 15; break; }
    case 15: 
      $1=0;
      __label__ = 16; break;
    case 16: 
      var $70=$1;
      ;
      return $70;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaL_findtable["X"]=1;

function _luaL_addlstring($B, $s, $l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$B;
      $2=$s;
      $3=$l;
      __label__ = 3; break;
    case 3: 
      var $5=$3;
      var $6=((($5)-(1))|0);
      $3=$6;
      var $7=(($5)|0)!=0;
      if ($7) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $9=$1;
      var $10=(($9)|0);
      var $11=HEAPU32[(($10)>>2)];
      var $12=$1;
      var $13=(($12+12)|0);
      var $14=(($13)|0);
      var $15=(($14+1024)|0);
      var $16=(($11)>>>0) < (($15)>>>0);
      if ($16) { var $22 = 1;__label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $18=$1;
      var $19=_luaL_prepbuffer($18);
      var $20=(($19)|0)!=0;
      var $22 = $20;__label__ = 6; break;
    case 6: 
      var $22;
      var $23=(($22)&1);
      var $24=$2;
      var $25=(($24+1)|0);
      $2=$25;
      var $26=HEAP8[($24)];
      var $27=$1;
      var $28=(($27)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+1)|0);
      HEAP32[(($28)>>2)]=$30;
      HEAP8[($29)]=$26;
      __label__ = 3; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_pushresult($B) {
  ;
  var __label__;

  var $1;
  $1=$B;
  var $2=$1;
  var $3=_emptybuffer($2);
  var $4=$1;
  var $5=(($4+8)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$1;
  var $8=(($7+4)|0);
  var $9=HEAP32[(($8)>>2)];
  _lua_concat($6, $9);
  var $10=$1;
  var $11=(($10+4)|0);
  HEAP32[(($11)>>2)]=1;
  ;
  return;
}


function _luaL_prepbuffer($B) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$B;
      var $2=$1;
      var $3=_emptybuffer($2);
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $6=$1;
      _adjuststack($6);
      __label__ = 4; break;
    case 4: 
      var $8=$1;
      var $9=(($8+12)|0);
      var $10=(($9)|0);
      ;
      return $10;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emptybuffer($B) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $l;
      $2=$B;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$2;
      var $7=(($6+12)|0);
      var $8=(($7)|0);
      var $9=$5;
      var $10=$8;
      var $11=((($9)-($10))|0);
      $l=$11;
      var $12=$l;
      var $13=(($12)|0)==0;
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 5; break;
    case 4: 
      var $16=$2;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      var $20=(($19+12)|0);
      var $21=(($20)|0);
      var $22=$l;
      _lua_pushlstring($18, $21, $22);
      var $23=$2;
      var $24=(($23+12)|0);
      var $25=(($24)|0);
      var $26=$2;
      var $27=(($26)|0);
      HEAP32[(($27)>>2)]=$25;
      var $28=$2;
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=((($30)+(1))|0);
      HEAP32[(($29)>>2)]=$31;
      $1=1;
      __label__ = 5; break;
    case 5: 
      var $33=$1;
      ;
      return $33;
    default: assert(0, "bad label: " + __label__);
  }
}


function _adjuststack($B) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $L;
      var $toget;
      var $toplen;
      var $l;
      $1=$B;
      var $2=$1;
      var $3=(($2+4)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|0) > 1;
      if ($5) { __label__ = 3; break; } else { __label__ = 11; break; }
    case 3: 
      var $7=$1;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      $L=$9;
      $toget=1;
      var $10=$L;
      var $11=_lua_objlen($10, -1);
      $toplen=$11;
      __label__ = 4; break;
    case 4: 
      var $13=$L;
      var $14=$toget;
      var $15=((($14)+(1))|0);
      var $16=(((-$15))|0);
      var $17=_lua_objlen($13, $16);
      $l=$17;
      var $18=$1;
      var $19=(($18+4)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$toget;
      var $22=((($20)-($21))|0);
      var $23=((($22)+(1))|0);
      var $24=(($23)|0) >= 10;
      if ($24) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $26=$toplen;
      var $27=$l;
      var $28=(($26)>>>0) > (($27)>>>0);
      if ($28) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $30=$l;
      var $31=$toplen;
      var $32=((($31)+($30))|0);
      $toplen=$32;
      var $33=$toget;
      var $34=((($33)+(1))|0);
      $toget=$34;
      __label__ = 8; break;
    case 7: 
      __label__ = 10; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $38=$toget;
      var $39=$1;
      var $40=(($39+4)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($38)|0) < (($41)|0);
      if ($42) { __label__ = 4; break; } else { __label__ = 10; break; }
    case 10: 
      var $44=$L;
      var $45=$toget;
      _lua_concat($44, $45);
      var $46=$1;
      var $47=(($46+4)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$toget;
      var $50=((($48)-($49))|0);
      var $51=((($50)+(1))|0);
      var $52=$1;
      var $53=(($52+4)|0);
      HEAP32[(($53)>>2)]=$51;
      __label__ = 11; break;
    case 11: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_adjuststack["X"]=1;

function _luaL_addvalue($B) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $L;
      var $vl=__stackBase__;
      var $s;
      $1=$B;
      var $2=$1;
      var $3=(($2+8)|0);
      var $4=HEAP32[(($3)>>2)];
      $L=$4;
      var $5=$L;
      var $6=_lua_tolstring($5, -1, $vl);
      $s=$6;
      var $7=HEAPU32[(($vl)>>2)];
      var $8=$1;
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$1;
      var $12=(($11+12)|0);
      var $13=(($12)|0);
      var $14=$10;
      var $15=$13;
      var $16=((($14)-($15))|0);
      var $17=(((1024)-($16))|0);
      var $18=(($7)>>>0) <= (($17)>>>0);
      if ($18) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $20=$1;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$s;
      var $24=HEAP32[(($vl)>>2)];
      assert($24 % 1 === 0, 'memcpy given ' + $24 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($22, $23, $24, 1);
      var $25=HEAP32[(($vl)>>2)];
      var $26=$1;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+$25)|0);
      HEAP32[(($27)>>2)]=$29;
      var $30=$L;
      _lua_settop($30, -2);
      __label__ = 7; break;
    case 4: 
      var $32=$1;
      var $33=_emptybuffer($32);
      var $34=(($33)|0)!=0;
      if ($34) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $36=$L;
      _lua_insert($36, -2);
      __label__ = 6; break;
    case 6: 
      var $38=$1;
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=((($40)+(1))|0);
      HEAP32[(($39)>>2)]=$41;
      var $42=$1;
      _adjuststack($42);
      __label__ = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaL_addvalue["X"]=1;

function _luaL_loadfile($L, $filename) {
  var __stackBase__  = STACKTOP; STACKTOP += 1032; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $lf=__stackBase__;
      var $status;
      var $readstatus;
      var $c;
      var $fnameindex;
      $2=$L;
      $3=$filename;
      var $4=$2;
      var $5=_lua_gettop($4);
      var $6=((($5)+(1))|0);
      $fnameindex=$6;
      var $7=(($lf)|0);
      HEAP32[(($7)>>2)]=0;
      var $8=$3;
      var $9=(($8)|0)==0;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$2;
      _lua_pushlstring($11, ((STRING_TABLE.__str15147)|0), 6);
      var $12=HEAP32[((_stdin)>>2)];
      var $13=(($lf+4)|0);
      HEAP32[(($13)>>2)]=$12;
      __label__ = 7; break;
    case 4: 
      var $15=$2;
      var $16=$3;
      var $17=_lua_pushfstring($15, ((STRING_TABLE.__str16148)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$16,tempInt));
      var $18=$3;
      var $19=_fopen($18, ((STRING_TABLE.__str17149)|0));
      var $20=(($lf+4)|0);
      HEAP32[(($20)>>2)]=$19;
      var $21=(($lf+4)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|0)==0;
      if ($23) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $25=$2;
      var $26=$fnameindex;
      var $27=_errfile($25, ((STRING_TABLE.__str18150)|0), $26);
      $1=$27;
      __label__ = 31; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $30=(($lf+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=_getc($31);
      $c=$32;
      var $33=$c;
      var $34=(($33)|0)==35;
      if ($34) { __label__ = 8; break; } else { __label__ = 16; break; }
    case 8: 
      var $36=(($lf)|0);
      HEAP32[(($36)>>2)]=1;
      __label__ = 9; break;
    case 9: 
      var $38=(($lf+4)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=_getc($39);
      $c=$40;
      var $41=(($40)|0)!=-1;
      if ($41) { __label__ = 10; break; } else { var $46 = 0;__label__ = 11; break; }
    case 10: 
      var $43=$c;
      var $44=(($43)|0)!=10;
      var $46 = $44;__label__ = 11; break;
    case 11: 
      var $46;
      if ($46) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      __label__ = 9; break;
    case 13: 
      var $49=$c;
      var $50=(($49)|0)==10;
      if ($50) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $52=(($lf+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=_getc($53);
      $c=$54;
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $57=$c;
      var $58=HEAP8[(((STRING_TABLE.__str19151)|0))];
      var $59=(($58 << 24) >> 24);
      var $60=(($57)|0)==(($59)|0);
      if ($60) { __label__ = 17; break; } else { __label__ = 26; break; }
    case 17: 
      var $62=$3;
      var $63=(($62)|0)!=0;
      if ($63) { __label__ = 18; break; } else { __label__ = 26; break; }
    case 18: 
      var $65=$3;
      var $66=(($lf+4)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=_freopen($65, ((STRING_TABLE.__str20152)|0), $67);
      var $69=(($lf+4)|0);
      HEAP32[(($69)>>2)]=$68;
      var $70=(($lf+4)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71)|0)==0;
      if ($72) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $74=$2;
      var $75=$fnameindex;
      var $76=_errfile($74, ((STRING_TABLE.__str21153)|0), $75);
      $1=$76;
      __label__ = 31; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $79=(($lf+4)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=_getc($80);
      $c=$81;
      var $82=(($81)|0)!=-1;
      if ($82) { __label__ = 22; break; } else { var $89 = 0;__label__ = 23; break; }
    case 22: 
      var $84=$c;
      var $85=HEAP8[(((STRING_TABLE.__str19151)|0))];
      var $86=(($85 << 24) >> 24);
      var $87=(($84)|0)!=(($86)|0);
      var $89 = $87;__label__ = 23; break;
    case 23: 
      var $89;
      if ($89) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      __label__ = 21; break;
    case 25: 
      var $92=(($lf)|0);
      HEAP32[(($92)>>2)]=0;
      __label__ = 26; break;
    case 26: 
      var $94=$c;
      var $95=(($lf+4)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=_ungetc($94, $96);
      var $98=$2;
      var $99=$lf;
      var $100=$2;
      var $101=_lua_tolstring($100, -1, 0);
      var $102=_lua_load($98, 12, $99, $101);
      $status=$102;
      var $103=(($lf+4)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=_ferror($104);
      $readstatus=$105;
      var $106=$3;
      var $107=(($106)|0)!=0;
      if ($107) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $109=(($lf+4)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=_fclose($110);
      __label__ = 28; break;
    case 28: 
      var $113=$readstatus;
      var $114=(($113)|0)!=0;
      if ($114) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $116=$2;
      var $117=$fnameindex;
      _lua_settop($116, $117);
      var $118=$2;
      var $119=$fnameindex;
      var $120=_errfile($118, ((STRING_TABLE.__str22154)|0), $119);
      $1=$120;
      __label__ = 31; break;
    case 30: 
      var $122=$2;
      var $123=$fnameindex;
      _lua_remove($122, $123);
      var $124=$status;
      $1=$124;
      __label__ = 31; break;
    case 31: 
      var $126=$1;
      STACKTOP = __stackBase__;
      return $126;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaL_loadfile["X"]=1;

function _errfile($L, $what, $fnameindex) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $serr;
  var $filename;
  $1=$L;
  $2=$what;
  $3=$fnameindex;
  var $4=___errno();
  var $5=HEAP32[(($4)>>2)];
  var $6=_strerror($5);
  $serr=$6;
  var $7=$1;
  var $8=$3;
  var $9=_lua_tolstring($7, $8, 0);
  var $10=(($9+1)|0);
  $filename=$10;
  var $11=$1;
  var $12=$2;
  var $13=$filename;
  var $14=$serr;
  var $15=_lua_pushfstring($11, ((STRING_TABLE.__str25157)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$12,HEAP32[(((tempInt)+(4))>>2)]=$13,HEAP32[(((tempInt)+(8))>>2)]=$14,tempInt));
  var $16=$1;
  var $17=$3;
  _lua_remove($16, $17);
  STACKTOP = __stackBase__;
  return 6;
}


function _getF($L, $ud, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $lf;
      $2=$L;
      $3=$ud;
      $4=$size;
      var $5=$3;
      var $6=$5;
      $lf=$6;
      var $7=$2;
      var $8=$lf;
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$lf;
      var $14=(($13)|0);
      HEAP32[(($14)>>2)]=0;
      var $15=$4;
      HEAP32[(($15)>>2)]=1;
      $1=((STRING_TABLE.__str24156)|0);
      __label__ = 10; break;
    case 4: 
      var $17=$lf;
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=_feof($19);
      var $21=(($20)|0)!=0;
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=0;
      __label__ = 10; break;
    case 6: 
      var $24=$lf;
      var $25=(($24+8)|0);
      var $26=(($25)|0);
      var $27=$lf;
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=_fread($26, 1, 1024, $29);
      var $31=$4;
      HEAP32[(($31)>>2)]=$30;
      var $32=$4;
      var $33=HEAPU32[(($32)>>2)];
      var $34=(($33)>>>0) > 0;
      if ($34) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $36=$lf;
      var $37=(($36+8)|0);
      var $38=(($37)|0);
      var $41 = $38;__label__ = 9; break;
    case 8: 
      var $41 = 0;__label__ = 9; break;
    case 9: 
      var $41;
      $1=$41;
      __label__ = 10; break;
    case 10: 
      var $43=$1;
      ;
      return $43;
    default: assert(0, "bad label: " + __label__);
  }
}
_getF["X"]=1;

function _luaL_loadbuffer($L, $buff, $size, $name) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $ls=__stackBase__;
  $1=$L;
  $2=$buff;
  $3=$size;
  $4=$name;
  var $5=$2;
  var $6=(($ls)|0);
  HEAP32[(($6)>>2)]=$5;
  var $7=$3;
  var $8=(($ls+4)|0);
  HEAP32[(($8)>>2)]=$7;
  var $9=$1;
  var $10=$ls;
  var $11=$4;
  var $12=_lua_load($9, 14, $10, $11);
  STACKTOP = __stackBase__;
  return $12;
}


function _getS($L, $ud, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ls;
      $2=$L;
      $3=$ud;
      $4=$size;
      var $5=$3;
      var $6=$5;
      $ls=$6;
      var $7=$2;
      var $8=$ls;
      var $9=(($8+4)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0)==0;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 5; break;
    case 4: 
      var $14=$ls;
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$4;
      HEAP32[(($17)>>2)]=$16;
      var $18=$ls;
      var $19=(($18+4)|0);
      HEAP32[(($19)>>2)]=0;
      var $20=$ls;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      $1=$22;
      __label__ = 5; break;
    case 5: 
      var $24=$1;
      ;
      return $24;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_newstate() {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $L;
      var $1=_lua_newstate(16, 0);
      $L=$1;
      var $2=$L;
      var $3=(($2)|0)!=0;
      if ($3) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=$L;
      var $6=_lua_atpanic($5, 18);
      __label__ = 4; break;
    case 4: 
      var $8=$L;
      ;
      return $8;
    default: assert(0, "bad label: " + __label__);
  }
}


function _l_alloc($ud, $ptr, $osize, $nsize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $2=$ud;
      $3=$ptr;
      $4=$osize;
      $5=$nsize;
      var $6=$2;
      var $7=$4;
      var $8=$5;
      var $9=(($8)|0)==0;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$3;
      _free($11);
      $1=0;
      __label__ = 5; break;
    case 4: 
      var $13=$3;
      var $14=$5;
      var $15=_realloc($13, $14);
      $1=$15;
      __label__ = 5; break;
    case 5: 
      var $17=$1;
      ;
      return $17;
    default: assert(0, "bad label: " + __label__);
  }
}


function _panic($L) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  var $3=HEAP32[((_stderr)>>2)];
  var $4=$1;
  var $5=_lua_tolstring($4, -1, 0);
  var $6=_fprintf($3, ((STRING_TABLE.__str23155)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$5,tempInt));
  STACKTOP = __stackBase__;
  return 0;
}


function _luaopen_base($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  _base_open($2);
  var $3=$1;
  _luaL_register($3, ((STRING_TABLE.__str164)|0), ((_co_funcs)|0));
  ;
  return 2;
}


function _base_open($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  _lua_pushvalue($2, -10002);
  var $3=$1;
  _lua_setfield($3, -10002, ((STRING_TABLE.__str15179)|0));
  var $4=$1;
  _luaL_register($4, ((STRING_TABLE.__str15179)|0), ((_base_funcs)|0));
  var $5=$1;
  _lua_pushlstring($5, ((STRING_TABLE.__str16180)|0), 7);
  var $6=$1;
  _lua_setfield($6, -10002, ((STRING_TABLE.__str17181)|0));
  var $7=$1;
  _auxopen($7, ((STRING_TABLE.__str18182)|0), 20, 22);
  var $8=$1;
  _auxopen($8, ((STRING_TABLE.__str19183)|0), 24, 26);
  var $9=$1;
  _lua_createtable($9, 0, 1);
  var $10=$1;
  _lua_pushvalue($10, -1);
  var $11=$1;
  var $12=_lua_setmetatable($11, -2);
  var $13=$1;
  _lua_pushlstring($13, ((STRING_TABLE.__str20184)|0), 2);
  var $14=$1;
  _lua_setfield($14, -2, ((STRING_TABLE.__str21185)|0));
  var $15=$1;
  _lua_pushcclosure($15, 28, 1);
  var $16=$1;
  _lua_setfield($16, -10002, ((STRING_TABLE.__str22186)|0));
  ;
  return;
}


function _luaB_cocreate($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $NL;
      $1=$L;
      var $2=$1;
      var $3=_lua_newthread($2);
      $NL=$3;
      var $4=$1;
      var $5=_lua_type($4, 1);
      var $6=(($5)|0)==6;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$1;
      var $9=_lua_iscfunction($8, 1);
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 4; break; } else { var $16 = 1;__label__ = 5; break; }
    case 4: 
      var $12=$1;
      var $13=_luaL_argerror($12, 1, ((STRING_TABLE.__str14178)|0));
      var $14=(($13)|0)!=0;
      var $16 = $14;__label__ = 5; break;
    case 5: 
      var $16;
      var $17=(($16)&1);
      var $18=$1;
      _lua_pushvalue($18, 1);
      var $19=$1;
      var $20=$NL;
      _lua_xmove($19, $20, 1);
      ;
      return 1;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaB_coresume($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $co;
      var $r;
      $2=$L;
      var $3=$2;
      var $4=_lua_tothread($3, 1);
      $co=$4;
      var $5=$co;
      var $6=(($5)|0)!=0;
      if ($6) { var $12 = 1;__label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $8=$2;
      var $9=_luaL_argerror($8, 1, ((STRING_TABLE.__str13177)|0));
      var $10=(($9)|0)!=0;
      var $12 = $10;__label__ = 4; break;
    case 4: 
      var $12;
      var $13=(($12)&1);
      var $14=$2;
      var $15=$co;
      var $16=$2;
      var $17=_lua_gettop($16);
      var $18=((($17)-(1))|0);
      var $19=_auxresume($14, $15, $18);
      $r=$19;
      var $20=$r;
      var $21=(($20)|0) < 0;
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $23=$2;
      _lua_pushboolean($23, 0);
      var $24=$2;
      _lua_insert($24, -2);
      $1=2;
      __label__ = 7; break;
    case 6: 
      var $26=$2;
      _lua_pushboolean($26, 1);
      var $27=$2;
      var $28=$r;
      var $29=((($28)+(1))|0);
      var $30=(((-$29))|0);
      _lua_insert($27, $30);
      var $31=$r;
      var $32=((($31)+(1))|0);
      $1=$32;
      __label__ = 7; break;
    case 7: 
      var $34=$1;
      ;
      return $34;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaB_corunning($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$L;
      var $2=$1;
      var $3=_lua_pushthread($2);
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $6=$1;
      _lua_pushnil($6);
      __label__ = 4; break;
    case 4: 
      ;
      return 1;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaB_costatus($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $co;
      $1=$L;
      var $2=$1;
      var $3=_lua_tothread($2, 1);
      $co=$3;
      var $4=$co;
      var $5=(($4)|0)!=0;
      if ($5) { var $11 = 1;__label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $7=$1;
      var $8=_luaL_argerror($7, 1, ((STRING_TABLE.__str13177)|0));
      var $9=(($8)|0)!=0;
      var $11 = $9;__label__ = 4; break;
    case 4: 
      var $11;
      var $12=(($11)&1);
      var $13=$1;
      var $14=$1;
      var $15=$co;
      var $16=_costatus($14, $15);
      var $17=((_statnames+($16<<2))|0);
      var $18=HEAP32[(($17)>>2)];
      _lua_pushstring($13, $18);
      ;
      return 1;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaB_cowrap($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  var $3=_luaB_cocreate($2);
  var $4=$1;
  _lua_pushcclosure($4, 30, 1);
  ;
  return 1;
}


function _luaB_yield($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  var $3=$1;
  var $4=_lua_gettop($3);
  var $5=_lua_yield($2, $4);
  ;
  return $5;
}


function _luaB_auxwrap($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $co;
      var $r;
      $1=$L;
      var $2=$1;
      var $3=_lua_tothread($2, -10003);
      $co=$3;
      var $4=$1;
      var $5=$co;
      var $6=$1;
      var $7=_lua_gettop($6);
      var $8=_auxresume($4, $5, $7);
      $r=$8;
      var $9=$r;
      var $10=(($9)|0) < 0;
      if ($10) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $12=$1;
      var $13=_lua_isstring($12, -1);
      var $14=(($13)|0)!=0;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $16=$1;
      _luaL_where($16, 1);
      var $17=$1;
      _lua_insert($17, -2);
      var $18=$1;
      _lua_concat($18, 2);
      __label__ = 5; break;
    case 5: 
      var $20=$1;
      var $21=_lua_error($20);
      __label__ = 6; break;
    case 6: 
      var $23=$r;
      ;
      return $23;
    default: assert(0, "bad label: " + __label__);
  }
}


function _auxresume($L, $co, $narg) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $status;
      var $nres;
      $2=$L;
      $3=$co;
      $4=$narg;
      var $5=$2;
      var $6=$3;
      var $7=_costatus($5, $6);
      $status=$7;
      var $8=$3;
      var $9=$4;
      var $10=_lua_checkstack($8, $9);
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $13=$2;
      var $14=_luaL_error($13, ((STRING_TABLE.__str7171)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 4; break;
    case 4: 
      var $16=$status;
      var $17=(($16)|0)!=1;
      if ($17) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $19=$2;
      var $20=$status;
      var $21=((_statnames+($20<<2))|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=_lua_pushfstring($19, ((STRING_TABLE.__str8172)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$22,tempInt));
      $1=-1;
      __label__ = 12; break;
    case 6: 
      var $25=$2;
      var $26=$3;
      var $27=$4;
      _lua_xmove($25, $26, $27);
      var $28=$2;
      var $29=$3;
      _lua_setlevel($28, $29);
      var $30=$3;
      var $31=$4;
      var $32=_lua_resume($30, $31);
      $status=$32;
      var $33=$status;
      var $34=(($33)|0)==0;
      if ($34) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $36=$status;
      var $37=(($36)|0)==1;
      if ($37) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $39=$3;
      var $40=_lua_gettop($39);
      $nres=$40;
      var $41=$2;
      var $42=$nres;
      var $43=((($42)+(1))|0);
      var $44=_lua_checkstack($41, $43);
      var $45=(($44)|0)!=0;
      if ($45) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $47=$2;
      var $48=_luaL_error($47, ((STRING_TABLE.__str9173)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 10; break;
    case 10: 
      var $50=$3;
      var $51=$2;
      var $52=$nres;
      _lua_xmove($50, $51, $52);
      var $53=$nres;
      $1=$53;
      __label__ = 12; break;
    case 11: 
      var $55=$3;
      var $56=$2;
      _lua_xmove($55, $56, 1);
      $1=-1;
      __label__ = 12; break;
    case 12: 
      var $58=$1;
      STACKTOP = __stackBase__;
      return $58;
    default: assert(0, "bad label: " + __label__);
  }
}
_auxresume["X"]=1;

function _costatus($L, $co) {
  var __stackBase__  = STACKTOP; STACKTOP += 100; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $ar=__stackBase__;
      $2=$L;
      $3=$co;
      var $4=$2;
      var $5=$3;
      var $6=(($4)|0)==(($5)|0);
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 12; break;
    case 4: 
      var $9=$3;
      var $10=_lua_status($9);
      if ((($10)|0) == 1) {
        __label__ = 5; break;
      }
      else if ((($10)|0) == 0) {
        __label__ = 6; break;
      }
      else {
      __label__ = 11; break;
      }
      
    case 5: 
      $1=1;
      __label__ = 12; break;
    case 6: 
      var $13=$3;
      var $14=_lua_getstack($13, 0, $ar);
      var $15=(($14)|0) > 0;
      if ($15) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $1=2;
      __label__ = 12; break;
    case 8: 
      var $18=$3;
      var $19=_lua_gettop($18);
      var $20=(($19)|0)==0;
      if ($20) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $1=3;
      __label__ = 12; break;
    case 10: 
      $1=1;
      __label__ = 12; break;
    case 11: 
      $1=3;
      __label__ = 12; break;
    case 12: 
      var $25=$1;
      STACKTOP = __stackBase__;
      return $25;
    default: assert(0, "bad label: " + __label__);
  }
}


function _auxopen($L, $name, $f, $u) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$L;
  $2=$name;
  $3=$f;
  $4=$u;
  var $5=$1;
  var $6=$4;
  _lua_pushcclosure($5, $6, 0);
  var $7=$1;
  var $8=$3;
  _lua_pushcclosure($7, $8, 1);
  var $9=$1;
  var $10=$2;
  _lua_setfield($9, -2, $10);
  ;
  return;
}


function _luaB_ipairs($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  _luaL_checktype($2, 1, 5);
  var $3=$1;
  _lua_pushvalue($3, -10003);
  var $4=$1;
  _lua_pushvalue($4, 1);
  var $5=$1;
  _lua_pushinteger($5, 0);
  ;
  return 3;
}


function _ipairsaux($L) {
  ;
  var __label__;

  var $1;
  var $i;
  $1=$L;
  var $2=$1;
  var $3=_luaL_checkinteger($2, 2);
  $i=$3;
  var $4=$1;
  _luaL_checktype($4, 1, 5);
  var $5=$i;
  var $6=((($5)+(1))|0);
  $i=$6;
  var $7=$1;
  var $8=$i;
  _lua_pushinteger($7, $8);
  var $9=$1;
  var $10=$i;
  _lua_rawgeti($9, 1, $10);
  var $11=$1;
  var $12=_lua_type($11, -1);
  var $13=(($12)|0)==0;
  var $14=$13 ? 0 : 2;
  ;
  return $14;
}


function _luaB_pairs($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  _luaL_checktype($2, 1, 5);
  var $3=$1;
  _lua_pushvalue($3, -10003);
  var $4=$1;
  _lua_pushvalue($4, 1);
  var $5=$1;
  _lua_pushnil($5);
  ;
  return 3;
}


function _luaB_next($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2;
      _luaL_checktype($3, 1, 5);
      var $4=$2;
      _lua_settop($4, 2);
      var $5=$2;
      var $6=_lua_next($5, 1);
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=2;
      __label__ = 5; break;
    case 4: 
      var $10=$2;
      _lua_pushnil($10);
      $1=1;
      __label__ = 5; break;
    case 5: 
      var $12=$1;
      ;
      return $12;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaB_newproxy($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $validproxy;
      $2=$L;
      var $3=$2;
      _lua_settop($3, 1);
      var $4=$2;
      var $5=_lua_newuserdata($4, 0);
      var $6=$2;
      var $7=_lua_toboolean($6, 1);
      var $8=(($7)|0)==0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=1;
      __label__ = 13; break;
    case 4: 
      var $11=$2;
      var $12=_lua_type($11, 1);
      var $13=(($12)|0)==1;
      if ($13) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $15=$2;
      _lua_createtable($15, 0, 0);
      var $16=$2;
      _lua_pushvalue($16, -1);
      var $17=$2;
      _lua_pushboolean($17, 1);
      var $18=$2;
      _lua_rawset($18, -10003);
      __label__ = 11; break;
    case 6: 
      $validproxy=0;
      var $20=$2;
      var $21=_lua_getmetatable($20, 1);
      var $22=(($21)|0)!=0;
      if ($22) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $24=$2;
      _lua_rawget($24, -10003);
      var $25=$2;
      var $26=_lua_toboolean($25, -1);
      $validproxy=$26;
      var $27=$2;
      _lua_settop($27, -2);
      __label__ = 8; break;
    case 8: 
      var $29=$validproxy;
      var $30=(($29)|0)!=0;
      if ($30) { var $36 = 1;__label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $32=$2;
      var $33=_luaL_argerror($32, 1, ((STRING_TABLE.__str23187)|0));
      var $34=(($33)|0)!=0;
      var $36 = $34;__label__ = 10; break;
    case 10: 
      var $36;
      var $37=(($36)&1);
      var $38=$2;
      var $39=_lua_getmetatable($38, 1);
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $42=$2;
      var $43=_lua_setmetatable($42, 2);
      $1=1;
      __label__ = 13; break;
    case 13: 
      var $45=$1;
      ;
      return $45;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaB_newproxy["X"]=1;

function _luaB_assert($L) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2;
      _luaL_checkany($3, 1);
      var $4=$2;
      var $5=_lua_toboolean($4, 1);
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $8=$2;
      var $9=$2;
      var $10=_luaL_optlstring($9, 2, ((STRING_TABLE.__str78)|0), 0);
      var $11=_luaL_error($8, ((STRING_TABLE.__str77)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$10,tempInt));
      $1=$11;
      __label__ = 5; break;
    case 4: 
      var $13=$2;
      var $14=_lua_gettop($13);
      $1=$14;
      __label__ = 5; break;
    case 5: 
      var $16=$1;
      STACKTOP = __stackBase__;
      return $16;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaB_collectgarbage($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      var $ex;
      var $res;
      var $b;
      $2=$L;
      var $3=$2;
      var $4=_luaL_checkoption($3, 1, ((STRING_TABLE.__str72)|0), ((_luaB_collectgarbage_opts)|0));
      $o=$4;
      var $5=$2;
      var $6=_luaL_optinteger($5, 2, 0);
      $ex=$6;
      var $7=$2;
      var $8=$o;
      var $9=((_luaB_collectgarbage_optsnum+($8<<2))|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$ex;
      var $12=_lua_gc($7, $10, $11);
      $res=$12;
      var $13=$o;
      var $14=((_luaB_collectgarbage_optsnum+($13<<2))|0);
      var $15=HEAP32[(($14)>>2)];
      if ((($15)|0) == 3) {
        __label__ = 3; break;
      }
      else if ((($15)|0) == 5) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      var $17=$2;
      var $18=_lua_gc($17, 4, 0);
      $b=$18;
      var $19=$2;
      var $20=$res;
      var $21=(($20)|0);
      var $22=$b;
      var $23=(($22)|0);
      var $24=($23)/(1024);
      var $25=($21)+($24);
      _lua_pushnumber($19, $25);
      $1=1;
      __label__ = 6; break;
    case 4: 
      var $27=$2;
      var $28=$res;
      _lua_pushboolean($27, $28);
      $1=1;
      __label__ = 6; break;
    case 5: 
      var $30=$2;
      var $31=$res;
      var $32=(($31)|0);
      _lua_pushnumber($30, $32);
      $1=1;
      __label__ = 6; break;
    case 6: 
      var $34=$1;
      ;
      return $34;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaB_collectgarbage["X"]=1;

function _luaB_dofile($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $fname;
      var $n;
      $1=$L;
      var $2=$1;
      var $3=_luaL_optlstring($2, 1, 0, 0);
      $fname=$3;
      var $4=$1;
      var $5=_lua_gettop($4);
      $n=$5;
      var $6=$1;
      var $7=$fname;
      var $8=_luaL_loadfile($6, $7);
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$1;
      var $12=_lua_error($11);
      __label__ = 4; break;
    case 4: 
      var $14=$1;
      _lua_call($14, 0, -1);
      var $15=$1;
      var $16=_lua_gettop($15);
      var $17=$n;
      var $18=((($16)-($17))|0);
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaB_error($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $level;
      $1=$L;
      var $2=$1;
      var $3=_luaL_optinteger($2, 2, 1);
      $level=$3;
      var $4=$1;
      _lua_settop($4, 1);
      var $5=$1;
      var $6=_lua_isstring($5, 1);
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $9=$level;
      var $10=(($9)|0) > 0;
      if ($10) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $12=$1;
      var $13=$level;
      _luaL_where($12, $13);
      var $14=$1;
      _lua_pushvalue($14, 1);
      var $15=$1;
      _lua_concat($15, 2);
      __label__ = 5; break;
    case 5: 
      var $17=$1;
      var $18=_lua_error($17);
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaB_gcinfo($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  var $3=$1;
  var $4=_lua_gc($3, 3, 0);
  _lua_pushinteger($2, $4);
  ;
  return 1;
}


function _luaB_getfenv($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$L;
      var $2=$1;
      _getfunc($2, 1);
      var $3=$1;
      var $4=_lua_iscfunction($3, -1);
      var $5=(($4)|0)!=0;
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $7=$1;
      _lua_pushvalue($7, -10002);
      __label__ = 5; break;
    case 4: 
      var $9=$1;
      _lua_getfenv($9, -1);
      __label__ = 5; break;
    case 5: 
      ;
      return 1;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaB_getmetatable($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2;
      _luaL_checkany($3, 1);
      var $4=$2;
      var $5=_lua_getmetatable($4, 1);
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $8=$2;
      _lua_pushnil($8);
      $1=1;
      __label__ = 5; break;
    case 4: 
      var $10=$2;
      var $11=_luaL_getmetafield($10, 1, ((STRING_TABLE.__str56)|0));
      $1=1;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaB_loadfile($L) {
  ;
  var __label__;

  var $1;
  var $fname;
  $1=$L;
  var $2=$1;
  var $3=_luaL_optlstring($2, 1, 0, 0);
  $fname=$3;
  var $4=$1;
  var $5=$1;
  var $6=$fname;
  var $7=_luaL_loadfile($5, $6);
  var $8=_load_aux($4, $7);
  ;
  return $8;
}


function _luaB_load($L) {
  ;
  var __label__;

  var $1;
  var $status;
  var $cname;
  $1=$L;
  var $2=$1;
  var $3=_luaL_optlstring($2, 2, ((STRING_TABLE.__str67)|0), 0);
  $cname=$3;
  var $4=$1;
  _luaL_checktype($4, 1, 6);
  var $5=$1;
  _lua_settop($5, 3);
  var $6=$1;
  var $7=$cname;
  var $8=_lua_load($6, 32, 0, $7);
  $status=$8;
  var $9=$1;
  var $10=$status;
  var $11=_load_aux($9, $10);
  ;
  return $11;
}


function _luaB_loadstring($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $l=__stackBase__;
  var $s;
  var $chunkname;
  $1=$L;
  var $2=$1;
  var $3=_luaL_checklstring($2, 1, $l);
  $s=$3;
  var $4=$1;
  var $5=$s;
  var $6=_luaL_optlstring($4, 2, $5, 0);
  $chunkname=$6;
  var $7=$1;
  var $8=$1;
  var $9=$s;
  var $10=HEAP32[(($l)>>2)];
  var $11=$chunkname;
  var $12=_luaL_loadbuffer($8, $9, $10, $11);
  var $13=_load_aux($7, $12);
  STACKTOP = __stackBase__;
  return $13;
}


function _luaB_pcall($L) {
  ;
  var __label__;

  var $1;
  var $status;
  $1=$L;
  var $2=$1;
  _luaL_checkany($2, 1);
  var $3=$1;
  var $4=$1;
  var $5=_lua_gettop($4);
  var $6=((($5)-(1))|0);
  var $7=_lua_pcall($3, $6, -1, 0);
  $status=$7;
  var $8=$1;
  var $9=$status;
  var $10=(($9)|0)==0;
  var $11=(($10)&1);
  _lua_pushboolean($8, $11);
  var $12=$1;
  _lua_insert($12, 1);
  var $13=$1;
  var $14=_lua_gettop($13);
  ;
  return $14;
}


function _luaB_print($L) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $n;
      var $i;
      var $s;
      $2=$L;
      var $3=$2;
      var $4=_lua_gettop($3);
      $n=$4;
      var $5=$2;
      _lua_getfield($5, -10002, ((STRING_TABLE.__str44)|0));
      $i=1;
      __label__ = 3; break;
    case 3: 
      var $7=$i;
      var $8=$n;
      var $9=(($7)|0) <= (($8)|0);
      if ($9) { __label__ = 4; break; } else { __label__ = 10; break; }
    case 4: 
      var $11=$2;
      _lua_pushvalue($11, -1);
      var $12=$2;
      var $13=$i;
      _lua_pushvalue($12, $13);
      var $14=$2;
      _lua_call($14, 1, 1);
      var $15=$2;
      var $16=_lua_tolstring($15, -1, 0);
      $s=$16;
      var $17=$s;
      var $18=(($17)|0)==0;
      if ($18) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $20=$2;
      var $21=_luaL_error($20, ((STRING_TABLE.__str64)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$21;
      __label__ = 11; break;
    case 6: 
      var $23=$i;
      var $24=(($23)|0) > 1;
      if ($24) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $26=HEAP32[((_stdout)>>2)];
      var $27=_fputs(((STRING_TABLE.__str65)|0), $26);
      __label__ = 8; break;
    case 8: 
      var $29=$s;
      var $30=HEAP32[((_stdout)>>2)];
      var $31=_fputs($29, $30);
      var $32=$2;
      _lua_settop($32, -2);
      __label__ = 9; break;
    case 9: 
      var $34=$i;
      var $35=((($34)+(1))|0);
      $i=$35;
      __label__ = 3; break;
    case 10: 
      var $37=HEAP32[((_stdout)>>2)];
      var $38=_fputs(((STRING_TABLE.__str66192)|0), $37);
      $1=0;
      __label__ = 11; break;
    case 11: 
      var $40=$1;
      STACKTOP = __stackBase__;
      return $40;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaB_print["X"]=1;

function _luaB_rawequal($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  _luaL_checkany($2, 1);
  var $3=$1;
  _luaL_checkany($3, 2);
  var $4=$1;
  var $5=$1;
  var $6=_lua_rawequal($5, 1, 2);
  _lua_pushboolean($4, $6);
  ;
  return 1;
}


function _luaB_rawget($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  _luaL_checktype($2, 1, 5);
  var $3=$1;
  _luaL_checkany($3, 2);
  var $4=$1;
  _lua_settop($4, 2);
  var $5=$1;
  _lua_rawget($5, 1);
  ;
  return 1;
}


function _luaB_rawset($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  _luaL_checktype($2, 1, 5);
  var $3=$1;
  _luaL_checkany($3, 2);
  var $4=$1;
  _luaL_checkany($4, 3);
  var $5=$1;
  _lua_settop($5, 3);
  var $6=$1;
  _lua_rawset($6, 1);
  ;
  return 1;
}


function _luaB_select($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $n;
      var $i;
      $2=$L;
      var $3=$2;
      var $4=_lua_gettop($3);
      $n=$4;
      var $5=$2;
      var $6=_lua_type($5, 1);
      var $7=(($6)|0)==4;
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $9=$2;
      var $10=_lua_tolstring($9, 1, 0);
      var $11=HEAP8[($10)];
      var $12=(($11 << 24) >> 24);
      var $13=(($12)|0)==35;
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $15=$2;
      var $16=$n;
      var $17=((($16)-(1))|0);
      _lua_pushinteger($15, $17);
      $1=1;
      __label__ = 13; break;
    case 5: 
      var $19=$2;
      var $20=_luaL_checkinteger($19, 1);
      $i=$20;
      var $21=$i;
      var $22=(($21)|0) < 0;
      if ($22) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $24=$n;
      var $25=$i;
      var $26=((($24)+($25))|0);
      $i=$26;
      __label__ = 10; break;
    case 7: 
      var $28=$i;
      var $29=$n;
      var $30=(($28)|0) > (($29)|0);
      if ($30) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $32=$n;
      $i=$32;
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $35=$i;
      var $36=1 <= (($35)|0);
      if ($36) { var $42 = 1;__label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $38=$2;
      var $39=_luaL_argerror($38, 1, ((STRING_TABLE.__str63)|0));
      var $40=(($39)|0)!=0;
      var $42 = $40;__label__ = 12; break;
    case 12: 
      var $42;
      var $43=(($42)&1);
      var $44=$n;
      var $45=$i;
      var $46=((($44)-($45))|0);
      $1=$46;
      __label__ = 13; break;
    case 13: 
      var $48=$1;
      ;
      return $48;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaB_select["X"]=1;

function _luaB_setfenv($L) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2;
      _luaL_checktype($3, 2, 5);
      var $4=$2;
      _getfunc($4, 0);
      var $5=$2;
      _lua_pushvalue($5, 2);
      var $6=$2;
      var $7=_lua_isnumber($6, 1);
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $10=$2;
      var $11=_lua_tonumber($10, 1);
      var $12=$11 == 0;
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $14=$2;
      var $15=_lua_pushthread($14);
      var $16=$2;
      _lua_insert($16, -2);
      var $17=$2;
      var $18=_lua_setfenv($17, -2);
      $1=0;
      __label__ = 10; break;
    case 5: 
      var $20=$2;
      var $21=_lua_iscfunction($20, -2);
      var $22=(($21)|0)!=0;
      if ($22) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $24=$2;
      var $25=_lua_setfenv($24, -2);
      var $26=(($25)|0)==0;
      if ($26) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $28=$2;
      var $29=_luaL_error($28, ((STRING_TABLE.__str58)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      $1=1;
      __label__ = 10; break;
    case 10: 
      var $33=$1;
      STACKTOP = __stackBase__;
      return $33;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaB_setmetatable($L) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $t;
      $1=$L;
      var $2=$1;
      var $3=_lua_type($2, 2);
      $t=$3;
      var $4=$1;
      _luaL_checktype($4, 1, 5);
      var $5=$t;
      var $6=(($5)|0)==0;
      if ($6) { var $15 = 1;__label__ = 5; break; } else { __label__ = 3; break; }
    case 3: 
      var $8=$t;
      var $9=(($8)|0)==5;
      if ($9) { var $15 = 1;__label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $11=$1;
      var $12=_luaL_argerror($11, 2, ((STRING_TABLE.__str55)|0));
      var $13=(($12)|0)!=0;
      var $15 = $13;__label__ = 5; break;
    case 5: 
      var $15;
      var $16=(($15)&1);
      var $17=$1;
      var $18=_luaL_getmetafield($17, 1, ((STRING_TABLE.__str56)|0));
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $21=$1;
      var $22=_luaL_error($21, ((STRING_TABLE.__str57)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 7; break;
    case 7: 
      var $24=$1;
      _lua_settop($24, 2);
      var $25=$1;
      var $26=_lua_setmetatable($25, 1);
      STACKTOP = __stackBase__;
      return 1;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaB_tonumber($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $base;
      var $s1;
      var $s2=__stackBase__;
      var $n;
      $2=$L;
      var $3=$2;
      var $4=_luaL_optinteger($3, 2, 10);
      $base=$4;
      var $5=$base;
      var $6=(($5)|0)==10;
      if ($6) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $8=$2;
      _luaL_checkany($8, 1);
      var $9=$2;
      var $10=_lua_isnumber($9, 1);
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=_lua_tonumber($14, 1);
      _lua_pushnumber($13, $15);
      $1=1;
      __label__ = 18; break;
    case 5: 
      __label__ = 17; break;
    case 6: 
      var $18=$2;
      var $19=_luaL_checklstring($18, 1, 0);
      $s1=$19;
      var $20=$base;
      var $21=2 <= (($20)|0);
      if ($21) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $23=$base;
      var $24=(($23)|0) <= 36;
      if ($24) { var $30 = 1;__label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $26=$2;
      var $27=_luaL_argerror($26, 2, ((STRING_TABLE.__str54)|0));
      var $28=(($27)|0)!=0;
      var $30 = $28;__label__ = 9; break;
    case 9: 
      var $30;
      var $31=(($30)&1);
      var $32=$s1;
      var $33=$base;
      var $34=_strtoul($32, $s2, $33);
      $n=$34;
      var $35=$s1;
      var $36=HEAP32[(($s2)>>2)];
      var $37=(($35)|0)!=(($36)|0);
      if ($37) { __label__ = 10; break; } else { __label__ = 16; break; }
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $40=HEAP32[(($s2)>>2)];
      var $41=HEAPU8[($40)];
      var $42=(($41)&255);
      var $43=_isspace($42);
      var $44=(($43)|0)!=0;
      if ($44) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $46=HEAP32[(($s2)>>2)];
      var $47=(($46+1)|0);
      HEAP32[(($s2)>>2)]=$47;
      __label__ = 11; break;
    case 13: 
      var $49=HEAP32[(($s2)>>2)];
      var $50=HEAP8[($49)];
      var $51=(($50 << 24) >> 24);
      var $52=(($51)|0)==0;
      if ($52) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $54=$2;
      var $55=$n;
      var $56=(($55)>>>0);
      _lua_pushnumber($54, $56);
      $1=1;
      __label__ = 18; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $60=$2;
      _lua_pushnil($60);
      $1=1;
      __label__ = 18; break;
    case 18: 
      var $62=$1;
      STACKTOP = __stackBase__;
      return $62;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaB_tonumber["X"]=1;

function _luaB_tostring($L) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2;
      _luaL_checkany($3, 1);
      var $4=$2;
      var $5=_luaL_callmeta($4, 1, ((STRING_TABLE.__str49)|0));
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=1;
      __label__ = 11; break;
    case 4: 
      var $9=$2;
      var $10=_lua_type($9, 1);
      if ((($10)|0) == 3) {
        __label__ = 5; break;
      }
      else if ((($10)|0) == 4) {
        __label__ = 6; break;
      }
      else if ((($10)|0) == 1) {
        __label__ = 7; break;
      }
      else if ((($10)|0) == 0) {
        __label__ = 8; break;
      }
      else {
      __label__ = 9; break;
      }
      
    case 5: 
      var $12=$2;
      var $13=$2;
      var $14=_lua_tolstring($13, 1, 0);
      _lua_pushstring($12, $14);
      __label__ = 10; break;
    case 6: 
      var $16=$2;
      _lua_pushvalue($16, 1);
      __label__ = 10; break;
    case 7: 
      var $18=$2;
      var $19=$2;
      var $20=_lua_toboolean($19, 1);
      var $21=(($20)|0)!=0;
      var $22=$21 ? (((STRING_TABLE.__str50)|0)) : (((STRING_TABLE.__str51)|0));
      _lua_pushstring($18, $22);
      __label__ = 10; break;
    case 8: 
      var $24=$2;
      _lua_pushlstring($24, ((STRING_TABLE.__str52)|0), 3);
      __label__ = 10; break;
    case 9: 
      var $26=$2;
      var $27=$2;
      var $28=$2;
      var $29=_lua_type($28, 1);
      var $30=_lua_typename($27, $29);
      var $31=$2;
      var $32=_lua_topointer($31, 1);
      var $33=_lua_pushfstring($26, ((STRING_TABLE.__str53)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$30,HEAP32[(((tempInt)+(4))>>2)]=$32,tempInt));
      __label__ = 10; break;
    case 10: 
      $1=1;
      __label__ = 11; break;
    case 11: 
      var $36=$1;
      STACKTOP = __stackBase__;
      return $36;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaB_type($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  _luaL_checkany($2, 1);
  var $3=$1;
  var $4=$1;
  var $5=$1;
  var $6=_lua_type($5, 1);
  var $7=_lua_typename($4, $6);
  _lua_pushstring($3, $7);
  ;
  return 1;
}


function _luaB_unpack($L) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $e;
      var $n;
      $2=$L;
      var $3=$2;
      _luaL_checktype($3, 1, 5);
      var $4=$2;
      var $5=_luaL_optinteger($4, 2, 1);
      $i=$5;
      var $6=$2;
      var $7=_lua_type($6, 3);
      var $8=(($7)|0) <= 0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$2;
      var $11=_lua_objlen($10, 1);
      var $16 = $11;__label__ = 5; break;
    case 4: 
      var $13=$2;
      var $14=_luaL_checkinteger($13, 3);
      var $16 = $14;__label__ = 5; break;
    case 5: 
      var $16;
      $e=$16;
      var $17=$i;
      var $18=$e;
      var $19=(($17)|0) > (($18)|0);
      if ($19) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $1=0;
      __label__ = 14; break;
    case 7: 
      var $22=$e;
      var $23=$i;
      var $24=((($22)-($23))|0);
      var $25=((($24)+(1))|0);
      $n=$25;
      var $26=$n;
      var $27=(($26)|0) <= 0;
      if ($27) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $29=$2;
      var $30=$n;
      var $31=_lua_checkstack($29, $30);
      var $32=(($31)|0)!=0;
      if ($32) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $34=$2;
      var $35=_luaL_error($34, ((STRING_TABLE.__str48)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$35;
      __label__ = 14; break;
    case 10: 
      var $37=$2;
      var $38=$i;
      _lua_rawgeti($37, 1, $38);
      __label__ = 11; break;
    case 11: 
      var $40=$i;
      var $41=((($40)+(1))|0);
      $i=$41;
      var $42=$e;
      var $43=(($40)|0) < (($42)|0);
      if ($43) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $45=$2;
      var $46=$i;
      _lua_rawgeti($45, 1, $46);
      __label__ = 11; break;
    case 13: 
      var $48=$n;
      $1=$48;
      __label__ = 14; break;
    case 14: 
      var $50=$1;
      STACKTOP = __stackBase__;
      return $50;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaB_unpack["X"]=1;

function _luaB_xpcall($L) {
  ;
  var __label__;

  var $1;
  var $status;
  $1=$L;
  var $2=$1;
  _luaL_checkany($2, 2);
  var $3=$1;
  _lua_settop($3, 2);
  var $4=$1;
  _lua_insert($4, 1);
  var $5=$1;
  var $6=_lua_pcall($5, 0, -1, 1);
  $status=$6;
  var $7=$1;
  var $8=$status;
  var $9=(($8)|0)==0;
  var $10=(($9)&1);
  _lua_pushboolean($7, $10);
  var $11=$1;
  _lua_replace($11, 1);
  var $12=$1;
  var $13=_lua_gettop($12);
  ;
  return $13;
}


function _getfunc($L, $opt) {
  var __stackBase__  = STACKTOP; STACKTOP += 100; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $ar=__stackBase__;
      var $level;
      $1=$L;
      $2=$opt;
      var $3=$1;
      var $4=_lua_type($3, 1);
      var $5=(($4)|0)==6;
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $7=$1;
      _lua_pushvalue($7, 1);
      __label__ = 14; break;
    case 4: 
      var $9=$2;
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $12=$1;
      var $13=_luaL_optinteger($12, 1, 1);
      var $18 = $13;__label__ = 7; break;
    case 6: 
      var $15=$1;
      var $16=_luaL_checkinteger($15, 1);
      var $18 = $16;__label__ = 7; break;
    case 7: 
      var $18;
      $level=$18;
      var $19=$level;
      var $20=(($19)|0) >= 0;
      if ($20) { var $26 = 1;__label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $22=$1;
      var $23=_luaL_argerror($22, 1, ((STRING_TABLE.__str59)|0));
      var $24=(($23)|0)!=0;
      var $26 = $24;__label__ = 9; break;
    case 9: 
      var $26;
      var $27=(($26)&1);
      var $28=$1;
      var $29=$level;
      var $30=_lua_getstack($28, $29, $ar);
      var $31=(($30)|0)==0;
      if ($31) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $33=$1;
      var $34=_luaL_argerror($33, 1, ((STRING_TABLE.__str60)|0));
      __label__ = 11; break;
    case 11: 
      var $36=$1;
      var $37=_lua_getinfo($36, ((STRING_TABLE.__str61)|0), $ar);
      var $38=$1;
      var $39=_lua_type($38, -1);
      var $40=(($39)|0)==0;
      if ($40) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $42=$1;
      var $43=$level;
      var $44=_luaL_error($42, ((STRING_TABLE.__str62)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$43,tempInt));
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_getfunc["X"]=1;

function _load_aux($L, $status) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$L;
      $3=$status;
      var $4=$3;
      var $5=(($4)|0)==0;
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=1;
      __label__ = 5; break;
    case 4: 
      var $8=$2;
      _lua_pushnil($8);
      var $9=$2;
      _lua_insert($9, -2);
      $1=2;
      __label__ = 5; break;
    case 5: 
      var $11=$1;
      ;
      return $11;
    default: assert(0, "bad label: " + __label__);
  }
}


function _generic_reader($L, $ud, $size) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$L;
      $3=$ud;
      $4=$size;
      var $5=$3;
      var $6=$2;
      _luaL_checkstack($6, 2, ((STRING_TABLE.__str68)|0));
      var $7=$2;
      _lua_pushvalue($7, 1);
      var $8=$2;
      _lua_call($8, 0, 1);
      var $9=$2;
      var $10=_lua_type($9, -1);
      var $11=(($10)|0)==0;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$4;
      HEAP32[(($13)>>2)]=0;
      $1=0;
      __label__ = 9; break;
    case 4: 
      var $15=$2;
      var $16=_lua_isstring($15, -1);
      var $17=(($16)|0)!=0;
      if ($17) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $19=$2;
      _lua_replace($19, 3);
      var $20=$2;
      var $21=$4;
      var $22=_lua_tolstring($20, 3, $21);
      $1=$22;
      __label__ = 9; break;
    case 6: 
      var $24=$2;
      var $25=_luaL_error($24, ((STRING_TABLE.__str69)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      $1=0;
      __label__ = 9; break;
    case 9: 
      var $29=$1;
      STACKTOP = __stackBase__;
      return $29;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaK_nil($fs, $from, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $previous;
      var $pfrom;
      var $pto;
      $1=$fs;
      $2=$from;
      $3=$n;
      var $4=$1;
      var $5=(($4+24)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$1;
      var $8=(($7+28)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($6)|0) > (($9)|0);
      if ($10) { __label__ = 3; break; } else { __label__ = 16; break; }
    case 3: 
      var $12=$1;
      var $13=(($12+24)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0)==0;
      if ($15) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $17=$2;
      var $18=$1;
      var $19=(($18+50)|0);
      var $20=HEAPU8[($19)];
      var $21=(($20)&255);
      var $22=(($17)|0) >= (($21)|0);
      if ($22) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 17; break;
    case 6: 
      __label__ = 15; break;
    case 7: 
      var $26=$1;
      var $27=(($26+24)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=((($28)-(1))|0);
      var $30=$1;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+12)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+($29<<2))|0);
      $previous=$35;
      var $36=$previous;
      var $37=HEAPU32[(($36)>>2)];
      var $38=$37 >>> 0;
      var $39=$38 & 63;
      var $40=(($39)|0)==3;
      if ($40) { __label__ = 8; break; } else { __label__ = 14; break; }
    case 8: 
      var $42=$previous;
      var $43=HEAPU32[(($42)>>2)];
      var $44=$43 >>> 6;
      var $45=$44 & 255;
      $pfrom=$45;
      var $46=$previous;
      var $47=HEAPU32[(($46)>>2)];
      var $48=$47 >>> 23;
      var $49=$48 & 511;
      $pto=$49;
      var $50=$pfrom;
      var $51=$2;
      var $52=(($50)|0) <= (($51)|0);
      if ($52) { __label__ = 9; break; } else { __label__ = 13; break; }
    case 9: 
      var $54=$2;
      var $55=$pto;
      var $56=((($55)+(1))|0);
      var $57=(($54)|0) <= (($56)|0);
      if ($57) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      var $59=$2;
      var $60=$3;
      var $61=((($59)+($60))|0);
      var $62=((($61)-(1))|0);
      var $63=$pto;
      var $64=(($62)|0) > (($63)|0);
      if ($64) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $66=$previous;
      var $67=HEAP32[(($66)>>2)];
      var $68=$67 & 8388607;
      var $69=$2;
      var $70=$3;
      var $71=((($69)+($70))|0);
      var $72=((($71)-(1))|0);
      var $73=$72 << 23;
      var $74=$73 & -8388608;
      var $75=$68 | $74;
      var $76=$previous;
      HEAP32[(($76)>>2)]=$75;
      __label__ = 12; break;
    case 12: 
      __label__ = 17; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $82=$1;
      var $83=$2;
      var $84=$2;
      var $85=$3;
      var $86=((($84)+($85))|0);
      var $87=((($86)-(1))|0);
      var $88=_luaK_codeABC($82, 3, $83, $87, 0);
      __label__ = 17; break;
    case 17: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaK_nil["X"]=1;

function _luaK_codeABC($fs, $o, $a, $b, $c) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$fs;
  $2=$o;
  $3=$a;
  $4=$b;
  $5=$c;
  var $6=$1;
  var $7=$2;
  var $8=$7 << 0;
  var $9=$3;
  var $10=$9 << 6;
  var $11=$8 | $10;
  var $12=$4;
  var $13=$12 << 23;
  var $14=$11 | $13;
  var $15=$5;
  var $16=$15 << 14;
  var $17=$14 | $16;
  var $18=$1;
  var $19=(($18+12)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=(($20+8)|0);
  var $22=HEAP32[(($21)>>2)];
  var $23=_luaK_code($6, $17, $22);
  ;
  return $23;
}


function _luaK_jump($fs) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $jpc;
  var $j=__stackBase__;
  $1=$fs;
  var $2=$1;
  var $3=(($2+32)|0);
  var $4=HEAP32[(($3)>>2)];
  $jpc=$4;
  var $5=$1;
  var $6=(($5+32)|0);
  HEAP32[(($6)>>2)]=-1;
  var $7=$1;
  var $8=_luaK_codeABx($7, 22, 0, 131070);
  HEAP32[(($j)>>2)]=$8;
  var $9=$1;
  var $10=$jpc;
  _luaK_concat($9, $j, $10);
  var $11=HEAP32[(($j)>>2)];
  STACKTOP = __stackBase__;
  return $11;
}


function _luaK_codeABx($fs, $o, $a, $bc) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$fs;
  $2=$o;
  $3=$a;
  $4=$bc;
  var $5=$1;
  var $6=$2;
  var $7=$6 << 0;
  var $8=$3;
  var $9=$8 << 6;
  var $10=$7 | $9;
  var $11=$4;
  var $12=$11 << 14;
  var $13=$10 | $12;
  var $14=$1;
  var $15=(($14+12)|0);
  var $16=HEAP32[(($15)>>2)];
  var $17=(($16+8)|0);
  var $18=HEAP32[(($17)>>2)];
  var $19=_luaK_code($5, $13, $18);
  ;
  return $19;
}


function _luaK_getlabel($fs) {
  ;
  var __label__;

  var $1;
  $1=$fs;
  var $2=$1;
  var $3=(($2+24)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=$1;
  var $6=(($5+28)|0);
  HEAP32[(($6)>>2)]=$4;
  var $7=$1;
  var $8=(($7+24)|0);
  var $9=HEAP32[(($8)>>2)];
  ;
  return $9;
}


function _getjump($fs, $pc) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $offset;
      $2=$fs;
      $3=$pc;
      var $4=$3;
      var $5=$2;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7+12)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9+($4<<2))|0);
      var $11=HEAPU32[(($10)>>2)];
      var $12=$11 >>> 14;
      var $13=$12 & 262143;
      var $14=((($13)-(131071))|0);
      $offset=$14;
      var $15=$offset;
      var $16=(($15)|0)==-1;
      if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=-1;
      __label__ = 5; break;
    case 4: 
      var $19=$3;
      var $20=((($19)+(1))|0);
      var $21=$offset;
      var $22=((($20)+($21))|0);
      $1=$22;
      __label__ = 5; break;
    case 5: 
      var $24=$1;
      ;
      return $24;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaK_setoneret($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$fs;
      $2=$e;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)==13;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$2;
      var $9=(($8)|0);
      HEAP32[(($9)>>2)]=12;
      var $10=$2;
      var $11=(($10+4)|0);
      var $12=$11;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$1;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+12)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+($14<<2))|0);
      var $21=HEAPU32[(($20)>>2)];
      var $22=$21 >>> 6;
      var $23=$22 & 255;
      var $24=$2;
      var $25=(($24+4)|0);
      var $26=$25;
      var $27=(($26)|0);
      HEAP32[(($27)>>2)]=$23;
      __label__ = 7; break;
    case 4: 
      var $29=$2;
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31)|0)==14;
      if ($32) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $34=$2;
      var $35=(($34+4)|0);
      var $36=$35;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$1;
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+12)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+($38<<2))|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$45 & 8388607;
      var $47=$46 | 16777216;
      var $48=$2;
      var $49=(($48+4)|0);
      var $50=$49;
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$1;
      var $54=(($53)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+12)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+($52<<2))|0);
      HEAP32[(($58)>>2)]=$47;
      var $59=$2;
      var $60=(($59)|0);
      HEAP32[(($60)>>2)]=11;
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaK_setoneret["X"]=1;

function _freereg($fs, $reg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$fs;
      $2=$reg;
      var $3=$2;
      var $4=$3 & 256;
      var $5=(($4)|0)!=0;
      if ($5) { __label__ = 5; break; } else { __label__ = 3; break; }
    case 3: 
      var $7=$2;
      var $8=$1;
      var $9=(($8+50)|0);
      var $10=HEAPU8[($9)];
      var $11=(($10)&255);
      var $12=(($7)|0) >= (($11)|0);
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $14=$1;
      var $15=(($14+36)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaK_concat($fs, $l1, $l2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $list;
      var $next;
      $1=$fs;
      $2=$l1;
      $3=$l2;
      var $4=$3;
      var $5=(($4)|0)==-1;
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 11; break;
    case 4: 
      var $8=$2;
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0)==-1;
      if ($10) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $12=$3;
      var $13=$2;
      HEAP32[(($13)>>2)]=$12;
      __label__ = 10; break;
    case 6: 
      var $15=$2;
      var $16=HEAP32[(($15)>>2)];
      $list=$16;
      __label__ = 7; break;
    case 7: 
      var $18=$1;
      var $19=$list;
      var $20=_getjump($18, $19);
      $next=$20;
      var $21=(($20)|0)!=-1;
      if ($21) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $23=$next;
      $list=$23;
      __label__ = 7; break;
    case 9: 
      var $25=$1;
      var $26=$list;
      var $27=$3;
      _fixjump($25, $26, $27);
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaK_ret($fs, $first, $nret) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$fs;
  $2=$first;
  $3=$nret;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  var $7=((($6)+(1))|0);
  var $8=_luaK_codeABC($4, 30, $5, $7, 0);
  ;
  return;
}


function _luaK_patchlist($fs, $list, $target) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$fs;
      $2=$list;
      $3=$target;
      var $4=$3;
      var $5=$1;
      var $6=(($5+24)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($4)|0)==(($7)|0);
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$1;
      var $11=$2;
      _luaK_patchtohere($10, $11);
      __label__ = 5; break;
    case 4: 
      var $13=$1;
      var $14=$2;
      var $15=$3;
      var $16=$3;
      _patchlistaux($13, $14, $15, 255, $16);
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaK_patchtohere($fs, $list) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$fs;
  $2=$list;
  var $3=$1;
  var $4=_luaK_getlabel($3);
  var $5=$1;
  var $6=$1;
  var $7=(($6+32)|0);
  var $8=$2;
  _luaK_concat($5, $7, $8);
  ;
  return;
}


function _patchlistaux($fs, $list, $vtarget, $reg, $dtarget) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $next;
      $1=$fs;
      $2=$list;
      $3=$vtarget;
      $4=$reg;
      $5=$dtarget;
      __label__ = 3; break;
    case 3: 
      var $7=$2;
      var $8=(($7)|0)!=-1;
      if ($8) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $10=$1;
      var $11=$2;
      var $12=_getjump($10, $11);
      $next=$12;
      var $13=$1;
      var $14=$2;
      var $15=$4;
      var $16=_patchtestreg($13, $14, $15);
      var $17=(($16)|0)!=0;
      if ($17) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $19=$1;
      var $20=$2;
      var $21=$3;
      _fixjump($19, $20, $21);
      __label__ = 7; break;
    case 6: 
      var $23=$1;
      var $24=$2;
      var $25=$5;
      _fixjump($23, $24, $25);
      __label__ = 7; break;
    case 7: 
      var $27=$next;
      $2=$27;
      __label__ = 3; break;
    case 8: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _fixjump($fs, $pc, $dest) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $jmp;
      var $offset;
      $1=$fs;
      $2=$pc;
      $3=$dest;
      var $4=$2;
      var $5=$1;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7+12)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9+($4<<2))|0);
      $jmp=$10;
      var $11=$3;
      var $12=$2;
      var $13=((($12)+(1))|0);
      var $14=((($11)-($13))|0);
      $offset=$14;
      var $15=$offset;
      var $16=_abs($15);
      var $17=(($16)|0) > 131071;
      if ($17) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $19=$1;
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      _luaX_syntaxerror($21, ((STRING_TABLE.__str3198)|0));
      __label__ = 4; break;
    case 4: 
      var $23=$jmp;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24 & 16383;
      var $26=$offset;
      var $27=((($26)+(131071))|0);
      var $28=$27 << 14;
      var $29=$28 & -16384;
      var $30=$25 | $29;
      var $31=$jmp;
      HEAP32[(($31)>>2)]=$30;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaK_checkstack($fs, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $newstack;
      $1=$fs;
      $2=$n;
      var $3=$1;
      var $4=(($3+36)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$2;
      var $7=((($5)+($6))|0);
      $newstack=$7;
      var $8=$newstack;
      var $9=$1;
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+75)|0);
      var $13=HEAPU8[($12)];
      var $14=(($13)&255);
      var $15=(($8)|0) > (($14)|0);
      if ($15) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $17=$newstack;
      var $18=(($17)|0) >= 250;
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $20=$1;
      var $21=(($20+12)|0);
      var $22=HEAP32[(($21)>>2)];
      _luaX_syntaxerror($22, ((STRING_TABLE.__str195)|0));
      __label__ = 5; break;
    case 5: 
      var $24=$newstack;
      var $25=(($24) & 255);
      var $26=$1;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+75)|0);
      HEAP8[($29)]=$25;
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaK_reserveregs($fs, $n) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$fs;
  $2=$n;
  var $3=$1;
  var $4=$2;
  _luaK_checkstack($3, $4);
  var $5=$2;
  var $6=$1;
  var $7=(($6+36)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=((($8)+($5))|0);
  HEAP32[(($7)>>2)]=$9;
  ;
  return;
}


function _luaK_stringK($fs, $s) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $o=__stackBase__;
  var $i_o;
  $1=$fs;
  $2=$s;
  $i_o=$o;
  var $3=$2;
  var $4=$3;
  var $5=$i_o;
  var $6=(($5)|0);
  var $7=$6;
  HEAP32[(($7)>>2)]=$4;
  var $8=$i_o;
  var $9=(($8+8)|0);
  HEAP32[(($9)>>2)]=4;
  var $10=$1;
  var $11=_addk($10, $o, $o);
  STACKTOP = __stackBase__;
  return $11;
}


function _addk($fs, $k, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $L;
      var $idx;
      var $f;
      var $oldsize;
      var $i_o;
      var $o2;
      var $o1;
      $2=$fs;
      $3=$k;
      $4=$v;
      var $5=$2;
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      $L=$7;
      var $8=$L;
      var $9=$2;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$3;
      var $13=_luaH_set($8, $11, $12);
      $idx=$13;
      var $14=$2;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      $f=$16;
      var $17=$f;
      var $18=(($17+40)|0);
      var $19=HEAP32[(($18)>>2)];
      $oldsize=$19;
      var $20=$idx;
      var $21=(($20+8)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|0)==3;
      if ($23) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $25=$idx;
      var $26=(($25)|0);
      var $27=$26;
      var $28=(tempDoubleI32[0]=HEAP32[(($27)>>2)],tempDoubleI32[1]=HEAP32[((($27)+(4))>>2)],tempDoubleF64[0]);
      var $29=(($28)&-1);
      $1=$29;
      __label__ = 14; break;
    case 4: 
      var $31=$idx;
      $i_o=$31;
      var $32=$2;
      var $33=(($32+40)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34)|0);
      var $36=$i_o;
      var $37=(($36)|0);
      var $38=$37;
      (tempDoubleF64[0]=$35,HEAP32[(($38)>>2)]=tempDoubleI32[0],HEAP32[((($38)+(4))>>2)]=tempDoubleI32[1]);
      var $39=$i_o;
      var $40=(($39+8)|0);
      HEAP32[(($40)>>2)]=3;
      var $41=$2;
      var $42=(($41+40)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=((($43)+(1))|0);
      var $45=$f;
      var $46=(($45+40)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($44)|0) > (($47)|0);
      if ($48) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $50=$L;
      var $51=$f;
      var $52=(($51+8)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$53;
      var $55=$f;
      var $56=(($55+40)|0);
      var $57=_luaM_growaux_($50, $54, $56, 12, 262143, ((STRING_TABLE.__str2197)|0));
      var $58=$57;
      var $59=$f;
      var $60=(($59+8)|0);
      HEAP32[(($60)>>2)]=$58;
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $63=$oldsize;
      var $64=$f;
      var $65=(($64+40)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($63)|0) < (($66)|0);
      if ($67) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $69=$oldsize;
      var $70=((($69)+(1))|0);
      $oldsize=$70;
      var $71=$f;
      var $72=(($71+8)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+($69)*(12))|0);
      var $75=(($74+8)|0);
      HEAP32[(($75)>>2)]=0;
      __label__ = 7; break;
    case 9: 
      var $77=$4;
      $o2=$77;
      var $78=$2;
      var $79=(($78+40)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$f;
      var $82=(($81+8)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+($80)*(12))|0);
      $o1=$84;
      var $85=$o1;
      var $86=(($85)|0);
      var $87=$o2;
      var $88=(($87)|0);
      var $89=$86;
      var $90=$88;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($89)>>2)]=HEAP32[(($90)>>2)];HEAP32[((($89)+(4))>>2)]=HEAP32[((($90)+(4))>>2)];
      var $91=$o2;
      var $92=(($91+8)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$o1;
      var $95=(($94+8)|0);
      HEAP32[(($95)>>2)]=$93;
      var $96=$4;
      var $97=(($96+8)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($98)|0) >= 4;
      if ($99) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      var $101=$4;
      var $102=(($101)|0);
      var $103=$102;
      var $104=HEAP32[(($103)>>2)];
      var $105=$104;
      var $106=(($105+5)|0);
      var $107=HEAPU8[($106)];
      var $108=(($107)&255);
      var $109=$108 & 3;
      var $110=(($109)|0)!=0;
      if ($110) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $112=$f;
      var $113=$112;
      var $114=$113;
      var $115=(($114+5)|0);
      var $116=HEAPU8[($115)];
      var $117=(($116)&255);
      var $118=$117 & 4;
      var $119=(($118)|0)!=0;
      if ($119) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $121=$L;
      var $122=$f;
      var $123=$122;
      var $124=$4;
      var $125=(($124)|0);
      var $126=$125;
      var $127=HEAP32[(($126)>>2)];
      _luaC_barrierf($121, $123, $127);
      __label__ = 13; break;
    case 13: 
      var $129=$2;
      var $130=(($129+40)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=((($131)+(1))|0);
      HEAP32[(($130)>>2)]=$132;
      $1=$131;
      __label__ = 14; break;
    case 14: 
      var $134=$1;
      ;
      return $134;
    default: assert(0, "bad label: " + __label__);
  }
}
_addk["X"]=1;

function _luaK_numberK($fs, $r) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $o=__stackBase__;
  var $i_o;
  $1=$fs;
  $2=$r;
  $i_o=$o;
  var $3=$2;
  var $4=$i_o;
  var $5=(($4)|0);
  var $6=$5;
  (tempDoubleF64[0]=$3,HEAP32[(($6)>>2)]=tempDoubleI32[0],HEAP32[((($6)+(4))>>2)]=tempDoubleI32[1]);
  var $7=$i_o;
  var $8=(($7+8)|0);
  HEAP32[(($8)>>2)]=3;
  var $9=$1;
  var $10=_addk($9, $o, $o);
  STACKTOP = __stackBase__;
  return $10;
}


function _luaK_setreturns($fs, $e, $nresults) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$fs;
      $2=$e;
      $3=$nresults;
      var $4=$2;
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)==13;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$2;
      var $10=(($9+4)|0);
      var $11=$10;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$1;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+12)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+($13<<2))|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$20 & -8372225;
      var $22=$3;
      var $23=((($22)+(1))|0);
      var $24=$23 << 14;
      var $25=$24 & 8372224;
      var $26=$21 | $25;
      var $27=$2;
      var $28=(($27+4)|0);
      var $29=$28;
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$1;
      var $33=(($32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+12)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+($31<<2))|0);
      HEAP32[(($37)>>2)]=$26;
      __label__ = 7; break;
    case 4: 
      var $39=$2;
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41)|0)==14;
      if ($42) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $44=$2;
      var $45=(($44+4)|0);
      var $46=$45;
      var $47=(($46)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$1;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+12)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+($48<<2))|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$55 & 8388607;
      var $57=$3;
      var $58=((($57)+(1))|0);
      var $59=$58 << 23;
      var $60=$59 & -8388608;
      var $61=$56 | $60;
      var $62=$2;
      var $63=(($62+4)|0);
      var $64=$63;
      var $65=(($64)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$1;
      var $68=(($67)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+12)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+($66<<2))|0);
      HEAP32[(($72)>>2)]=$61;
      var $73=$2;
      var $74=(($73+4)|0);
      var $75=$74;
      var $76=(($75)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=$1;
      var $79=(($78)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80+12)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($82+($77<<2))|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$84 & -16321;
      var $86=$1;
      var $87=(($86+36)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$88 << 6;
      var $90=$89 & 16320;
      var $91=$85 | $90;
      var $92=$2;
      var $93=(($92+4)|0);
      var $94=$93;
      var $95=(($94)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$1;
      var $98=(($97)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99+12)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($101+($96<<2))|0);
      HEAP32[(($102)>>2)]=$91;
      var $103=$1;
      _luaK_reserveregs($103, 1);
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaK_setreturns["X"]=1;

function _luaK_dischargevars($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$fs;
      $2=$e;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      if ((($5)|0) == 6) {
        __label__ = 3; break;
      }
      else if ((($5)|0) == 7) {
        __label__ = 4; break;
      }
      else if ((($5)|0) == 8) {
        __label__ = 5; break;
      }
      else if ((($5)|0) == 9) {
        __label__ = 6; break;
      }
      else if ((($5)|0) == 14 || (($5)|0) == 13) {
        __label__ = 7; break;
      }
      else {
      __label__ = 8; break;
      }
      
    case 3: 
      var $7=$2;
      var $8=(($7)|0);
      HEAP32[(($8)>>2)]=12;
      __label__ = 9; break;
    case 4: 
      var $10=$1;
      var $11=$2;
      var $12=(($11+4)|0);
      var $13=$12;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=_luaK_codeABC($10, 4, 0, $15, 0);
      var $17=$2;
      var $18=(($17+4)|0);
      var $19=$18;
      var $20=(($19)|0);
      HEAP32[(($20)>>2)]=$16;
      var $21=$2;
      var $22=(($21)|0);
      HEAP32[(($22)>>2)]=11;
      __label__ = 9; break;
    case 5: 
      var $24=$1;
      var $25=$2;
      var $26=(($25+4)|0);
      var $27=$26;
      var $28=(($27)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=_luaK_codeABx($24, 5, 0, $29);
      var $31=$2;
      var $32=(($31+4)|0);
      var $33=$32;
      var $34=(($33)|0);
      HEAP32[(($34)>>2)]=$30;
      var $35=$2;
      var $36=(($35)|0);
      HEAP32[(($36)>>2)]=11;
      __label__ = 9; break;
    case 6: 
      var $38=$1;
      var $39=$2;
      var $40=(($39+4)|0);
      var $41=$40;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      _freereg($38, $43);
      var $44=$1;
      var $45=$2;
      var $46=(($45+4)|0);
      var $47=$46;
      var $48=(($47)|0);
      var $49=HEAP32[(($48)>>2)];
      _freereg($44, $49);
      var $50=$1;
      var $51=$2;
      var $52=(($51+4)|0);
      var $53=$52;
      var $54=(($53)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$2;
      var $57=(($56+4)|0);
      var $58=$57;
      var $59=(($58+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=_luaK_codeABC($50, 6, 0, $55, $60);
      var $62=$2;
      var $63=(($62+4)|0);
      var $64=$63;
      var $65=(($64)|0);
      HEAP32[(($65)>>2)]=$61;
      var $66=$2;
      var $67=(($66)|0);
      HEAP32[(($67)>>2)]=11;
      __label__ = 9; break;
    case 7: 
      var $69=$1;
      var $70=$2;
      _luaK_setoneret($69, $70);
      __label__ = 9; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaK_dischargevars["X"]=1;

function _luaK_exp2nextreg($fs, $e) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$fs;
  $2=$e;
  var $3=$1;
  var $4=$2;
  _luaK_dischargevars($3, $4);
  var $5=$1;
  var $6=$2;
  _freeexp($5, $6);
  var $7=$1;
  _luaK_reserveregs($7, 1);
  var $8=$1;
  var $9=$2;
  var $10=$1;
  var $11=(($10+36)|0);
  var $12=HEAP32[(($11)>>2)];
  var $13=((($12)-(1))|0);
  _exp2reg($8, $9, $13);
  ;
  return;
}


function _freeexp($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$fs;
      $2=$e;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)==12;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$1;
      var $9=$2;
      var $10=(($9+4)|0);
      var $11=$10;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      _freereg($8, $13);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _isnumeral($e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$e;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|0)==5;
      if ($5) { __label__ = 3; break; } else { var $17 = 0;__label__ = 5; break; }
    case 3: 
      var $7=$1;
      var $8=(($7+12)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0)==-1;
      if ($10) { __label__ = 4; break; } else { var $17 = 0;__label__ = 5; break; }
    case 4: 
      var $12=$1;
      var $13=(($12+16)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0)==-1;
      var $17 = $15;__label__ = 5; break;
    case 5: 
      var $17;
      var $18=(($17)&1);
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function _exp2reg($fs, $e, $reg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $final;
      var $p_f;
      var $p_t;
      var $fj;
      $1=$fs;
      $2=$e;
      $3=$reg;
      var $4=$1;
      var $5=$2;
      var $6=$3;
      _discharge2reg($4, $5, $6);
      var $7=$2;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0)==10;
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $12=$1;
      var $13=$2;
      var $14=(($13+12)|0);
      var $15=$2;
      var $16=(($15+4)|0);
      var $17=$16;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      _luaK_concat($12, $14, $19);
      __label__ = 4; break;
    case 4: 
      var $21=$2;
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$2;
      var $25=(($24+16)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($23)|0)!=(($26)|0);
      if ($27) { __label__ = 5; break; } else { __label__ = 12; break; }
    case 5: 
      $p_f=-1;
      $p_t=-1;
      var $29=$1;
      var $30=$2;
      var $31=(($30+12)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=_need_value($29, $32);
      var $34=(($33)|0)!=0;
      if ($34) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $36=$1;
      var $37=$2;
      var $38=(($37+16)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=_need_value($36, $39);
      var $41=(($40)|0)!=0;
      if ($41) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $43=$2;
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0)==10;
      if ($46) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $52 = -1;__label__ = 10; break;
    case 9: 
      var $49=$1;
      var $50=_luaK_jump($49);
      var $52 = $50;__label__ = 10; break;
    case 10: 
      var $52;
      $fj=$52;
      var $53=$1;
      var $54=$3;
      var $55=_code_label($53, $54, 0, 1);
      $p_f=$55;
      var $56=$1;
      var $57=$3;
      var $58=_code_label($56, $57, 1, 0);
      $p_t=$58;
      var $59=$1;
      var $60=$fj;
      _luaK_patchtohere($59, $60);
      __label__ = 11; break;
    case 11: 
      var $62=$1;
      var $63=_luaK_getlabel($62);
      $final=$63;
      var $64=$1;
      var $65=$2;
      var $66=(($65+16)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$final;
      var $69=$3;
      var $70=$p_f;
      _patchlistaux($64, $67, $68, $69, $70);
      var $71=$1;
      var $72=$2;
      var $73=(($72+12)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=$final;
      var $76=$3;
      var $77=$p_t;
      _patchlistaux($71, $74, $75, $76, $77);
      __label__ = 12; break;
    case 12: 
      var $79=$2;
      var $80=(($79+12)|0);
      HEAP32[(($80)>>2)]=-1;
      var $81=$2;
      var $82=(($81+16)|0);
      HEAP32[(($82)>>2)]=-1;
      var $83=$3;
      var $84=$2;
      var $85=(($84+4)|0);
      var $86=$85;
      var $87=(($86)|0);
      HEAP32[(($87)>>2)]=$83;
      var $88=$2;
      var $89=(($88)|0);
      HEAP32[(($89)>>2)]=12;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_exp2reg["X"]=1;

function _luaK_exp2anyreg($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$fs;
      $3=$e;
      var $4=$2;
      var $5=$3;
      _luaK_dischargevars($4, $5);
      var $6=$3;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)==12;
      if ($9) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $11=$3;
      var $12=(($11+12)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$3;
      var $15=(($14+16)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($13)|0)!=(($16)|0);
      if ($17) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $19=$3;
      var $20=(($19+4)|0);
      var $21=$20;
      var $22=(($21)|0);
      var $23=HEAP32[(($22)>>2)];
      $1=$23;
      __label__ = 9; break;
    case 5: 
      var $25=$3;
      var $26=(($25+4)|0);
      var $27=$26;
      var $28=(($27)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$2;
      var $31=(($30+50)|0);
      var $32=HEAPU8[($31)];
      var $33=(($32)&255);
      var $34=(($29)|0) >= (($33)|0);
      if ($34) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $36=$2;
      var $37=$3;
      var $38=$3;
      var $39=(($38+4)|0);
      var $40=$39;
      var $41=(($40)|0);
      var $42=HEAP32[(($41)>>2)];
      _exp2reg($36, $37, $42);
      var $43=$3;
      var $44=(($43+4)|0);
      var $45=$44;
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      $1=$47;
      __label__ = 9; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $50=$2;
      var $51=$3;
      _luaK_exp2nextreg($50, $51);
      var $52=$3;
      var $53=(($52+4)|0);
      var $54=$53;
      var $55=(($54)|0);
      var $56=HEAP32[(($55)>>2)];
      $1=$56;
      __label__ = 9; break;
    case 9: 
      var $58=$1;
      ;
      return $58;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaK_exp2anyreg["X"]=1;

function _luaK_exp2val($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$fs;
      $2=$e;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$2;
      var $7=(($6+16)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($5)|0)!=(($8)|0);
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$1;
      var $12=$2;
      var $13=_luaK_exp2anyreg($11, $12);
      __label__ = 5; break;
    case 4: 
      var $15=$1;
      var $16=$2;
      _luaK_dischargevars($15, $16);
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaK_exp2RK($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$fs;
      $3=$e;
      var $4=$2;
      var $5=$3;
      _luaK_exp2val($4, $5);
      var $6=$3;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      if ((($8)|0) == 5 || (($8)|0) == 2 || (($8)|0) == 3 || (($8)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($8)|0) == 4) {
        __label__ = 12; break;
      }
      else {
      __label__ = 15; break;
      }
      
    case 3: 
      var $10=$2;
      var $11=(($10+40)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|0) <= 255;
      if ($13) { __label__ = 4; break; } else { __label__ = 11; break; }
    case 4: 
      var $15=$3;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|0)==1;
      if ($18) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $20=$2;
      var $21=_nilK($20);
      var $45 = $21;__label__ = 10; break;
    case 6: 
      var $23=$3;
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|0)==5;
      if ($26) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $28=$2;
      var $29=$3;
      var $30=(($29+4)|0);
      var $31=$30;
      var $32=(tempDoubleI32[0]=HEAP32[(($31)>>2)],tempDoubleI32[1]=HEAP32[((($31)+(4))>>2)],tempDoubleF64[0]);
      var $33=_luaK_numberK($28, $32);
      var $43 = $33;__label__ = 9; break;
    case 8: 
      var $35=$2;
      var $36=$3;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|0)==2;
      var $40=(($39)&1);
      var $41=_boolK($35, $40);
      var $43 = $41;__label__ = 9; break;
    case 9: 
      var $43;
      var $45 = $43;__label__ = 10; break;
    case 10: 
      var $45;
      var $46=$3;
      var $47=(($46+4)|0);
      var $48=$47;
      var $49=(($48)|0);
      HEAP32[(($49)>>2)]=$45;
      var $50=$3;
      var $51=(($50)|0);
      HEAP32[(($51)>>2)]=4;
      var $52=$3;
      var $53=(($52+4)|0);
      var $54=$53;
      var $55=(($54)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$56 | 256;
      $1=$57;
      __label__ = 17; break;
    case 11: 
      __label__ = 16; break;
    case 12: 
      var $60=$3;
      var $61=(($60+4)|0);
      var $62=$61;
      var $63=(($62)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64)|0) <= 255;
      if ($65) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $67=$3;
      var $68=(($67+4)|0);
      var $69=$68;
      var $70=(($69)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$71 | 256;
      $1=$72;
      __label__ = 17; break;
    case 14: 
      __label__ = 16; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $76=$2;
      var $77=$3;
      var $78=_luaK_exp2anyreg($76, $77);
      $1=$78;
      __label__ = 17; break;
    case 17: 
      var $80=$1;
      ;
      return $80;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaK_exp2RK["X"]=1;

function _nilK($fs) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $k=__stackBase__;
  var $v=(__stackBase__)+(12);
  var $i_o;
  $1=$fs;
  var $2=(($v+8)|0);
  HEAP32[(($2)>>2)]=0;
  $i_o=$k;
  var $3=$1;
  var $4=(($3+4)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$5;
  var $7=$i_o;
  var $8=(($7)|0);
  var $9=$8;
  HEAP32[(($9)>>2)]=$6;
  var $10=$i_o;
  var $11=(($10+8)|0);
  HEAP32[(($11)>>2)]=5;
  var $12=$1;
  var $13=_addk($12, $k, $v);
  STACKTOP = __stackBase__;
  return $13;
}


function _boolK($fs, $b) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $o=__stackBase__;
  var $i_o;
  $1=$fs;
  $2=$b;
  $i_o=$o;
  var $3=$2;
  var $4=$i_o;
  var $5=(($4)|0);
  var $6=$5;
  HEAP32[(($6)>>2)]=$3;
  var $7=$i_o;
  var $8=(($7+8)|0);
  HEAP32[(($8)>>2)]=1;
  var $9=$1;
  var $10=_addk($9, $o, $o);
  STACKTOP = __stackBase__;
  return $10;
}


function _luaK_storevar($fs, $var, $ex) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $e;
      var $e1;
      var $e2;
      $1=$fs;
      $2=$var;
      $3=$ex;
      var $4=$2;
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      if ((($6)|0) == 6) {
        __label__ = 3; break;
      }
      else if ((($6)|0) == 7) {
        __label__ = 4; break;
      }
      else if ((($6)|0) == 8) {
        __label__ = 5; break;
      }
      else if ((($6)|0) == 9) {
        __label__ = 6; break;
      }
      else {
      __label__ = 7; break;
      }
      
    case 3: 
      var $8=$1;
      var $9=$3;
      _freeexp($8, $9);
      var $10=$1;
      var $11=$3;
      var $12=$2;
      var $13=(($12+4)|0);
      var $14=$13;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      _exp2reg($10, $11, $16);
      __label__ = 9; break;
    case 4: 
      var $18=$1;
      var $19=$3;
      var $20=_luaK_exp2anyreg($18, $19);
      $e=$20;
      var $21=$1;
      var $22=$e;
      var $23=$2;
      var $24=(($23+4)|0);
      var $25=$24;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=_luaK_codeABC($21, 8, $22, $27, 0);
      __label__ = 8; break;
    case 5: 
      var $30=$1;
      var $31=$3;
      var $32=_luaK_exp2anyreg($30, $31);
      $e1=$32;
      var $33=$1;
      var $34=$e1;
      var $35=$2;
      var $36=(($35+4)|0);
      var $37=$36;
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=_luaK_codeABx($33, 7, $34, $39);
      __label__ = 8; break;
    case 6: 
      var $42=$1;
      var $43=$3;
      var $44=_luaK_exp2RK($42, $43);
      $e2=$44;
      var $45=$1;
      var $46=$2;
      var $47=(($46+4)|0);
      var $48=$47;
      var $49=(($48)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$2;
      var $52=(($51+4)|0);
      var $53=$52;
      var $54=(($53+4)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$e2;
      var $57=_luaK_codeABC($45, 9, $50, $55, $56);
      __label__ = 8; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $60=$1;
      var $61=$3;
      _freeexp($60, $61);
      __label__ = 9; break;
    case 9: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaK_storevar["X"]=1;

function _luaK_self($fs, $e, $key) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $func;
  $1=$fs;
  $2=$e;
  $3=$key;
  var $4=$1;
  var $5=$2;
  var $6=_luaK_exp2anyreg($4, $5);
  var $7=$1;
  var $8=$2;
  _freeexp($7, $8);
  var $9=$1;
  var $10=(($9+36)|0);
  var $11=HEAP32[(($10)>>2)];
  $func=$11;
  var $12=$1;
  _luaK_reserveregs($12, 2);
  var $13=$1;
  var $14=$func;
  var $15=$2;
  var $16=(($15+4)|0);
  var $17=$16;
  var $18=(($17)|0);
  var $19=HEAP32[(($18)>>2)];
  var $20=$1;
  var $21=$3;
  var $22=_luaK_exp2RK($20, $21);
  var $23=_luaK_codeABC($13, 11, $14, $19, $22);
  var $24=$1;
  var $25=$3;
  _freeexp($24, $25);
  var $26=$func;
  var $27=$2;
  var $28=(($27+4)|0);
  var $29=$28;
  var $30=(($29)|0);
  HEAP32[(($30)>>2)]=$26;
  var $31=$2;
  var $32=(($31)|0);
  HEAP32[(($32)>>2)]=12;
  ;
  return;
}


function _luaK_goiftrue($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $pc;
      $1=$fs;
      $2=$e;
      var $3=$1;
      var $4=$2;
      _luaK_dischargevars($3, $4);
      var $5=$2;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      if ((($7)|0) == 4 || (($7)|0) == 5 || (($7)|0) == 2) {
        __label__ = 3; break;
      }
      else if ((($7)|0) == 10) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      $pc=-1;
      __label__ = 6; break;
    case 4: 
      var $10=$1;
      var $11=$2;
      _invertjump($10, $11);
      var $12=$2;
      var $13=(($12+4)|0);
      var $14=$13;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      $pc=$16;
      __label__ = 6; break;
    case 5: 
      var $18=$1;
      var $19=$2;
      var $20=_jumponcond($18, $19, 0);
      $pc=$20;
      __label__ = 6; break;
    case 6: 
      var $22=$1;
      var $23=$2;
      var $24=(($23+16)|0);
      var $25=$pc;
      _luaK_concat($22, $24, $25);
      var $26=$1;
      var $27=$2;
      var $28=(($27+12)|0);
      var $29=HEAP32[(($28)>>2)];
      _luaK_patchtohere($26, $29);
      var $30=$2;
      var $31=(($30+12)|0);
      HEAP32[(($31)>>2)]=-1;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _invertjump($fs, $e) {
  ;
  var __label__;

  var $1;
  var $2;
  var $pc;
  $1=$fs;
  $2=$e;
  var $3=$1;
  var $4=$2;
  var $5=(($4+4)|0);
  var $6=$5;
  var $7=(($6)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=_getjumpcontrol($3, $8);
  $pc=$9;
  var $10=$pc;
  var $11=HEAP32[(($10)>>2)];
  var $12=$11 & -16321;
  var $13=$pc;
  var $14=HEAPU32[(($13)>>2)];
  var $15=$14 >>> 6;
  var $16=$15 & 255;
  var $17=(($16)|0)!=0;
  var $18=$17 ^ 1;
  var $19=(($18)&1);
  var $20=$19 << 6;
  var $21=$20 & 16320;
  var $22=$12 | $21;
  var $23=$pc;
  HEAP32[(($23)>>2)]=$22;
  ;
  return;
}


function _jumponcond($fs, $e, $cond) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ie;
      $2=$fs;
      $3=$e;
      $4=$cond;
      var $5=$3;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|0)==11;
      if ($8) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $10=$3;
      var $11=(($10+4)|0);
      var $12=$11;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$2;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+12)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+($14<<2))|0);
      var $21=HEAP32[(($20)>>2)];
      $ie=$21;
      var $22=$ie;
      var $23=$22 >>> 0;
      var $24=$23 & 63;
      var $25=(($24)|0)==19;
      if ($25) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $27=$2;
      var $28=(($27+24)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=((($29)-(1))|0);
      HEAP32[(($28)>>2)]=$30;
      var $31=$2;
      var $32=$ie;
      var $33=$32 >>> 23;
      var $34=$33 & 511;
      var $35=$4;
      var $36=(($35)|0)!=0;
      var $37=$36 ^ 1;
      var $38=(($37)&1);
      var $39=_condjump($31, 26, $34, 0, $38);
      $1=$39;
      __label__ = 7; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $42=$2;
      var $43=$3;
      _discharge2anyreg($42, $43);
      var $44=$2;
      var $45=$3;
      _freeexp($44, $45);
      var $46=$2;
      var $47=$3;
      var $48=(($47+4)|0);
      var $49=$48;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$4;
      var $53=_condjump($46, 27, 255, $51, $52);
      $1=$53;
      __label__ = 7; break;
    case 7: 
      var $55=$1;
      ;
      return $55;
    default: assert(0, "bad label: " + __label__);
  }
}
_jumponcond["X"]=1;

function _luaK_indexed($fs, $t, $k) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$fs;
  $2=$t;
  $3=$k;
  var $4=$1;
  var $5=$3;
  var $6=_luaK_exp2RK($4, $5);
  var $7=$2;
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9+4)|0);
  HEAP32[(($10)>>2)]=$6;
  var $11=$2;
  var $12=(($11)|0);
  HEAP32[(($12)>>2)]=9;
  ;
  return;
}


function _luaK_prefix($fs, $op, $e) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $e2=__stackBase__;
      $1=$fs;
      $2=$op;
      $3=$e;
      var $4=(($e2+16)|0);
      HEAP32[(($4)>>2)]=-1;
      var $5=(($e2+12)|0);
      HEAP32[(($5)>>2)]=-1;
      var $6=(($e2)|0);
      HEAP32[(($6)>>2)]=5;
      var $7=(($e2+4)|0);
      var $8=$7;
      (tempDoubleF64[0]=0,HEAP32[(($8)>>2)]=tempDoubleI32[0],HEAP32[((($8)+(4))>>2)]=tempDoubleI32[1]);
      var $9=$2;
      if ((($9)|0) == 0) {
        __label__ = 3; break;
      }
      else if ((($9)|0) == 1) {
        __label__ = 6; break;
      }
      else if ((($9)|0) == 2) {
        __label__ = 7; break;
      }
      else {
      __label__ = 8; break;
      }
      
    case 3: 
      var $11=$3;
      var $12=_isnumeral($11);
      var $13=(($12)|0)!=0;
      if ($13) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $15=$1;
      var $16=$3;
      var $17=_luaK_exp2anyreg($15, $16);
      __label__ = 5; break;
    case 5: 
      var $19=$1;
      var $20=$3;
      _codearith($19, 18, $20, $e2);
      __label__ = 9; break;
    case 6: 
      var $22=$1;
      var $23=$3;
      _codenot($22, $23);
      __label__ = 9; break;
    case 7: 
      var $25=$1;
      var $26=$3;
      var $27=_luaK_exp2anyreg($25, $26);
      var $28=$1;
      var $29=$3;
      _codearith($28, 20, $29, $e2);
      __label__ = 9; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _codearith($fs, $op, $e1, $e2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $o2;
      var $o1;
      $1=$fs;
      $2=$op;
      $3=$e1;
      $4=$e2;
      var $5=$2;
      var $6=$3;
      var $7=$4;
      var $8=_constfolding($5, $6, $7);
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 12; break;
    case 4: 
      var $12=$2;
      var $13=(($12)|0)!=18;
      if ($13) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $15=$2;
      var $16=(($15)|0)!=20;
      if ($16) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $18=$1;
      var $19=$4;
      var $20=_luaK_exp2RK($18, $19);
      var $23 = $20;__label__ = 8; break;
    case 7: 
      var $23 = 0;__label__ = 8; break;
    case 8: 
      var $23;
      $o2=$23;
      var $24=$1;
      var $25=$3;
      var $26=_luaK_exp2RK($24, $25);
      $o1=$26;
      var $27=$o1;
      var $28=$o2;
      var $29=(($27)|0) > (($28)|0);
      if ($29) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $31=$1;
      var $32=$3;
      _freeexp($31, $32);
      var $33=$1;
      var $34=$4;
      _freeexp($33, $34);
      __label__ = 11; break;
    case 10: 
      var $36=$1;
      var $37=$4;
      _freeexp($36, $37);
      var $38=$1;
      var $39=$3;
      _freeexp($38, $39);
      __label__ = 11; break;
    case 11: 
      var $41=$1;
      var $42=$2;
      var $43=$o1;
      var $44=$o2;
      var $45=_luaK_codeABC($41, $42, 0, $43, $44);
      var $46=$3;
      var $47=(($46+4)|0);
      var $48=$47;
      var $49=(($48)|0);
      HEAP32[(($49)>>2)]=$45;
      var $50=$3;
      var $51=(($50)|0);
      HEAP32[(($51)>>2)]=11;
      __label__ = 12; break;
    case 12: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_codearith["X"]=1;

function _luaK_fixline($fs, $line) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$fs;
  $2=$line;
  var $3=$2;
  var $4=$1;
  var $5=(($4+24)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=((($6)-(1))|0);
  var $8=$1;
  var $9=(($8)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+20)|0);
  var $12=HEAP32[(($11)>>2)];
  var $13=(($12+($7<<2))|0);
  HEAP32[(($13)>>2)]=$3;
  ;
  return;
}


function _getjumpcontrol($fs, $pc) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $pi;
      $2=$fs;
      $3=$pc;
      var $4=$3;
      var $5=$2;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7+12)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9+($4<<2))|0);
      $pi=$10;
      var $11=$3;
      var $12=(($11)|0) >= 1;
      if ($12) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $14=$pi;
      var $15=((($14)-(4))|0);
      var $16=HEAPU32[(($15)>>2)];
      var $17=$16 >>> 0;
      var $18=$17 & 63;
      var $19=((STRING_TABLE._luaP_opmodes+$18)|0);
      var $20=HEAPU8[($19)];
      var $21=(($20)&255);
      var $22=$21 & 128;
      var $23=(($22)|0)!=0;
      if ($23) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $25=$pi;
      var $26=((($25)-(4))|0);
      $1=$26;
      __label__ = 6; break;
    case 5: 
      var $28=$pi;
      $1=$28;
      __label__ = 6; break;
    case 6: 
      var $30=$1;
      ;
      return $30;
    default: assert(0, "bad label: " + __label__);
  }
}


function _codenot($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $temp;
      $1=$fs;
      $2=$e;
      var $3=$1;
      var $4=$2;
      _luaK_dischargevars($3, $4);
      var $5=$2;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      if ((($7)|0) == 1 || (($7)|0) == 3) {
        __label__ = 3; break;
      }
      else if ((($7)|0) == 4 || (($7)|0) == 5 || (($7)|0) == 2) {
        __label__ = 4; break;
      }
      else if ((($7)|0) == 10) {
        __label__ = 5; break;
      }
      else if ((($7)|0) == 11 || (($7)|0) == 12) {
        __label__ = 6; break;
      }
      else {
      __label__ = 7; break;
      }
      
    case 3: 
      var $9=$2;
      var $10=(($9)|0);
      HEAP32[(($10)>>2)]=2;
      __label__ = 8; break;
    case 4: 
      var $12=$2;
      var $13=(($12)|0);
      HEAP32[(($13)>>2)]=3;
      __label__ = 8; break;
    case 5: 
      var $15=$1;
      var $16=$2;
      _invertjump($15, $16);
      __label__ = 8; break;
    case 6: 
      var $18=$1;
      var $19=$2;
      _discharge2anyreg($18, $19);
      var $20=$1;
      var $21=$2;
      _freeexp($20, $21);
      var $22=$1;
      var $23=$2;
      var $24=(($23+4)|0);
      var $25=$24;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=_luaK_codeABC($22, 19, 0, $27, 0);
      var $29=$2;
      var $30=(($29+4)|0);
      var $31=$30;
      var $32=(($31)|0);
      HEAP32[(($32)>>2)]=$28;
      var $33=$2;
      var $34=(($33)|0);
      HEAP32[(($34)>>2)]=11;
      __label__ = 8; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $37=$2;
      var $38=(($37+16)|0);
      var $39=HEAP32[(($38)>>2)];
      $temp=$39;
      var $40=$2;
      var $41=(($40+12)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$2;
      var $44=(($43+16)|0);
      HEAP32[(($44)>>2)]=$42;
      var $45=$temp;
      var $46=$2;
      var $47=(($46+12)|0);
      HEAP32[(($47)>>2)]=$45;
      var $48=$1;
      var $49=$2;
      var $50=(($49+16)|0);
      var $51=HEAP32[(($50)>>2)];
      _removevalues($48, $51);
      var $52=$1;
      var $53=$2;
      var $54=(($53+12)|0);
      var $55=HEAP32[(($54)>>2)];
      _removevalues($52, $55);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_codenot["X"]=1;

function _luaK_infix($fs, $op, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$fs;
      $2=$op;
      $3=$v;
      var $4=$2;
      if ((($4)|0) == 13) {
        __label__ = 3; break;
      }
      else if ((($4)|0) == 14) {
        __label__ = 4; break;
      }
      else if ((($4)|0) == 6) {
        __label__ = 5; break;
      }
      else if ((($4)|0) == 0 || (($4)|0) == 1 || (($4)|0) == 2 || (($4)|0) == 3 || (($4)|0) == 4 || (($4)|0) == 5) {
        __label__ = 6; break;
      }
      else {
      __label__ = 9; break;
      }
      
    case 3: 
      var $6=$1;
      var $7=$3;
      _luaK_goiftrue($6, $7);
      __label__ = 10; break;
    case 4: 
      var $9=$1;
      var $10=$3;
      _luaK_goiffalse($9, $10);
      __label__ = 10; break;
    case 5: 
      var $12=$1;
      var $13=$3;
      _luaK_exp2nextreg($12, $13);
      __label__ = 10; break;
    case 6: 
      var $15=$3;
      var $16=_isnumeral($15);
      var $17=(($16)|0)!=0;
      if ($17) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $19=$1;
      var $20=$3;
      var $21=_luaK_exp2RK($19, $20);
      __label__ = 8; break;
    case 8: 
      __label__ = 10; break;
    case 9: 
      var $24=$1;
      var $25=$3;
      var $26=_luaK_exp2RK($24, $25);
      __label__ = 10; break;
    case 10: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaK_goiffalse($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $pc;
      $1=$fs;
      $2=$e;
      var $3=$1;
      var $4=$2;
      _luaK_dischargevars($3, $4);
      var $5=$2;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      if ((($7)|0) == 1 || (($7)|0) == 3) {
        __label__ = 3; break;
      }
      else if ((($7)|0) == 10) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      $pc=-1;
      __label__ = 6; break;
    case 4: 
      var $10=$2;
      var $11=(($10+4)|0);
      var $12=$11;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      $pc=$14;
      __label__ = 6; break;
    case 5: 
      var $16=$1;
      var $17=$2;
      var $18=_jumponcond($16, $17, 1);
      $pc=$18;
      __label__ = 6; break;
    case 6: 
      var $20=$1;
      var $21=$2;
      var $22=(($21+12)|0);
      var $23=$pc;
      _luaK_concat($20, $22, $23);
      var $24=$1;
      var $25=$2;
      var $26=(($25+16)|0);
      var $27=HEAP32[(($26)>>2)];
      _luaK_patchtohere($24, $27);
      var $28=$2;
      var $29=(($28+16)|0);
      HEAP32[(($29)>>2)]=-1;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaK_posfix($fs, $op, $e1, $e2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$fs;
      $2=$op;
      $3=$e1;
      $4=$e2;
      var $5=$2;
      if ((($5)|0) == 13) {
        __label__ = 3; break;
      }
      else if ((($5)|0) == 14) {
        __label__ = 4; break;
      }
      else if ((($5)|0) == 6) {
        __label__ = 5; break;
      }
      else if ((($5)|0) == 0) {
        __label__ = 10; break;
      }
      else if ((($5)|0) == 1) {
        __label__ = 11; break;
      }
      else if ((($5)|0) == 2) {
        __label__ = 12; break;
      }
      else if ((($5)|0) == 3) {
        __label__ = 13; break;
      }
      else if ((($5)|0) == 4) {
        __label__ = 14; break;
      }
      else if ((($5)|0) == 5) {
        __label__ = 15; break;
      }
      else if ((($5)|0) == 8) {
        __label__ = 16; break;
      }
      else if ((($5)|0) == 7) {
        __label__ = 17; break;
      }
      else if ((($5)|0) == 9) {
        __label__ = 18; break;
      }
      else if ((($5)|0) == 10) {
        __label__ = 19; break;
      }
      else if ((($5)|0) == 11) {
        __label__ = 20; break;
      }
      else if ((($5)|0) == 12) {
        __label__ = 21; break;
      }
      else {
      __label__ = 22; break;
      }
      
    case 3: 
      var $7=$1;
      var $8=$4;
      _luaK_dischargevars($7, $8);
      var $9=$1;
      var $10=$4;
      var $11=(($10+16)|0);
      var $12=$3;
      var $13=(($12+16)|0);
      var $14=HEAP32[(($13)>>2)];
      _luaK_concat($9, $11, $14);
      var $15=$3;
      var $16=$4;
      var $17=$15;
      var $18=$16;
      assert(20 % 1 === 0, 'memcpy given ' + 20 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];HEAP32[((($17)+(12))>>2)]=HEAP32[((($18)+(12))>>2)];HEAP32[((($17)+(16))>>2)]=HEAP32[((($18)+(16))>>2)];
      __label__ = 23; break;
    case 4: 
      var $20=$1;
      var $21=$4;
      _luaK_dischargevars($20, $21);
      var $22=$1;
      var $23=$4;
      var $24=(($23+12)|0);
      var $25=$3;
      var $26=(($25+12)|0);
      var $27=HEAP32[(($26)>>2)];
      _luaK_concat($22, $24, $27);
      var $28=$3;
      var $29=$4;
      var $30=$28;
      var $31=$29;
      assert(20 % 1 === 0, 'memcpy given ' + 20 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];HEAP32[((($30)+(12))>>2)]=HEAP32[((($31)+(12))>>2)];HEAP32[((($30)+(16))>>2)]=HEAP32[((($31)+(16))>>2)];
      __label__ = 23; break;
    case 5: 
      var $33=$1;
      var $34=$4;
      _luaK_exp2val($33, $34);
      var $35=$4;
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|0)==11;
      if ($38) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $40=$4;
      var $41=(($40+4)|0);
      var $42=$41;
      var $43=(($42)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$1;
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+12)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+($44<<2))|0);
      var $51=HEAPU32[(($50)>>2)];
      var $52=$51 >>> 0;
      var $53=$52 & 63;
      var $54=(($53)|0)==21;
      if ($54) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $56=$1;
      var $57=$3;
      _freeexp($56, $57);
      var $58=$4;
      var $59=(($58+4)|0);
      var $60=$59;
      var $61=(($60)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$1;
      var $64=(($63)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+12)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+($62<<2))|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$69 & 8388607;
      var $71=$3;
      var $72=(($71+4)|0);
      var $73=$72;
      var $74=(($73)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$75 << 23;
      var $77=$76 & -8388608;
      var $78=$70 | $77;
      var $79=$4;
      var $80=(($79+4)|0);
      var $81=$80;
      var $82=(($81)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$1;
      var $85=(($84)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+12)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88+($83<<2))|0);
      HEAP32[(($89)>>2)]=$78;
      var $90=$3;
      var $91=(($90)|0);
      HEAP32[(($91)>>2)]=11;
      var $92=$4;
      var $93=(($92+4)|0);
      var $94=$93;
      var $95=(($94)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$3;
      var $98=(($97+4)|0);
      var $99=$98;
      var $100=(($99)|0);
      HEAP32[(($100)>>2)]=$96;
      __label__ = 9; break;
    case 8: 
      var $102=$1;
      var $103=$4;
      _luaK_exp2nextreg($102, $103);
      var $104=$1;
      var $105=$3;
      var $106=$4;
      _codearith($104, 21, $105, $106);
      __label__ = 9; break;
    case 9: 
      __label__ = 23; break;
    case 10: 
      var $109=$1;
      var $110=$3;
      var $111=$4;
      _codearith($109, 12, $110, $111);
      __label__ = 23; break;
    case 11: 
      var $113=$1;
      var $114=$3;
      var $115=$4;
      _codearith($113, 13, $114, $115);
      __label__ = 23; break;
    case 12: 
      var $117=$1;
      var $118=$3;
      var $119=$4;
      _codearith($117, 14, $118, $119);
      __label__ = 23; break;
    case 13: 
      var $121=$1;
      var $122=$3;
      var $123=$4;
      _codearith($121, 15, $122, $123);
      __label__ = 23; break;
    case 14: 
      var $125=$1;
      var $126=$3;
      var $127=$4;
      _codearith($125, 16, $126, $127);
      __label__ = 23; break;
    case 15: 
      var $129=$1;
      var $130=$3;
      var $131=$4;
      _codearith($129, 17, $130, $131);
      __label__ = 23; break;
    case 16: 
      var $133=$1;
      var $134=$3;
      var $135=$4;
      _codecomp($133, 23, 1, $134, $135);
      __label__ = 23; break;
    case 17: 
      var $137=$1;
      var $138=$3;
      var $139=$4;
      _codecomp($137, 23, 0, $138, $139);
      __label__ = 23; break;
    case 18: 
      var $141=$1;
      var $142=$3;
      var $143=$4;
      _codecomp($141, 24, 1, $142, $143);
      __label__ = 23; break;
    case 19: 
      var $145=$1;
      var $146=$3;
      var $147=$4;
      _codecomp($145, 25, 1, $146, $147);
      __label__ = 23; break;
    case 20: 
      var $149=$1;
      var $150=$3;
      var $151=$4;
      _codecomp($149, 24, 0, $150, $151);
      __label__ = 23; break;
    case 21: 
      var $153=$1;
      var $154=$3;
      var $155=$4;
      _codecomp($153, 25, 0, $154, $155);
      __label__ = 23; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaK_posfix["X"]=1;

function _codecomp($fs, $op, $cond, $e1, $e2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $o1;
      var $o2;
      var $temp;
      $1=$fs;
      $2=$op;
      $3=$cond;
      $4=$e1;
      $5=$e2;
      var $6=$1;
      var $7=$4;
      var $8=_luaK_exp2RK($6, $7);
      $o1=$8;
      var $9=$1;
      var $10=$5;
      var $11=_luaK_exp2RK($9, $10);
      $o2=$11;
      var $12=$1;
      var $13=$5;
      _freeexp($12, $13);
      var $14=$1;
      var $15=$4;
      _freeexp($14, $15);
      var $16=$3;
      var $17=(($16)|0)==0;
      if ($17) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $19=$2;
      var $20=(($19)|0)!=23;
      if ($20) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $22=$o1;
      $temp=$22;
      var $23=$o2;
      $o1=$23;
      var $24=$temp;
      $o2=$24;
      $3=1;
      __label__ = 5; break;
    case 5: 
      var $26=$1;
      var $27=$2;
      var $28=$3;
      var $29=$o1;
      var $30=$o2;
      var $31=_condjump($26, $27, $28, $29, $30);
      var $32=$4;
      var $33=(($32+4)|0);
      var $34=$33;
      var $35=(($34)|0);
      HEAP32[(($35)>>2)]=$31;
      var $36=$4;
      var $37=(($36)|0);
      HEAP32[(($37)>>2)]=10;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_codecomp["X"]=1;

function _luaK_code($fs, $i, $line) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $f;
      $1=$fs;
      $2=$i;
      $3=$line;
      var $4=$1;
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      $f=$6;
      var $7=$1;
      _dischargejpc($7);
      var $8=$1;
      var $9=(($8+24)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=((($10)+(1))|0);
      var $12=$f;
      var $13=(($12+44)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($11)|0) > (($14)|0);
      if ($15) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $17=$1;
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$f;
      var $21=(($20+12)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      var $24=$f;
      var $25=(($24+44)|0);
      var $26=_luaM_growaux_($19, $23, $25, 4, 2147483645, ((STRING_TABLE.__str1196)|0));
      var $27=$26;
      var $28=$f;
      var $29=(($28+12)|0);
      HEAP32[(($29)>>2)]=$27;
      __label__ = 4; break;
    case 4: 
      var $31=$2;
      var $32=$1;
      var $33=(($32+24)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$f;
      var $36=(($35+12)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+($34<<2))|0);
      HEAP32[(($38)>>2)]=$31;
      var $39=$1;
      var $40=(($39+24)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=((($41)+(1))|0);
      var $43=$f;
      var $44=(($43+48)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($42)|0) > (($45)|0);
      if ($46) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $48=$1;
      var $49=(($48+16)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$f;
      var $52=(($51+20)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$53;
      var $55=$f;
      var $56=(($55+48)|0);
      var $57=_luaM_growaux_($50, $54, $56, 4, 2147483645, ((STRING_TABLE.__str1196)|0));
      var $58=$57;
      var $59=$f;
      var $60=(($59+20)|0);
      HEAP32[(($60)>>2)]=$58;
      __label__ = 6; break;
    case 6: 
      var $62=$3;
      var $63=$1;
      var $64=(($63+24)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$f;
      var $67=(($66+20)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+($65<<2))|0);
      HEAP32[(($69)>>2)]=$62;
      var $70=$1;
      var $71=(($70+24)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=((($72)+(1))|0);
      HEAP32[(($71)>>2)]=$73;
      ;
      return $72;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaK_code["X"]=1;

function _luaK_setlist($fs, $base, $nelems, $tostore) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $c;
      var $b;
      $1=$fs;
      $2=$base;
      $3=$nelems;
      $4=$tostore;
      var $5=$3;
      var $6=((($5)-(1))|0);
      var $7=((((($6)|0))/(50))&-1);
      var $8=((($7)+(1))|0);
      $c=$8;
      var $9=$4;
      var $10=(($9)|0)==-1;
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $15 = 0;__label__ = 5; break;
    case 4: 
      var $13=$4;
      var $15 = $13;__label__ = 5; break;
    case 5: 
      var $15;
      $b=$15;
      var $16=$c;
      var $17=(($16)|0) <= 511;
      if ($17) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $19=$1;
      var $20=$2;
      var $21=$b;
      var $22=$c;
      var $23=_luaK_codeABC($19, 34, $20, $21, $22);
      __label__ = 8; break;
    case 7: 
      var $25=$1;
      var $26=$2;
      var $27=$b;
      var $28=_luaK_codeABC($25, 34, $26, $27, 0);
      var $29=$1;
      var $30=$c;
      var $31=$1;
      var $32=(($31+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=_luaK_code($29, $30, $35);
      __label__ = 8; break;
    case 8: 
      var $38=$2;
      var $39=((($38)+(1))|0);
      var $40=$1;
      var $41=(($40+36)|0);
      HEAP32[(($41)>>2)]=$39;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaK_setlist["X"]=1;

function _dischargejpc($fs) {
  ;
  var __label__;

  var $1;
  $1=$fs;
  var $2=$1;
  var $3=$1;
  var $4=(($3+32)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$1;
  var $7=(($6+24)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$1;
  var $10=(($9+24)|0);
  var $11=HEAP32[(($10)>>2)];
  _patchlistaux($2, $5, $8, 255, $11);
  var $12=$1;
  var $13=(($12+32)|0);
  HEAP32[(($13)>>2)]=-1;
  ;
  return;
}


function _condjump($fs, $op, $A, $B, $C) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$fs;
  $2=$op;
  $3=$A;
  $4=$B;
  $5=$C;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=$5;
  var $11=_luaK_codeABC($6, $7, $8, $9, $10);
  var $12=$1;
  var $13=_luaK_jump($12);
  ;
  return $13;
}


function _discharge2anyreg($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$fs;
      $2=$e;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)!=12;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$1;
      _luaK_reserveregs($8, 1);
      var $9=$1;
      var $10=$2;
      var $11=$1;
      var $12=(($11+36)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=((($13)-(1))|0);
      _discharge2reg($9, $10, $14);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _removevalues($fs, $list) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$fs;
      $2=$list;
      __label__ = 3; break;
    case 3: 
      var $4=$2;
      var $5=(($4)|0)!=-1;
      if ($5) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $7=$1;
      var $8=$2;
      var $9=_patchtestreg($7, $8, 255);
      __label__ = 5; break;
    case 5: 
      var $11=$1;
      var $12=$2;
      var $13=_getjump($11, $12);
      $2=$13;
      __label__ = 3; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _patchtestreg($fs, $node, $reg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      $2=$fs;
      $3=$node;
      $4=$reg;
      var $5=$2;
      var $6=$3;
      var $7=_getjumpcontrol($5, $6);
      $i=$7;
      var $8=$i;
      var $9=HEAPU32[(($8)>>2)];
      var $10=$9 >>> 0;
      var $11=$10 & 63;
      var $12=(($11)|0)!=27;
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 9; break;
    case 4: 
      var $15=$4;
      var $16=(($15)|0)!=255;
      if ($16) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $18=$4;
      var $19=$i;
      var $20=HEAPU32[(($19)>>2)];
      var $21=$20 >>> 23;
      var $22=$21 & 511;
      var $23=(($18)|0)!=(($22)|0);
      if ($23) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $25=$i;
      var $26=HEAP32[(($25)>>2)];
      var $27=$26 & -16321;
      var $28=$4;
      var $29=$28 << 6;
      var $30=$29 & 16320;
      var $31=$27 | $30;
      var $32=$i;
      HEAP32[(($32)>>2)]=$31;
      __label__ = 8; break;
    case 7: 
      var $34=$i;
      var $35=HEAPU32[(($34)>>2)];
      var $36=$35 >>> 23;
      var $37=$36 & 511;
      var $38=$37 << 6;
      var $39=26 | $38;
      var $40=$i;
      var $41=HEAPU32[(($40)>>2)];
      var $42=$41 >>> 14;
      var $43=$42 & 511;
      var $44=$43 << 14;
      var $45=$39 | $44;
      var $46=$i;
      HEAP32[(($46)>>2)]=$45;
      __label__ = 8; break;
    case 8: 
      $1=1;
      __label__ = 9; break;
    case 9: 
      var $49=$1;
      ;
      return $49;
    default: assert(0, "bad label: " + __label__);
  }
}
_patchtestreg["X"]=1;

function _luaG_checkopenop($i) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$i;
      var $3=$2;
      var $4=$3 >>> 0;
      var $5=$4 & 63;
      if ((($5)|0) == 28 || (($5)|0) == 29 || (($5)|0) == 30 || (($5)|0) == 34) {
        __label__ = 3; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 3: 
      var $7=$2;
      var $8=$7 >>> 23;
      var $9=$8 & 511;
      var $10=(($9)|0)==0;
      if ($10) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      $1=0;
      __label__ = 7; break;
    case 5: 
      $1=1;
      __label__ = 7; break;
    case 6: 
      $1=0;
      __label__ = 7; break;
    case 7: 
      var $15=$1;
      ;
      return $15;
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_getstack($L, $level, $ar) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $status;
      var $ci;
      $1=$L;
      $2=$level;
      $3=$ar;
      var $4=$1;
      var $5=(($4+20)|0);
      var $6=HEAP32[(($5)>>2)];
      $ci=$6;
      __label__ = 3; break;
    case 3: 
      var $8=$2;
      var $9=(($8)|0) > 0;
      if ($9) { __label__ = 4; break; } else { var $17 = 0;__label__ = 5; break; }
    case 4: 
      var $11=$ci;
      var $12=$1;
      var $13=(($12+40)|0);
      var $14=HEAPU32[(($13)>>2)];
      var $15=(($11)>>>0) > (($14)>>>0);
      var $17 = $15;__label__ = 5; break;
    case 5: 
      var $17;
      if ($17) { __label__ = 6; break; } else { __label__ = 10; break; }
    case 6: 
      var $19=$2;
      var $20=((($19)-(1))|0);
      $2=$20;
      var $21=$ci;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|0);
      var $25=$24;
      var $26=HEAP32[(($25)>>2)];
      var $27=$26;
      var $28=$27;
      var $29=(($28+6)|0);
      var $30=HEAP8[($29)];
      var $31=(($30 << 24) >> 24)!=0;
      if ($31) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $33=$ci;
      var $34=(($33+20)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$2;
      var $37=((($36)-($35))|0);
      $2=$37;
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $40=$ci;
      var $41=((($40)-(24))|0);
      $ci=$41;
      __label__ = 3; break;
    case 10: 
      var $43=$2;
      var $44=(($43)|0)==0;
      if ($44) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $46=$ci;
      var $47=$1;
      var $48=(($47+40)|0);
      var $49=HEAPU32[(($48)>>2)];
      var $50=(($46)>>>0) > (($49)>>>0);
      if ($50) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $status=1;
      var $52=$ci;
      var $53=$1;
      var $54=(($53+40)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$52;
      var $57=$55;
      var $58=((($56)-($57))|0);
      var $59=((((($58)|0))/(24))&-1);
      var $60=$3;
      var $61=(($60+96)|0);
      HEAP32[(($61)>>2)]=$59;
      __label__ = 17; break;
    case 13: 
      var $63=$2;
      var $64=(($63)|0) < 0;
      if ($64) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      $status=1;
      var $66=$3;
      var $67=(($66+96)|0);
      HEAP32[(($67)>>2)]=0;
      __label__ = 16; break;
    case 15: 
      $status=0;
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $71=$status;
      ;
      return $71;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_getstack["X"]=1;

function _discharge2reg($fs, $e, $reg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $pc;
      $1=$fs;
      $2=$e;
      $3=$reg;
      var $4=$1;
      var $5=$2;
      _luaK_dischargevars($4, $5);
      var $6=$2;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      if ((($8)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($8)|0) == 3 || (($8)|0) == 2) {
        __label__ = 4; break;
      }
      else if ((($8)|0) == 4) {
        __label__ = 5; break;
      }
      else if ((($8)|0) == 5) {
        __label__ = 6; break;
      }
      else if ((($8)|0) == 11) {
        __label__ = 7; break;
      }
      else if ((($8)|0) == 12) {
        __label__ = 8; break;
      }
      else {
      __label__ = 11; break;
      }
      
    case 3: 
      var $10=$1;
      var $11=$3;
      _luaK_nil($10, $11, 1);
      __label__ = 12; break;
    case 4: 
      var $13=$1;
      var $14=$3;
      var $15=$2;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|0)==2;
      var $19=(($18)&1);
      var $20=_luaK_codeABC($13, 2, $14, $19, 0);
      __label__ = 12; break;
    case 5: 
      var $22=$1;
      var $23=$3;
      var $24=$2;
      var $25=(($24+4)|0);
      var $26=$25;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=_luaK_codeABx($22, 1, $23, $28);
      __label__ = 12; break;
    case 6: 
      var $31=$1;
      var $32=$3;
      var $33=$1;
      var $34=$2;
      var $35=(($34+4)|0);
      var $36=$35;
      var $37=(tempDoubleI32[0]=HEAP32[(($36)>>2)],tempDoubleI32[1]=HEAP32[((($36)+(4))>>2)],tempDoubleF64[0]);
      var $38=_luaK_numberK($33, $37);
      var $39=_luaK_codeABx($31, 1, $32, $38);
      __label__ = 12; break;
    case 7: 
      var $41=$2;
      var $42=(($41+4)|0);
      var $43=$42;
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$1;
      var $47=(($46)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+12)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+($45<<2))|0);
      $pc=$51;
      var $52=$pc;
      var $53=HEAP32[(($52)>>2)];
      var $54=$53 & -16321;
      var $55=$3;
      var $56=$55 << 6;
      var $57=$56 & 16320;
      var $58=$54 | $57;
      var $59=$pc;
      HEAP32[(($59)>>2)]=$58;
      __label__ = 12; break;
    case 8: 
      var $61=$3;
      var $62=$2;
      var $63=(($62+4)|0);
      var $64=$63;
      var $65=(($64)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($61)|0)!=(($66)|0);
      if ($67) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $69=$1;
      var $70=$3;
      var $71=$2;
      var $72=(($71+4)|0);
      var $73=$72;
      var $74=(($73)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=_luaK_codeABC($69, 0, $70, $75, 0);
      __label__ = 10; break;
    case 10: 
      __label__ = 12; break;
    case 11: 
      __label__ = 13; break;
    case 12: 
      var $80=$3;
      var $81=$2;
      var $82=(($81+4)|0);
      var $83=$82;
      var $84=(($83)|0);
      HEAP32[(($84)>>2)]=$80;
      var $85=$2;
      var $86=(($85)|0);
      HEAP32[(($86)>>2)]=12;
      __label__ = 13; break;
    case 13: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_discharge2reg["X"]=1;

function _constfolding($op, $e1, $e2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $v1;
      var $v2;
      var $r;
      $2=$op;
      $3=$e1;
      $4=$e2;
      var $5=$3;
      var $6=_isnumeral($5);
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$4;
      var $10=_isnumeral($9);
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      $1=0;
      __label__ = 22; break;
    case 5: 
      var $14=$3;
      var $15=(($14+4)|0);
      var $16=$15;
      var $17=(tempDoubleI32[0]=HEAP32[(($16)>>2)],tempDoubleI32[1]=HEAP32[((($16)+(4))>>2)],tempDoubleF64[0]);
      $v1=$17;
      var $18=$4;
      var $19=(($18+4)|0);
      var $20=$19;
      var $21=(tempDoubleI32[0]=HEAP32[(($20)>>2)],tempDoubleI32[1]=HEAP32[((($20)+(4))>>2)],tempDoubleF64[0]);
      $v2=$21;
      var $22=$2;
      if ((($22)|0) == 12) {
        __label__ = 6; break;
      }
      else if ((($22)|0) == 13) {
        __label__ = 7; break;
      }
      else if ((($22)|0) == 14) {
        __label__ = 8; break;
      }
      else if ((($22)|0) == 15) {
        __label__ = 9; break;
      }
      else if ((($22)|0) == 16) {
        __label__ = 12; break;
      }
      else if ((($22)|0) == 17) {
        __label__ = 15; break;
      }
      else if ((($22)|0) == 18) {
        __label__ = 16; break;
      }
      else if ((($22)|0) == 20) {
        __label__ = 17; break;
      }
      else {
      __label__ = 18; break;
      }
      
    case 6: 
      var $24=$v1;
      var $25=$v2;
      var $26=($24)+($25);
      $r=$26;
      __label__ = 19; break;
    case 7: 
      var $28=$v1;
      var $29=$v2;
      var $30=($28)-($29);
      $r=$30;
      __label__ = 19; break;
    case 8: 
      var $32=$v1;
      var $33=$v2;
      var $34=($32)*($33);
      $r=$34;
      __label__ = 19; break;
    case 9: 
      var $36=$v2;
      var $37=$36 == 0;
      if ($37) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      $1=0;
      __label__ = 22; break;
    case 11: 
      var $40=$v1;
      var $41=$v2;
      var $42=($40)/($41);
      $r=$42;
      __label__ = 19; break;
    case 12: 
      var $44=$v2;
      var $45=$44 == 0;
      if ($45) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $1=0;
      __label__ = 22; break;
    case 14: 
      var $48=$v1;
      var $49=$v1;
      var $50=$v2;
      var $51=($49)/($50);
      var $52=_floor($51);
      var $53=$v2;
      var $54=($52)*($53);
      var $55=($48)-($54);
      $r=$55;
      __label__ = 19; break;
    case 15: 
      var $57=$v1;
      var $58=$v2;
      var $59=_llvm_pow_f64($57, $58);
      $r=$59;
      __label__ = 19; break;
    case 16: 
      var $61=$v1;
      var $62=(-$61);
      $r=$62;
      __label__ = 19; break;
    case 17: 
      $1=0;
      __label__ = 22; break;
    case 18: 
      $r=0;
      __label__ = 19; break;
    case 19: 
      var $66=$r;
      var $67=$r;
      var $68=$66 == $67;
      if ($68) { __label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      $1=0;
      __label__ = 22; break;
    case 21: 
      var $71=$r;
      var $72=$3;
      var $73=(($72+4)|0);
      var $74=$73;
      (tempDoubleF64[0]=$71,HEAP32[(($74)>>2)]=tempDoubleI32[0],HEAP32[((($74)+(4))>>2)]=tempDoubleI32[1]);
      $1=1;
      __label__ = 22; break;
    case 22: 
      var $76=$1;
      ;
      return $76;
    default: assert(0, "bad label: " + __label__);
  }
}
_constfolding["X"]=1;

function _need_value($fs, $list) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $2=$fs;
      $3=$list;
      __label__ = 3; break;
    case 3: 
      var $5=$3;
      var $6=(($5)|0)!=-1;
      if ($6) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $8=$2;
      var $9=$3;
      var $10=_getjumpcontrol($8, $9);
      var $11=HEAP32[(($10)>>2)];
      $i=$11;
      var $12=$i;
      var $13=$12 >>> 0;
      var $14=$13 & 63;
      var $15=(($14)|0)!=27;
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=1;
      __label__ = 9; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $19=$2;
      var $20=$3;
      var $21=_getjump($19, $20);
      $3=$21;
      __label__ = 3; break;
    case 8: 
      $1=0;
      __label__ = 9; break;
    case 9: 
      var $24=$1;
      ;
      return $24;
    default: assert(0, "bad label: " + __label__);
  }
}


function _code_label($fs, $A, $b, $jump) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$fs;
  $2=$A;
  $3=$b;
  $4=$jump;
  var $5=$1;
  var $6=_luaK_getlabel($5);
  var $7=$1;
  var $8=$2;
  var $9=$3;
  var $10=$4;
  var $11=_luaK_codeABC($7, 2, $8, $9, $10);
  ;
  return $11;
}


function _lua_getinfo($L, $what, $ar) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $status;
      var $f;
      var $ci;
      var $func;
      var $i_o;
      $1=$L;
      $2=$what;
      $3=$ar;
      $f=0;
      $ci=0;
      var $4=$2;
      var $5=HEAP8[($4)];
      var $6=(($5 << 24) >> 24);
      var $7=(($6)|0)==62;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$1;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=((($11)-(12))|0);
      $func=$12;
      var $13=$1;
      var $14=$2;
      var $15=(($14+1)|0);
      $2=$15;
      var $16=$func;
      var $17=(($16)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      $f=$20;
      var $21=$1;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=((($23)-(12))|0);
      HEAP32[(($22)>>2)]=$24;
      __label__ = 7; break;
    case 4: 
      var $26=$3;
      var $27=(($26+96)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0)!=0;
      if ($29) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $31=$1;
      var $32=(($31+40)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$3;
      var $35=(($34+96)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($33+($36)*(24))|0);
      $ci=$37;
      var $38=$ci;
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40)|0);
      var $42=$41;
      var $43=HEAP32[(($42)>>2)];
      var $44=$43;
      $f=$44;
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $47=$1;
      var $48=$2;
      var $49=$3;
      var $50=$f;
      var $51=$ci;
      var $52=_auxgetinfo($47, $48, $49, $50, $51);
      $status=$52;
      var $53=$2;
      var $54=_strchr($53, 102);
      var $55=(($54)|0)!=0;
      if ($55) { __label__ = 8; break; } else { __label__ = 15; break; }
    case 8: 
      var $57=$f;
      var $58=(($57)|0)==0;
      if ($58) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $60=$1;
      var $61=(($60+8)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+8)|0);
      HEAP32[(($63)>>2)]=0;
      __label__ = 11; break;
    case 10: 
      var $65=$1;
      var $66=(($65+8)|0);
      var $67=HEAP32[(($66)>>2)];
      $i_o=$67;
      var $68=$f;
      var $69=$68;
      var $70=$i_o;
      var $71=(($70)|0);
      var $72=$71;
      HEAP32[(($72)>>2)]=$69;
      var $73=$i_o;
      var $74=(($73+8)|0);
      HEAP32[(($74)>>2)]=6;
      __label__ = 11; break;
    case 11: 
      var $76=$1;
      var $77=(($76+28)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$78;
      var $80=$1;
      var $81=(($80+8)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$82;
      var $84=$79;
      var $85=$83;
      var $86=((($84)-($85))|0);
      var $87=(($86)|0) <= 12;
      if ($87) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $89=$1;
      _luaD_growstack($89, 1);
      __label__ = 14; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $92=$1;
      var $93=(($92+8)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94+12)|0);
      HEAP32[(($93)>>2)]=$95;
      __label__ = 15; break;
    case 15: 
      var $97=$2;
      var $98=_strchr($97, 76);
      var $99=(($98)|0)!=0;
      if ($99) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $101=$1;
      var $102=$f;
      _collectvalidlines($101, $102);
      __label__ = 17; break;
    case 17: 
      var $104=$status;
      ;
      return $104;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_getinfo["X"]=1;

function _auxgetinfo($L, $what, $ar, $f, $ci) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $status;
      $2=$L;
      $3=$what;
      $4=$ar;
      $5=$f;
      $6=$ci;
      $status=1;
      var $7=$5;
      var $8=(($7)|0)==0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$4;
      _info_tailcall($10);
      var $11=$status;
      $1=$11;
      __label__ = 24; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $14=$3;
      var $15=HEAP8[($14)];
      var $16=(($15 << 24) >> 24)!=0;
      if ($16) { __label__ = 6; break; } else { __label__ = 23; break; }
    case 6: 
      var $18=$3;
      var $19=HEAP8[($18)];
      var $20=(($19 << 24) >> 24);
      if ((($20)|0) == 83) {
        __label__ = 7; break;
      }
      else if ((($20)|0) == 108) {
        __label__ = 8; break;
      }
      else if ((($20)|0) == 117) {
        __label__ = 12; break;
      }
      else if ((($20)|0) == 110) {
        __label__ = 13; break;
      }
      else if ((($20)|0) == 76 || (($20)|0) == 102) {
        __label__ = 19; break;
      }
      else {
      __label__ = 20; break;
      }
      
    case 7: 
      var $22=$4;
      var $23=$5;
      _funcinfo($22, $23);
      __label__ = 21; break;
    case 8: 
      var $25=$6;
      var $26=(($25)|0)!=0;
      if ($26) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $28=$2;
      var $29=$6;
      var $30=_currentline($28, $29);
      var $33 = $30;__label__ = 11; break;
    case 10: 
      var $33 = -1;__label__ = 11; break;
    case 11: 
      var $33;
      var $34=$4;
      var $35=(($34+20)|0);
      HEAP32[(($35)>>2)]=$33;
      __label__ = 21; break;
    case 12: 
      var $37=$5;
      var $38=$37;
      var $39=(($38+7)|0);
      var $40=HEAPU8[($39)];
      var $41=(($40)&255);
      var $42=$4;
      var $43=(($42+24)|0);
      HEAP32[(($43)>>2)]=$41;
      __label__ = 21; break;
    case 13: 
      var $45=$6;
      var $46=(($45)|0)!=0;
      if ($46) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $48=$2;
      var $49=$6;
      var $50=$4;
      var $51=(($50+4)|0);
      var $52=_getfuncname($48, $49, $51);
      var $55 = $52;__label__ = 16; break;
    case 15: 
      var $55 = 0;__label__ = 16; break;
    case 16: 
      var $55;
      var $56=$4;
      var $57=(($56+8)|0);
      HEAP32[(($57)>>2)]=$55;
      var $58=$4;
      var $59=(($58+8)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60)|0)==0;
      if ($61) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $63=$4;
      var $64=(($63+8)|0);
      HEAP32[(($64)>>2)]=((__str13265)|0);
      var $65=$4;
      var $66=(($65+4)|0);
      HEAP32[(($66)>>2)]=0;
      __label__ = 18; break;
    case 18: 
      __label__ = 21; break;
    case 19: 
      __label__ = 21; break;
    case 20: 
      $status=0;
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $72=$3;
      var $73=(($72+1)|0);
      $3=$73;
      __label__ = 5; break;
    case 23: 
      var $75=$status;
      $1=$75;
      __label__ = 24; break;
    case 24: 
      var $77=$1;
      ;
      return $77;
    default: assert(0, "bad label: " + __label__);
  }
}
_auxgetinfo["X"]=1;

function _collectvalidlines($L, $f) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $t;
      var $lineinfo;
      var $i;
      var $i_o;
      var $i_o1;
      $1=$L;
      $2=$f;
      var $3=$2;
      var $4=(($3)|0)==0;
      if ($4) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $6=$2;
      var $7=$6;
      var $8=(($7+6)|0);
      var $9=HEAPU8[($8)];
      var $10=(($9)&255);
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $13=$1;
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+8)|0);
      HEAP32[(($16)>>2)]=0;
      __label__ = 10; break;
    case 5: 
      var $18=$1;
      var $19=_luaH_new($18, 0, 0);
      $t=$19;
      var $20=$2;
      var $21=$20;
      var $22=(($21+16)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+20)|0);
      var $25=HEAP32[(($24)>>2)];
      $lineinfo=$25;
      $i=0;
      __label__ = 6; break;
    case 6: 
      var $27=$i;
      var $28=$2;
      var $29=$28;
      var $30=(($29+16)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+48)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($27)|0) < (($33)|0);
      if ($34) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $36=$1;
      var $37=$t;
      var $38=$i;
      var $39=$lineinfo;
      var $40=(($39+($38<<2))|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=_luaH_setnum($36, $37, $41);
      $i_o=$42;
      var $43=$i_o;
      var $44=(($43)|0);
      var $45=$44;
      HEAP32[(($45)>>2)]=1;
      var $46=$i_o;
      var $47=(($46+8)|0);
      HEAP32[(($47)>>2)]=1;
      __label__ = 8; break;
    case 8: 
      var $49=$i;
      var $50=((($49)+(1))|0);
      $i=$50;
      __label__ = 6; break;
    case 9: 
      var $52=$1;
      var $53=(($52+8)|0);
      var $54=HEAP32[(($53)>>2)];
      $i_o1=$54;
      var $55=$t;
      var $56=$55;
      var $57=$i_o1;
      var $58=(($57)|0);
      var $59=$58;
      HEAP32[(($59)>>2)]=$56;
      var $60=$i_o1;
      var $61=(($60+8)|0);
      HEAP32[(($61)>>2)]=5;
      __label__ = 10; break;
    case 10: 
      var $63=$1;
      var $64=(($63+28)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$65;
      var $67=$1;
      var $68=(($67+8)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$69;
      var $71=$66;
      var $72=$70;
      var $73=((($71)-($72))|0);
      var $74=(($73)|0) <= 12;
      if ($74) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $76=$1;
      _luaD_growstack($76, 1);
      __label__ = 13; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $79=$1;
      var $80=(($79+8)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81+12)|0);
      HEAP32[(($80)>>2)]=$82;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_collectvalidlines["X"]=1;

function _luaG_checkcode($pt) {
  ;
  var __label__;

  var $1;
  $1=$pt;
  var $2=$1;
  var $3=$1;
  var $4=(($3+44)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=_symbexec($2, $5, 255);
  var $7=(($6)|0)!=0;
  var $8=(($7)&1);
  ;
  return $8;
}


function _symbexec($pt, $lastpc, $reg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $pc;
      var $last;
      var $i;
      var $op;
      var $a;
      var $b;
      var $c;
      var $dest;
      var $j;
      var $d;
      var $dest1;
      var $nup;
      var $j2;
      var $op1;
      $2=$pt;
      $3=$lastpc;
      $4=$reg;
      var $5=$2;
      var $6=(($5+44)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=((($7)-(1))|0);
      $last=$8;
      var $9=$2;
      var $10=_precheck($9);
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=0;
      __label__ = 148; break;
    case 4: 
      $pc=0;
      __label__ = 5; break;
    case 5: 
      var $15=$pc;
      var $16=$3;
      var $17=(($15)|0) < (($16)|0);
      if ($17) { __label__ = 6; break; } else { __label__ = 147; break; }
    case 6: 
      var $19=$pc;
      var $20=$2;
      var $21=(($20+12)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+($19<<2))|0);
      var $24=HEAP32[(($23)>>2)];
      $i=$24;
      var $25=$i;
      var $26=$25 >>> 0;
      var $27=$26 & 63;
      $op=$27;
      var $28=$i;
      var $29=$28 >>> 6;
      var $30=$29 & 255;
      $a=$30;
      $b=0;
      $c=0;
      var $31=$op;
      var $32=(($31)>>>0) < 38;
      if ($32) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      $1=0;
      __label__ = 148; break;
    case 8: 
      var $35=$a;
      var $36=$2;
      var $37=(($36+75)|0);
      var $38=HEAPU8[($37)];
      var $39=(($38)&255);
      var $40=(($35)|0) < (($39)|0);
      if ($40) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      $1=0;
      __label__ = 148; break;
    case 10: 
      var $43=$op;
      var $44=((STRING_TABLE._luaP_opmodes+$43)|0);
      var $45=HEAPU8[($44)];
      var $46=(($45)&255);
      var $47=$46 & 3;
      if ((($47)|0) == 0) {
        __label__ = 11; break;
      }
      else if ((($47)|0) == 1) {
        __label__ = 16; break;
      }
      else if ((($47)|0) == 2) {
        __label__ = 21; break;
      }
      else {
      __label__ = 38; break;
      }
      
    case 11: 
      var $49=$i;
      var $50=$49 >>> 23;
      var $51=$50 & 511;
      $b=$51;
      var $52=$i;
      var $53=$52 >>> 14;
      var $54=$53 & 511;
      $c=$54;
      var $55=$2;
      var $56=$b;
      var $57=$op;
      var $58=((STRING_TABLE._luaP_opmodes+$57)|0);
      var $59=HEAPU8[($58)];
      var $60=(($59)&255);
      var $61=$60 >> 4;
      var $62=$61 & 3;
      var $63=_checkArgMode($55, $56, $62);
      var $64=(($63)|0)!=0;
      if ($64) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      $1=0;
      __label__ = 148; break;
    case 13: 
      var $67=$2;
      var $68=$c;
      var $69=$op;
      var $70=((STRING_TABLE._luaP_opmodes+$69)|0);
      var $71=HEAPU8[($70)];
      var $72=(($71)&255);
      var $73=$72 >> 2;
      var $74=$73 & 3;
      var $75=_checkArgMode($67, $68, $74);
      var $76=(($75)|0)!=0;
      if ($76) { __label__ = 15; break; } else { __label__ = 14; break; }
    case 14: 
      $1=0;
      __label__ = 148; break;
    case 15: 
      __label__ = 38; break;
    case 16: 
      var $80=$i;
      var $81=$80 >>> 14;
      var $82=$81 & 262143;
      $b=$82;
      var $83=$op;
      var $84=((STRING_TABLE._luaP_opmodes+$83)|0);
      var $85=HEAPU8[($84)];
      var $86=(($85)&255);
      var $87=$86 >> 4;
      var $88=$87 & 3;
      var $89=(($88)|0)==3;
      if ($89) { __label__ = 17; break; } else { __label__ = 20; break; }
    case 17: 
      var $91=$b;
      var $92=$2;
      var $93=(($92+40)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($91)|0) < (($94)|0);
      if ($95) { __label__ = 19; break; } else { __label__ = 18; break; }
    case 18: 
      $1=0;
      __label__ = 148; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 38; break;
    case 21: 
      var $100=$i;
      var $101=$100 >>> 14;
      var $102=$101 & 262143;
      var $103=((($102)-(131071))|0);
      $b=$103;
      var $104=$op;
      var $105=((STRING_TABLE._luaP_opmodes+$104)|0);
      var $106=HEAPU8[($105)];
      var $107=(($106)&255);
      var $108=$107 >> 4;
      var $109=$108 & 3;
      var $110=(($109)|0)==2;
      if ($110) { __label__ = 22; break; } else { __label__ = 37; break; }
    case 22: 
      var $112=$pc;
      var $113=((($112)+(1))|0);
      var $114=$b;
      var $115=((($113)+($114))|0);
      $dest=$115;
      var $116=$dest;
      var $117=0 <= (($116)|0);
      if ($117) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $119=$dest;
      var $120=$2;
      var $121=(($120+44)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($119)|0) < (($122)|0);
      if ($123) { __label__ = 25; break; } else { __label__ = 24; break; }
    case 24: 
      $1=0;
      __label__ = 148; break;
    case 25: 
      var $126=$dest;
      var $127=(($126)|0) > 0;
      if ($127) { __label__ = 26; break; } else { __label__ = 36; break; }
    case 26: 
      $j=0;
      __label__ = 27; break;
    case 27: 
      var $130=$j;
      var $131=$dest;
      var $132=(($130)|0) < (($131)|0);
      if ($132) { __label__ = 28; break; } else { __label__ = 33; break; }
    case 28: 
      var $134=$dest;
      var $135=((($134)-(1))|0);
      var $136=$j;
      var $137=((($135)-($136))|0);
      var $138=$2;
      var $139=(($138+12)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=(($140+($137<<2))|0);
      var $142=HEAP32[(($141)>>2)];
      $d=$142;
      var $143=$d;
      var $144=$143 >>> 0;
      var $145=$144 & 63;
      var $146=(($145)|0)==34;
      if ($146) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $148=$d;
      var $149=$148 >>> 14;
      var $150=$149 & 511;
      var $151=(($150)|0)==0;
      if ($151) { __label__ = 31; break; } else { __label__ = 30; break; }
    case 30: 
      __label__ = 33; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      var $155=$j;
      var $156=((($155)+(1))|0);
      $j=$156;
      __label__ = 27; break;
    case 33: 
      var $158=$j;
      var $159=$158 & 1;
      var $160=(($159)|0)==0;
      if ($160) { __label__ = 35; break; } else { __label__ = 34; break; }
    case 34: 
      $1=0;
      __label__ = 148; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      var $166=$op;
      var $167=((STRING_TABLE._luaP_opmodes+$166)|0);
      var $168=HEAPU8[($167)];
      var $169=(($168)&255);
      var $170=$169 & 64;
      var $171=(($170)|0)!=0;
      if ($171) { __label__ = 39; break; } else { __label__ = 42; break; }
    case 39: 
      var $173=$a;
      var $174=$4;
      var $175=(($173)|0)==(($174)|0);
      if ($175) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      var $177=$pc;
      $last=$177;
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      var $180=$op;
      var $181=((STRING_TABLE._luaP_opmodes+$180)|0);
      var $182=HEAPU8[($181)];
      var $183=(($182)&255);
      var $184=$183 & 128;
      var $185=(($184)|0)!=0;
      if ($185) { __label__ = 43; break; } else { __label__ = 48; break; }
    case 43: 
      var $187=$pc;
      var $188=((($187)+(2))|0);
      var $189=$2;
      var $190=(($189+44)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=(($188)|0) < (($191)|0);
      if ($192) { __label__ = 45; break; } else { __label__ = 44; break; }
    case 44: 
      $1=0;
      __label__ = 148; break;
    case 45: 
      var $195=$pc;
      var $196=((($195)+(1))|0);
      var $197=$2;
      var $198=(($197+12)|0);
      var $199=HEAP32[(($198)>>2)];
      var $200=(($199+($196<<2))|0);
      var $201=HEAPU32[(($200)>>2)];
      var $202=$201 >>> 0;
      var $203=$202 & 63;
      var $204=(($203)|0)==22;
      if ($204) { __label__ = 47; break; } else { __label__ = 46; break; }
    case 46: 
      $1=0;
      __label__ = 148; break;
    case 47: 
      __label__ = 48; break;
    case 48: 
      var $208=$op;
      if ((($208)|0) == 2) {
        __label__ = 49; break;
      }
      else if ((($208)|0) == 3) {
        __label__ = 57; break;
      }
      else if ((($208)|0) == 4 || (($208)|0) == 8) {
        __label__ = 61; break;
      }
      else if ((($208)|0) == 5 || (($208)|0) == 7) {
        __label__ = 64; break;
      }
      else if ((($208)|0) == 11) {
        __label__ = 67; break;
      }
      else if ((($208)|0) == 21) {
        __label__ = 72; break;
      }
      else if ((($208)|0) == 33) {
        __label__ = 75; break;
      }
      else if ((($208)|0) == 31 || (($208)|0) == 32) {
        __label__ = 82; break;
      }
      else if ((($208)|0) == 22) {
        __label__ = 85; break;
      }
      else if ((($208)|0) == 28 || (($208)|0) == 29) {
        __label__ = 90; break;
      }
      else if ((($208)|0) == 30) {
        __label__ = 106; break;
      }
      else if ((($208)|0) == 34) {
        __label__ = 111; break;
      }
      else if ((($208)|0) == 36) {
        __label__ = 120; break;
      }
      else if ((($208)|0) == 37) {
        __label__ = 134; break;
      }
      else {
      __label__ = 144; break;
      }
      
    case 49: 
      var $210=$c;
      var $211=(($210)|0)==1;
      if ($211) { __label__ = 50; break; } else { __label__ = 56; break; }
    case 50: 
      var $213=$pc;
      var $214=((($213)+(2))|0);
      var $215=$2;
      var $216=(($215+44)|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=(($214)|0) < (($217)|0);
      if ($218) { __label__ = 52; break; } else { __label__ = 51; break; }
    case 51: 
      $1=0;
      __label__ = 148; break;
    case 52: 
      var $221=$pc;
      var $222=((($221)+(1))|0);
      var $223=$2;
      var $224=(($223+12)|0);
      var $225=HEAP32[(($224)>>2)];
      var $226=(($225+($222<<2))|0);
      var $227=HEAPU32[(($226)>>2)];
      var $228=$227 >>> 0;
      var $229=$228 & 63;
      var $230=(($229)|0)!=34;
      if ($230) { __label__ = 55; break; } else { __label__ = 53; break; }
    case 53: 
      var $232=$pc;
      var $233=((($232)+(1))|0);
      var $234=$2;
      var $235=(($234+12)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=(($236+($233<<2))|0);
      var $238=HEAPU32[(($237)>>2)];
      var $239=$238 >>> 14;
      var $240=$239 & 511;
      var $241=(($240)|0)!=0;
      if ($241) { __label__ = 55; break; } else { __label__ = 54; break; }
    case 54: 
      $1=0;
      __label__ = 148; break;
    case 55: 
      __label__ = 56; break;
    case 56: 
      __label__ = 145; break;
    case 57: 
      var $246=$a;
      var $247=$4;
      var $248=(($246)|0) <= (($247)|0);
      if ($248) { __label__ = 58; break; } else { __label__ = 60; break; }
    case 58: 
      var $250=$4;
      var $251=$b;
      var $252=(($250)|0) <= (($251)|0);
      if ($252) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      var $254=$pc;
      $last=$254;
      __label__ = 60; break;
    case 60: 
      __label__ = 145; break;
    case 61: 
      var $257=$b;
      var $258=$2;
      var $259=(($258+72)|0);
      var $260=HEAPU8[($259)];
      var $261=(($260)&255);
      var $262=(($257)|0) < (($261)|0);
      if ($262) { __label__ = 63; break; } else { __label__ = 62; break; }
    case 62: 
      $1=0;
      __label__ = 148; break;
    case 63: 
      __label__ = 145; break;
    case 64: 
      var $266=$b;
      var $267=$2;
      var $268=(($267+8)|0);
      var $269=HEAP32[(($268)>>2)];
      var $270=(($269+($266)*(12))|0);
      var $271=(($270+8)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=(($272)|0)==4;
      if ($273) { __label__ = 66; break; } else { __label__ = 65; break; }
    case 65: 
      $1=0;
      __label__ = 148; break;
    case 66: 
      __label__ = 145; break;
    case 67: 
      var $277=$a;
      var $278=((($277)+(1))|0);
      var $279=$2;
      var $280=(($279+75)|0);
      var $281=HEAPU8[($280)];
      var $282=(($281)&255);
      var $283=(($278)|0) < (($282)|0);
      if ($283) { __label__ = 69; break; } else { __label__ = 68; break; }
    case 68: 
      $1=0;
      __label__ = 148; break;
    case 69: 
      var $286=$4;
      var $287=$a;
      var $288=((($287)+(1))|0);
      var $289=(($286)|0)==(($288)|0);
      if ($289) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: 
      var $291=$pc;
      $last=$291;
      __label__ = 71; break;
    case 71: 
      __label__ = 145; break;
    case 72: 
      var $294=$b;
      var $295=$c;
      var $296=(($294)|0) < (($295)|0);
      if ($296) { __label__ = 74; break; } else { __label__ = 73; break; }
    case 73: 
      $1=0;
      __label__ = 148; break;
    case 74: 
      __label__ = 145; break;
    case 75: 
      var $300=$c;
      var $301=(($300)|0) >= 1;
      if ($301) { __label__ = 77; break; } else { __label__ = 76; break; }
    case 76: 
      $1=0;
      __label__ = 148; break;
    case 77: 
      var $304=$a;
      var $305=((($304)+(2))|0);
      var $306=$c;
      var $307=((($305)+($306))|0);
      var $308=$2;
      var $309=(($308+75)|0);
      var $310=HEAPU8[($309)];
      var $311=(($310)&255);
      var $312=(($307)|0) < (($311)|0);
      if ($312) { __label__ = 79; break; } else { __label__ = 78; break; }
    case 78: 
      $1=0;
      __label__ = 148; break;
    case 79: 
      var $315=$4;
      var $316=$a;
      var $317=((($316)+(2))|0);
      var $318=(($315)|0) >= (($317)|0);
      if ($318) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: 
      var $320=$pc;
      $last=$320;
      __label__ = 81; break;
    case 81: 
      __label__ = 145; break;
    case 82: 
      var $323=$a;
      var $324=((($323)+(3))|0);
      var $325=$2;
      var $326=(($325+75)|0);
      var $327=HEAPU8[($326)];
      var $328=(($327)&255);
      var $329=(($324)|0) < (($328)|0);
      if ($329) { __label__ = 84; break; } else { __label__ = 83; break; }
    case 83: 
      $1=0;
      __label__ = 148; break;
    case 84: 
      __label__ = 85; break;
    case 85: 
      var $333=$pc;
      var $334=((($333)+(1))|0);
      var $335=$b;
      var $336=((($334)+($335))|0);
      $dest1=$336;
      var $337=$4;
      var $338=(($337)|0)!=255;
      if ($338) { __label__ = 86; break; } else { __label__ = 89; break; }
    case 86: 
      var $340=$pc;
      var $341=$dest1;
      var $342=(($340)|0) < (($341)|0);
      if ($342) { __label__ = 87; break; } else { __label__ = 89; break; }
    case 87: 
      var $344=$dest1;
      var $345=$3;
      var $346=(($344)|0) <= (($345)|0);
      if ($346) { __label__ = 88; break; } else { __label__ = 89; break; }
    case 88: 
      var $348=$b;
      var $349=$pc;
      var $350=((($349)+($348))|0);
      $pc=$350;
      __label__ = 89; break;
    case 89: 
      __label__ = 145; break;
    case 90: 
      var $353=$b;
      var $354=(($353)|0)!=0;
      if ($354) { __label__ = 91; break; } else { __label__ = 94; break; }
    case 91: 
      var $356=$a;
      var $357=$b;
      var $358=((($356)+($357))|0);
      var $359=((($358)-(1))|0);
      var $360=$2;
      var $361=(($360+75)|0);
      var $362=HEAPU8[($361)];
      var $363=(($362)&255);
      var $364=(($359)|0) < (($363)|0);
      if ($364) { __label__ = 93; break; } else { __label__ = 92; break; }
    case 92: 
      $1=0;
      __label__ = 148; break;
    case 93: 
      __label__ = 94; break;
    case 94: 
      var $368=$c;
      var $369=((($368)-(1))|0);
      $c=$369;
      var $370=$c;
      var $371=(($370)|0)==-1;
      if ($371) { __label__ = 95; break; } else { __label__ = 98; break; }
    case 95: 
      var $373=$pc;
      var $374=((($373)+(1))|0);
      var $375=$2;
      var $376=(($375+12)|0);
      var $377=HEAP32[(($376)>>2)];
      var $378=(($377+($374<<2))|0);
      var $379=HEAP32[(($378)>>2)];
      var $380=_luaG_checkopenop($379);
      var $381=(($380)|0)!=0;
      if ($381) { __label__ = 97; break; } else { __label__ = 96; break; }
    case 96: 
      $1=0;
      __label__ = 148; break;
    case 97: 
      __label__ = 103; break;
    case 98: 
      var $385=$c;
      var $386=(($385)|0)!=0;
      if ($386) { __label__ = 99; break; } else { __label__ = 102; break; }
    case 99: 
      var $388=$a;
      var $389=$c;
      var $390=((($388)+($389))|0);
      var $391=((($390)-(1))|0);
      var $392=$2;
      var $393=(($392+75)|0);
      var $394=HEAPU8[($393)];
      var $395=(($394)&255);
      var $396=(($391)|0) < (($395)|0);
      if ($396) { __label__ = 101; break; } else { __label__ = 100; break; }
    case 100: 
      $1=0;
      __label__ = 148; break;
    case 101: 
      __label__ = 102; break;
    case 102: 
      __label__ = 103; break;
    case 103: 
      var $401=$4;
      var $402=$a;
      var $403=(($401)|0) >= (($402)|0);
      if ($403) { __label__ = 104; break; } else { __label__ = 105; break; }
    case 104: 
      var $405=$pc;
      $last=$405;
      __label__ = 105; break;
    case 105: 
      __label__ = 145; break;
    case 106: 
      var $408=$b;
      var $409=((($408)-(1))|0);
      $b=$409;
      var $410=$b;
      var $411=(($410)|0) > 0;
      if ($411) { __label__ = 107; break; } else { __label__ = 110; break; }
    case 107: 
      var $413=$a;
      var $414=$b;
      var $415=((($413)+($414))|0);
      var $416=((($415)-(1))|0);
      var $417=$2;
      var $418=(($417+75)|0);
      var $419=HEAPU8[($418)];
      var $420=(($419)&255);
      var $421=(($416)|0) < (($420)|0);
      if ($421) { __label__ = 109; break; } else { __label__ = 108; break; }
    case 108: 
      $1=0;
      __label__ = 148; break;
    case 109: 
      __label__ = 110; break;
    case 110: 
      __label__ = 145; break;
    case 111: 
      var $426=$b;
      var $427=(($426)|0) > 0;
      if ($427) { __label__ = 112; break; } else { __label__ = 115; break; }
    case 112: 
      var $429=$a;
      var $430=$b;
      var $431=((($429)+($430))|0);
      var $432=$2;
      var $433=(($432+75)|0);
      var $434=HEAPU8[($433)];
      var $435=(($434)&255);
      var $436=(($431)|0) < (($435)|0);
      if ($436) { __label__ = 114; break; } else { __label__ = 113; break; }
    case 113: 
      $1=0;
      __label__ = 148; break;
    case 114: 
      __label__ = 115; break;
    case 115: 
      var $440=$c;
      var $441=(($440)|0)==0;
      if ($441) { __label__ = 116; break; } else { __label__ = 119; break; }
    case 116: 
      var $443=$pc;
      var $444=((($443)+(1))|0);
      $pc=$444;
      var $445=$pc;
      var $446=$2;
      var $447=(($446+44)|0);
      var $448=HEAP32[(($447)>>2)];
      var $449=((($448)-(1))|0);
      var $450=(($445)|0) < (($449)|0);
      if ($450) { __label__ = 118; break; } else { __label__ = 117; break; }
    case 117: 
      $1=0;
      __label__ = 148; break;
    case 118: 
      __label__ = 119; break;
    case 119: 
      __label__ = 145; break;
    case 120: 
      var $455=$b;
      var $456=$2;
      var $457=(($456+52)|0);
      var $458=HEAP32[(($457)>>2)];
      var $459=(($455)|0) < (($458)|0);
      if ($459) { __label__ = 122; break; } else { __label__ = 121; break; }
    case 121: 
      $1=0;
      __label__ = 148; break;
    case 122: 
      var $462=$b;
      var $463=$2;
      var $464=(($463+16)|0);
      var $465=HEAP32[(($464)>>2)];
      var $466=(($465+($462<<2))|0);
      var $467=HEAP32[(($466)>>2)];
      var $468=(($467+72)|0);
      var $469=HEAPU8[($468)];
      var $470=(($469)&255);
      $nup=$470;
      var $471=$pc;
      var $472=$nup;
      var $473=((($471)+($472))|0);
      var $474=$2;
      var $475=(($474+44)|0);
      var $476=HEAP32[(($475)>>2)];
      var $477=(($473)|0) < (($476)|0);
      if ($477) { __label__ = 124; break; } else { __label__ = 123; break; }
    case 123: 
      $1=0;
      __label__ = 148; break;
    case 124: 
      $j2=1;
      __label__ = 125; break;
    case 125: 
      var $481=$j2;
      var $482=$nup;
      var $483=(($481)|0) <= (($482)|0);
      if ($483) { __label__ = 126; break; } else { __label__ = 131; break; }
    case 126: 
      var $485=$pc;
      var $486=$j2;
      var $487=((($485)+($486))|0);
      var $488=$2;
      var $489=(($488+12)|0);
      var $490=HEAP32[(($489)>>2)];
      var $491=(($490+($487<<2))|0);
      var $492=HEAPU32[(($491)>>2)];
      var $493=$492 >>> 0;
      var $494=$493 & 63;
      $op1=$494;
      var $495=$op1;
      var $496=(($495)|0)==4;
      if ($496) { __label__ = 129; break; } else { __label__ = 127; break; }
    case 127: 
      var $498=$op1;
      var $499=(($498)|0)==0;
      if ($499) { __label__ = 129; break; } else { __label__ = 128; break; }
    case 128: 
      $1=0;
      __label__ = 148; break;
    case 129: 
      __label__ = 130; break;
    case 130: 
      var $503=$j2;
      var $504=((($503)+(1))|0);
      $j2=$504;
      __label__ = 125; break;
    case 131: 
      var $506=$4;
      var $507=(($506)|0)!=255;
      if ($507) { __label__ = 132; break; } else { __label__ = 133; break; }
    case 132: 
      var $509=$nup;
      var $510=$pc;
      var $511=((($510)+($509))|0);
      $pc=$511;
      __label__ = 133; break;
    case 133: 
      __label__ = 145; break;
    case 134: 
      var $514=$2;
      var $515=(($514+74)|0);
      var $516=HEAPU8[($515)];
      var $517=(($516)&255);
      var $518=$517 & 2;
      var $519=(($518)|0)!=0;
      if ($519) { __label__ = 135; break; } else { __label__ = 136; break; }
    case 135: 
      var $521=$2;
      var $522=(($521+74)|0);
      var $523=HEAPU8[($522)];
      var $524=(($523)&255);
      var $525=$524 & 4;
      var $526=(($525)|0)!=0;
      if ($526) { __label__ = 136; break; } else { __label__ = 137; break; }
    case 136: 
      $1=0;
      __label__ = 148; break;
    case 137: 
      var $529=$b;
      var $530=((($529)-(1))|0);
      $b=$530;
      var $531=$b;
      var $532=(($531)|0)==-1;
      if ($532) { __label__ = 138; break; } else { __label__ = 141; break; }
    case 138: 
      var $534=$pc;
      var $535=((($534)+(1))|0);
      var $536=$2;
      var $537=(($536+12)|0);
      var $538=HEAP32[(($537)>>2)];
      var $539=(($538+($535<<2))|0);
      var $540=HEAP32[(($539)>>2)];
      var $541=_luaG_checkopenop($540);
      var $542=(($541)|0)!=0;
      if ($542) { __label__ = 140; break; } else { __label__ = 139; break; }
    case 139: 
      $1=0;
      __label__ = 148; break;
    case 140: 
      __label__ = 141; break;
    case 141: 
      var $546=$a;
      var $547=$b;
      var $548=((($546)+($547))|0);
      var $549=((($548)-(1))|0);
      var $550=$2;
      var $551=(($550+75)|0);
      var $552=HEAPU8[($551)];
      var $553=(($552)&255);
      var $554=(($549)|0) < (($553)|0);
      if ($554) { __label__ = 143; break; } else { __label__ = 142; break; }
    case 142: 
      $1=0;
      __label__ = 148; break;
    case 143: 
      __label__ = 145; break;
    case 144: 
      __label__ = 145; break;
    case 145: 
      __label__ = 146; break;
    case 146: 
      var $560=$pc;
      var $561=((($560)+(1))|0);
      $pc=$561;
      __label__ = 5; break;
    case 147: 
      var $563=$last;
      var $564=$2;
      var $565=(($564+12)|0);
      var $566=HEAP32[(($565)>>2)];
      var $567=(($566+($563<<2))|0);
      var $568=HEAP32[(($567)>>2)];
      $1=$568;
      __label__ = 148; break;
    case 148: 
      var $570=$1;
      ;
      return $570;
    default: assert(0, "bad label: " + __label__);
  }
}
_symbexec["X"]=1;

function _isinstack($ci, $o) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $p;
      $2=$ci;
      $3=$o;
      var $4=$2;
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      $p=$6;
      __label__ = 3; break;
    case 3: 
      var $8=$p;
      var $9=$2;
      var $10=(($9+8)|0);
      var $11=HEAPU32[(($10)>>2)];
      var $12=(($8)>>>0) < (($11)>>>0);
      if ($12) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $14=$3;
      var $15=$p;
      var $16=(($14)|0)==(($15)|0);
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=1;
      __label__ = 9; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $20=$p;
      var $21=(($20+12)|0);
      $p=$21;
      __label__ = 3; break;
    case 8: 
      $1=0;
      __label__ = 9; break;
    case 9: 
      var $24=$1;
      ;
      return $24;
    default: assert(0, "bad label: " + __label__);
  }
}


function _getluaproto($ci) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$ci;
      var $2=$1;
      var $3=(($2+4)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)==6;
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $9=$1;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      var $16=$15;
      var $17=(($16+6)|0);
      var $18=HEAP8[($17)];
      var $19=(($18 << 24) >> 24)!=0;
      if ($19) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $21=$1;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|0);
      var $25=$24;
      var $26=HEAP32[(($25)>>2)];
      var $27=$26;
      var $28=$27;
      var $29=(($28+16)|0);
      var $30=HEAP32[(($29)>>2)];
      var $33 = $30;__label__ = 6; break;
    case 5: 
      var $33 = 0;__label__ = 6; break;
    case 6: 
      var $33;
      ;
      return $33;
    default: assert(0, "bad label: " + __label__);
  }
}


function _currentpc($L, $ci) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$L;
      $3=$ci;
      var $4=$3;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)==6;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$3;
      var $12=(($11+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0);
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=$16;
      var $18=$17;
      var $19=(($18+6)|0);
      var $20=HEAP8[($19)];
      var $21=(($20 << 24) >> 24)!=0;
      if ($21) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $1=-1;
      __label__ = 8; break;
    case 5: 
      var $24=$3;
      var $25=$2;
      var $26=(($25+20)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($24)|0)==(($27)|0);
      if ($28) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $30=$2;
      var $31=(($30+24)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$3;
      var $34=(($33+12)|0);
      HEAP32[(($34)>>2)]=$32;
      __label__ = 7; break;
    case 7: 
      var $36=$3;
      var $37=(($36+12)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$3;
      var $40=(($39+4)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41)|0);
      var $43=$42;
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      var $46=$45;
      var $47=(($46+16)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+12)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$38;
      var $52=$50;
      var $53=((($51)-($52))|0);
      var $54=((((($53)|0))/(4))&-1);
      var $55=((($54)-(1))|0);
      $1=$55;
      __label__ = 8; break;
    case 8: 
      var $57=$1;
      ;
      return $57;
    default: assert(0, "bad label: " + __label__);
  }
}
_currentpc["X"]=1;

function _kname($p, $c) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$p;
      $3=$c;
      var $4=$3;
      var $5=$4 & 256;
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $8=$3;
      var $9=$8 & -257;
      var $10=$2;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+($9)*(12))|0);
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0)==4;
      if ($16) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $18=$3;
      var $19=$18 & -257;
      var $20=$2;
      var $21=(($20+8)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+($19)*(12))|0);
      var $24=(($23)|0);
      var $25=$24;
      var $26=HEAP32[(($25)>>2)];
      var $27=$26;
      var $28=(($27+16)|0);
      var $29=$28;
      $1=$29;
      __label__ = 6; break;
    case 5: 
      $1=((STRING_TABLE.__str10262)|0);
      __label__ = 6; break;
    case 6: 
      var $32=$1;
      ;
      return $32;
    default: assert(0, "bad label: " + __label__);
  }
}


function _precheck($pt) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$pt;
      var $3=$2;
      var $4=(($3+75)|0);
      var $5=HEAPU8[($4)];
      var $6=(($5)&255);
      var $7=(($6)|0) <= 250;
      if ($7) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=0;
      __label__ = 18; break;
    case 4: 
      var $10=$2;
      var $11=(($10+73)|0);
      var $12=HEAPU8[($11)];
      var $13=(($12)&255);
      var $14=$2;
      var $15=(($14+74)|0);
      var $16=HEAPU8[($15)];
      var $17=(($16)&255);
      var $18=$17 & 1;
      var $19=((($13)+($18))|0);
      var $20=$2;
      var $21=(($20+75)|0);
      var $22=HEAPU8[($21)];
      var $23=(($22)&255);
      var $24=(($19)|0) <= (($23)|0);
      if ($24) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      $1=0;
      __label__ = 18; break;
    case 6: 
      var $27=$2;
      var $28=(($27+74)|0);
      var $29=HEAPU8[($28)];
      var $30=(($29)&255);
      var $31=$30 & 4;
      var $32=(($31)|0)!=0;
      if ($32) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $34=$2;
      var $35=(($34+74)|0);
      var $36=HEAPU8[($35)];
      var $37=(($36)&255);
      var $38=$37 & 1;
      var $39=(($38)|0)!=0;
      if ($39) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      $1=0;
      __label__ = 18; break;
    case 9: 
      var $42=$2;
      var $43=(($42+36)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$2;
      var $46=(($45+72)|0);
      var $47=HEAPU8[($46)];
      var $48=(($47)&255);
      var $49=(($44)|0) <= (($48)|0);
      if ($49) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      $1=0;
      __label__ = 18; break;
    case 11: 
      var $52=$2;
      var $53=(($52+48)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$2;
      var $56=(($55+44)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($54)|0)==(($57)|0);
      if ($58) { __label__ = 14; break; } else { __label__ = 12; break; }
    case 12: 
      var $60=$2;
      var $61=(($60+48)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62)|0)==0;
      if ($63) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      $1=0;
      __label__ = 18; break;
    case 14: 
      var $66=$2;
      var $67=(($66+44)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68)|0) > 0;
      if ($69) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $71=$2;
      var $72=(($71+44)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=((($73)-(1))|0);
      var $75=$2;
      var $76=(($75+12)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+($74<<2))|0);
      var $79=HEAPU32[(($78)>>2)];
      var $80=$79 >>> 0;
      var $81=$80 & 63;
      var $82=(($81)|0)==30;
      if ($82) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      $1=0;
      __label__ = 18; break;
    case 17: 
      $1=1;
      __label__ = 18; break;
    case 18: 
      var $86=$1;
      ;
      return $86;
    default: assert(0, "bad label: " + __label__);
  }
}
_precheck["X"]=1;

function _luaG_typeerror($L, $o, $op) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $name=__stackBase__;
      var $t;
      var $kind;
      $1=$L;
      $2=$o;
      $3=$op;
      HEAP32[(($name)>>2)]=0;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=((_luaT_typenames+($6<<2))|0);
      var $8=((((HEAPU8[($7)])|(HEAPU8[(($7)+(1))]<<8)|(HEAPU8[(($7)+(2))]<<16)|(HEAPU8[(($7)+(3))]<<24))|0));
      $t=$8;
      var $9=$1;
      var $10=(($9+20)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$2;
      var $13=_isinstack($11, $12);
      var $14=(($13)|0)!=0;
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $16=$1;
      var $17=$1;
      var $18=(($17+20)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$2;
      var $21=$1;
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$20;
      var $25=$23;
      var $26=((($24)-($25))|0);
      var $27=((((($26)|0))/(12))&-1);
      var $28=_getobjname($16, $19, $27, $name);
      var $31 = $28;__label__ = 5; break;
    case 4: 
      var $31 = 0;__label__ = 5; break;
    case 5: 
      var $31;
      $kind=$31;
      var $32=$kind;
      var $33=(($32)|0)!=0;
      if ($33) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $35=$1;
      var $36=$3;
      var $37=$kind;
      var $38=HEAP32[(($name)>>2)];
      var $39=$t;
      _luaG_runerror($35, ((STRING_TABLE.__str252)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$36,HEAP32[(((tempInt)+(4))>>2)]=$37,HEAP32[(((tempInt)+(8))>>2)]=$38,HEAP32[(((tempInt)+(12))>>2)]=$39,tempInt));
      __label__ = 8; break;
    case 7: 
      var $41=$1;
      var $42=$3;
      var $43=$t;
      _luaG_runerror($41, ((STRING_TABLE.__str1253)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$42,HEAP32[(((tempInt)+(4))>>2)]=$43,tempInt));
      __label__ = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaG_typeerror["X"]=1;

function _getobjname($L, $ci, $stackpos, $name) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $p;
      var $pc;
      var $i;
      var $g;
      var $a;
      var $b;
      var $k;
      var $u;
      var $k1;
      $2=$L;
      $3=$ci;
      $4=$stackpos;
      $5=$name;
      var $6=$3;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0)==6;
      if ($11) { __label__ = 3; break; } else { __label__ = 19; break; }
    case 3: 
      var $13=$3;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0);
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      var $20=$19;
      var $21=(($20+6)|0);
      var $22=HEAP8[($21)];
      var $23=(($22 << 24) >> 24)!=0;
      if ($23) { __label__ = 19; break; } else { __label__ = 4; break; }
    case 4: 
      var $25=$3;
      var $26=(($25+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|0);
      var $29=$28;
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      var $32=$31;
      var $33=(($32+16)|0);
      var $34=HEAP32[(($33)>>2)];
      $p=$34;
      var $35=$2;
      var $36=$3;
      var $37=_currentpc($35, $36);
      $pc=$37;
      var $38=$p;
      var $39=$4;
      var $40=((($39)+(1))|0);
      var $41=$pc;
      var $42=_luaF_getlocalname($38, $40, $41);
      var $43=$5;
      HEAP32[(($43)>>2)]=$42;
      var $44=$5;
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0)!=0;
      if ($46) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=((STRING_TABLE.__str7259)|0);
      __label__ = 20; break;
    case 6: 
      var $49=$p;
      var $50=$pc;
      var $51=$4;
      var $52=_symbexec($49, $50, $51);
      $i=$52;
      var $53=$i;
      var $54=$53 >>> 0;
      var $55=$54 & 63;
      if ((($55)|0) == 5) {
        __label__ = 7; break;
      }
      else if ((($55)|0) == 0) {
        __label__ = 8; break;
      }
      else if ((($55)|0) == 6) {
        __label__ = 11; break;
      }
      else if ((($55)|0) == 4) {
        __label__ = 12; break;
      }
      else if ((($55)|0) == 11) {
        __label__ = 16; break;
      }
      else {
      __label__ = 17; break;
      }
      
    case 7: 
      var $57=$i;
      var $58=$57 >>> 14;
      var $59=$58 & 262143;
      $g=$59;
      var $60=$g;
      var $61=$p;
      var $62=(($61+8)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+($60)*(12))|0);
      var $65=(($64)|0);
      var $66=$65;
      var $67=HEAP32[(($66)>>2)];
      var $68=$67;
      var $69=(($68+16)|0);
      var $70=$69;
      var $71=$5;
      HEAP32[(($71)>>2)]=$70;
      $1=((STRING_TABLE.__str8260)|0);
      __label__ = 20; break;
    case 8: 
      var $73=$i;
      var $74=$73 >>> 6;
      var $75=$74 & 255;
      $a=$75;
      var $76=$i;
      var $77=$76 >>> 23;
      var $78=$77 & 511;
      $b=$78;
      var $79=$b;
      var $80=$a;
      var $81=(($79)|0) < (($80)|0);
      if ($81) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $83=$2;
      var $84=$3;
      var $85=$b;
      var $86=$5;
      var $87=_getobjname($83, $84, $85, $86);
      $1=$87;
      __label__ = 20; break;
    case 10: 
      __label__ = 18; break;
    case 11: 
      var $90=$i;
      var $91=$90 >>> 14;
      var $92=$91 & 511;
      $k=$92;
      var $93=$p;
      var $94=$k;
      var $95=_kname($93, $94);
      var $96=$5;
      HEAP32[(($96)>>2)]=$95;
      $1=((STRING_TABLE.__str9261)|0);
      __label__ = 20; break;
    case 12: 
      var $98=$i;
      var $99=$98 >>> 23;
      var $100=$99 & 511;
      $u=$100;
      var $101=$p;
      var $102=(($101+28)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=(($103)|0)!=0;
      if ($104) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $106=$u;
      var $107=$p;
      var $108=(($107+28)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109+($106<<2))|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=(($111+16)|0);
      var $113=$112;
      var $116 = $113;__label__ = 15; break;
    case 14: 
      var $116 = ((STRING_TABLE.__str10262)|0);__label__ = 15; break;
    case 15: 
      var $116;
      var $117=$5;
      HEAP32[(($117)>>2)]=$116;
      $1=((STRING_TABLE.__str11263)|0);
      __label__ = 20; break;
    case 16: 
      var $119=$i;
      var $120=$119 >>> 14;
      var $121=$120 & 511;
      $k1=$121;
      var $122=$p;
      var $123=$k1;
      var $124=_kname($122, $123);
      var $125=$5;
      HEAP32[(($125)>>2)]=$124;
      $1=((STRING_TABLE.__str12264)|0);
      __label__ = 20; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      $1=0;
      __label__ = 20; break;
    case 20: 
      var $130=$1;
      ;
      return $130;
    default: assert(0, "bad label: " + __label__);
  }
}
_getobjname["X"]=1;

function _luaG_runerror($L, $fmt) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $argp=__stackBase__;
  $1=$L;
  $2=$fmt;
  var $3=$argp;
  HEAP32[(($3)>>2)]=arguments[_luaG_runerror.length];
  var $4=$1;
  var $5=$1;
  var $6=$2;
  var $7=HEAP32[(($argp)>>2)];
  var $8=_luaO_pushvfstring($5, $6, $7);
  _addinfo($4, $8);
  var $9=$argp;
  ;
  var $10=$1;
  _luaG_errormsg($10);
  STACKTOP = __stackBase__;
  return;
}


function _luaG_concaterror($L, $p1, $p2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$L;
      $2=$p1;
      $3=$p2;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)==4;
      if ($7) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $9=$2;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|0)==3;
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $14=$3;
      $2=$14;
      __label__ = 5; break;
    case 5: 
      var $16=$1;
      var $17=$2;
      _luaG_typeerror($16, $17, ((STRING_TABLE.__str2254)|0));
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaG_aritherror($L, $p1, $p2) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $temp=__stackBase__;
      $1=$L;
      $2=$p1;
      $3=$p2;
      var $4=$2;
      var $5=_luaV_tonumber($4, $temp);
      var $6=(($5)|0)==0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$2;
      $3=$8;
      __label__ = 4; break;
    case 4: 
      var $10=$1;
      var $11=$3;
      _luaG_typeerror($10, $11, ((STRING_TABLE.__str3255)|0));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaG_ordererror($L, $p1, $p2) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $t1;
      var $t2;
      $1=$L;
      $2=$p1;
      $3=$p2;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=((_luaT_typenames+($6<<2))|0);
      var $8=((((HEAPU8[($7)])|(HEAPU8[(($7)+(1))]<<8)|(HEAPU8[(($7)+(2))]<<16)|(HEAPU8[(($7)+(3))]<<24))|0));
      $t1=$8;
      var $9=$3;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=((_luaT_typenames+($11<<2))|0);
      var $13=((((HEAPU8[($12)])|(HEAPU8[(($12)+(1))]<<8)|(HEAPU8[(($12)+(2))]<<16)|(HEAPU8[(($12)+(3))]<<24))|0));
      $t2=$13;
      var $14=$t1;
      var $15=(($14+2)|0);
      var $16=HEAP8[($15)];
      var $17=(($16 << 24) >> 24);
      var $18=$t2;
      var $19=(($18+2)|0);
      var $20=HEAP8[($19)];
      var $21=(($20 << 24) >> 24);
      var $22=(($17)|0)==(($21)|0);
      if ($22) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $24=$1;
      var $25=$t1;
      _luaG_runerror($24, ((STRING_TABLE.__str4256)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$25,tempInt));
      __label__ = 5; break;
    case 4: 
      var $27=$1;
      var $28=$t1;
      var $29=$t2;
      _luaG_runerror($27, ((STRING_TABLE.__str5257)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$28,HEAP32[(((tempInt)+(4))>>2)]=$29,tempInt));
      __label__ = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return 0;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaG_errormsg($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $errfunc;
      var $o2;
      var $o1;
      var $o21;
      var $o12;
      $1=$L;
      var $2=$1;
      var $3=(($2+108)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|0)!=0;
      if ($5) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $7=$1;
      var $8=(($7+32)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$9;
      var $11=$1;
      var $12=(($11+108)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($10+$13)|0);
      var $15=$14;
      $errfunc=$15;
      var $16=$errfunc;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|0)==6;
      if ($19) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $21=$1;
      _luaD_throw($21, 5);
      __label__ = 5; break;
    case 5: 
      var $23=$1;
      var $24=(($23+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=((($25)-(12))|0);
      $o2=$26;
      var $27=$1;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      $o1=$29;
      var $30=$o1;
      var $31=(($30)|0);
      var $32=$o2;
      var $33=(($32)|0);
      var $34=$31;
      var $35=$33;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];
      var $36=$o2;
      var $37=(($36+8)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$o1;
      var $40=(($39+8)|0);
      HEAP32[(($40)>>2)]=$38;
      var $41=$errfunc;
      $o21=$41;
      var $42=$1;
      var $43=(($42+8)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=((($44)-(12))|0);
      $o12=$45;
      var $46=$o12;
      var $47=(($46)|0);
      var $48=$o21;
      var $49=(($48)|0);
      var $50=$47;
      var $51=$49;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)];
      var $52=$o21;
      var $53=(($52+8)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$o12;
      var $56=(($55+8)|0);
      HEAP32[(($56)>>2)]=$54;
      var $57=$1;
      var $58=(($57+28)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$59;
      var $61=$1;
      var $62=(($61+8)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$63;
      var $65=$60;
      var $66=$64;
      var $67=((($65)-($66))|0);
      var $68=(($67)|0) <= 12;
      if ($68) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $70=$1;
      _luaD_growstack($70, 1);
      __label__ = 8; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $73=$1;
      var $74=(($73+8)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+12)|0);
      HEAP32[(($74)>>2)]=$76;
      var $77=$1;
      var $78=$1;
      var $79=(($78+8)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=((($80)-(24))|0);
      _luaD_call($77, $81, 1);
      __label__ = 9; break;
    case 9: 
      var $83=$1;
      _luaD_throw($83, 2);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaG_errormsg["X"]=1;

function _addinfo($L, $msg) {
  var __stackBase__  = STACKTOP; STACKTOP += 60; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $ci;
      var $buff=__stackBase__;
      var $line;
      $1=$L;
      $2=$msg;
      var $3=$1;
      var $4=(($3+20)|0);
      var $5=HEAP32[(($4)>>2)];
      $ci=$5;
      var $6=$ci;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0)==6;
      if ($11) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $13=$ci;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0);
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      var $20=$19;
      var $21=(($20+6)|0);
      var $22=HEAP8[($21)];
      var $23=(($22 << 24) >> 24)!=0;
      if ($23) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $25=$1;
      var $26=$ci;
      var $27=_currentline($25, $26);
      $line=$27;
      var $28=(($buff)|0);
      var $29=$ci;
      var $30=_getluaproto($29);
      var $31=(($30+32)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+16)|0);
      var $34=$33;
      _luaO_chunkid($28, $34, 60);
      var $35=$1;
      var $36=(($buff)|0);
      var $37=$line;
      var $38=$2;
      var $39=_luaO_pushfstring($35, ((STRING_TABLE.__str6258)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$36,HEAP32[(((tempInt)+(4))>>2)]=$37,HEAP32[(((tempInt)+(8))>>2)]=$38,tempInt));
      __label__ = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _currentline($L, $ci) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $pc;
      $2=$L;
      $3=$ci;
      var $4=$2;
      var $5=$3;
      var $6=_currentpc($4, $5);
      $pc=$6;
      var $7=$pc;
      var $8=(($7)|0) < 0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=-1;
      __label__ = 8; break;
    case 4: 
      var $11=$3;
      var $12=(($11+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0);
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=$16;
      var $18=$17;
      var $19=(($18+16)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|0)!=0;
      if ($23) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $25=$pc;
      var $26=$3;
      var $27=(($26+4)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0);
      var $30=$29;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      var $33=$32;
      var $34=(($33+16)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+20)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+($25<<2))|0);
      var $39=HEAP32[(($38)>>2)];
      var $42 = $39;__label__ = 7; break;
    case 6: 
      var $42 = 0;__label__ = 7; break;
    case 7: 
      var $42;
      $1=$42;
      __label__ = 8; break;
    case 8: 
      var $44=$1;
      ;
      return $44;
    default: assert(0, "bad label: " + __label__);
  }
}
_currentline["X"]=1;

function _checkArgMode($pt, $r, $mode) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$pt;
      $3=$r;
      $4=$mode;
      var $5=$4;
      if ((($5)|0) == 0) {
        __label__ = 3; break;
      }
      else if ((($5)|0) == 1) {
        __label__ = 6; break;
      }
      else if ((($5)|0) == 2) {
        __label__ = 7; break;
      }
      else if ((($5)|0) == 3) {
        __label__ = 10; break;
      }
      else {
      __label__ = 15; break;
      }
      
    case 3: 
      var $7=$3;
      var $8=(($7)|0)==0;
      if ($8) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      $1=0;
      __label__ = 16; break;
    case 5: 
      __label__ = 15; break;
    case 6: 
      __label__ = 15; break;
    case 7: 
      var $13=$3;
      var $14=$2;
      var $15=(($14+75)|0);
      var $16=HEAPU8[($15)];
      var $17=(($16)&255);
      var $18=(($13)|0) < (($17)|0);
      if ($18) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      $1=0;
      __label__ = 16; break;
    case 9: 
      __label__ = 15; break;
    case 10: 
      var $22=$3;
      var $23=$22 & 256;
      var $24=(($23)|0)!=0;
      if ($24) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $26=$3;
      var $27=$26 & -257;
      var $28=$2;
      var $29=(($28+40)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($27)|0) < (($30)|0);
      if ($31) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 12: 
      var $33=$3;
      var $34=$2;
      var $35=(($34+75)|0);
      var $36=HEAPU8[($35)];
      var $37=(($36)&255);
      var $38=(($33)|0) < (($37)|0);
      if ($38) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      $1=0;
      __label__ = 16; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      $1=1;
      __label__ = 16; break;
    case 16: 
      var $43=$1;
      ;
      return $43;
    default: assert(0, "bad label: " + __label__);
  }
}
_checkArgMode["X"]=1;

function _correctstack($L, $oldstack) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $ci;
      var $up;
      $1=$L;
      $2=$oldstack;
      var $3=$1;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$2;
      var $7=$5;
      var $8=$6;
      var $9=((($7)-($8))|0);
      var $10=((((($9)|0))/(12))&-1);
      var $11=$1;
      var $12=(($11+32)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+($10)*(12))|0);
      var $15=$1;
      var $16=(($15+8)|0);
      HEAP32[(($16)>>2)]=$14;
      var $17=$1;
      var $18=(($17+96)|0);
      var $19=HEAP32[(($18)>>2)];
      $up=$19;
      __label__ = 3; break;
    case 3: 
      var $21=$up;
      var $22=(($21)|0)!=0;
      if ($22) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $24=$up;
      var $25=$24;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$2;
      var $29=$27;
      var $30=$28;
      var $31=((($29)-($30))|0);
      var $32=((((($31)|0))/(12))&-1);
      var $33=$1;
      var $34=(($33+32)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+($32)*(12))|0);
      var $37=$up;
      var $38=$37;
      var $39=(($38+8)|0);
      HEAP32[(($39)>>2)]=$36;
      __label__ = 5; break;
    case 5: 
      var $41=$up;
      var $42=$41;
      var $43=(($42)|0);
      var $44=HEAP32[(($43)>>2)];
      $up=$44;
      __label__ = 3; break;
    case 6: 
      var $46=$1;
      var $47=(($46+40)|0);
      var $48=HEAP32[(($47)>>2)];
      $ci=$48;
      __label__ = 7; break;
    case 7: 
      var $50=$ci;
      var $51=$1;
      var $52=(($51+20)|0);
      var $53=HEAPU32[(($52)>>2)];
      var $54=(($50)>>>0) <= (($53)>>>0);
      if ($54) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $56=$ci;
      var $57=(($56+8)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$2;
      var $60=$58;
      var $61=$59;
      var $62=((($60)-($61))|0);
      var $63=((((($62)|0))/(12))&-1);
      var $64=$1;
      var $65=(($64+32)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+($63)*(12))|0);
      var $68=$ci;
      var $69=(($68+8)|0);
      HEAP32[(($69)>>2)]=$67;
      var $70=$ci;
      var $71=(($70)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$2;
      var $74=$72;
      var $75=$73;
      var $76=((($74)-($75))|0);
      var $77=((((($76)|0))/(12))&-1);
      var $78=$1;
      var $79=(($78+32)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80+($77)*(12))|0);
      var $82=$ci;
      var $83=(($82)|0);
      HEAP32[(($83)>>2)]=$81;
      var $84=$ci;
      var $85=(($84+4)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$2;
      var $88=$86;
      var $89=$87;
      var $90=((($88)-($89))|0);
      var $91=((((($90)|0))/(12))&-1);
      var $92=$1;
      var $93=(($92+32)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94+($91)*(12))|0);
      var $96=$ci;
      var $97=(($96+4)|0);
      HEAP32[(($97)>>2)]=$95;
      __label__ = 9; break;
    case 9: 
      var $99=$ci;
      var $100=(($99+24)|0);
      $ci=$100;
      __label__ = 7; break;
    case 10: 
      var $102=$1;
      var $103=(($102+12)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$2;
      var $106=$104;
      var $107=$105;
      var $108=((($106)-($107))|0);
      var $109=((((($108)|0))/(12))&-1);
      var $110=$1;
      var $111=(($110+32)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=(($112+($109)*(12))|0);
      var $114=$1;
      var $115=(($114+12)|0);
      HEAP32[(($115)>>2)]=$113;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_correctstack["X"]=1;

function _info_tailcall($ar) {
  ;
  var __label__;

  var $1;
  $1=$ar;
  var $2=$1;
  var $3=(($2+8)|0);
  HEAP32[(($3)>>2)]=((__str13265)|0);
  var $4=$1;
  var $5=(($4+4)|0);
  HEAP32[(($5)>>2)]=((__str13265)|0);
  var $6=$1;
  var $7=(($6+12)|0);
  HEAP32[(($7)>>2)]=((STRING_TABLE.__str18270)|0);
  var $8=$1;
  var $9=(($8+20)|0);
  HEAP32[(($9)>>2)]=-1;
  var $10=$1;
  var $11=(($10+28)|0);
  HEAP32[(($11)>>2)]=-1;
  var $12=$1;
  var $13=(($12+32)|0);
  HEAP32[(($13)>>2)]=-1;
  var $14=$1;
  var $15=(($14+16)|0);
  HEAP32[(($15)>>2)]=((STRING_TABLE.__str19271)|0);
  var $16=$1;
  var $17=(($16+36)|0);
  var $18=(($17)|0);
  var $19=$1;
  var $20=(($19+16)|0);
  var $21=HEAP32[(($20)>>2)];
  _luaO_chunkid($18, $21, 60);
  var $22=$1;
  var $23=(($22+24)|0);
  HEAP32[(($23)>>2)]=0;
  ;
  return;
}


function _funcinfo($ar, $cl) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$ar;
      $2=$cl;
      var $3=$2;
      var $4=$3;
      var $5=(($4+6)|0);
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$1;
      var $10=(($9+16)|0);
      HEAP32[(($10)>>2)]=((STRING_TABLE.__str14266)|0);
      var $11=$1;
      var $12=(($11+28)|0);
      HEAP32[(($12)>>2)]=-1;
      var $13=$1;
      var $14=(($13+32)|0);
      HEAP32[(($14)>>2)]=-1;
      var $15=$1;
      var $16=(($15+12)|0);
      HEAP32[(($16)>>2)]=((STRING_TABLE.__str15267)|0);
      __label__ = 5; break;
    case 4: 
      var $18=$2;
      var $19=$18;
      var $20=(($19+16)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+32)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+16)|0);
      var $25=$24;
      var $26=$1;
      var $27=(($26+16)|0);
      HEAP32[(($27)>>2)]=$25;
      var $28=$2;
      var $29=$28;
      var $30=(($29+16)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+60)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$1;
      var $35=(($34+28)|0);
      HEAP32[(($35)>>2)]=$33;
      var $36=$2;
      var $37=$36;
      var $38=(($37+16)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+64)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$1;
      var $43=(($42+32)|0);
      HEAP32[(($43)>>2)]=$41;
      var $44=$1;
      var $45=(($44+28)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46)|0)==0;
      var $48=$47 ? (((STRING_TABLE.__str16268)|0)) : (((STRING_TABLE.__str17269)|0));
      var $49=$1;
      var $50=(($49+12)|0);
      HEAP32[(($50)>>2)]=$48;
      __label__ = 5; break;
    case 5: 
      var $52=$1;
      var $53=(($52+36)|0);
      var $54=(($53)|0);
      var $55=$1;
      var $56=(($55+16)|0);
      var $57=HEAP32[(($56)>>2)];
      _luaO_chunkid($54, $57, 60);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_funcinfo["X"]=1;

function _getfuncname($L, $ci, $name) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      $2=$L;
      $3=$ci;
      $4=$name;
      var $5=$3;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0)==6;
      if ($10) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $12=$3;
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      var $19=$18;
      var $20=(($19+6)|0);
      var $21=HEAP8[($20)];
      var $22=(($21 << 24) >> 24)!=0;
      if ($22) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $24=$3;
      var $25=(($24+20)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|0) > 0;
      if ($27) { __label__ = 7; break; } else { __label__ = 5; break; }
    case 5: 
      var $29=$3;
      var $30=((($29)-(24))|0);
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+8)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34)|0)==6;
      if ($35) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $37=$3;
      var $38=((($37)-(24))|0);
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40)|0);
      var $42=$41;
      var $43=HEAP32[(($42)>>2)];
      var $44=$43;
      var $45=$44;
      var $46=(($45+6)|0);
      var $47=HEAP8[($46)];
      var $48=(($47 << 24) >> 24)!=0;
      if ($48) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $1=0;
      __label__ = 13; break;
    case 8: 
      var $51=$3;
      var $52=((($51)-(24))|0);
      $3=$52;
      var $53=$2;
      var $54=$3;
      var $55=_currentpc($53, $54);
      var $56=$3;
      var $57=(($56+4)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58)|0);
      var $60=$59;
      var $61=HEAP32[(($60)>>2)];
      var $62=$61;
      var $63=$62;
      var $64=(($63+16)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+12)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+($55<<2))|0);
      var $69=HEAP32[(($68)>>2)];
      $i=$69;
      var $70=$i;
      var $71=$70 >>> 0;
      var $72=$71 & 63;
      var $73=(($72)|0)==28;
      if ($73) { __label__ = 11; break; } else { __label__ = 9; break; }
    case 9: 
      var $75=$i;
      var $76=$75 >>> 0;
      var $77=$76 & 63;
      var $78=(($77)|0)==29;
      if ($78) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $80=$i;
      var $81=$80 >>> 0;
      var $82=$81 & 63;
      var $83=(($82)|0)==33;
      if ($83) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $85=$2;
      var $86=$3;
      var $87=$i;
      var $88=$87 >>> 6;
      var $89=$88 & 255;
      var $90=$4;
      var $91=_getobjname($85, $86, $89, $90);
      $1=$91;
      __label__ = 13; break;
    case 12: 
      $1=0;
      __label__ = 13; break;
    case 13: 
      var $94=$1;
      ;
      return $94;
    default: assert(0, "bad label: " + __label__);
  }
}
_getfuncname["X"]=1;

function _luaD_seterrorobj($L, $errcode, $oldtop) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i_o;
      var $i_o1;
      var $o2;
      var $o1;
      $1=$L;
      $2=$errcode;
      $3=$oldtop;
      var $4=$2;
      if ((($4)|0) == 4) {
        __label__ = 3; break;
      }
      else if ((($4)|0) == 5) {
        __label__ = 4; break;
      }
      else if ((($4)|0) == 3 || (($4)|0) == 2) {
        __label__ = 5; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 3: 
      var $6=$3;
      $i_o=$6;
      var $7=$1;
      var $8=_luaS_newlstr($7, ((STRING_TABLE.__str293)|0), 17);
      var $9=$8;
      var $10=$i_o;
      var $11=(($10)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$9;
      var $13=$i_o;
      var $14=(($13+8)|0);
      HEAP32[(($14)>>2)]=4;
      __label__ = 6; break;
    case 4: 
      var $16=$3;
      $i_o1=$16;
      var $17=$1;
      var $18=_luaS_newlstr($17, ((STRING_TABLE.__str1294)|0), 23);
      var $19=$18;
      var $20=$i_o1;
      var $21=(($20)|0);
      var $22=$21;
      HEAP32[(($22)>>2)]=$19;
      var $23=$i_o1;
      var $24=(($23+8)|0);
      HEAP32[(($24)>>2)]=4;
      __label__ = 6; break;
    case 5: 
      var $26=$1;
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=((($28)-(12))|0);
      $o2=$29;
      var $30=$3;
      $o1=$30;
      var $31=$o1;
      var $32=(($31)|0);
      var $33=$o2;
      var $34=(($33)|0);
      var $35=$32;
      var $36=$34;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];
      var $37=$o2;
      var $38=(($37+8)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$o1;
      var $41=(($40+8)|0);
      HEAP32[(($41)>>2)]=$39;
      __label__ = 6; break;
    case 6: 
      var $43=$3;
      var $44=(($43+12)|0);
      var $45=$1;
      var $46=(($45+8)|0);
      HEAP32[(($46)>>2)]=$44;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaD_seterrorobj["X"]=1;

function _resetstack($L, $status) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L;
  $2=$status;
  var $3=$1;
  var $4=(($3+40)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$1;
  var $7=(($6+20)|0);
  HEAP32[(($7)>>2)]=$5;
  var $8=$1;
  var $9=(($8+20)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10)|0);
  var $12=HEAP32[(($11)>>2)];
  var $13=$1;
  var $14=(($13+12)|0);
  HEAP32[(($14)>>2)]=$12;
  var $15=$1;
  var $16=$1;
  var $17=(($16+12)|0);
  var $18=HEAP32[(($17)>>2)];
  _luaF_close($15, $18);
  var $19=$1;
  var $20=$2;
  var $21=$1;
  var $22=(($21+12)|0);
  var $23=HEAP32[(($22)>>2)];
  _luaD_seterrorobj($19, $20, $23);
  var $24=$1;
  var $25=(($24+54)|0);
  var $26=HEAP16[(($25)>>1)];
  var $27=$1;
  var $28=(($27+52)|0);
  HEAP16[(($28)>>1)]=$26;
  var $29=$1;
  var $30=(($29+57)|0);
  HEAP8[($30)]=1;
  var $31=$1;
  _restore_stack_limit($31);
  var $32=$1;
  var $33=(($32+108)|0);
  HEAP32[(($33)>>2)]=0;
  var $34=$1;
  var $35=(($34+104)|0);
  HEAP32[(($35)>>2)]=0;
  ;
  return;
}


function _luaD_rawrunprotected($L, $f, $ud) {
  var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  var setjmpTable = {"2": function(value) { __label__ = 5; $13 = value },dummy: 0};
  while(1) try { switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $lj=__stackBase__;
      $1=$L;
      $2=$f;
      $3=$ud;
      var $4=(($lj+44)|0);
      HEAP32[(($4)>>2)]=0;
      var $5=$1;
      var $6=(($5+104)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($lj)|0);
      HEAP32[(($8)>>2)]=$7;
      var $9=$1;
      var $10=(($9+104)|0);
      HEAP32[(($10)>>2)]=$lj;
      var $11=(($lj+4)|0);
      var $12=(($11)|0);
      var $13=(HEAP32[(($12)>>2)]=__label__, 0);
      __label__ = 5; break;
    case 5: 
      var $14=(($13)|0)==0;
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $16=$2;
      var $17=$1;
      var $18=$3;
      FUNCTION_TABLE[$16]($17, $18);
      __label__ = 4; break;
    case 4: 
      var $20=(($lj)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$1;
      var $23=(($22+104)|0);
      HEAP32[(($23)>>2)]=$21;
      var $24=(($lj+44)|0);
      var $25=HEAP32[(($24)>>2)];
      STACKTOP = __stackBase__;
      return $25;
    default: assert(0, "bad label: " + __label__);
  } } catch(e) { if (!e.longjmp) throw(e); setjmpTable[e.label](e.value) }
}


function _luaD_reallocstack($L, $newsize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $oldstack;
      var $realsize;
      $1=$L;
      $2=$newsize;
      var $3=$1;
      var $4=(($3+32)|0);
      var $5=HEAP32[(($4)>>2)];
      $oldstack=$5;
      var $6=$2;
      var $7=((($6)+(1))|0);
      var $8=((($7)+(5))|0);
      $realsize=$8;
      var $9=$realsize;
      var $10=((($9)+(1))|0);
      var $11=(($10)>>>0) <= 357913941;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$1;
      var $14=$1;
      var $15=(($14+32)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$16;
      var $18=$1;
      var $19=(($18+44)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=((($20)*(12))|0);
      var $22=$realsize;
      var $23=((($22)*(12))|0);
      var $24=_luaM_realloc_($13, $17, $21, $23);
      var $29 = $24;__label__ = 5; break;
    case 4: 
      var $26=$1;
      var $27=_luaM_toobig($26);
      var $29 = $27;__label__ = 5; break;
    case 5: 
      var $29;
      var $30=$29;
      var $31=$1;
      var $32=(($31+32)|0);
      HEAP32[(($32)>>2)]=$30;
      var $33=$realsize;
      var $34=$1;
      var $35=(($34+44)|0);
      HEAP32[(($35)>>2)]=$33;
      var $36=$1;
      var $37=(($36+32)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$2;
      var $40=(($38+($39)*(12))|0);
      var $41=$1;
      var $42=(($41+28)|0);
      HEAP32[(($42)>>2)]=$40;
      var $43=$1;
      var $44=$oldstack;
      _correctstack($43, $44);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaD_reallocstack["X"]=1;

function _luaD_reallocCI($L, $newsize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $oldci;
      $1=$L;
      $2=$newsize;
      var $3=$1;
      var $4=(($3+40)|0);
      var $5=HEAP32[(($4)>>2)];
      $oldci=$5;
      var $6=$2;
      var $7=((($6)+(1))|0);
      var $8=(($7)>>>0) <= 178956970;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$1;
      var $11=$1;
      var $12=(($11+40)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13;
      var $15=$1;
      var $16=(($15+48)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17)*(24))|0);
      var $19=$2;
      var $20=((($19)*(24))|0);
      var $21=_luaM_realloc_($10, $14, $18, $20);
      var $26 = $21;__label__ = 5; break;
    case 4: 
      var $23=$1;
      var $24=_luaM_toobig($23);
      var $26 = $24;__label__ = 5; break;
    case 5: 
      var $26;
      var $27=$26;
      var $28=$1;
      var $29=(($28+40)|0);
      HEAP32[(($29)>>2)]=$27;
      var $30=$2;
      var $31=$1;
      var $32=(($31+48)|0);
      HEAP32[(($32)>>2)]=$30;
      var $33=$1;
      var $34=(($33+20)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$oldci;
      var $37=$35;
      var $38=$36;
      var $39=((($37)-($38))|0);
      var $40=((((($39)|0))/(24))&-1);
      var $41=$1;
      var $42=(($41+40)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+($40)*(24))|0);
      var $45=$1;
      var $46=(($45+20)|0);
      HEAP32[(($46)>>2)]=$44;
      var $47=$1;
      var $48=(($47+40)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$1;
      var $51=(($50+48)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($49+($52)*(24))|0);
      var $54=((($53)-(24))|0);
      var $55=$1;
      var $56=(($55+36)|0);
      HEAP32[(($56)>>2)]=$54;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaD_reallocCI["X"]=1;

function _luaD_growstack($L, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$n;
      var $3=$2;
      var $4=$1;
      var $5=(($4+44)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($3)|0) <= (($6)|0);
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$1;
      var $10=$1;
      var $11=(($10+44)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=((($12<<1))|0);
      _luaD_reallocstack($9, $13);
      __label__ = 5; break;
    case 4: 
      var $15=$1;
      var $16=$1;
      var $17=(($16+44)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      var $20=((($18)+($19))|0);
      _luaD_reallocstack($15, $20);
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaD_throw($L, $errcode) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$errcode;
      var $3=$1;
      var $4=(($3+104)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$2;
      var $9=$1;
      var $10=(($9+104)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+44)|0);
      HEAP32[(($12)>>2)]=$8;
      var $13=$1;
      var $14=(($13+104)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+4)|0);
      var $17=(($16)|0);
      _longjmp($17, 1);
      throw "Reached an unreachable!"
    case 4: 
      var $19=$2;
      var $20=(($19) & 255);
      var $21=$1;
      var $22=(($21+6)|0);
      HEAP8[($22)]=$20;
      var $23=$1;
      var $24=(($23+16)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+88)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|0)!=0;
      if ($28) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $30=$1;
      var $31=$2;
      _resetstack($30, $31);
      var $32=$1;
      var $33=(($32+16)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+88)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$1;
      var $38=FUNCTION_TABLE[$36]($37);
      __label__ = 6; break;
    case 6: 
      _exit(1);
      throw "Reached an unreachable!"
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaD_callhook($L, $event, $line) {
  var __stackBase__  = STACKTOP; STACKTOP += 100; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $hook;
      var $top;
      var $ci_top;
      var $ar=__stackBase__;
      $1=$L;
      $2=$event;
      $3=$line;
      var $4=$1;
      var $5=(($4+68)|0);
      var $6=HEAP32[(($5)>>2)];
      $hook=$6;
      var $7=$hook;
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 11; break; }
    case 3: 
      var $10=$1;
      var $11=(($10+57)|0);
      var $12=HEAPU8[($11)];
      var $13=(($12)&255);
      var $14=(($13)|0)!=0;
      if ($14) { __label__ = 4; break; } else { __label__ = 11; break; }
    case 4: 
      var $16=$1;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      var $20=$1;
      var $21=(($20+32)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      var $24=$19;
      var $25=$23;
      var $26=((($24)-($25))|0);
      $top=$26;
      var $27=$1;
      var $28=(($27+20)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      var $33=$1;
      var $34=(($33+32)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      var $37=$32;
      var $38=$36;
      var $39=((($37)-($38))|0);
      $ci_top=$39;
      var $40=$2;
      var $41=(($ar)|0);
      HEAP32[(($41)>>2)]=$40;
      var $42=$3;
      var $43=(($ar+20)|0);
      HEAP32[(($43)>>2)]=$42;
      var $44=$2;
      var $45=(($44)|0)==4;
      if ($45) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $47=(($ar+96)|0);
      HEAP32[(($47)>>2)]=0;
      __label__ = 7; break;
    case 6: 
      var $49=$1;
      var $50=(($49+20)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$1;
      var $53=(($52+40)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$51;
      var $56=$54;
      var $57=((($55)-($56))|0);
      var $58=((((($57)|0))/(24))&-1);
      var $59=(($ar+96)|0);
      HEAP32[(($59)>>2)]=$58;
      __label__ = 7; break;
    case 7: 
      var $61=$1;
      var $62=(($61+28)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$63;
      var $65=$1;
      var $66=(($65+8)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$67;
      var $69=$64;
      var $70=$68;
      var $71=((($69)-($70))|0);
      var $72=(($71)|0) <= 240;
      if ($72) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $74=$1;
      _luaD_growstack($74, 20);
      __label__ = 10; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $77=$1;
      var $78=(($77+8)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+240)|0);
      var $81=$1;
      var $82=(($81+20)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+8)|0);
      HEAP32[(($84)>>2)]=$80;
      var $85=$1;
      var $86=(($85+57)|0);
      HEAP8[($86)]=0;
      var $87=$hook;
      var $88=$1;
      FUNCTION_TABLE[$87]($88, $ar);
      var $89=$1;
      var $90=(($89+57)|0);
      HEAP8[($90)]=1;
      var $91=$1;
      var $92=(($91+32)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$93;
      var $95=$ci_top;
      var $96=(($94+$95)|0);
      var $97=$96;
      var $98=$1;
      var $99=(($98+20)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+8)|0);
      HEAP32[(($101)>>2)]=$97;
      var $102=$1;
      var $103=(($102+32)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$104;
      var $106=$top;
      var $107=(($105+$106)|0);
      var $108=$107;
      var $109=$1;
      var $110=(($109+8)|0);
      HEAP32[(($110)>>2)]=$108;
      __label__ = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaD_callhook["X"]=1;

function _luaD_precall($L, $func, $nresults) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $cl;
      var $funcr;
      var $ci;
      var $st;
      var $base;
      var $p;
      var $nargs;
      var $ci1;
      var $n;
      $2=$L;
      $3=$func;
      $4=$nresults;
      var $5=$3;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|0)==6;
      if ($8) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $10=$2;
      var $11=$3;
      var $12=_tryfuncTM($10, $11);
      $3=$12;
      __label__ = 4; break;
    case 4: 
      var $14=$3;
      var $15=$14;
      var $16=$2;
      var $17=(($16+32)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      var $20=$15;
      var $21=$19;
      var $22=((($20)-($21))|0);
      $funcr=$22;
      var $23=$3;
      var $24=(($23)|0);
      var $25=$24;
      var $26=HEAP32[(($25)>>2)];
      var $27=$26;
      var $28=$27;
      $cl=$28;
      var $29=$2;
      var $30=(($29+24)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$2;
      var $33=(($32+20)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+12)|0);
      HEAP32[(($35)>>2)]=$31;
      var $36=$cl;
      var $37=(($36+6)|0);
      var $38=HEAP8[($37)];
      var $39=(($38 << 24) >> 24)!=0;
      if ($39) { __label__ = 23; break; } else { __label__ = 5; break; }
    case 5: 
      var $41=$cl;
      var $42=(($41+16)|0);
      var $43=HEAP32[(($42)>>2)];
      $p=$43;
      var $44=$2;
      var $45=(($44+28)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$46;
      var $48=$2;
      var $49=(($48+8)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$50;
      var $52=$47;
      var $53=$51;
      var $54=((($52)-($53))|0);
      var $55=$p;
      var $56=(($55+75)|0);
      var $57=HEAPU8[($56)];
      var $58=(($57)&255);
      var $59=((($58)*(12))|0);
      var $60=(($54)|0) <= (($59)|0);
      if ($60) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $62=$2;
      var $63=$p;
      var $64=(($63+75)|0);
      var $65=HEAPU8[($64)];
      var $66=(($65)&255);
      _luaD_growstack($62, $66);
      __label__ = 8; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $69=$2;
      var $70=(($69+32)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$71;
      var $73=$funcr;
      var $74=(($72+$73)|0);
      var $75=$74;
      $3=$75;
      var $76=$p;
      var $77=(($76+74)|0);
      var $78=HEAP8[($77)];
      var $79=(($78 << 24) >> 24)!=0;
      if ($79) { __label__ = 12; break; } else { __label__ = 9; break; }
    case 9: 
      var $81=$3;
      var $82=(($81+12)|0);
      $base=$82;
      var $83=$2;
      var $84=(($83+8)|0);
      var $85=HEAPU32[(($84)>>2)];
      var $86=$base;
      var $87=$p;
      var $88=(($87+73)|0);
      var $89=HEAPU8[($88)];
      var $90=(($89)&255);
      var $91=(($86+($90)*(12))|0);
      var $92=(($85)>>>0) > (($91)>>>0);
      if ($92) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $94=$base;
      var $95=$p;
      var $96=(($95+73)|0);
      var $97=HEAPU8[($96)];
      var $98=(($97)&255);
      var $99=(($94+($98)*(12))|0);
      var $100=$2;
      var $101=(($100+8)|0);
      HEAP32[(($101)>>2)]=$99;
      __label__ = 11; break;
    case 11: 
      __label__ = 13; break;
    case 12: 
      var $104=$2;
      var $105=(($104+8)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=$3;
      var $108=$106;
      var $109=$107;
      var $110=((($108)-($109))|0);
      var $111=((((($110)|0))/(12))&-1);
      var $112=((($111)-(1))|0);
      $nargs=$112;
      var $113=$2;
      var $114=$p;
      var $115=$nargs;
      var $116=_adjust_varargs($113, $114, $115);
      $base=$116;
      var $117=$2;
      var $118=(($117+32)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=$119;
      var $121=$funcr;
      var $122=(($120+$121)|0);
      var $123=$122;
      $3=$123;
      __label__ = 13; break;
    case 13: 
      var $125=$2;
      var $126=(($125+20)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=$2;
      var $129=(($128+36)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($127)|0)==(($130)|0);
      if ($131) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $133=$2;
      var $134=_growCI($133);
      var $141 = $134;__label__ = 16; break;
    case 15: 
      var $136=$2;
      var $137=(($136+20)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($138+24)|0);
      HEAP32[(($137)>>2)]=$139;
      var $141 = $139;__label__ = 16; break;
    case 16: 
      var $141;
      $ci=$141;
      var $142=$3;
      var $143=$ci;
      var $144=(($143+4)|0);
      HEAP32[(($144)>>2)]=$142;
      var $145=$base;
      var $146=$ci;
      var $147=(($146)|0);
      HEAP32[(($147)>>2)]=$145;
      var $148=$2;
      var $149=(($148+12)|0);
      HEAP32[(($149)>>2)]=$145;
      var $150=$2;
      var $151=(($150+12)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=$p;
      var $154=(($153+75)|0);
      var $155=HEAPU8[($154)];
      var $156=(($155)&255);
      var $157=(($152+($156)*(12))|0);
      var $158=$ci;
      var $159=(($158+8)|0);
      HEAP32[(($159)>>2)]=$157;
      var $160=$p;
      var $161=(($160+12)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=$2;
      var $164=(($163+24)|0);
      HEAP32[(($164)>>2)]=$162;
      var $165=$ci;
      var $166=(($165+20)|0);
      HEAP32[(($166)>>2)]=0;
      var $167=$4;
      var $168=$ci;
      var $169=(($168+16)|0);
      HEAP32[(($169)>>2)]=$167;
      var $170=$2;
      var $171=(($170+8)|0);
      var $172=HEAP32[(($171)>>2)];
      $st=$172;
      __label__ = 17; break;
    case 17: 
      var $174=$st;
      var $175=$ci;
      var $176=(($175+8)|0);
      var $177=HEAPU32[(($176)>>2)];
      var $178=(($174)>>>0) < (($177)>>>0);
      if ($178) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      var $180=$st;
      var $181=(($180+8)|0);
      HEAP32[(($181)>>2)]=0;
      __label__ = 19; break;
    case 19: 
      var $183=$st;
      var $184=(($183+12)|0);
      $st=$184;
      __label__ = 17; break;
    case 20: 
      var $186=$ci;
      var $187=(($186+8)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=$2;
      var $190=(($189+8)|0);
      HEAP32[(($190)>>2)]=$188;
      var $191=$2;
      var $192=(($191+56)|0);
      var $193=HEAPU8[($192)];
      var $194=(($193)&255);
      var $195=$194 & 1;
      var $196=(($195)|0)!=0;
      if ($196) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $198=$2;
      var $199=(($198+24)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=(($200+4)|0);
      HEAP32[(($199)>>2)]=$201;
      var $202=$2;
      _luaD_callhook($202, 0, -1);
      var $203=$2;
      var $204=(($203+24)|0);
      var $205=HEAP32[(($204)>>2)];
      var $206=((($205)-(4))|0);
      HEAP32[(($204)>>2)]=$206;
      __label__ = 22; break;
    case 22: 
      $1=0;
      __label__ = 34; break;
    case 23: 
      var $209=$2;
      var $210=(($209+28)|0);
      var $211=HEAP32[(($210)>>2)];
      var $212=$211;
      var $213=$2;
      var $214=(($213+8)|0);
      var $215=HEAP32[(($214)>>2)];
      var $216=$215;
      var $217=$212;
      var $218=$216;
      var $219=((($217)-($218))|0);
      var $220=(($219)|0) <= 240;
      if ($220) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $222=$2;
      _luaD_growstack($222, 20);
      __label__ = 26; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      var $225=$2;
      var $226=(($225+20)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=$2;
      var $229=(($228+36)|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=(($227)|0)==(($230)|0);
      if ($231) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $233=$2;
      var $234=_growCI($233);
      var $241 = $234;__label__ = 29; break;
    case 28: 
      var $236=$2;
      var $237=(($236+20)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=(($238+24)|0);
      HEAP32[(($237)>>2)]=$239;
      var $241 = $239;__label__ = 29; break;
    case 29: 
      var $241;
      $ci1=$241;
      var $242=$2;
      var $243=(($242+32)|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=$244;
      var $246=$funcr;
      var $247=(($245+$246)|0);
      var $248=$247;
      var $249=$ci1;
      var $250=(($249+4)|0);
      HEAP32[(($250)>>2)]=$248;
      var $251=$ci1;
      var $252=(($251+4)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=(($253+12)|0);
      var $255=$ci1;
      var $256=(($255)|0);
      HEAP32[(($256)>>2)]=$254;
      var $257=$2;
      var $258=(($257+12)|0);
      HEAP32[(($258)>>2)]=$254;
      var $259=$2;
      var $260=(($259+8)|0);
      var $261=HEAP32[(($260)>>2)];
      var $262=(($261+240)|0);
      var $263=$ci1;
      var $264=(($263+8)|0);
      HEAP32[(($264)>>2)]=$262;
      var $265=$4;
      var $266=$ci1;
      var $267=(($266+16)|0);
      HEAP32[(($267)>>2)]=$265;
      var $268=$2;
      var $269=(($268+56)|0);
      var $270=HEAPU8[($269)];
      var $271=(($270)&255);
      var $272=$271 & 1;
      var $273=(($272)|0)!=0;
      if ($273) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $275=$2;
      _luaD_callhook($275, 0, -1);
      __label__ = 31; break;
    case 31: 
      var $277=$2;
      var $278=(($277+20)|0);
      var $279=HEAP32[(($278)>>2)];
      var $280=(($279+4)|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=(($281)|0);
      var $283=$282;
      var $284=HEAP32[(($283)>>2)];
      var $285=$284;
      var $286=$285;
      var $287=(($286+16)|0);
      var $288=HEAP32[(($287)>>2)];
      var $289=$2;
      var $290=FUNCTION_TABLE[$288]($289);
      $n=$290;
      var $291=$n;
      var $292=(($291)|0) < 0;
      if ($292) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      $1=2;
      __label__ = 34; break;
    case 33: 
      var $295=$2;
      var $296=$2;
      var $297=(($296+8)|0);
      var $298=HEAP32[(($297)>>2)];
      var $299=$n;
      var $300=(((-$299))|0);
      var $301=(($298+($300)*(12))|0);
      var $302=_luaD_poscall($295, $301);
      $1=1;
      __label__ = 34; break;
    case 34: 
      var $304=$1;
      ;
      return $304;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaD_precall["X"]=1;

function _tryfuncTM($L, $func) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $tm;
      var $p;
      var $funcr;
      var $o2;
      var $o1;
      var $o21;
      var $o12;
      $1=$L;
      $2=$func;
      var $3=$1;
      var $4=$2;
      var $5=_luaT_gettmbyobj($3, $4, 16);
      $tm=$5;
      var $6=$2;
      var $7=$6;
      var $8=$1;
      var $9=(($8+32)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      var $12=$7;
      var $13=$11;
      var $14=((($12)-($13))|0);
      $funcr=$14;
      var $15=$tm;
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|0)==6;
      if ($18) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $20=$1;
      var $21=$2;
      _luaG_typeerror($20, $21, ((STRING_TABLE.__str8301)|0));
      __label__ = 4; break;
    case 4: 
      var $23=$1;
      var $24=(($23+8)|0);
      var $25=HEAP32[(($24)>>2)];
      $p=$25;
      __label__ = 5; break;
    case 5: 
      var $27=$p;
      var $28=$2;
      var $29=(($27)>>>0) > (($28)>>>0);
      if ($29) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $31=$p;
      var $32=((($31)-(12))|0);
      $o2=$32;
      var $33=$p;
      $o1=$33;
      var $34=$o1;
      var $35=(($34)|0);
      var $36=$o2;
      var $37=(($36)|0);
      var $38=$35;
      var $39=$37;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];
      var $40=$o2;
      var $41=(($40+8)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$o1;
      var $44=(($43+8)|0);
      HEAP32[(($44)>>2)]=$42;
      __label__ = 7; break;
    case 7: 
      var $46=$p;
      var $47=((($46)-(12))|0);
      $p=$47;
      __label__ = 5; break;
    case 8: 
      var $49=$1;
      var $50=(($49+28)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$51;
      var $53=$1;
      var $54=(($53+8)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$55;
      var $57=$52;
      var $58=$56;
      var $59=((($57)-($58))|0);
      var $60=(($59)|0) <= 12;
      if ($60) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $62=$1;
      _luaD_growstack($62, 1);
      __label__ = 11; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $65=$1;
      var $66=(($65+8)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+12)|0);
      HEAP32[(($66)>>2)]=$68;
      var $69=$1;
      var $70=(($69+32)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$71;
      var $73=$funcr;
      var $74=(($72+$73)|0);
      var $75=$74;
      $2=$75;
      var $76=$tm;
      $o21=$76;
      var $77=$2;
      $o12=$77;
      var $78=$o12;
      var $79=(($78)|0);
      var $80=$o21;
      var $81=(($80)|0);
      var $82=$79;
      var $83=$81;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($82)>>2)]=HEAP32[(($83)>>2)];HEAP32[((($82)+(4))>>2)]=HEAP32[((($83)+(4))>>2)];
      var $84=$o21;
      var $85=(($84+8)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$o12;
      var $88=(($87+8)|0);
      HEAP32[(($88)>>2)]=$86;
      var $89=$2;
      ;
      return $89;
    default: assert(0, "bad label: " + __label__);
  }
}
_tryfuncTM["X"]=1;

function _adjust_varargs($L, $p, $actual) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $nfixargs;
      var $htab;
      var $base;
      var $fixed;
      var $nvar;
      var $o2;
      var $o1;
      var $i_o;
      var $o21;
      var $o12;
      var $i_o3;
      $1=$L;
      $2=$p;
      $3=$actual;
      var $4=$2;
      var $5=(($4+73)|0);
      var $6=HEAPU8[($5)];
      var $7=(($6)&255);
      $nfixargs=$7;
      $htab=0;
      __label__ = 3; break;
    case 3: 
      var $9=$3;
      var $10=$nfixargs;
      var $11=(($9)|0) < (($10)|0);
      if ($11) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $13=$1;
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+12)|0);
      HEAP32[(($14)>>2)]=$16;
      var $17=(($15+8)|0);
      HEAP32[(($17)>>2)]=0;
      __label__ = 5; break;
    case 5: 
      var $19=$3;
      var $20=((($19)+(1))|0);
      $3=$20;
      __label__ = 3; break;
    case 6: 
      var $22=$2;
      var $23=(($22+74)|0);
      var $24=HEAPU8[($23)];
      var $25=(($24)&255);
      var $26=$25 & 4;
      var $27=(($26)|0)!=0;
      if ($27) { __label__ = 7; break; } else { __label__ = 17; break; }
    case 7: 
      var $29=$3;
      var $30=$nfixargs;
      var $31=((($29)-($30))|0);
      $nvar=$31;
      var $32=$1;
      var $33=(($32+16)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+68)|0);
      var $36=HEAPU32[(($35)>>2)];
      var $37=$1;
      var $38=(($37+16)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+64)|0);
      var $41=HEAPU32[(($40)>>2)];
      var $42=(($36)>>>0) >= (($41)>>>0);
      if ($42) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $44=$1;
      _luaC_step($44);
      __label__ = 9; break;
    case 9: 
      var $46=$1;
      var $47=(($46+28)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$48;
      var $50=$1;
      var $51=(($50+8)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$52;
      var $54=$49;
      var $55=$53;
      var $56=((($54)-($55))|0);
      var $57=$2;
      var $58=(($57+75)|0);
      var $59=HEAPU8[($58)];
      var $60=(($59)&255);
      var $61=((($60)*(12))|0);
      var $62=(($56)|0) <= (($61)|0);
      if ($62) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $64=$1;
      var $65=$2;
      var $66=(($65+75)|0);
      var $67=HEAPU8[($66)];
      var $68=(($67)&255);
      _luaD_growstack($64, $68);
      __label__ = 12; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $71=$1;
      var $72=$nvar;
      var $73=_luaH_new($71, $72, 1);
      $htab=$73;
      $i=0;
      __label__ = 13; break;
    case 13: 
      var $75=$i;
      var $76=$nvar;
      var $77=(($75)|0) < (($76)|0);
      if ($77) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $79=$1;
      var $80=(($79+8)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$nvar;
      var $83=(((-$82))|0);
      var $84=(($81+($83)*(12))|0);
      var $85=$i;
      var $86=(($84+($85)*(12))|0);
      $o2=$86;
      var $87=$1;
      var $88=$htab;
      var $89=$i;
      var $90=((($89)+(1))|0);
      var $91=_luaH_setnum($87, $88, $90);
      $o1=$91;
      var $92=$o1;
      var $93=(($92)|0);
      var $94=$o2;
      var $95=(($94)|0);
      var $96=$93;
      var $97=$95;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($96)>>2)]=HEAP32[(($97)>>2)];HEAP32[((($96)+(4))>>2)]=HEAP32[((($97)+(4))>>2)];
      var $98=$o2;
      var $99=(($98+8)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=$o1;
      var $102=(($101+8)|0);
      HEAP32[(($102)>>2)]=$100;
      __label__ = 15; break;
    case 15: 
      var $104=$i;
      var $105=((($104)+(1))|0);
      $i=$105;
      __label__ = 13; break;
    case 16: 
      var $107=$1;
      var $108=$htab;
      var $109=$1;
      var $110=_luaS_newlstr($109, ((STRING_TABLE.__str7300)|0), 1);
      var $111=_luaH_setstr($107, $108, $110);
      $i_o=$111;
      var $112=$nvar;
      var $113=(($112)|0);
      var $114=$i_o;
      var $115=(($114)|0);
      var $116=$115;
      (tempDoubleF64[0]=$113,HEAP32[(($116)>>2)]=tempDoubleI32[0],HEAP32[((($116)+(4))>>2)]=tempDoubleI32[1]);
      var $117=$i_o;
      var $118=(($117+8)|0);
      HEAP32[(($118)>>2)]=3;
      __label__ = 17; break;
    case 17: 
      var $120=$1;
      var $121=(($120+8)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=$3;
      var $124=(((-$123))|0);
      var $125=(($122+($124)*(12))|0);
      $fixed=$125;
      var $126=$1;
      var $127=(($126+8)|0);
      var $128=HEAP32[(($127)>>2)];
      $base=$128;
      $i=0;
      __label__ = 18; break;
    case 18: 
      var $130=$i;
      var $131=$nfixargs;
      var $132=(($130)|0) < (($131)|0);
      if ($132) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      var $134=$fixed;
      var $135=$i;
      var $136=(($134+($135)*(12))|0);
      $o21=$136;
      var $137=$1;
      var $138=(($137+8)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=(($139+12)|0);
      HEAP32[(($138)>>2)]=$140;
      $o12=$139;
      var $141=$o12;
      var $142=(($141)|0);
      var $143=$o21;
      var $144=(($143)|0);
      var $145=$142;
      var $146=$144;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($145)>>2)]=HEAP32[(($146)>>2)];HEAP32[((($145)+(4))>>2)]=HEAP32[((($146)+(4))>>2)];
      var $147=$o21;
      var $148=(($147+8)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=$o12;
      var $151=(($150+8)|0);
      HEAP32[(($151)>>2)]=$149;
      var $152=$fixed;
      var $153=$i;
      var $154=(($152+($153)*(12))|0);
      var $155=(($154+8)|0);
      HEAP32[(($155)>>2)]=0;
      __label__ = 20; break;
    case 20: 
      var $157=$i;
      var $158=((($157)+(1))|0);
      $i=$158;
      __label__ = 18; break;
    case 21: 
      var $160=$htab;
      var $161=(($160)|0)!=0;
      if ($161) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $163=$1;
      var $164=(($163+8)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=(($165+12)|0);
      HEAP32[(($164)>>2)]=$166;
      $i_o3=$165;
      var $167=$htab;
      var $168=$167;
      var $169=$i_o3;
      var $170=(($169)|0);
      var $171=$170;
      HEAP32[(($171)>>2)]=$168;
      var $172=$i_o3;
      var $173=(($172+8)|0);
      HEAP32[(($173)>>2)]=5;
      __label__ = 23; break;
    case 23: 
      var $175=$base;
      ;
      return $175;
    default: assert(0, "bad label: " + __label__);
  }
}
_adjust_varargs["X"]=1;

function _growCI($L) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$L;
      var $2=$1;
      var $3=(($2+48)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|0) > 20000;
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $7=$1;
      _luaD_throw($7, 5);
      __label__ = 7; break;
    case 4: 
      var $9=$1;
      var $10=$1;
      var $11=(($10+48)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=((($12<<1))|0);
      _luaD_reallocCI($9, $13);
      var $14=$1;
      var $15=(($14+48)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|0) > 20000;
      if ($17) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $19=$1;
      _luaG_runerror($19, ((STRING_TABLE.__str6299)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $22=$1;
      var $23=(($22+20)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+24)|0);
      HEAP32[(($23)>>2)]=$25;
      STACKTOP = __stackBase__;
      return $25;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaD_poscall($L, $firstResult) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $res;
      var $wanted;
      var $i;
      var $ci;
      var $o2;
      var $o1;
      $1=$L;
      $2=$firstResult;
      var $3=$1;
      var $4=(($3+56)|0);
      var $5=HEAPU8[($4)];
      var $6=(($5)&255);
      var $7=$6 & 2;
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$1;
      var $11=$2;
      var $12=_callrethooks($10, $11);
      $2=$12;
      __label__ = 4; break;
    case 4: 
      var $14=$1;
      var $15=(($14+20)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(24))|0);
      HEAP32[(($15)>>2)]=$17;
      $ci=$16;
      var $18=$ci;
      var $19=(($18+4)|0);
      var $20=HEAP32[(($19)>>2)];
      $res=$20;
      var $21=$ci;
      var $22=(($21+16)|0);
      var $23=HEAP32[(($22)>>2)];
      $wanted=$23;
      var $24=$ci;
      var $25=((($24)-(24))|0);
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+12)|0);
      HEAP32[(($29)>>2)]=$27;
      var $30=$ci;
      var $31=((($30)-(24))|0);
      var $32=(($31+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$1;
      var $35=(($34+24)|0);
      HEAP32[(($35)>>2)]=$33;
      var $36=$wanted;
      $i=$36;
      __label__ = 5; break;
    case 5: 
      var $38=$i;
      var $39=(($38)|0)!=0;
      if ($39) { __label__ = 6; break; } else { var $47 = 0;__label__ = 7; break; }
    case 6: 
      var $41=$2;
      var $42=$1;
      var $43=(($42+8)|0);
      var $44=HEAPU32[(($43)>>2)];
      var $45=(($41)>>>0) < (($44)>>>0);
      var $47 = $45;__label__ = 7; break;
    case 7: 
      var $47;
      if ($47) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $49=$2;
      var $50=(($49+12)|0);
      $2=$50;
      $o2=$49;
      var $51=$res;
      var $52=(($51+12)|0);
      $res=$52;
      $o1=$51;
      var $53=$o1;
      var $54=(($53)|0);
      var $55=$o2;
      var $56=(($55)|0);
      var $57=$54;
      var $58=$56;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];HEAP32[((($57)+(4))>>2)]=HEAP32[((($58)+(4))>>2)];
      var $59=$o2;
      var $60=(($59+8)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$o1;
      var $63=(($62+8)|0);
      HEAP32[(($63)>>2)]=$61;
      __label__ = 9; break;
    case 9: 
      var $65=$i;
      var $66=((($65)-(1))|0);
      $i=$66;
      __label__ = 5; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $69=$i;
      var $70=((($69)-(1))|0);
      $i=$70;
      var $71=(($69)|0) > 0;
      if ($71) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $73=$res;
      var $74=(($73+12)|0);
      $res=$74;
      var $75=(($73+8)|0);
      HEAP32[(($75)>>2)]=0;
      __label__ = 11; break;
    case 13: 
      var $77=$res;
      var $78=$1;
      var $79=(($78+8)|0);
      HEAP32[(($79)>>2)]=$77;
      var $80=$wanted;
      var $81=((($80)+(1))|0);
      ;
      return $81;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaD_poscall["X"]=1;

function _callrethooks($L, $firstResult) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fr;
      $1=$L;
      $2=$firstResult;
      var $3=$2;
      var $4=$3;
      var $5=$1;
      var $6=(($5+32)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7;
      var $9=$4;
      var $10=$8;
      var $11=((($9)-($10))|0);
      $fr=$11;
      var $12=$1;
      _luaD_callhook($12, 1, -1);
      var $13=$1;
      var $14=(($13+20)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|0);
      var $19=$18;
      var $20=HEAP32[(($19)>>2)];
      var $21=$20;
      var $22=$21;
      var $23=(($22+6)|0);
      var $24=HEAP8[($23)];
      var $25=(($24 << 24) >> 24)!=0;
      if ($25) { __label__ = 9; break; } else { __label__ = 3; break; }
    case 3: 
      __label__ = 4; break;
    case 4: 
      var $28=$1;
      var $29=(($28+56)|0);
      var $30=HEAPU8[($29)];
      var $31=(($30)&255);
      var $32=$31 & 2;
      var $33=(($32)|0)!=0;
      if ($33) { __label__ = 5; break; } else { var $43 = 0;__label__ = 6; break; }
    case 5: 
      var $35=$1;
      var $36=(($35+20)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+20)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=((($39)-(1))|0);
      HEAP32[(($38)>>2)]=$40;
      var $41=(($39)|0)!=0;
      var $43 = $41;__label__ = 6; break;
    case 6: 
      var $43;
      if ($43) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $45=$1;
      _luaD_callhook($45, 4, -1);
      __label__ = 4; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $48=$1;
      var $49=(($48+32)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$50;
      var $52=$fr;
      var $53=(($51+$52)|0);
      var $54=$53;
      ;
      return $54;
    default: assert(0, "bad label: " + __label__);
  }
}
_callrethooks["X"]=1;

function _luaD_call($L, $func, $nResults) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$L;
      $2=$func;
      $3=$nResults;
      var $4=$1;
      var $5=(($4+52)|0);
      var $6=HEAP16[(($5)>>1)];
      var $7=((($6)+(1))&65535);
      HEAP16[(($5)>>1)]=$7;
      var $8=(($7)&65535);
      var $9=(($8)|0) >= 200;
      if ($9) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $11=$1;
      var $12=(($11+52)|0);
      var $13=HEAPU16[(($12)>>1)];
      var $14=(($13)&65535);
      var $15=(($14)|0)==200;
      if ($15) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $17=$1;
      _luaG_runerror($17, ((STRING_TABLE.__str2295)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 8; break;
    case 5: 
      var $19=$1;
      var $20=(($19+52)|0);
      var $21=HEAPU16[(($20)>>1)];
      var $22=(($21)&65535);
      var $23=(($22)|0) >= 225;
      if ($23) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $25=$1;
      _luaD_throw($25, 5);
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $29=$1;
      var $30=$2;
      var $31=$3;
      var $32=_luaD_precall($29, $30, $31);
      var $33=(($32)|0)==0;
      if ($33) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $35=$1;
      _luaV_execute($35, 1);
      __label__ = 11; break;
    case 11: 
      var $37=$1;
      var $38=(($37+52)|0);
      var $39=HEAP16[(($38)>>1)];
      var $40=((($39)-(1))&65535);
      HEAP16[(($38)>>1)]=$40;
      var $41=$1;
      var $42=(($41+16)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+68)|0);
      var $45=HEAPU32[(($44)>>2)];
      var $46=$1;
      var $47=(($46+16)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+64)|0);
      var $50=HEAPU32[(($49)>>2)];
      var $51=(($45)>>>0) >= (($50)>>>0);
      if ($51) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $53=$1;
      _luaC_step($53);
      __label__ = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaD_call["X"]=1;

function _lua_resume($L, $nargs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $status;
      $2=$L;
      $3=$nargs;
      var $4=$2;
      var $5=(($4+6)|0);
      var $6=HEAPU8[($5)];
      var $7=(($6)&255);
      var $8=(($7)|0)!=1;
      if ($8) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $10=$2;
      var $11=(($10+6)|0);
      var $12=HEAPU8[($11)];
      var $13=(($12)&255);
      var $14=(($13)|0)!=0;
      if ($14) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $16=$2;
      var $17=(($16+20)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      var $20=(($19+40)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($18)|0)!=(($21)|0);
      if ($22) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $24=$2;
      var $25=_resume_error($24, ((STRING_TABLE.__str3296)|0));
      $1=$25;
      __label__ = 12; break;
    case 6: 
      var $27=$2;
      var $28=(($27+52)|0);
      var $29=HEAPU16[(($28)>>1)];
      var $30=(($29)&65535);
      var $31=(($30)|0) >= 200;
      if ($31) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $33=$2;
      var $34=_resume_error($33, ((STRING_TABLE.__str2295)|0));
      $1=$34;
      __label__ = 12; break;
    case 8: 
      var $36=$2;
      var $37=$2;
      var $38=(($37+52)|0);
      var $39=HEAP16[(($38)>>1)];
      var $40=((($39)+(1))&65535);
      HEAP16[(($38)>>1)]=$40;
      var $41=$2;
      var $42=(($41+54)|0);
      HEAP16[(($42)>>1)]=$40;
      var $43=$2;
      var $44=$2;
      var $45=(($44+8)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$3;
      var $48=(((-$47))|0);
      var $49=(($46+($48)*(12))|0);
      var $50=$49;
      var $51=_luaD_rawrunprotected($43, 34, $50);
      $status=$51;
      var $52=$status;
      var $53=(($52)|0)!=0;
      if ($53) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $55=$status;
      var $56=(($55) & 255);
      var $57=$2;
      var $58=(($57+6)|0);
      HEAP8[($58)]=$56;
      var $59=$2;
      var $60=$status;
      var $61=$2;
      var $62=(($61+8)|0);
      var $63=HEAP32[(($62)>>2)];
      _luaD_seterrorobj($59, $60, $63);
      var $64=$2;
      var $65=(($64+8)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$2;
      var $68=(($67+20)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+8)|0);
      HEAP32[(($70)>>2)]=$66;
      __label__ = 11; break;
    case 10: 
      var $72=$2;
      var $73=(($72+6)|0);
      var $74=HEAPU8[($73)];
      var $75=(($74)&255);
      $status=$75;
      __label__ = 11; break;
    case 11: 
      var $77=$2;
      var $78=(($77+52)|0);
      var $79=HEAP16[(($78)>>1)];
      var $80=((($79)-(1))&65535);
      HEAP16[(($78)>>1)]=$80;
      var $81=$status;
      $1=$81;
      __label__ = 12; break;
    case 12: 
      var $83=$1;
      ;
      return $83;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_resume["X"]=1;

function _resume_error($L, $msg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i_o;
      $1=$L;
      $2=$msg;
      var $3=$1;
      var $4=(($3+20)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$1;
      var $9=(($8+8)|0);
      HEAP32[(($9)>>2)]=$7;
      var $10=$1;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      $i_o=$12;
      var $13=$1;
      var $14=$2;
      var $15=$2;
      var $16=_strlen($15);
      var $17=_luaS_newlstr($13, $14, $16);
      var $18=$17;
      var $19=$i_o;
      var $20=(($19)|0);
      var $21=$20;
      HEAP32[(($21)>>2)]=$18;
      var $22=$i_o;
      var $23=(($22+8)|0);
      HEAP32[(($23)>>2)]=4;
      var $24=$1;
      var $25=(($24+28)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$26;
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      var $32=$27;
      var $33=$31;
      var $34=((($32)-($33))|0);
      var $35=(($34)|0) <= 12;
      if ($35) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $37=$1;
      _luaD_growstack($37, 1);
      __label__ = 5; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $40=$1;
      var $41=(($40+8)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+12)|0);
      HEAP32[(($41)>>2)]=$43;
      ;
      return 2;
    default: assert(0, "bad label: " + __label__);
  }
}
_resume_error["X"]=1;

function _resume($L, $ud) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $firstArg;
      var $ci;
      $1=$L;
      $2=$ud;
      var $3=$2;
      var $4=$3;
      $firstArg=$4;
      var $5=$1;
      var $6=(($5+20)|0);
      var $7=HEAP32[(($6)>>2)];
      $ci=$7;
      var $8=$1;
      var $9=(($8+6)|0);
      var $10=HEAPU8[($9)];
      var $11=(($10)&255);
      var $12=(($11)|0)==0;
      if ($12) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $14=$1;
      var $15=$firstArg;
      var $16=((($15)-(12))|0);
      var $17=_luaD_precall($14, $16, -1);
      var $18=(($17)|0)!=0;
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 13; break;
    case 5: 
      __label__ = 12; break;
    case 6: 
      var $22=$1;
      var $23=(($22+6)|0);
      HEAP8[($23)]=0;
      var $24=$ci;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|0);
      var $28=$27;
      var $29=HEAP32[(($28)>>2)];
      var $30=$29;
      var $31=$30;
      var $32=(($31+6)|0);
      var $33=HEAP8[($32)];
      var $34=(($33 << 24) >> 24)!=0;
      if ($34) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $36=$1;
      var $37=$firstArg;
      var $38=_luaD_poscall($36, $37);
      var $39=(($38)|0)!=0;
      if ($39) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $41=$1;
      var $42=(($41+20)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+8)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$1;
      var $47=(($46+8)|0);
      HEAP32[(($47)>>2)]=$45;
      __label__ = 9; break;
    case 9: 
      __label__ = 11; break;
    case 10: 
      var $50=$1;
      var $51=(($50+20)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$1;
      var $56=(($55+12)|0);
      HEAP32[(($56)>>2)]=$54;
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $59=$1;
      var $60=$1;
      var $61=(($60+20)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$1;
      var $64=(($63+40)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$62;
      var $67=$65;
      var $68=((($66)-($67))|0);
      var $69=((((($68)|0))/(24))&-1);
      _luaV_execute($59, $69);
      __label__ = 13; break;
    case 13: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_resume["X"]=1;

function _lua_yield($L, $nresults) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$nresults;
      var $3=$1;
      var $4=$1;
      var $5=(($4+52)|0);
      var $6=HEAPU16[(($5)>>1)];
      var $7=(($6)&65535);
      var $8=$1;
      var $9=(($8+54)|0);
      var $10=HEAPU16[(($9)>>1)];
      var $11=(($10)&65535);
      var $12=(($7)|0) > (($11)|0);
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $14=$1;
      _luaG_runerror($14, ((STRING_TABLE.__str4297)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 4; break;
    case 4: 
      var $16=$1;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      var $20=(((-$19))|0);
      var $21=(($18+($20)*(12))|0);
      var $22=$1;
      var $23=(($22+12)|0);
      HEAP32[(($23)>>2)]=$21;
      var $24=$1;
      var $25=(($24+6)|0);
      HEAP8[($25)]=1;
      STACKTOP = __stackBase__;
      return -1;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaD_pcall($L, $func, $u, $old_top, $ef) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $status;
      var $oldnCcalls;
      var $old_ci;
      var $old_allowhooks;
      var $old_errfunc;
      var $oldtop;
      $1=$L;
      $2=$func;
      $3=$u;
      $4=$old_top;
      $5=$ef;
      var $6=$1;
      var $7=(($6+52)|0);
      var $8=HEAP16[(($7)>>1)];
      $oldnCcalls=$8;
      var $9=$1;
      var $10=(($9+20)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11;
      var $13=$1;
      var $14=(($13+40)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$15;
      var $17=$12;
      var $18=$16;
      var $19=((($17)-($18))|0);
      $old_ci=$19;
      var $20=$1;
      var $21=(($20+57)|0);
      var $22=HEAP8[($21)];
      $old_allowhooks=$22;
      var $23=$1;
      var $24=(($23+108)|0);
      var $25=HEAP32[(($24)>>2)];
      $old_errfunc=$25;
      var $26=$5;
      var $27=$1;
      var $28=(($27+108)|0);
      HEAP32[(($28)>>2)]=$26;
      var $29=$1;
      var $30=$2;
      var $31=$3;
      var $32=_luaD_rawrunprotected($29, $30, $31);
      $status=$32;
      var $33=$status;
      var $34=(($33)|0)!=0;
      if ($34) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $36=$1;
      var $37=(($36+32)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$38;
      var $40=$4;
      var $41=(($39+$40)|0);
      var $42=$41;
      $oldtop=$42;
      var $43=$1;
      var $44=$oldtop;
      _luaF_close($43, $44);
      var $45=$1;
      var $46=$status;
      var $47=$oldtop;
      _luaD_seterrorobj($45, $46, $47);
      var $48=$oldnCcalls;
      var $49=$1;
      var $50=(($49+52)|0);
      HEAP16[(($50)>>1)]=$48;
      var $51=$1;
      var $52=(($51+40)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$53;
      var $55=$old_ci;
      var $56=(($54+$55)|0);
      var $57=$56;
      var $58=$1;
      var $59=(($58+20)|0);
      HEAP32[(($59)>>2)]=$57;
      var $60=$1;
      var $61=(($60+20)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$1;
      var $66=(($65+12)|0);
      HEAP32[(($66)>>2)]=$64;
      var $67=$1;
      var $68=(($67+20)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+12)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$1;
      var $73=(($72+24)|0);
      HEAP32[(($73)>>2)]=$71;
      var $74=$old_allowhooks;
      var $75=$1;
      var $76=(($75+57)|0);
      HEAP8[($76)]=$74;
      var $77=$1;
      _restore_stack_limit($77);
      __label__ = 4; break;
    case 4: 
      var $79=$old_errfunc;
      var $80=$1;
      var $81=(($80+108)|0);
      HEAP32[(($81)>>2)]=$79;
      var $82=$status;
      ;
      return $82;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaD_pcall["X"]=1;

function _restore_stack_limit($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $inuse;
      $1=$L;
      var $2=$1;
      var $3=(($2+48)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|0) > 20000;
      if ($5) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $7=$1;
      var $8=(($7+20)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$1;
      var $11=(($10+40)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$9;
      var $14=$12;
      var $15=((($13)-($14))|0);
      var $16=((((($15)|0))/(24))&-1);
      $inuse=$16;
      var $17=$inuse;
      var $18=((($17)+(1))|0);
      var $19=(($18)|0) < 20000;
      if ($19) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $21=$1;
      _luaD_reallocCI($21, 20000);
      __label__ = 5; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaD_protectedparser($L, $z, $name) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $p=__stackBase__;
  var $status;
  $1=$L;
  $2=$z;
  $3=$name;
  var $4=$2;
  var $5=(($p)|0);
  HEAP32[(($5)>>2)]=$4;
  var $6=$3;
  var $7=(($p+16)|0);
  HEAP32[(($7)>>2)]=$6;
  var $8=(($p+4)|0);
  var $9=(($8)|0);
  HEAP32[(($9)>>2)]=0;
  var $10=(($p+4)|0);
  var $11=(($10+8)|0);
  HEAP32[(($11)>>2)]=0;
  var $12=$1;
  var $13=$p;
  var $14=$1;
  var $15=(($14+8)|0);
  var $16=HEAP32[(($15)>>2)];
  var $17=$16;
  var $18=$1;
  var $19=(($18+32)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=$20;
  var $22=$17;
  var $23=$21;
  var $24=((($22)-($23))|0);
  var $25=$1;
  var $26=(($25+108)|0);
  var $27=HEAP32[(($26)>>2)];
  var $28=_luaD_pcall($12, 36, $13, $24, $27);
  $status=$28;
  var $29=$1;
  var $30=(($p+4)|0);
  var $31=(($30)|0);
  var $32=HEAP32[(($31)>>2)];
  var $33=(($p+4)|0);
  var $34=(($33+8)|0);
  var $35=HEAP32[(($34)>>2)];
  var $36=(($35)|0);
  var $37=_luaM_realloc_($29, $32, $36, 0);
  var $38=(($p+4)|0);
  var $39=(($38)|0);
  HEAP32[(($39)>>2)]=$37;
  var $40=(($p+4)|0);
  var $41=(($40+8)|0);
  HEAP32[(($41)>>2)]=0;
  var $42=$status;
  STACKTOP = __stackBase__;
  return $42;
}
_luaD_protectedparser["X"]=1;

function _f_parser($L, $ud) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $tf;
      var $cl;
      var $p;
      var $c;
      var $i_o;
      $1=$L;
      $2=$ud;
      var $3=$2;
      var $4=$3;
      $p=$4;
      var $5=$p;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=_luaZ_lookahead($7);
      $c=$8;
      var $9=$1;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+68)|0);
      var $13=HEAPU32[(($12)>>2)];
      var $14=$1;
      var $15=(($14+16)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+64)|0);
      var $18=HEAPU32[(($17)>>2)];
      var $19=(($13)>>>0) >= (($18)>>>0);
      if ($19) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $21=$1;
      _luaC_step($21);
      __label__ = 4; break;
    case 4: 
      var $23=$c;
      var $24=HEAP8[(((STRING_TABLE.__str5298)|0))];
      var $25=(($24 << 24) >> 24);
      var $26=(($23)|0)==(($25)|0);
      var $27=$26 ? 38 : 40;
      var $28=$1;
      var $29=$p;
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$p;
      var $33=(($32+4)|0);
      var $34=$p;
      var $35=(($34+16)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=FUNCTION_TABLE[$27]($28, $31, $33, $36);
      $tf=$37;
      var $38=$1;
      var $39=$tf;
      var $40=(($39+72)|0);
      var $41=HEAPU8[($40)];
      var $42=(($41)&255);
      var $43=$1;
      var $44=(($43+72)|0);
      var $45=(($44)|0);
      var $46=$45;
      var $47=HEAP32[(($46)>>2)];
      var $48=$47;
      var $49=_luaF_newLclosure($38, $42, $48);
      $cl=$49;
      var $50=$tf;
      var $51=$cl;
      var $52=$51;
      var $53=(($52+16)|0);
      HEAP32[(($53)>>2)]=$50;
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $55=$i;
      var $56=$tf;
      var $57=(($56+72)|0);
      var $58=HEAPU8[($57)];
      var $59=(($58)&255);
      var $60=(($55)|0) < (($59)|0);
      if ($60) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $62=$1;
      var $63=_luaF_newupval($62);
      var $64=$i;
      var $65=$cl;
      var $66=$65;
      var $67=(($66+20)|0);
      var $68=(($67+($64<<2))|0);
      HEAP32[(($68)>>2)]=$63;
      __label__ = 7; break;
    case 7: 
      var $70=$i;
      var $71=((($70)+(1))|0);
      $i=$71;
      __label__ = 5; break;
    case 8: 
      var $73=$1;
      var $74=(($73+8)|0);
      var $75=HEAP32[(($74)>>2)];
      $i_o=$75;
      var $76=$cl;
      var $77=$76;
      var $78=$i_o;
      var $79=(($78)|0);
      var $80=$79;
      HEAP32[(($80)>>2)]=$77;
      var $81=$i_o;
      var $82=(($81+8)|0);
      HEAP32[(($82)>>2)]=6;
      var $83=$1;
      var $84=(($83+28)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$85;
      var $87=$1;
      var $88=(($87+8)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$89;
      var $91=$86;
      var $92=$90;
      var $93=((($91)-($92))|0);
      var $94=(($93)|0) <= 12;
      if ($94) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $96=$1;
      _luaD_growstack($96, 1);
      __label__ = 11; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $99=$1;
      var $100=(($99+8)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($101+12)|0);
      HEAP32[(($100)>>2)]=$102;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_f_parser["X"]=1;

function _luaU_dump($L, $f, $w, $data, $strip) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $D=__stackBase__;
  $1=$L;
  $2=$f;
  $3=$w;
  $4=$data;
  $5=$strip;
  var $6=$1;
  var $7=(($D)|0);
  HEAP32[(($7)>>2)]=$6;
  var $8=$3;
  var $9=(($D+4)|0);
  HEAP32[(($9)>>2)]=$8;
  var $10=$4;
  var $11=(($D+8)|0);
  HEAP32[(($11)>>2)]=$10;
  var $12=$5;
  var $13=(($D+12)|0);
  HEAP32[(($13)>>2)]=$12;
  var $14=(($D+16)|0);
  HEAP32[(($14)>>2)]=0;
  _DumpHeader($D);
  var $15=$2;
  _DumpFunction($15, 0, $D);
  var $16=(($D+16)|0);
  var $17=HEAP32[(($16)>>2)];
  STACKTOP = __stackBase__;
  return $17;
}


function _DumpHeader($D) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $h=__stackBase__;
  $1=$D;
  var $2=(($h)|0);
  _luaU_header($2);
  var $3=(($h)|0);
  var $4=$1;
  _DumpBlock($3, 12, $4);
  STACKTOP = __stackBase__;
  return;
}


function _DumpFunction($f, $p, $D) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$f;
      $2=$p;
      $3=$D;
      var $4=$1;
      var $5=(($4+32)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$2;
      var $8=(($6)|0)==(($7)|0);
      if ($8) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $10=$3;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|0)!=0;
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $20 = 0;__label__ = 6; break;
    case 5: 
      var $16=$1;
      var $17=(($16+32)|0);
      var $18=HEAP32[(($17)>>2)];
      var $20 = $18;__label__ = 6; break;
    case 6: 
      var $20;
      var $21=$3;
      _DumpString($20, $21);
      var $22=$1;
      var $23=(($22+60)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$3;
      _DumpInt($24, $25);
      var $26=$1;
      var $27=(($26+64)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$3;
      _DumpInt($28, $29);
      var $30=$1;
      var $31=(($30+72)|0);
      var $32=HEAPU8[($31)];
      var $33=(($32)&255);
      var $34=$3;
      _DumpChar($33, $34);
      var $35=$1;
      var $36=(($35+73)|0);
      var $37=HEAPU8[($36)];
      var $38=(($37)&255);
      var $39=$3;
      _DumpChar($38, $39);
      var $40=$1;
      var $41=(($40+74)|0);
      var $42=HEAPU8[($41)];
      var $43=(($42)&255);
      var $44=$3;
      _DumpChar($43, $44);
      var $45=$1;
      var $46=(($45+75)|0);
      var $47=HEAPU8[($46)];
      var $48=(($47)&255);
      var $49=$3;
      _DumpChar($48, $49);
      var $50=$1;
      var $51=(($50+12)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$52;
      var $54=$1;
      var $55=(($54+44)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$3;
      _DumpVector($53, $56, 4, $57);
      var $58=$1;
      var $59=$3;
      _DumpConstants($58, $59);
      var $60=$1;
      var $61=$3;
      _DumpDebug($60, $61);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_DumpFunction["X"]=1;

function _DumpString($s, $D) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $size=__stackBase__;
      var $size1=(__stackBase__)+(4);
      $1=$s;
      $2=$D;
      var $3=$1;
      var $4=(($3)|0)==0;
      if ($4) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $6=$1;
      var $7=(($6+16)|0);
      var $8=$7;
      var $9=(($8)|0)==0;
      if ($9) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      HEAP32[(($size)>>2)]=0;
      var $11=$size;
      var $12=$2;
      _DumpBlock($11, 4, $12);
      __label__ = 6; break;
    case 5: 
      var $14=$1;
      var $15=$14;
      var $16=(($15+12)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17)+(1))|0);
      HEAP32[(($size1)>>2)]=$18;
      var $19=$size1;
      var $20=$2;
      _DumpBlock($19, 4, $20);
      var $21=$1;
      var $22=(($21+16)|0);
      var $23=$22;
      var $24=HEAP32[(($size1)>>2)];
      var $25=$2;
      _DumpBlock($23, $24, $25);
      __label__ = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _DumpInt($x, $D) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1=__stackBase__;
  var $2;
  HEAP32[(($1)>>2)]=$x;
  $2=$D;
  var $3=$1;
  var $4=$2;
  _DumpBlock($3, 4, $4);
  STACKTOP = __stackBase__;
  return;
}


function _DumpChar($y, $D) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $x=__stackBase__;
  $1=$y;
  $2=$D;
  var $3=$1;
  var $4=(($3) & 255);
  HEAP8[($x)]=$4;
  var $5=$2;
  _DumpBlock($x, 1, $5);
  STACKTOP = __stackBase__;
  return;
}


function _DumpVector($b, $n, $size, $D) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$b;
  $2=$n;
  $3=$size;
  $4=$D;
  var $5=$2;
  var $6=$4;
  _DumpInt($5, $6);
  var $7=$1;
  var $8=$2;
  var $9=$3;
  var $10=((($8)*($9))|0);
  var $11=$4;
  _DumpBlock($7, $10, $11);
  ;
  return;
}


function _DumpConstants($f, $D) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $n;
      var $o;
      $1=$f;
      $2=$D;
      var $3=$1;
      var $4=(($3+40)|0);
      var $5=HEAP32[(($4)>>2)];
      $n=$5;
      var $6=$n;
      var $7=$2;
      _DumpInt($6, $7);
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $9=$i;
      var $10=$n;
      var $11=(($9)|0) < (($10)|0);
      if ($11) { __label__ = 4; break; } else { __label__ = 12; break; }
    case 4: 
      var $13=$i;
      var $14=$1;
      var $15=(($14+8)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+($13)*(12))|0);
      $o=$17;
      var $18=$o;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$2;
      _DumpChar($20, $21);
      var $22=$o;
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      if ((($24)|0) == 0) {
        __label__ = 5; break;
      }
      else if ((($24)|0) == 1) {
        __label__ = 6; break;
      }
      else if ((($24)|0) == 3) {
        __label__ = 7; break;
      }
      else if ((($24)|0) == 4) {
        __label__ = 8; break;
      }
      else {
      __label__ = 9; break;
      }
      
    case 5: 
      __label__ = 10; break;
    case 6: 
      var $27=$o;
      var $28=(($27)|0);
      var $29=$28;
      var $30=HEAP32[(($29)>>2)];
      var $31=$2;
      _DumpChar($30, $31);
      __label__ = 10; break;
    case 7: 
      var $33=$o;
      var $34=(($33)|0);
      var $35=$34;
      var $36=(tempDoubleI32[0]=HEAP32[(($35)>>2)],tempDoubleI32[1]=HEAP32[((($35)+(4))>>2)],tempDoubleF64[0]);
      var $37=$2;
      _DumpNumber($36, $37);
      __label__ = 10; break;
    case 8: 
      var $39=$o;
      var $40=(($39)|0);
      var $41=$40;
      var $42=HEAP32[(($41)>>2)];
      var $43=$42;
      var $44=$2;
      _DumpString($43, $44);
      __label__ = 10; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $48=$i;
      var $49=((($48)+(1))|0);
      $i=$49;
      __label__ = 3; break;
    case 12: 
      var $51=$1;
      var $52=(($51+52)|0);
      var $53=HEAP32[(($52)>>2)];
      $n=$53;
      var $54=$n;
      var $55=$2;
      _DumpInt($54, $55);
      $i=0;
      __label__ = 13; break;
    case 13: 
      var $57=$i;
      var $58=$n;
      var $59=(($57)|0) < (($58)|0);
      if ($59) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $61=$i;
      var $62=$1;
      var $63=(($62+16)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64+($61<<2))|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$1;
      var $68=(($67+32)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$2;
      _DumpFunction($66, $69, $70);
      __label__ = 15; break;
    case 15: 
      var $72=$i;
      var $73=((($72)+(1))|0);
      $i=$73;
      __label__ = 13; break;
    case 16: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_DumpConstants["X"]=1;

function _DumpDebug($f, $D) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $n;
      $1=$f;
      $2=$D;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13 = 0;__label__ = 5; break;
    case 4: 
      var $9=$1;
      var $10=(($9+48)|0);
      var $11=HEAP32[(($10)>>2)];
      var $13 = $11;__label__ = 5; break;
    case 5: 
      var $13;
      $n=$13;
      var $14=$1;
      var $15=(($14+20)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$16;
      var $18=$n;
      var $19=$2;
      _DumpVector($17, $18, 4, $19);
      var $20=$2;
      var $21=(($20+12)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|0)!=0;
      if ($23) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $30 = 0;__label__ = 8; break;
    case 7: 
      var $26=$1;
      var $27=(($26+56)|0);
      var $28=HEAP32[(($27)>>2)];
      var $30 = $28;__label__ = 8; break;
    case 8: 
      var $30;
      $n=$30;
      var $31=$n;
      var $32=$2;
      _DumpInt($31, $32);
      $i=0;
      __label__ = 9; break;
    case 9: 
      var $34=$i;
      var $35=$n;
      var $36=(($34)|0) < (($35)|0);
      if ($36) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $38=$i;
      var $39=$1;
      var $40=(($39+24)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+($38)*(12))|0);
      var $43=(($42)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$2;
      _DumpString($44, $45);
      var $46=$i;
      var $47=$1;
      var $48=(($47+24)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+($46)*(12))|0);
      var $51=(($50+4)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$2;
      _DumpInt($52, $53);
      var $54=$i;
      var $55=$1;
      var $56=(($55+24)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+($54)*(12))|0);
      var $59=(($58+8)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$2;
      _DumpInt($60, $61);
      __label__ = 11; break;
    case 11: 
      var $63=$i;
      var $64=((($63)+(1))|0);
      $i=$64;
      __label__ = 9; break;
    case 12: 
      var $66=$2;
      var $67=(($66+12)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68)|0)!=0;
      if ($69) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $76 = 0;__label__ = 15; break;
    case 14: 
      var $72=$1;
      var $73=(($72+36)|0);
      var $74=HEAP32[(($73)>>2)];
      var $76 = $74;__label__ = 15; break;
    case 15: 
      var $76;
      $n=$76;
      var $77=$n;
      var $78=$2;
      _DumpInt($77, $78);
      $i=0;
      __label__ = 16; break;
    case 16: 
      var $80=$i;
      var $81=$n;
      var $82=(($80)|0) < (($81)|0);
      if ($82) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      var $84=$i;
      var $85=$1;
      var $86=(($85+28)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+($84<<2))|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$2;
      _DumpString($89, $90);
      __label__ = 18; break;
    case 18: 
      var $92=$i;
      var $93=((($92)+(1))|0);
      $i=$93;
      __label__ = 16; break;
    case 19: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_DumpDebug["X"]=1;

function _DumpNumber($x, $D) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1=__stackBase__;
  var $2;
  (tempDoubleF64[0]=$x,HEAP32[(($1)>>2)]=tempDoubleI32[0],HEAP32[((($1)+(4))>>2)]=tempDoubleI32[1]);
  $2=$D;
  var $3=$1;
  var $4=$2;
  _DumpBlock($3, 8, $4);
  STACKTOP = __stackBase__;
  return;
}


function _DumpBlock($b, $size, $D) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$b;
      $2=$size;
      $3=$D;
      var $4=$3;
      var $5=(($4+16)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)==0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$3;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$3;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$1;
      var $16=$2;
      var $17=$3;
      var $18=(($17+8)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=FUNCTION_TABLE[$11]($14, $15, $16, $19);
      var $21=$3;
      var $22=(($21+16)|0);
      HEAP32[(($22)>>2)]=$20;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaF_newCclosure($L, $nelems, $e) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $c;
  $1=$L;
  $2=$nelems;
  $3=$e;
  var $4=$1;
  var $5=$2;
  var $6=((($5)-(1))|0);
  var $7=((($6)*(12))|0);
  var $8=((($7)+(32))|0);
  var $9=_luaM_realloc_($4, 0, 0, $8);
  var $10=$9;
  $c=$10;
  var $11=$1;
  var $12=$c;
  var $13=$12;
  _luaC_link($11, $13, 6);
  var $14=$c;
  var $15=$14;
  var $16=(($15+6)|0);
  HEAP8[($16)]=1;
  var $17=$3;
  var $18=$c;
  var $19=$18;
  var $20=(($19+12)|0);
  HEAP32[(($20)>>2)]=$17;
  var $21=$2;
  var $22=(($21) & 255);
  var $23=$c;
  var $24=$23;
  var $25=(($24+7)|0);
  HEAP8[($25)]=$22;
  var $26=$c;
  ;
  return $26;
}


function _luaF_newLclosure($L, $nelems, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $c;
      $1=$L;
      $2=$nelems;
      $3=$e;
      var $4=$1;
      var $5=$2;
      var $6=((($5)-(1))|0);
      var $7=((($6<<2))|0);
      var $8=((($7)+(24))|0);
      var $9=_luaM_realloc_($4, 0, 0, $8);
      var $10=$9;
      $c=$10;
      var $11=$1;
      var $12=$c;
      var $13=$12;
      _luaC_link($11, $13, 6);
      var $14=$c;
      var $15=$14;
      var $16=(($15+6)|0);
      HEAP8[($16)]=0;
      var $17=$3;
      var $18=$c;
      var $19=$18;
      var $20=(($19+12)|0);
      HEAP32[(($20)>>2)]=$17;
      var $21=$2;
      var $22=(($21) & 255);
      var $23=$c;
      var $24=$23;
      var $25=(($24+7)|0);
      HEAP8[($25)]=$22;
      __label__ = 3; break;
    case 3: 
      var $27=$2;
      var $28=((($27)-(1))|0);
      $2=$28;
      var $29=(($27)|0)!=0;
      if ($29) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $31=$2;
      var $32=$c;
      var $33=$32;
      var $34=(($33+20)|0);
      var $35=(($34+($31<<2))|0);
      HEAP32[(($35)>>2)]=0;
      __label__ = 3; break;
    case 5: 
      var $37=$c;
      ;
      return $37;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaF_newupval($L) {
  ;
  var __label__;

  var $1;
  var $uv;
  $1=$L;
  var $2=$1;
  var $3=_luaM_realloc_($2, 0, 0, 24);
  var $4=$3;
  $uv=$4;
  var $5=$1;
  var $6=$uv;
  var $7=$6;
  _luaC_link($5, $7, 10);
  var $8=$uv;
  var $9=(($8+12)|0);
  var $10=$9;
  var $11=$uv;
  var $12=(($11+8)|0);
  HEAP32[(($12)>>2)]=$10;
  var $13=$uv;
  var $14=(($13+8)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=(($15+8)|0);
  HEAP32[(($16)>>2)]=0;
  var $17=$uv;
  ;
  return $17;
}


function _luaF_findupval($L, $level) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $g;
      var $pp;
      var $p;
      var $uv;
      $2=$L;
      $3=$level;
      var $4=$2;
      var $5=(($4+16)|0);
      var $6=HEAP32[(($5)>>2)];
      $g=$6;
      var $7=$2;
      var $8=(($7+96)|0);
      $pp=$8;
      __label__ = 3; break;
    case 3: 
      var $10=$pp;
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 4; break; } else { var $22 = 0;__label__ = 5; break; }
    case 4: 
      var $14=$pp;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15;
      $p=$16;
      var $17=(($16+8)|0);
      var $18=HEAPU32[(($17)>>2)];
      var $19=$3;
      var $20=(($18)>>>0) >= (($19)>>>0);
      var $22 = $20;__label__ = 5; break;
    case 5: 
      var $22;
      if ($22) { __label__ = 6; break; } else { __label__ = 11; break; }
    case 6: 
      var $24=$p;
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$3;
      var $28=(($26)|0)==(($27)|0);
      if ($28) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $30=$p;
      var $31=$30;
      var $32=$31;
      var $33=(($32+5)|0);
      var $34=HEAPU8[($33)];
      var $35=(($34)&255);
      var $36=$g;
      var $37=(($36+20)|0);
      var $38=HEAPU8[($37)];
      var $39=(($38)&255);
      var $40=$39 ^ 3;
      var $41=$35 & $40;
      var $42=$41 & 3;
      var $43=(($42)|0)!=0;
      if ($43) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $45=$p;
      var $46=$45;
      var $47=$46;
      var $48=(($47+5)|0);
      var $49=HEAPU8[($48)];
      var $50=(($49)&255);
      var $51=$50 ^ 3;
      var $52=(($51) & 255);
      HEAP8[($48)]=$52;
      __label__ = 9; break;
    case 9: 
      var $54=$p;
      $1=$54;
      __label__ = 12; break;
    case 10: 
      var $56=$p;
      var $57=(($56)|0);
      $pp=$57;
      __label__ = 3; break;
    case 11: 
      var $59=$2;
      var $60=_luaM_realloc_($59, 0, 0, 24);
      var $61=$60;
      $uv=$61;
      var $62=$uv;
      var $63=(($62+4)|0);
      HEAP8[($63)]=10;
      var $64=$g;
      var $65=(($64+20)|0);
      var $66=HEAPU8[($65)];
      var $67=(($66)&255);
      var $68=$67 & 3;
      var $69=(($68) & 255);
      var $70=$uv;
      var $71=(($70+5)|0);
      HEAP8[($71)]=$69;
      var $72=$3;
      var $73=$uv;
      var $74=(($73+8)|0);
      HEAP32[(($74)>>2)]=$72;
      var $75=$pp;
      var $76=HEAP32[(($75)>>2)];
      var $77=$uv;
      var $78=(($77)|0);
      HEAP32[(($78)>>2)]=$76;
      var $79=$uv;
      var $80=$79;
      var $81=$pp;
      HEAP32[(($81)>>2)]=$80;
      var $82=$g;
      var $83=(($82+108)|0);
      var $84=$uv;
      var $85=(($84+12)|0);
      var $86=$85;
      var $87=(($86)|0);
      HEAP32[(($87)>>2)]=$83;
      var $88=$g;
      var $89=(($88+108)|0);
      var $90=(($89+12)|0);
      var $91=$90;
      var $92=(($91+4)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$uv;
      var $95=(($94+12)|0);
      var $96=$95;
      var $97=(($96+4)|0);
      HEAP32[(($97)>>2)]=$93;
      var $98=$uv;
      var $99=$uv;
      var $100=(($99+12)|0);
      var $101=$100;
      var $102=(($101+4)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=(($103+12)|0);
      var $105=$104;
      var $106=(($105)|0);
      HEAP32[(($106)>>2)]=$98;
      var $107=$uv;
      var $108=$g;
      var $109=(($108+108)|0);
      var $110=(($109+12)|0);
      var $111=$110;
      var $112=(($111+4)|0);
      HEAP32[(($112)>>2)]=$107;
      var $113=$uv;
      $1=$113;
      __label__ = 12; break;
    case 12: 
      var $115=$1;
      ;
      return $115;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaF_findupval["X"]=1;

function _luaF_freeupval($L, $uv) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$uv;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$2;
      var $7=(($6+12)|0);
      var $8=$7;
      var $9=(($5)|0)!=(($8)|0);
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$2;
      _unlinkupval($11);
      __label__ = 4; break;
    case 4: 
      var $13=$1;
      var $14=$2;
      var $15=$14;
      var $16=_luaM_realloc_($13, $15, 24, 0);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _unlinkupval($uv) {
  ;
  var __label__;

  var $1;
  $1=$uv;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=$3;
  var $5=(($4)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$1;
  var $8=(($7+12)|0);
  var $9=$8;
  var $10=(($9+4)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=(($11+12)|0);
  var $13=$12;
  var $14=(($13)|0);
  HEAP32[(($14)>>2)]=$6;
  var $15=$1;
  var $16=(($15+12)|0);
  var $17=$16;
  var $18=(($17+4)|0);
  var $19=HEAP32[(($18)>>2)];
  var $20=$1;
  var $21=(($20+12)|0);
  var $22=$21;
  var $23=(($22)|0);
  var $24=HEAP32[(($23)>>2)];
  var $25=(($24+12)|0);
  var $26=$25;
  var $27=(($26+4)|0);
  HEAP32[(($27)>>2)]=$19;
  ;
  return;
}


function _luaF_getlocalname($f, $local_number, $pc) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      $2=$f;
      $3=$local_number;
      $4=$pc;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $6=$i;
      var $7=$2;
      var $8=(($7+56)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($6)|0) < (($9)|0);
      if ($10) { __label__ = 4; break; } else { var $22 = 0;__label__ = 5; break; }
    case 4: 
      var $12=$i;
      var $13=$2;
      var $14=(($13+24)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+($12)*(12))|0);
      var $17=(($16+4)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$4;
      var $20=(($18)|0) <= (($19)|0);
      var $22 = $20;__label__ = 5; break;
    case 5: 
      var $22;
      if ($22) { __label__ = 6; break; } else { __label__ = 12; break; }
    case 6: 
      var $24=$4;
      var $25=$i;
      var $26=$2;
      var $27=(($26+24)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+($25)*(12))|0);
      var $30=(($29+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($24)|0) < (($31)|0);
      if ($32) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $34=$3;
      var $35=((($34)-(1))|0);
      $3=$35;
      var $36=$3;
      var $37=(($36)|0)==0;
      if ($37) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $39=$i;
      var $40=$2;
      var $41=(($40+24)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+($39)*(12))|0);
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+16)|0);
      var $47=$46;
      $1=$47;
      __label__ = 13; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $51=$i;
      var $52=((($51)+(1))|0);
      $i=$52;
      __label__ = 3; break;
    case 12: 
      $1=0;
      __label__ = 13; break;
    case 13: 
      var $55=$1;
      ;
      return $55;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaF_getlocalname["X"]=1;

function _luaF_close($L, $level) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $uv;
      var $g;
      var $o;
      var $o2;
      var $o1;
      $1=$L;
      $2=$level;
      var $3=$1;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      $g=$5;
      __label__ = 3; break;
    case 3: 
      var $7=$1;
      var $8=(($7+96)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 4; break; } else { var $21 = 0;__label__ = 5; break; }
    case 4: 
      var $12=$1;
      var $13=(($12+96)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      $uv=$15;
      var $16=(($15+8)|0);
      var $17=HEAPU32[(($16)>>2)];
      var $18=$2;
      var $19=(($17)>>>0) >= (($18)>>>0);
      var $21 = $19;__label__ = 5; break;
    case 5: 
      var $21;
      if ($21) { __label__ = 6; break; } else { __label__ = 10; break; }
    case 6: 
      var $23=$uv;
      var $24=$23;
      $o=$24;
      var $25=$uv;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+96)|0);
      HEAP32[(($29)>>2)]=$27;
      var $30=$o;
      var $31=$30;
      var $32=(($31+5)|0);
      var $33=HEAPU8[($32)];
      var $34=(($33)&255);
      var $35=$g;
      var $36=(($35+20)|0);
      var $37=HEAPU8[($36)];
      var $38=(($37)&255);
      var $39=$38 ^ 3;
      var $40=$34 & $39;
      var $41=$40 & 3;
      var $42=(($41)|0)!=0;
      if ($42) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $44=$1;
      var $45=$uv;
      _luaF_freeupval($44, $45);
      __label__ = 9; break;
    case 8: 
      var $47=$uv;
      _unlinkupval($47);
      var $48=$uv;
      var $49=(($48+8)|0);
      var $50=HEAP32[(($49)>>2)];
      $o2=$50;
      var $51=$uv;
      var $52=(($51+12)|0);
      var $53=$52;
      $o1=$53;
      var $54=$o1;
      var $55=(($54)|0);
      var $56=$o2;
      var $57=(($56)|0);
      var $58=$55;
      var $59=$57;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($58)>>2)]=HEAP32[(($59)>>2)];HEAP32[((($58)+(4))>>2)]=HEAP32[((($59)+(4))>>2)];
      var $60=$o2;
      var $61=(($60+8)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$o1;
      var $64=(($63+8)|0);
      HEAP32[(($64)>>2)]=$62;
      var $65=$uv;
      var $66=(($65+12)|0);
      var $67=$66;
      var $68=$uv;
      var $69=(($68+8)|0);
      HEAP32[(($69)>>2)]=$67;
      var $70=$1;
      var $71=$uv;
      _luaC_linkupval($70, $71);
      __label__ = 9; break;
    case 9: 
      __label__ = 3; break;
    case 10: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaF_close["X"]=1;

function _luaF_newproto($L) {
  ;
  var __label__;

  var $1;
  var $f;
  $1=$L;
  var $2=$1;
  var $3=_luaM_realloc_($2, 0, 0, 76);
  var $4=$3;
  $f=$4;
  var $5=$1;
  var $6=$f;
  var $7=$6;
  _luaC_link($5, $7, 9);
  var $8=$f;
  var $9=(($8+8)|0);
  HEAP32[(($9)>>2)]=0;
  var $10=$f;
  var $11=(($10+40)|0);
  HEAP32[(($11)>>2)]=0;
  var $12=$f;
  var $13=(($12+16)|0);
  HEAP32[(($13)>>2)]=0;
  var $14=$f;
  var $15=(($14+52)|0);
  HEAP32[(($15)>>2)]=0;
  var $16=$f;
  var $17=(($16+12)|0);
  HEAP32[(($17)>>2)]=0;
  var $18=$f;
  var $19=(($18+44)|0);
  HEAP32[(($19)>>2)]=0;
  var $20=$f;
  var $21=(($20+48)|0);
  HEAP32[(($21)>>2)]=0;
  var $22=$f;
  var $23=(($22+36)|0);
  HEAP32[(($23)>>2)]=0;
  var $24=$f;
  var $25=(($24+72)|0);
  HEAP8[($25)]=0;
  var $26=$f;
  var $27=(($26+28)|0);
  HEAP32[(($27)>>2)]=0;
  var $28=$f;
  var $29=(($28+73)|0);
  HEAP8[($29)]=0;
  var $30=$f;
  var $31=(($30+74)|0);
  HEAP8[($31)]=0;
  var $32=$f;
  var $33=(($32+75)|0);
  HEAP8[($33)]=0;
  var $34=$f;
  var $35=(($34+20)|0);
  HEAP32[(($35)>>2)]=0;
  var $36=$f;
  var $37=(($36+56)|0);
  HEAP32[(($37)>>2)]=0;
  var $38=$f;
  var $39=(($38+24)|0);
  HEAP32[(($39)>>2)]=0;
  var $40=$f;
  var $41=(($40+60)|0);
  HEAP32[(($41)>>2)]=0;
  var $42=$f;
  var $43=(($42+64)|0);
  HEAP32[(($43)>>2)]=0;
  var $44=$f;
  var $45=(($44+32)|0);
  HEAP32[(($45)>>2)]=0;
  var $46=$f;
  ;
  return $46;
}
_luaF_newproto["X"]=1;

function _luaF_freeproto($L, $f) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L;
  $2=$f;
  var $3=$1;
  var $4=$2;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$6;
  var $8=$2;
  var $9=(($8+44)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=((($10<<2))|0);
  var $12=_luaM_realloc_($3, $7, $11, 0);
  var $13=$1;
  var $14=$2;
  var $15=(($14+16)|0);
  var $16=HEAP32[(($15)>>2)];
  var $17=$16;
  var $18=$2;
  var $19=(($18+52)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=((($20<<2))|0);
  var $22=_luaM_realloc_($13, $17, $21, 0);
  var $23=$1;
  var $24=$2;
  var $25=(($24+8)|0);
  var $26=HEAP32[(($25)>>2)];
  var $27=$26;
  var $28=$2;
  var $29=(($28+40)|0);
  var $30=HEAP32[(($29)>>2)];
  var $31=((($30)*(12))|0);
  var $32=_luaM_realloc_($23, $27, $31, 0);
  var $33=$1;
  var $34=$2;
  var $35=(($34+20)|0);
  var $36=HEAP32[(($35)>>2)];
  var $37=$36;
  var $38=$2;
  var $39=(($38+48)|0);
  var $40=HEAP32[(($39)>>2)];
  var $41=((($40<<2))|0);
  var $42=_luaM_realloc_($33, $37, $41, 0);
  var $43=$1;
  var $44=$2;
  var $45=(($44+24)|0);
  var $46=HEAP32[(($45)>>2)];
  var $47=$46;
  var $48=$2;
  var $49=(($48+56)|0);
  var $50=HEAP32[(($49)>>2)];
  var $51=((($50)*(12))|0);
  var $52=_luaM_realloc_($43, $47, $51, 0);
  var $53=$1;
  var $54=$2;
  var $55=(($54+28)|0);
  var $56=HEAP32[(($55)>>2)];
  var $57=$56;
  var $58=$2;
  var $59=(($58+36)|0);
  var $60=HEAP32[(($59)>>2)];
  var $61=((($60<<2))|0);
  var $62=_luaM_realloc_($53, $57, $61, 0);
  var $63=$1;
  var $64=$2;
  var $65=$64;
  var $66=_luaM_realloc_($63, $65, 76, 0);
  ;
  return;
}
_luaF_freeproto["X"]=1;

function _luaF_freeclosure($L, $c) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $size;
      $1=$L;
      $2=$c;
      var $3=$2;
      var $4=$3;
      var $5=(($4+6)|0);
      var $6=HEAPU8[($5)];
      var $7=(($6)&255);
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$2;
      var $11=$10;
      var $12=(($11+7)|0);
      var $13=HEAPU8[($12)];
      var $14=(($13)&255);
      var $15=((($14)-(1))|0);
      var $16=((($15)*(12))|0);
      var $17=((($16)+(32))|0);
      var $28 = $17;__label__ = 5; break;
    case 4: 
      var $19=$2;
      var $20=$19;
      var $21=(($20+7)|0);
      var $22=HEAPU8[($21)];
      var $23=(($22)&255);
      var $24=((($23)-(1))|0);
      var $25=((($24<<2))|0);
      var $26=((($25)+(24))|0);
      var $28 = $26;__label__ = 5; break;
    case 5: 
      var $28;
      $size=$28;
      var $29=$1;
      var $30=$2;
      var $31=$30;
      var $32=$size;
      var $33=_luaM_realloc_($29, $31, $32, 0);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaC_separateudata($L, $all) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $g;
      var $deadmem;
      var $p;
      var $curr;
      $1=$L;
      $2=$all;
      var $3=$1;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      $g=$5;
      $deadmem=0;
      var $6=$g;
      var $7=(($6+104)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0);
      $p=$9;
      __label__ = 3; break;
    case 3: 
      var $11=$p;
      var $12=HEAP32[(($11)>>2)];
      $curr=$12;
      var $13=(($12)|0)!=0;
      if ($13) { __label__ = 4; break; } else { __label__ = 22; break; }
    case 4: 
      var $15=$curr;
      var $16=$15;
      var $17=(($16+5)|0);
      var $18=HEAPU8[($17)];
      var $19=(($18)&255);
      var $20=$19 & 3;
      var $21=(($20)|0)!=0;
      if ($21) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $23=$2;
      var $24=(($23)|0)!=0;
      if ($24) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $26=$curr;
      var $27=$26;
      var $28=$27;
      var $29=(($28+5)|0);
      var $30=HEAPU8[($29)];
      var $31=(($30)&255);
      var $32=$31 & 8;
      var $33=(($32)|0)!=0;
      if ($33) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $35=$curr;
      var $36=$35;
      var $37=(($36)|0);
      $p=$37;
      __label__ = 21; break;
    case 8: 
      var $39=$curr;
      var $40=$39;
      var $41=$40;
      var $42=(($41+8)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43)|0)==0;
      if ($44) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $74 = 0;__label__ = 14; break;
    case 10: 
      var $47=$curr;
      var $48=$47;
      var $49=$48;
      var $50=(($49+8)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+6)|0);
      var $53=HEAPU8[($52)];
      var $54=(($53)&255);
      var $55=$54 & 4;
      var $56=(($55)|0)!=0;
      if ($56) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $72 = 0;__label__ = 13; break;
    case 12: 
      var $59=$curr;
      var $60=$59;
      var $61=$60;
      var $62=(($61+8)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$1;
      var $65=(($64+16)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+168)|0);
      var $68=(($67+8)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=_luaT_gettm($63, 2, $69);
      var $72 = $70;__label__ = 13; break;
    case 13: 
      var $72;
      var $74 = $72;__label__ = 14; break;
    case 14: 
      var $74;
      var $75=(($74)|0)==0;
      if ($75) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $77=$curr;
      var $78=$77;
      var $79=$78;
      var $80=(($79+5)|0);
      var $81=HEAPU8[($80)];
      var $82=(($81)&255);
      var $83=$82 | 8;
      var $84=(($83) & 255);
      HEAP8[($80)]=$84;
      var $85=$curr;
      var $86=$85;
      var $87=(($86)|0);
      $p=$87;
      __label__ = 20; break;
    case 16: 
      var $89=$curr;
      var $90=$89;
      var $91=$90;
      var $92=(($91+16)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=((($93)+(20))|0);
      var $95=$deadmem;
      var $96=((($95)+($94))|0);
      $deadmem=$96;
      var $97=$curr;
      var $98=$97;
      var $99=$98;
      var $100=(($99+5)|0);
      var $101=HEAPU8[($100)];
      var $102=(($101)&255);
      var $103=$102 | 8;
      var $104=(($103) & 255);
      HEAP8[($100)]=$104;
      var $105=$curr;
      var $106=$105;
      var $107=(($106)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$p;
      HEAP32[(($109)>>2)]=$108;
      var $110=$g;
      var $111=(($110+48)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=(($112)|0)==0;
      if ($113) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $115=$curr;
      var $116=$curr;
      var $117=$116;
      var $118=(($117)|0);
      HEAP32[(($118)>>2)]=$115;
      var $119=$g;
      var $120=(($119+48)|0);
      HEAP32[(($120)>>2)]=$115;
      __label__ = 19; break;
    case 18: 
      var $122=$g;
      var $123=(($122+48)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=$124;
      var $126=(($125)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=$curr;
      var $129=$128;
      var $130=(($129)|0);
      HEAP32[(($130)>>2)]=$127;
      var $131=$curr;
      var $132=$g;
      var $133=(($132+48)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=$134;
      var $136=(($135)|0);
      HEAP32[(($136)>>2)]=$131;
      var $137=$curr;
      var $138=$g;
      var $139=(($138+48)|0);
      HEAP32[(($139)>>2)]=$137;
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 3; break;
    case 22: 
      var $144=$deadmem;
      ;
      return $144;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaC_separateudata["X"]=1;

function _luaC_callGCTM($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$L;
      __label__ = 3; break;
    case 3: 
      var $3=$1;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+48)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $10=$1;
      _GCTM($10);
      __label__ = 3; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _GCTM($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $g;
      var $o;
      var $udata;
      var $tm;
      var $oldah;
      var $oldt;
      var $o2;
      var $o1;
      var $i_o;
      $1=$L;
      var $2=$1;
      var $3=(($2+16)|0);
      var $4=HEAP32[(($3)>>2)];
      $g=$4;
      var $5=$g;
      var $6=(($5+48)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7;
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      $o=$10;
      var $11=$o;
      var $12=$11;
      $udata=$12;
      var $13=$o;
      var $14=$g;
      var $15=(($14+48)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($13)|0)==(($16)|0);
      if ($17) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $19=$g;
      var $20=(($19+48)|0);
      HEAP32[(($20)>>2)]=0;
      __label__ = 5; break;
    case 4: 
      var $22=$udata;
      var $23=$22;
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$g;
      var $27=(($26+48)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$28;
      var $30=(($29)|0);
      HEAP32[(($30)>>2)]=$25;
      __label__ = 5; break;
    case 5: 
      var $32=$g;
      var $33=(($32+104)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$udata;
      var $38=$37;
      var $39=(($38)|0);
      HEAP32[(($39)>>2)]=$36;
      var $40=$o;
      var $41=$g;
      var $42=(($41+104)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43)|0);
      HEAP32[(($44)>>2)]=$40;
      var $45=$o;
      var $46=$45;
      var $47=(($46+5)|0);
      var $48=HEAPU8[($47)];
      var $49=(($48)&255);
      var $50=$49 & 248;
      var $51=$g;
      var $52=(($51+20)|0);
      var $53=HEAPU8[($52)];
      var $54=(($53)&255);
      var $55=$54 & 3;
      var $56=(($55) & 255);
      var $57=(($56)&255);
      var $58=$50 | $57;
      var $59=(($58) & 255);
      var $60=$o;
      var $61=$60;
      var $62=(($61+5)|0);
      HEAP8[($62)]=$59;
      var $63=$udata;
      var $64=$63;
      var $65=(($64+8)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66)|0)==0;
      if ($67) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $95 = 0;__label__ = 11; break;
    case 7: 
      var $70=$udata;
      var $71=$70;
      var $72=(($71+8)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+6)|0);
      var $75=HEAPU8[($74)];
      var $76=(($75)&255);
      var $77=$76 & 4;
      var $78=(($77)|0)!=0;
      if ($78) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $93 = 0;__label__ = 10; break;
    case 9: 
      var $81=$udata;
      var $82=$81;
      var $83=(($82+8)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$1;
      var $86=(($85+16)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+168)|0);
      var $89=(($88+8)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=_luaT_gettm($84, 2, $90);
      var $93 = $91;__label__ = 10; break;
    case 10: 
      var $93;
      var $95 = $93;__label__ = 11; break;
    case 11: 
      var $95;
      $tm=$95;
      var $96=$tm;
      var $97=(($96)|0)!=0;
      if ($97) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $99=$1;
      var $100=(($99+57)|0);
      var $101=HEAP8[($100)];
      $oldah=$101;
      var $102=$g;
      var $103=(($102+64)|0);
      var $104=HEAP32[(($103)>>2)];
      $oldt=$104;
      var $105=$1;
      var $106=(($105+57)|0);
      HEAP8[($106)]=0;
      var $107=$g;
      var $108=(($107+68)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=((($109<<1))|0);
      var $111=$g;
      var $112=(($111+64)|0);
      HEAP32[(($112)>>2)]=$110;
      var $113=$tm;
      $o2=$113;
      var $114=$1;
      var $115=(($114+8)|0);
      var $116=HEAP32[(($115)>>2)];
      $o1=$116;
      var $117=$o1;
      var $118=(($117)|0);
      var $119=$o2;
      var $120=(($119)|0);
      var $121=$118;
      var $122=$120;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($122)+(4))>>2)];
      var $123=$o2;
      var $124=(($123+8)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=$o1;
      var $127=(($126+8)|0);
      HEAP32[(($127)>>2)]=$125;
      var $128=$1;
      var $129=(($128+8)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($130+12)|0);
      $i_o=$131;
      var $132=$udata;
      var $133=$132;
      var $134=$i_o;
      var $135=(($134)|0);
      var $136=$135;
      HEAP32[(($136)>>2)]=$133;
      var $137=$i_o;
      var $138=(($137+8)|0);
      HEAP32[(($138)>>2)]=7;
      var $139=$1;
      var $140=(($139+8)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=(($141+24)|0);
      HEAP32[(($140)>>2)]=$142;
      var $143=$1;
      var $144=$1;
      var $145=(($144+8)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=((($146)-(24))|0);
      _luaD_call($143, $147, 0);
      var $148=$oldah;
      var $149=$1;
      var $150=(($149+57)|0);
      HEAP8[($150)]=$148;
      var $151=$oldt;
      var $152=$g;
      var $153=(($152+64)|0);
      HEAP32[(($153)>>2)]=$151;
      __label__ = 13; break;
    case 13: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_GCTM["X"]=1;

function _luaC_freeall($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $g;
      var $i;
      $1=$L;
      var $2=$1;
      var $3=(($2+16)|0);
      var $4=HEAP32[(($3)>>2)];
      $g=$4;
      var $5=$g;
      var $6=(($5+20)|0);
      HEAP8[($6)]=67;
      var $7=$1;
      var $8=$g;
      var $9=(($8+28)|0);
      var $10=_sweeplist($7, $9, -3);
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $12=$i;
      var $13=$g;
      var $14=(($13)|0);
      var $15=(($14+8)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($12)|0) < (($16)|0);
      if ($17) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $19=$1;
      var $20=$i;
      var $21=$g;
      var $22=(($21)|0);
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+($20<<2))|0);
      var $26=_sweeplist($19, $25, -3);
      __label__ = 5; break;
    case 5: 
      var $28=$i;
      var $29=((($28)+(1))|0);
      $i=$29;
      __label__ = 3; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaC_barrierback($L, $t) {
  ;
  var __label__;

  var $1;
  var $2;
  var $g;
  var $o;
  $1=$L;
  $2=$t;
  var $3=$1;
  var $4=(($3+16)|0);
  var $5=HEAP32[(($4)>>2)];
  $g=$5;
  var $6=$2;
  var $7=$6;
  $o=$7;
  var $8=$o;
  var $9=$8;
  var $10=(($9+5)|0);
  var $11=HEAPU8[($10)];
  var $12=(($11)&255);
  var $13=$12 & 251;
  var $14=(($13) & 255);
  HEAP8[($10)]=$14;
  var $15=$g;
  var $16=(($15+40)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=$2;
  var $19=(($18+24)|0);
  HEAP32[(($19)>>2)]=$17;
  var $20=$o;
  var $21=$g;
  var $22=(($21+40)|0);
  HEAP32[(($22)>>2)]=$20;
  ;
  return;
}


function _luaC_link($L, $o, $tt) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $g;
  $1=$L;
  $2=$o;
  $3=$tt;
  var $4=$1;
  var $5=(($4+16)|0);
  var $6=HEAP32[(($5)>>2)];
  $g=$6;
  var $7=$g;
  var $8=(($7+28)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$10;
  var $12=(($11)|0);
  HEAP32[(($12)>>2)]=$9;
  var $13=$2;
  var $14=$g;
  var $15=(($14+28)|0);
  HEAP32[(($15)>>2)]=$13;
  var $16=$g;
  var $17=(($16+20)|0);
  var $18=HEAPU8[($17)];
  var $19=(($18)&255);
  var $20=$19 & 3;
  var $21=(($20) & 255);
  var $22=$2;
  var $23=$22;
  var $24=(($23+5)|0);
  HEAP8[($24)]=$21;
  var $25=$3;
  var $26=$2;
  var $27=$26;
  var $28=(($27+4)|0);
  HEAP8[($28)]=$25;
  ;
  return;
}


function _sweeplist($L, $p, $count) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $curr;
      var $g;
      var $deadmask;
      $1=$L;
      $2=$p;
      $3=$count;
      var $4=$1;
      var $5=(($4+16)|0);
      var $6=HEAP32[(($5)>>2)];
      $g=$6;
      var $7=$g;
      var $8=(($7+20)|0);
      var $9=HEAPU8[($8)];
      var $10=(($9)&255);
      var $11=$10 ^ 3;
      $deadmask=$11;
      __label__ = 3; break;
    case 3: 
      var $13=$2;
      var $14=HEAP32[(($13)>>2)];
      $curr=$14;
      var $15=(($14)|0)!=0;
      if ($15) { __label__ = 4; break; } else { var $21 = 0;__label__ = 5; break; }
    case 4: 
      var $17=$3;
      var $18=((($17)-(1))|0);
      $3=$18;
      var $19=(($17)>>>0) > 0;
      var $21 = $19;__label__ = 5; break;
    case 5: 
      var $21;
      if ($21) { __label__ = 6; break; } else { __label__ = 14; break; }
    case 6: 
      var $23=$curr;
      var $24=$23;
      var $25=(($24+4)|0);
      var $26=HEAPU8[($25)];
      var $27=(($26)&255);
      var $28=(($27)|0)==8;
      if ($28) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $30=$1;
      var $31=$curr;
      var $32=$31;
      var $33=(($32+96)|0);
      var $34=_sweeplist($30, $33, -3);
      __label__ = 8; break;
    case 8: 
      var $36=$curr;
      var $37=$36;
      var $38=(($37+5)|0);
      var $39=HEAPU8[($38)];
      var $40=(($39)&255);
      var $41=$40 ^ 3;
      var $42=$deadmask;
      var $43=$41 & $42;
      var $44=(($43)|0)!=0;
      if ($44) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $46=$curr;
      var $47=$46;
      var $48=(($47+5)|0);
      var $49=HEAPU8[($48)];
      var $50=(($49)&255);
      var $51=$50 & 248;
      var $52=$g;
      var $53=(($52+20)|0);
      var $54=HEAPU8[($53)];
      var $55=(($54)&255);
      var $56=$55 & 3;
      var $57=(($56) & 255);
      var $58=(($57)&255);
      var $59=$51 | $58;
      var $60=(($59) & 255);
      var $61=$curr;
      var $62=$61;
      var $63=(($62+5)|0);
      HEAP8[($63)]=$60;
      var $64=$curr;
      var $65=$64;
      var $66=(($65)|0);
      $2=$66;
      __label__ = 13; break;
    case 10: 
      var $68=$curr;
      var $69=$68;
      var $70=(($69)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$2;
      HEAP32[(($72)>>2)]=$71;
      var $73=$curr;
      var $74=$g;
      var $75=(($74+28)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($73)|0)==(($76)|0);
      if ($77) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $79=$curr;
      var $80=$79;
      var $81=(($80)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$g;
      var $84=(($83+28)|0);
      HEAP32[(($84)>>2)]=$82;
      __label__ = 12; break;
    case 12: 
      var $86=$1;
      var $87=$curr;
      _freeobj($86, $87);
      __label__ = 13; break;
    case 13: 
      __label__ = 3; break;
    case 14: 
      var $90=$2;
      ;
      return $90;
    default: assert(0, "bad label: " + __label__);
  }
}
_sweeplist["X"]=1;

function _luaC_step($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $g;
      var $lim;
      $1=$L;
      var $2=$1;
      var $3=(($2+16)|0);
      var $4=HEAP32[(($3)>>2)];
      $g=$4;
      var $5=$g;
      var $6=(($5+84)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=((($7)*(10))|0);
      $lim=$8;
      var $9=$lim;
      var $10=(($9)|0)==0;
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $lim=2147483646;
      __label__ = 4; break;
    case 4: 
      var $13=$g;
      var $14=(($13+68)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$g;
      var $17=(($16+64)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=((($15)-($18))|0);
      var $20=$g;
      var $21=(($20+76)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=((($22)+($19))|0);
      HEAP32[(($21)>>2)]=$23;
      __label__ = 5; break;
    case 5: 
      var $25=$1;
      var $26=_singlestep($25);
      var $27=$lim;
      var $28=((($27)-($26))|0);
      $lim=$28;
      var $29=$g;
      var $30=(($29+21)|0);
      var $31=HEAPU8[($30)];
      var $32=(($31)&255);
      var $33=(($32)|0)==0;
      if ($33) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 9; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $37=$lim;
      var $38=(($37)|0) > 0;
      if ($38) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 9: 
      var $40=$g;
      var $41=(($40+21)|0);
      var $42=HEAPU8[($41)];
      var $43=(($42)&255);
      var $44=(($43)|0)!=0;
      if ($44) { __label__ = 10; break; } else { __label__ = 14; break; }
    case 10: 
      var $46=$g;
      var $47=(($46+76)|0);
      var $48=HEAPU32[(($47)>>2)];
      var $49=(($48)>>>0) < 1024;
      if ($49) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $51=$g;
      var $52=(($51+68)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=((($53)+(1024))|0);
      var $55=$g;
      var $56=(($55+64)|0);
      HEAP32[(($56)>>2)]=$54;
      __label__ = 13; break;
    case 12: 
      var $58=$g;
      var $59=(($58+76)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=((($60)-(1024))|0);
      HEAP32[(($59)>>2)]=$61;
      var $62=$g;
      var $63=(($62+68)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$g;
      var $66=(($65+64)|0);
      HEAP32[(($66)>>2)]=$64;
      __label__ = 13; break;
    case 13: 
      __label__ = 15; break;
    case 14: 
      var $69=$g;
      var $70=(($69+72)|0);
      var $71=HEAPU32[(($70)>>2)];
      var $72=Math.floor(((($71)>>>0))/(100));
      var $73=$g;
      var $74=(($73+80)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=((($72)*($75))|0);
      var $77=$g;
      var $78=(($77+64)|0);
      HEAP32[(($78)>>2)]=$76;
      __label__ = 15; break;
    case 15: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaC_step["X"]=1;

function _singlestep($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $g;
      var $old;
      var $old1;
      $2=$L;
      var $3=$2;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      $g=$5;
      var $6=$g;
      var $7=(($6+21)|0);
      var $8=HEAPU8[($7)];
      var $9=(($8)&255);
      if ((($9)|0) == 0) {
        __label__ = 3; break;
      }
      else if ((($9)|0) == 1) {
        __label__ = 4; break;
      }
      else if ((($9)|0) == 2) {
        __label__ = 7; break;
      }
      else if ((($9)|0) == 3) {
        __label__ = 10; break;
      }
      else if ((($9)|0) == 4) {
        __label__ = 13; break;
      }
      else {
      __label__ = 18; break;
      }
      
    case 3: 
      var $11=$2;
      _markroot($11);
      $1=0;
      __label__ = 19; break;
    case 4: 
      var $13=$g;
      var $14=(($13+36)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0)!=0;
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $18=$g;
      var $19=_propagatemark($18);
      $1=$19;
      __label__ = 19; break;
    case 6: 
      var $21=$2;
      _atomic($21);
      $1=0;
      __label__ = 19; break;
    case 7: 
      var $23=$g;
      var $24=(($23+68)|0);
      var $25=HEAP32[(($24)>>2)];
      $old=$25;
      var $26=$2;
      var $27=$g;
      var $28=(($27+24)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=((($29)+(1))|0);
      HEAP32[(($28)>>2)]=$30;
      var $31=$g;
      var $32=(($31)|0);
      var $33=(($32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+($29<<2))|0);
      var $36=_sweeplist($26, $35, -3);
      var $37=$g;
      var $38=(($37+24)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$g;
      var $41=(($40)|0);
      var $42=(($41+8)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($39)|0) >= (($43)|0);
      if ($44) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $46=$g;
      var $47=(($46+21)|0);
      HEAP8[($47)]=3;
      __label__ = 9; break;
    case 9: 
      var $49=$old;
      var $50=$g;
      var $51=(($50+68)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=((($49)-($52))|0);
      var $54=$g;
      var $55=(($54+72)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=((($56)-($53))|0);
      HEAP32[(($55)>>2)]=$57;
      $1=10;
      __label__ = 19; break;
    case 10: 
      var $59=$g;
      var $60=(($59+68)|0);
      var $61=HEAP32[(($60)>>2)];
      $old1=$61;
      var $62=$2;
      var $63=$g;
      var $64=(($63+32)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=_sweeplist($62, $65, 40);
      var $67=$g;
      var $68=(($67+32)|0);
      HEAP32[(($68)>>2)]=$66;
      var $69=$g;
      var $70=(($69+32)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72)|0)==0;
      if ($73) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $75=$2;
      _checkSizes($75);
      var $76=$g;
      var $77=(($76+21)|0);
      HEAP8[($77)]=4;
      __label__ = 12; break;
    case 12: 
      var $79=$old1;
      var $80=$g;
      var $81=(($80+68)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=((($79)-($82))|0);
      var $84=$g;
      var $85=(($84+72)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=((($86)-($83))|0);
      HEAP32[(($85)>>2)]=$87;
      $1=400;
      __label__ = 19; break;
    case 13: 
      var $89=$g;
      var $90=(($89+48)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91)|0)!=0;
      if ($92) { __label__ = 14; break; } else { __label__ = 17; break; }
    case 14: 
      var $94=$2;
      _GCTM($94);
      var $95=$g;
      var $96=(($95+72)|0);
      var $97=HEAPU32[(($96)>>2)];
      var $98=(($97)>>>0) > 100;
      if ($98) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $100=$g;
      var $101=(($100+72)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=((($102)-(100))|0);
      HEAP32[(($101)>>2)]=$103;
      __label__ = 16; break;
    case 16: 
      $1=100;
      __label__ = 19; break;
    case 17: 
      var $106=$g;
      var $107=(($106+21)|0);
      HEAP8[($107)]=0;
      var $108=$g;
      var $109=(($108+76)|0);
      HEAP32[(($109)>>2)]=0;
      $1=0;
      __label__ = 19; break;
    case 18: 
      $1=0;
      __label__ = 19; break;
    case 19: 
      var $112=$1;
      ;
      return $112;
    default: assert(0, "bad label: " + __label__);
  }
}
_singlestep["X"]=1;

function _luaC_fullgc($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $g;
      $1=$L;
      var $2=$1;
      var $3=(($2+16)|0);
      var $4=HEAP32[(($3)>>2)];
      $g=$4;
      var $5=$g;
      var $6=(($5+21)|0);
      var $7=HEAPU8[($6)];
      var $8=(($7)&255);
      var $9=(($8)|0) <= 1;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$g;
      var $12=(($11+24)|0);
      HEAP32[(($12)>>2)]=0;
      var $13=$g;
      var $14=(($13+28)|0);
      var $15=$g;
      var $16=(($15+32)|0);
      HEAP32[(($16)>>2)]=$14;
      var $17=$g;
      var $18=(($17+36)|0);
      HEAP32[(($18)>>2)]=0;
      var $19=$g;
      var $20=(($19+40)|0);
      HEAP32[(($20)>>2)]=0;
      var $21=$g;
      var $22=(($21+44)|0);
      HEAP32[(($22)>>2)]=0;
      var $23=$g;
      var $24=(($23+21)|0);
      HEAP8[($24)]=2;
      __label__ = 4; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $27=$g;
      var $28=(($27+21)|0);
      var $29=HEAPU8[($28)];
      var $30=(($29)&255);
      var $31=(($30)|0)!=4;
      if ($31) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $33=$1;
      var $34=_singlestep($33);
      __label__ = 5; break;
    case 7: 
      var $36=$1;
      _markroot($36);
      __label__ = 8; break;
    case 8: 
      var $38=$g;
      var $39=(($38+21)|0);
      var $40=HEAPU8[($39)];
      var $41=(($40)&255);
      var $42=(($41)|0)!=0;
      if ($42) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $44=$1;
      var $45=_singlestep($44);
      __label__ = 8; break;
    case 10: 
      var $47=$g;
      var $48=(($47+72)|0);
      var $49=HEAPU32[(($48)>>2)];
      var $50=Math.floor(((($49)>>>0))/(100));
      var $51=$g;
      var $52=(($51+80)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=((($50)*($53))|0);
      var $55=$g;
      var $56=(($55+64)|0);
      HEAP32[(($56)>>2)]=$54;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaC_fullgc["X"]=1;

function _markroot($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $g;
      $1=$L;
      var $2=$1;
      var $3=(($2+16)|0);
      var $4=HEAP32[(($3)>>2)];
      $g=$4;
      var $5=$g;
      var $6=(($5+36)|0);
      HEAP32[(($6)>>2)]=0;
      var $7=$g;
      var $8=(($7+40)|0);
      HEAP32[(($8)>>2)]=0;
      var $9=$g;
      var $10=(($9+44)|0);
      HEAP32[(($10)>>2)]=0;
      var $11=$g;
      var $12=(($11+104)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13;
      var $15=$14;
      var $16=(($15+5)|0);
      var $17=HEAPU8[($16)];
      var $18=(($17)&255);
      var $19=$18 & 3;
      var $20=(($19)|0)!=0;
      if ($20) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $22=$g;
      var $23=$g;
      var $24=(($23+104)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$25;
      _reallymarkobject($22, $26);
      __label__ = 4; break;
    case 4: 
      var $28=$g;
      var $29=(($28+104)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+72)|0);
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|0) >= 4;
      if ($34) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $36=$g;
      var $37=(($36+104)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+72)|0);
      var $40=(($39)|0);
      var $41=$40;
      var $42=HEAP32[(($41)>>2)];
      var $43=$42;
      var $44=(($43+5)|0);
      var $45=HEAPU8[($44)];
      var $46=(($45)&255);
      var $47=$46 & 3;
      var $48=(($47)|0)!=0;
      if ($48) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $50=$g;
      var $51=$g;
      var $52=(($51+104)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+72)|0);
      var $55=(($54)|0);
      var $56=$55;
      var $57=HEAP32[(($56)>>2)];
      _reallymarkobject($50, $57);
      __label__ = 7; break;
    case 7: 
      var $59=$1;
      var $60=(($59+16)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+92)|0);
      var $63=(($62+8)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64)|0) >= 4;
      if ($65) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $67=$1;
      var $68=(($67+16)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+92)|0);
      var $71=(($70)|0);
      var $72=$71;
      var $73=HEAP32[(($72)>>2)];
      var $74=$73;
      var $75=(($74+5)|0);
      var $76=HEAPU8[($75)];
      var $77=(($76)&255);
      var $78=$77 & 3;
      var $79=(($78)|0)!=0;
      if ($79) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $81=$g;
      var $82=$1;
      var $83=(($82+16)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+92)|0);
      var $86=(($85)|0);
      var $87=$86;
      var $88=HEAP32[(($87)>>2)];
      _reallymarkobject($81, $88);
      __label__ = 10; break;
    case 10: 
      var $90=$g;
      _markmt($90);
      var $91=$g;
      var $92=(($91+21)|0);
      HEAP8[($92)]=1;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_markroot["X"]=1;

function _luaC_barrierf($L, $o, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $g;
      $1=$L;
      $2=$o;
      $3=$v;
      var $4=$1;
      var $5=(($4+16)|0);
      var $6=HEAP32[(($5)>>2)];
      $g=$6;
      var $7=$g;
      var $8=(($7+21)|0);
      var $9=HEAPU8[($8)];
      var $10=(($9)&255);
      var $11=(($10)|0)==1;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$g;
      var $14=$3;
      _reallymarkobject($13, $14);
      __label__ = 5; break;
    case 4: 
      var $16=$2;
      var $17=$16;
      var $18=(($17+5)|0);
      var $19=HEAPU8[($18)];
      var $20=(($19)&255);
      var $21=$20 & 248;
      var $22=$g;
      var $23=(($22+20)|0);
      var $24=HEAPU8[($23)];
      var $25=(($24)&255);
      var $26=$25 & 3;
      var $27=(($26) & 255);
      var $28=(($27)&255);
      var $29=$21 | $28;
      var $30=(($29) & 255);
      var $31=$2;
      var $32=$31;
      var $33=(($32+5)|0);
      HEAP8[($33)]=$30;
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _reallymarkobject($g, $o) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $mt;
      var $uv;
      $1=$g;
      $2=$o;
      var $3=$2;
      var $4=$3;
      var $5=(($4+5)|0);
      var $6=HEAPU8[($5)];
      var $7=(($6)&255);
      var $8=$7 & 252;
      var $9=(($8) & 255);
      HEAP8[($5)]=$9;
      var $10=$2;
      var $11=$10;
      var $12=(($11+4)|0);
      var $13=HEAPU8[($12)];
      var $14=(($13)&255);
      if ((($14)|0) == 4) {
        __label__ = 3; break;
      }
      else if ((($14)|0) == 7) {
        __label__ = 4; break;
      }
      else if ((($14)|0) == 10) {
        __label__ = 11; break;
      }
      else if ((($14)|0) == 6) {
        __label__ = 17; break;
      }
      else if ((($14)|0) == 5) {
        __label__ = 18; break;
      }
      else if ((($14)|0) == 8) {
        __label__ = 19; break;
      }
      else if ((($14)|0) == 9) {
        __label__ = 20; break;
      }
      else {
      __label__ = 21; break;
      }
      
    case 3: 
      __label__ = 22; break;
    case 4: 
      var $17=$2;
      var $18=$17;
      var $19=$18;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      $mt=$21;
      var $22=$2;
      var $23=$22;
      var $24=(($23+5)|0);
      var $25=HEAPU8[($24)];
      var $26=(($25)&255);
      var $27=$26 | 4;
      var $28=(($27) & 255);
      HEAP8[($24)]=$28;
      var $29=$mt;
      var $30=(($29)|0)!=0;
      if ($30) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $32=$mt;
      var $33=$32;
      var $34=$33;
      var $35=(($34+5)|0);
      var $36=HEAPU8[($35)];
      var $37=(($36)&255);
      var $38=$37 & 3;
      var $39=(($38)|0)!=0;
      if ($39) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $41=$1;
      var $42=$mt;
      var $43=$42;
      _reallymarkobject($41, $43);
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $46=$2;
      var $47=$46;
      var $48=$47;
      var $49=(($48+12)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$50;
      var $52=$51;
      var $53=(($52+5)|0);
      var $54=HEAPU8[($53)];
      var $55=(($54)&255);
      var $56=$55 & 3;
      var $57=(($56)|0)!=0;
      if ($57) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $59=$1;
      var $60=$2;
      var $61=$60;
      var $62=$61;
      var $63=(($62+12)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$64;
      _reallymarkobject($59, $65);
      __label__ = 10; break;
    case 10: 
      __label__ = 22; break;
    case 11: 
      var $68=$2;
      var $69=$68;
      $uv=$69;
      var $70=$uv;
      var $71=(($70+8)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+8)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74)|0) >= 4;
      if ($75) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $77=$uv;
      var $78=(($77+8)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79)|0);
      var $81=$80;
      var $82=HEAP32[(($81)>>2)];
      var $83=$82;
      var $84=(($83+5)|0);
      var $85=HEAPU8[($84)];
      var $86=(($85)&255);
      var $87=$86 & 3;
      var $88=(($87)|0)!=0;
      if ($88) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $90=$1;
      var $91=$uv;
      var $92=(($91+8)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93)|0);
      var $95=$94;
      var $96=HEAP32[(($95)>>2)];
      _reallymarkobject($90, $96);
      __label__ = 14; break;
    case 14: 
      var $98=$uv;
      var $99=(($98+8)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=$uv;
      var $102=(($101+12)|0);
      var $103=$102;
      var $104=(($100)|0)==(($103)|0);
      if ($104) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $106=$2;
      var $107=$106;
      var $108=(($107+5)|0);
      var $109=HEAPU8[($108)];
      var $110=(($109)&255);
      var $111=$110 | 4;
      var $112=(($111) & 255);
      HEAP8[($108)]=$112;
      __label__ = 16; break;
    case 16: 
      __label__ = 22; break;
    case 17: 
      var $115=$1;
      var $116=(($115+36)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=$2;
      var $119=$118;
      var $120=$119;
      var $121=(($120+8)|0);
      HEAP32[(($121)>>2)]=$117;
      var $122=$2;
      var $123=$1;
      var $124=(($123+36)|0);
      HEAP32[(($124)>>2)]=$122;
      __label__ = 22; break;
    case 18: 
      var $126=$1;
      var $127=(($126+36)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=$2;
      var $130=$129;
      var $131=(($130+24)|0);
      HEAP32[(($131)>>2)]=$128;
      var $132=$2;
      var $133=$1;
      var $134=(($133+36)|0);
      HEAP32[(($134)>>2)]=$132;
      __label__ = 22; break;
    case 19: 
      var $136=$1;
      var $137=(($136+36)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=$2;
      var $140=$139;
      var $141=(($140+100)|0);
      HEAP32[(($141)>>2)]=$138;
      var $142=$2;
      var $143=$1;
      var $144=(($143+36)|0);
      HEAP32[(($144)>>2)]=$142;
      __label__ = 22; break;
    case 20: 
      var $146=$1;
      var $147=(($146+36)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$2;
      var $150=$149;
      var $151=(($150+68)|0);
      HEAP32[(($151)>>2)]=$148;
      var $152=$2;
      var $153=$1;
      var $154=(($153+36)|0);
      HEAP32[(($154)>>2)]=$152;
      __label__ = 22; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_reallymarkobject["X"]=1;

function _luaC_linkupval($L, $uv) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $g;
      var $o;
      $1=$L;
      $2=$uv;
      var $3=$1;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      $g=$5;
      var $6=$2;
      var $7=$6;
      $o=$7;
      var $8=$g;
      var $9=(($8+28)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$o;
      var $12=$11;
      var $13=(($12)|0);
      HEAP32[(($13)>>2)]=$10;
      var $14=$o;
      var $15=$g;
      var $16=(($15+28)|0);
      HEAP32[(($16)>>2)]=$14;
      var $17=$o;
      var $18=$17;
      var $19=(($18+5)|0);
      var $20=HEAPU8[($19)];
      var $21=(($20)&255);
      var $22=$21 & 4;
      var $23=(($22)|0)!=0;
      if ($23) { __label__ = 12; break; } else { __label__ = 3; break; }
    case 3: 
      var $25=$o;
      var $26=$25;
      var $27=(($26+5)|0);
      var $28=HEAPU8[($27)];
      var $29=(($28)&255);
      var $30=$29 & 3;
      var $31=(($30)|0)!=0;
      if ($31) { __label__ = 12; break; } else { __label__ = 4; break; }
    case 4: 
      var $33=$g;
      var $34=(($33+21)|0);
      var $35=HEAPU8[($34)];
      var $36=(($35)&255);
      var $37=(($36)|0)==1;
      if ($37) { __label__ = 5; break; } else { __label__ = 10; break; }
    case 5: 
      var $39=$o;
      var $40=$39;
      var $41=(($40+5)|0);
      var $42=HEAPU8[($41)];
      var $43=(($42)&255);
      var $44=$43 | 4;
      var $45=(($44) & 255);
      HEAP8[($41)]=$45;
      var $46=$2;
      var $47=(($46+8)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+8)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50)|0) >= 4;
      if ($51) { __label__ = 6; break; } else { __label__ = 9; break; }
    case 6: 
      var $53=$2;
      var $54=(($53+8)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55)|0);
      var $57=$56;
      var $58=HEAP32[(($57)>>2)];
      var $59=$58;
      var $60=(($59+5)|0);
      var $61=HEAPU8[($60)];
      var $62=(($61)&255);
      var $63=$62 & 3;
      var $64=(($63)|0)!=0;
      if ($64) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $66=$2;
      var $67=$66;
      var $68=$67;
      var $69=(($68+5)|0);
      var $70=HEAPU8[($69)];
      var $71=(($70)&255);
      var $72=$71 & 4;
      var $73=(($72)|0)!=0;
      if ($73) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $75=$1;
      var $76=$2;
      var $77=$76;
      var $78=$2;
      var $79=(($78+8)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80)|0);
      var $82=$81;
      var $83=HEAP32[(($82)>>2)];
      _luaC_barrierf($75, $77, $83);
      __label__ = 9; break;
    case 9: 
      __label__ = 11; break;
    case 10: 
      var $86=$o;
      var $87=$86;
      var $88=(($87+5)|0);
      var $89=HEAPU8[($88)];
      var $90=(($89)&255);
      var $91=$90 & 248;
      var $92=$g;
      var $93=(($92+20)|0);
      var $94=HEAPU8[($93)];
      var $95=(($94)&255);
      var $96=$95 & 3;
      var $97=(($96) & 255);
      var $98=(($97)&255);
      var $99=$91 | $98;
      var $100=(($99) & 255);
      var $101=$o;
      var $102=$101;
      var $103=(($102+5)|0);
      HEAP8[($103)]=$100;
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaC_linkupval["X"]=1;

function _markmt($g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $i;
      $1=$g;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $3=$i;
      var $4=(($3)|0) < 9;
      if ($4) { __label__ = 4; break; } else { __label__ = 10; break; }
    case 4: 
      var $6=$i;
      var $7=$1;
      var $8=(($7+132)|0);
      var $9=(($8+($6<<2))|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $13=$i;
      var $14=$1;
      var $15=(($14+132)|0);
      var $16=(($15+($13<<2))|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      var $19=$18;
      var $20=(($19+5)|0);
      var $21=HEAPU8[($20)];
      var $22=(($21)&255);
      var $23=$22 & 3;
      var $24=(($23)|0)!=0;
      if ($24) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $26=$1;
      var $27=$i;
      var $28=$1;
      var $29=(($28+132)|0);
      var $30=(($29+($27<<2))|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      _reallymarkobject($26, $32);
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $36=$i;
      var $37=((($36)+(1))|0);
      $i=$37;
      __label__ = 3; break;
    case 10: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _propagatemark($g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      var $h;
      var $cl;
      var $th;
      var $p;
      $2=$g;
      var $3=$2;
      var $4=(($3+36)|0);
      var $5=HEAP32[(($4)>>2)];
      $o=$5;
      var $6=$o;
      var $7=$6;
      var $8=(($7+5)|0);
      var $9=HEAPU8[($8)];
      var $10=(($9)&255);
      var $11=$10 | 4;
      var $12=(($11) & 255);
      HEAP8[($8)]=$12;
      var $13=$o;
      var $14=$13;
      var $15=(($14+4)|0);
      var $16=HEAPU8[($15)];
      var $17=(($16)&255);
      if ((($17)|0) == 5) {
        __label__ = 3; break;
      }
      else if ((($17)|0) == 6) {
        __label__ = 6; break;
      }
      else if ((($17)|0) == 8) {
        __label__ = 10; break;
      }
      else if ((($17)|0) == 9) {
        __label__ = 11; break;
      }
      else {
      __label__ = 12; break;
      }
      
    case 3: 
      var $19=$o;
      var $20=$19;
      $h=$20;
      var $21=$h;
      var $22=(($21+24)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$2;
      var $25=(($24+36)|0);
      HEAP32[(($25)>>2)]=$23;
      var $26=$2;
      var $27=$h;
      var $28=_traversetable($26, $27);
      var $29=(($28)|0)!=0;
      if ($29) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $31=$o;
      var $32=$31;
      var $33=(($32+5)|0);
      var $34=HEAPU8[($33)];
      var $35=(($34)&255);
      var $36=$35 & 251;
      var $37=(($36) & 255);
      HEAP8[($33)]=$37;
      __label__ = 5; break;
    case 5: 
      var $39=$h;
      var $40=(($39+28)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=((($41)*(12))|0);
      var $43=((($42)+(32))|0);
      var $44=$h;
      var $45=(($44+7)|0);
      var $46=HEAPU8[($45)];
      var $47=(($46)&255);
      var $48=1 << $47;
      var $49=((($48)*(28))|0);
      var $50=((($43)+($49))|0);
      $1=$50;
      __label__ = 13; break;
    case 6: 
      var $52=$o;
      var $53=$52;
      $cl=$53;
      var $54=$cl;
      var $55=$54;
      var $56=(($55+8)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$2;
      var $59=(($58+36)|0);
      HEAP32[(($59)>>2)]=$57;
      var $60=$2;
      var $61=$cl;
      _traverseclosure($60, $61);
      var $62=$cl;
      var $63=$62;
      var $64=(($63+6)|0);
      var $65=HEAPU8[($64)];
      var $66=(($65)&255);
      var $67=(($66)|0)!=0;
      if ($67) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $69=$cl;
      var $70=$69;
      var $71=(($70+7)|0);
      var $72=HEAPU8[($71)];
      var $73=(($72)&255);
      var $74=((($73)-(1))|0);
      var $75=((($74)*(12))|0);
      var $76=((($75)+(32))|0);
      var $87 = $76;__label__ = 9; break;
    case 8: 
      var $78=$cl;
      var $79=$78;
      var $80=(($79+7)|0);
      var $81=HEAPU8[($80)];
      var $82=(($81)&255);
      var $83=((($82)-(1))|0);
      var $84=((($83<<2))|0);
      var $85=((($84)+(24))|0);
      var $87 = $85;__label__ = 9; break;
    case 9: 
      var $87;
      $1=$87;
      __label__ = 13; break;
    case 10: 
      var $89=$o;
      var $90=$89;
      $th=$90;
      var $91=$th;
      var $92=(($91+100)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$2;
      var $95=(($94+36)|0);
      HEAP32[(($95)>>2)]=$93;
      var $96=$2;
      var $97=(($96+40)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$th;
      var $100=(($99+100)|0);
      HEAP32[(($100)>>2)]=$98;
      var $101=$o;
      var $102=$2;
      var $103=(($102+40)|0);
      HEAP32[(($103)>>2)]=$101;
      var $104=$o;
      var $105=$104;
      var $106=(($105+5)|0);
      var $107=HEAPU8[($106)];
      var $108=(($107)&255);
      var $109=$108 & 251;
      var $110=(($109) & 255);
      HEAP8[($106)]=$110;
      var $111=$2;
      var $112=$th;
      _traversestack($111, $112);
      var $113=$th;
      var $114=(($113+44)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=((($115)*(12))|0);
      var $117=((($116)+(112))|0);
      var $118=$th;
      var $119=(($118+48)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=((($120)*(24))|0);
      var $122=((($117)+($121))|0);
      $1=$122;
      __label__ = 13; break;
    case 11: 
      var $124=$o;
      var $125=$124;
      $p=$125;
      var $126=$p;
      var $127=(($126+68)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=$2;
      var $130=(($129+36)|0);
      HEAP32[(($130)>>2)]=$128;
      var $131=$2;
      var $132=$p;
      _traverseproto($131, $132);
      var $133=$p;
      var $134=(($133+44)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=((($135<<2))|0);
      var $137=((($136)+(76))|0);
      var $138=$p;
      var $139=(($138+52)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=((($140<<2))|0);
      var $142=((($137)+($141))|0);
      var $143=$p;
      var $144=(($143+40)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=((($145)*(12))|0);
      var $147=((($142)+($146))|0);
      var $148=$p;
      var $149=(($148+48)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=((($150<<2))|0);
      var $152=((($147)+($151))|0);
      var $153=$p;
      var $154=(($153+56)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=((($155)*(12))|0);
      var $157=((($152)+($156))|0);
      var $158=$p;
      var $159=(($158+36)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=((($160<<2))|0);
      var $162=((($157)+($161))|0);
      $1=$162;
      __label__ = 13; break;
    case 12: 
      $1=0;
      __label__ = 13; break;
    case 13: 
      var $165=$1;
      ;
      return $165;
    default: assert(0, "bad label: " + __label__);
  }
}
_propagatemark["X"]=1;

function _atomic($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $g;
      var $udsize;
      $1=$L;
      var $2=$1;
      var $3=(($2+16)|0);
      var $4=HEAP32[(($3)>>2)];
      $g=$4;
      var $5=$g;
      _remarkupvals($5);
      var $6=$g;
      var $7=_propagateall($6);
      var $8=$g;
      var $9=(($8+44)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$g;
      var $12=(($11+36)|0);
      HEAP32[(($12)>>2)]=$10;
      var $13=$g;
      var $14=(($13+44)|0);
      HEAP32[(($14)>>2)]=0;
      var $15=$1;
      var $16=$15;
      var $17=$16;
      var $18=(($17+5)|0);
      var $19=HEAPU8[($18)];
      var $20=(($19)&255);
      var $21=$20 & 3;
      var $22=(($21)|0)!=0;
      if ($22) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $24=$g;
      var $25=$1;
      var $26=$25;
      _reallymarkobject($24, $26);
      __label__ = 4; break;
    case 4: 
      var $28=$g;
      _markmt($28);
      var $29=$g;
      var $30=_propagateall($29);
      var $31=$g;
      var $32=(($31+40)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$g;
      var $35=(($34+36)|0);
      HEAP32[(($35)>>2)]=$33;
      var $36=$g;
      var $37=(($36+40)|0);
      HEAP32[(($37)>>2)]=0;
      var $38=$g;
      var $39=_propagateall($38);
      var $40=$1;
      var $41=_luaC_separateudata($40, 0);
      $udsize=$41;
      var $42=$g;
      _marktmu($42);
      var $43=$g;
      var $44=_propagateall($43);
      var $45=$udsize;
      var $46=((($45)+($44))|0);
      $udsize=$46;
      var $47=$g;
      var $48=(($47+44)|0);
      var $49=HEAP32[(($48)>>2)];
      _cleartable($49);
      var $50=$g;
      var $51=(($50+20)|0);
      var $52=HEAPU8[($51)];
      var $53=(($52)&255);
      var $54=$53 ^ 3;
      var $55=(($54) & 255);
      var $56=$g;
      var $57=(($56+20)|0);
      HEAP8[($57)]=$55;
      var $58=$g;
      var $59=(($58+24)|0);
      HEAP32[(($59)>>2)]=0;
      var $60=$g;
      var $61=(($60+28)|0);
      var $62=$g;
      var $63=(($62+32)|0);
      HEAP32[(($63)>>2)]=$61;
      var $64=$g;
      var $65=(($64+21)|0);
      HEAP8[($65)]=2;
      var $66=$g;
      var $67=(($66+68)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$udsize;
      var $70=((($68)-($69))|0);
      var $71=$g;
      var $72=(($71+72)|0);
      HEAP32[(($72)>>2)]=$70;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_atomic["X"]=1;

function _checkSizes($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $g;
      var $newsize;
      $1=$L;
      var $2=$1;
      var $3=(($2+16)|0);
      var $4=HEAP32[(($3)>>2)];
      $g=$4;
      var $5=$g;
      var $6=(($5)|0);
      var $7=(($6+4)|0);
      var $8=HEAPU32[(($7)>>2)];
      var $9=$g;
      var $10=(($9)|0);
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=((((($12)|0))/(4))&-1);
      var $14=(($8)>>>0) < (($13)>>>0);
      if ($14) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $16=$g;
      var $17=(($16)|0);
      var $18=(($17+8)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|0) > 64;
      if ($20) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $22=$1;
      var $23=$g;
      var $24=(($23)|0);
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=((((($26)|0))/(2))&-1);
      _luaS_resize($22, $27);
      __label__ = 5; break;
    case 5: 
      var $29=$g;
      var $30=(($29+52)|0);
      var $31=(($30+8)|0);
      var $32=HEAPU32[(($31)>>2)];
      var $33=(($32)>>>0) > 64;
      if ($33) { __label__ = 6; break; } else { __label__ = 10; break; }
    case 6: 
      var $35=$g;
      var $36=(($35+52)|0);
      var $37=(($36+8)|0);
      var $38=HEAPU32[(($37)>>2)];
      var $39=Math.floor(((($38)>>>0))/(2));
      $newsize=$39;
      var $40=$newsize;
      var $41=((($40)+(1))|0);
      var $42=(($41)>>>0) <= 4294967293;
      if ($42) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $44=$1;
      var $45=$g;
      var $46=(($45+52)|0);
      var $47=(($46)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$g;
      var $50=(($49+52)|0);
      var $51=(($50+8)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52)|0);
      var $54=$newsize;
      var $55=(($54)|0);
      var $56=_luaM_realloc_($44, $48, $53, $55);
      var $61 = $56;__label__ = 9; break;
    case 8: 
      var $58=$1;
      var $59=_luaM_toobig($58);
      var $61 = $59;__label__ = 9; break;
    case 9: 
      var $61;
      var $62=$g;
      var $63=(($62+52)|0);
      var $64=(($63)|0);
      HEAP32[(($64)>>2)]=$61;
      var $65=$newsize;
      var $66=$g;
      var $67=(($66+52)|0);
      var $68=(($67+8)|0);
      HEAP32[(($68)>>2)]=$65;
      __label__ = 10; break;
    case 10: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_checkSizes["X"]=1;

function _remarkupvals($g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $uv;
      $1=$g;
      var $2=$1;
      var $3=(($2+108)|0);
      var $4=(($3+12)|0);
      var $5=$4;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      $uv=$7;
      __label__ = 3; break;
    case 3: 
      var $9=$uv;
      var $10=$1;
      var $11=(($10+108)|0);
      var $12=(($9)|0)!=(($11)|0);
      if ($12) { __label__ = 4; break; } else { __label__ = 12; break; }
    case 4: 
      var $14=$uv;
      var $15=$14;
      var $16=$15;
      var $17=(($16+5)|0);
      var $18=HEAPU8[($17)];
      var $19=(($18)&255);
      var $20=$19 & 4;
      var $21=(($20)|0)!=0;
      if ($21) { __label__ = 10; break; } else { __label__ = 5; break; }
    case 5: 
      var $23=$uv;
      var $24=$23;
      var $25=$24;
      var $26=(($25+5)|0);
      var $27=HEAPU8[($26)];
      var $28=(($27)&255);
      var $29=$28 & 3;
      var $30=(($29)|0)!=0;
      if ($30) { __label__ = 10; break; } else { __label__ = 6; break; }
    case 6: 
      var $32=$uv;
      var $33=(($32+8)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+8)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|0) >= 4;
      if ($37) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $39=$uv;
      var $40=(($39+8)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41)|0);
      var $43=$42;
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      var $46=(($45+5)|0);
      var $47=HEAPU8[($46)];
      var $48=(($47)&255);
      var $49=$48 & 3;
      var $50=(($49)|0)!=0;
      if ($50) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $52=$1;
      var $53=$uv;
      var $54=(($53+8)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55)|0);
      var $57=$56;
      var $58=HEAP32[(($57)>>2)];
      _reallymarkobject($52, $58);
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $62=$uv;
      var $63=(($62+12)|0);
      var $64=$63;
      var $65=(($64+4)|0);
      var $66=HEAP32[(($65)>>2)];
      $uv=$66;
      __label__ = 3; break;
    case 12: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_remarkupvals["X"]=1;

function _propagateall($g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $m;
      $1=$g;
      $m=0;
      __label__ = 3; break;
    case 3: 
      var $3=$1;
      var $4=(($3+36)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $8=$1;
      var $9=_propagatemark($8);
      var $10=$m;
      var $11=((($10)+($9))|0);
      $m=$11;
      __label__ = 3; break;
    case 5: 
      var $13=$m;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _marktmu($g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $u;
      $1=$g;
      var $2=$1;
      var $3=(($2+48)|0);
      var $4=HEAP32[(($3)>>2)];
      $u=$4;
      var $5=$u;
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      __label__ = 4; break;
    case 4: 
      var $9=$u;
      var $10=$9;
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      $u=$12;
      var $13=$u;
      var $14=$13;
      var $15=(($14+5)|0);
      var $16=HEAPU8[($15)];
      var $17=(($16)&255);
      var $18=$17 & 248;
      var $19=$1;
      var $20=(($19+20)|0);
      var $21=HEAPU8[($20)];
      var $22=(($21)&255);
      var $23=$22 & 3;
      var $24=(($23) & 255);
      var $25=(($24)&255);
      var $26=$18 | $25;
      var $27=(($26) & 255);
      var $28=$u;
      var $29=$28;
      var $30=(($29+5)|0);
      HEAP8[($30)]=$27;
      var $31=$1;
      var $32=$u;
      _reallymarkobject($31, $32);
      __label__ = 5; break;
    case 5: 
      var $34=$u;
      var $35=$1;
      var $36=(($35+48)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($34)|0)!=(($37)|0);
      if ($38) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 6: 
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _cleartable($l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $h;
      var $i;
      var $o;
      var $n;
      $1=$l;
      __label__ = 3; break;
    case 3: 
      var $3=$1;
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 4; break; } else { __label__ = 19; break; }
    case 4: 
      var $6=$1;
      var $7=$6;
      $h=$7;
      var $8=$h;
      var $9=(($8+28)|0);
      var $10=HEAP32[(($9)>>2)];
      $i=$10;
      var $11=$h;
      var $12=(($11+5)|0);
      var $13=HEAPU8[($12)];
      var $14=(($13)&255);
      var $15=$14 & 16;
      var $16=(($15)|0)!=0;
      if ($16) { __label__ = 5; break; } else { __label__ = 11; break; }
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $19=$i;
      var $20=((($19)-(1))|0);
      $i=$20;
      var $21=(($19)|0)!=0;
      if ($21) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $23=$i;
      var $24=$h;
      var $25=(($24+12)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+($23)*(12))|0);
      $o=$27;
      var $28=$o;
      var $29=_iscleared($28, 0);
      var $30=(($29)|0)!=0;
      if ($30) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $32=$o;
      var $33=(($32+8)|0);
      HEAP32[(($33)>>2)]=0;
      __label__ = 9; break;
    case 9: 
      __label__ = 6; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $37=$h;
      var $38=(($37+7)|0);
      var $39=HEAPU8[($38)];
      var $40=(($39)&255);
      var $41=1 << $40;
      $i=$41;
      __label__ = 12; break;
    case 12: 
      var $43=$i;
      var $44=((($43)-(1))|0);
      $i=$44;
      var $45=(($43)|0)!=0;
      if ($45) { __label__ = 13; break; } else { __label__ = 18; break; }
    case 13: 
      var $47=$i;
      var $48=$h;
      var $49=(($48+16)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+($47)*(28))|0);
      $n=$51;
      var $52=$n;
      var $53=(($52)|0);
      var $54=(($53+8)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55)|0)==0;
      if ($56) { __label__ = 17; break; } else { __label__ = 14; break; }
    case 14: 
      var $58=$n;
      var $59=(($58+12)|0);
      var $60=$59;
      var $61=_iscleared($60, 1);
      var $62=(($61)|0)!=0;
      if ($62) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $64=$n;
      var $65=(($64)|0);
      var $66=_iscleared($65, 0);
      var $67=(($66)|0)!=0;
      if ($67) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $69=$n;
      var $70=(($69)|0);
      var $71=(($70+8)|0);
      HEAP32[(($71)>>2)]=0;
      var $72=$n;
      _removeentry($72);
      __label__ = 17; break;
    case 17: 
      __label__ = 12; break;
    case 18: 
      var $75=$h;
      var $76=(($75+24)|0);
      var $77=HEAP32[(($76)>>2)];
      $1=$77;
      __label__ = 3; break;
    case 19: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_cleartable["X"]=1;

function _iscleared($o, $iskey) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$o;
      $3=$iskey;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0) >= 4;
      if ($7) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=0;
      __label__ = 13; break;
    case 4: 
      var $10=$2;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|0)==4;
      if ($13) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $15=$2;
      var $16=(($15)|0);
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      var $20=$19;
      var $21=(($20+5)|0);
      var $22=HEAPU8[($21)];
      var $23=(($22)&255);
      var $24=$23 & 252;
      var $25=(($24) & 255);
      HEAP8[($21)]=$25;
      $1=0;
      __label__ = 13; break;
    case 6: 
      var $27=$2;
      var $28=(($27)|0);
      var $29=$28;
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      var $32=(($31+5)|0);
      var $33=HEAPU8[($32)];
      var $34=(($33)&255);
      var $35=$34 & 3;
      var $36=(($35)|0)!=0;
      if ($36) { var $62 = 1;__label__ = 12; break; } else { __label__ = 7; break; }
    case 7: 
      var $38=$2;
      var $39=(($38+8)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40)|0)==7;
      if ($41) { __label__ = 8; break; } else { var $60 = 0;__label__ = 11; break; }
    case 8: 
      var $43=$3;
      var $44=(($43)|0)!=0;
      if ($44) { var $58 = 0;__label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $46=$2;
      var $47=(($46)|0);
      var $48=$47;
      var $49=HEAP32[(($48)>>2)];
      var $50=$49;
      var $51=$50;
      var $52=(($51+5)|0);
      var $53=HEAPU8[($52)];
      var $54=(($53)&255);
      var $55=$54 & 8;
      var $56=(($55)|0)!=0;
      var $58 = $56;__label__ = 10; break;
    case 10: 
      var $58;
      var $60 = $58;__label__ = 11; break;
    case 11: 
      var $60;
      var $62 = $60;__label__ = 12; break;
    case 12: 
      var $62;
      var $63=(($62)&1);
      $1=$63;
      __label__ = 13; break;
    case 13: 
      var $65=$1;
      ;
      return $65;
    default: assert(0, "bad label: " + __label__);
  }
}
_iscleared["X"]=1;

function _removeentry($n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$n;
      var $2=$1;
      var $3=(($2+12)|0);
      var $4=$3;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0) >= 4;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$1;
      var $10=(($9+12)|0);
      var $11=$10;
      var $12=(($11+8)|0);
      HEAP32[(($12)>>2)]=11;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _traversetable($g, $h) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $weakkey;
      var $weakvalue;
      var $mode;
      var $n;
      $2=$g;
      $3=$h;
      $weakkey=0;
      $weakvalue=0;
      var $4=$3;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $9=$3;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11;
      var $13=$12;
      var $14=(($13+5)|0);
      var $15=HEAPU8[($14)];
      var $16=(($15)&255);
      var $17=$16 & 3;
      var $18=(($17)|0)!=0;
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $20=$2;
      var $21=$3;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$23;
      _reallymarkobject($20, $24);
      __label__ = 5; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $27=$3;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|0)==0;
      if ($30) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $54 = 0;__label__ = 12; break;
    case 8: 
      var $33=$3;
      var $34=(($33+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+6)|0);
      var $37=HEAPU8[($36)];
      var $38=(($37)&255);
      var $39=$38 & 8;
      var $40=(($39)|0)!=0;
      if ($40) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $52 = 0;__label__ = 11; break;
    case 10: 
      var $43=$3;
      var $44=(($43+8)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$2;
      var $47=(($46+168)|0);
      var $48=(($47+12)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=_luaT_gettm($45, 3, $49);
      var $52 = $50;__label__ = 11; break;
    case 11: 
      var $52;
      var $54 = $52;__label__ = 12; break;
    case 12: 
      var $54;
      $mode=$54;
      var $55=$mode;
      var $56=(($55)|0)!=0;
      if ($56) { __label__ = 13; break; } else { __label__ = 18; break; }
    case 13: 
      var $58=$mode;
      var $59=(($58+8)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60)|0)==4;
      if ($61) { __label__ = 14; break; } else { __label__ = 18; break; }
    case 14: 
      var $63=$mode;
      var $64=(($63)|0);
      var $65=$64;
      var $66=HEAP32[(($65)>>2)];
      var $67=$66;
      var $68=(($67+16)|0);
      var $69=$68;
      var $70=_strchr($69, 107);
      var $71=(($70)|0)!=0;
      var $72=(($71)&1);
      $weakkey=$72;
      var $73=$mode;
      var $74=(($73)|0);
      var $75=$74;
      var $76=HEAP32[(($75)>>2)];
      var $77=$76;
      var $78=(($77+16)|0);
      var $79=$78;
      var $80=_strchr($79, 118);
      var $81=(($80)|0)!=0;
      var $82=(($81)&1);
      $weakvalue=$82;
      var $83=$weakkey;
      var $84=(($83)|0)!=0;
      if ($84) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $86=$weakvalue;
      var $87=(($86)|0)!=0;
      if ($87) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $89=$3;
      var $90=(($89+5)|0);
      var $91=HEAPU8[($90)];
      var $92=(($91)&255);
      var $93=$92 & -25;
      var $94=(($93) & 255);
      HEAP8[($90)]=$94;
      var $95=$weakkey;
      var $96=$95 << 3;
      var $97=$weakvalue;
      var $98=$97 << 4;
      var $99=$96 | $98;
      var $100=(($99) & 255);
      var $101=(($100)&255);
      var $102=$3;
      var $103=(($102+5)|0);
      var $104=HEAPU8[($103)];
      var $105=(($104)&255);
      var $106=$105 | $101;
      var $107=(($106) & 255);
      HEAP8[($103)]=$107;
      var $108=$2;
      var $109=(($108+44)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=$3;
      var $112=(($111+24)|0);
      HEAP32[(($112)>>2)]=$110;
      var $113=$3;
      var $114=$113;
      var $115=$2;
      var $116=(($115+44)|0);
      HEAP32[(($116)>>2)]=$114;
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $119=$weakkey;
      var $120=(($119)|0)!=0;
      if ($120) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      var $122=$weakvalue;
      var $123=(($122)|0)!=0;
      if ($123) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      $1=1;
      __label__ = 48; break;
    case 21: 
      var $126=$weakvalue;
      var $127=(($126)|0)!=0;
      if ($127) { __label__ = 29; break; } else { __label__ = 22; break; }
    case 22: 
      var $129=$3;
      var $130=(($129+28)|0);
      var $131=HEAP32[(($130)>>2)];
      $i=$131;
      __label__ = 23; break;
    case 23: 
      var $133=$i;
      var $134=((($133)-(1))|0);
      $i=$134;
      var $135=(($133)|0)!=0;
      if ($135) { __label__ = 24; break; } else { __label__ = 28; break; }
    case 24: 
      var $137=$i;
      var $138=$3;
      var $139=(($138+12)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=(($140+($137)*(12))|0);
      var $142=(($141+8)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=(($143)|0) >= 4;
      if ($144) { __label__ = 25; break; } else { __label__ = 27; break; }
    case 25: 
      var $146=$i;
      var $147=$3;
      var $148=(($147+12)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=(($149+($146)*(12))|0);
      var $151=(($150)|0);
      var $152=$151;
      var $153=HEAP32[(($152)>>2)];
      var $154=$153;
      var $155=(($154+5)|0);
      var $156=HEAPU8[($155)];
      var $157=(($156)&255);
      var $158=$157 & 3;
      var $159=(($158)|0)!=0;
      if ($159) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $161=$2;
      var $162=$i;
      var $163=$3;
      var $164=(($163+12)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=(($165+($162)*(12))|0);
      var $167=(($166)|0);
      var $168=$167;
      var $169=HEAP32[(($168)>>2)];
      _reallymarkobject($161, $169);
      __label__ = 27; break;
    case 27: 
      __label__ = 23; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $173=$3;
      var $174=(($173+7)|0);
      var $175=HEAPU8[($174)];
      var $176=(($175)&255);
      var $177=1 << $176;
      $i=$177;
      __label__ = 30; break;
    case 30: 
      var $179=$i;
      var $180=((($179)-(1))|0);
      $i=$180;
      var $181=(($179)|0)!=0;
      if ($181) { __label__ = 31; break; } else { __label__ = 45; break; }
    case 31: 
      var $183=$i;
      var $184=$3;
      var $185=(($184+16)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=(($186+($183)*(28))|0);
      $n=$187;
      var $188=$n;
      var $189=(($188)|0);
      var $190=(($189+8)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=(($191)|0)==0;
      if ($192) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $194=$n;
      _removeentry($194);
      __label__ = 44; break;
    case 33: 
      var $196=$weakkey;
      var $197=(($196)|0)!=0;
      if ($197) { __label__ = 38; break; } else { __label__ = 34; break; }
    case 34: 
      var $199=$n;
      var $200=(($199+12)|0);
      var $201=$200;
      var $202=(($201+8)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=(($203)|0) >= 4;
      if ($204) { __label__ = 35; break; } else { __label__ = 37; break; }
    case 35: 
      var $206=$n;
      var $207=(($206+12)|0);
      var $208=$207;
      var $209=(($208)|0);
      var $210=$209;
      var $211=HEAP32[(($210)>>2)];
      var $212=$211;
      var $213=(($212+5)|0);
      var $214=HEAPU8[($213)];
      var $215=(($214)&255);
      var $216=$215 & 3;
      var $217=(($216)|0)!=0;
      if ($217) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $219=$2;
      var $220=$n;
      var $221=(($220+12)|0);
      var $222=$221;
      var $223=(($222)|0);
      var $224=$223;
      var $225=HEAP32[(($224)>>2)];
      _reallymarkobject($219, $225);
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      var $228=$weakvalue;
      var $229=(($228)|0)!=0;
      if ($229) { __label__ = 43; break; } else { __label__ = 39; break; }
    case 39: 
      var $231=$n;
      var $232=(($231)|0);
      var $233=(($232+8)|0);
      var $234=HEAP32[(($233)>>2)];
      var $235=(($234)|0) >= 4;
      if ($235) { __label__ = 40; break; } else { __label__ = 42; break; }
    case 40: 
      var $237=$n;
      var $238=(($237)|0);
      var $239=(($238)|0);
      var $240=$239;
      var $241=HEAP32[(($240)>>2)];
      var $242=$241;
      var $243=(($242+5)|0);
      var $244=HEAPU8[($243)];
      var $245=(($244)&255);
      var $246=$245 & 3;
      var $247=(($246)|0)!=0;
      if ($247) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $249=$2;
      var $250=$n;
      var $251=(($250)|0);
      var $252=(($251)|0);
      var $253=$252;
      var $254=HEAP32[(($253)>>2)];
      _reallymarkobject($249, $254);
      __label__ = 42; break;
    case 42: 
      __label__ = 43; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      __label__ = 30; break;
    case 45: 
      var $259=$weakkey;
      var $260=(($259)|0)!=0;
      if ($260) { var $265 = 1;__label__ = 47; break; } else { __label__ = 46; break; }
    case 46: 
      var $262=$weakvalue;
      var $263=(($262)|0)!=0;
      var $265 = $263;__label__ = 47; break;
    case 47: 
      var $265;
      var $266=(($265)&1);
      $1=$266;
      __label__ = 48; break;
    case 48: 
      var $268=$1;
      ;
      return $268;
    default: assert(0, "bad label: " + __label__);
  }
}
_traversetable["X"]=1;

function _traverseclosure($g, $cl) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $i1;
      $1=$g;
      $2=$cl;
      var $3=$2;
      var $4=$3;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      var $8=$7;
      var $9=(($8+5)|0);
      var $10=HEAPU8[($9)];
      var $11=(($10)&255);
      var $12=$11 & 3;
      var $13=(($12)|0)!=0;
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $15=$1;
      var $16=$2;
      var $17=$16;
      var $18=(($17+12)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      _reallymarkobject($15, $20);
      __label__ = 4; break;
    case 4: 
      var $22=$2;
      var $23=$22;
      var $24=(($23+6)|0);
      var $25=HEAP8[($24)];
      var $26=(($25 << 24) >> 24)!=0;
      if ($26) { __label__ = 5; break; } else { __label__ = 13; break; }
    case 5: 
      $i=0;
      __label__ = 6; break;
    case 6: 
      var $29=$i;
      var $30=$2;
      var $31=$30;
      var $32=(($31+7)|0);
      var $33=HEAPU8[($32)];
      var $34=(($33)&255);
      var $35=(($29)|0) < (($34)|0);
      if ($35) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      var $37=$i;
      var $38=$2;
      var $39=$38;
      var $40=(($39+20)|0);
      var $41=(($40+($37)*(12))|0);
      var $42=(($41+8)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43)|0) >= 4;
      if ($44) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $46=$i;
      var $47=$2;
      var $48=$47;
      var $49=(($48+20)|0);
      var $50=(($49+($46)*(12))|0);
      var $51=(($50)|0);
      var $52=$51;
      var $53=HEAP32[(($52)>>2)];
      var $54=$53;
      var $55=(($54+5)|0);
      var $56=HEAPU8[($55)];
      var $57=(($56)&255);
      var $58=$57 & 3;
      var $59=(($58)|0)!=0;
      if ($59) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $61=$1;
      var $62=$i;
      var $63=$2;
      var $64=$63;
      var $65=(($64+20)|0);
      var $66=(($65+($62)*(12))|0);
      var $67=(($66)|0);
      var $68=$67;
      var $69=HEAP32[(($68)>>2)];
      _reallymarkobject($61, $69);
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $72=$i;
      var $73=((($72)+(1))|0);
      $i=$73;
      __label__ = 6; break;
    case 12: 
      __label__ = 22; break;
    case 13: 
      var $76=$2;
      var $77=$76;
      var $78=(($77+16)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$79;
      var $81=$80;
      var $82=(($81+5)|0);
      var $83=HEAPU8[($82)];
      var $84=(($83)&255);
      var $85=$84 & 3;
      var $86=(($85)|0)!=0;
      if ($86) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $88=$1;
      var $89=$2;
      var $90=$89;
      var $91=(($90+16)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=$92;
      _reallymarkobject($88, $93);
      __label__ = 15; break;
    case 15: 
      $i1=0;
      __label__ = 16; break;
    case 16: 
      var $96=$i1;
      var $97=$2;
      var $98=$97;
      var $99=(($98+7)|0);
      var $100=HEAPU8[($99)];
      var $101=(($100)&255);
      var $102=(($96)|0) < (($101)|0);
      if ($102) { __label__ = 17; break; } else { __label__ = 21; break; }
    case 17: 
      var $104=$i1;
      var $105=$2;
      var $106=$105;
      var $107=(($106+20)|0);
      var $108=(($107+($104<<2))|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$109;
      var $111=$110;
      var $112=(($111+5)|0);
      var $113=HEAPU8[($112)];
      var $114=(($113)&255);
      var $115=$114 & 3;
      var $116=(($115)|0)!=0;
      if ($116) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $118=$1;
      var $119=$i1;
      var $120=$2;
      var $121=$120;
      var $122=(($121+20)|0);
      var $123=(($122+($119<<2))|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=$124;
      _reallymarkobject($118, $125);
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $128=$i1;
      var $129=((($128)+(1))|0);
      $i1=$129;
      __label__ = 16; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_traverseclosure["X"]=1;

function _traversestack($g, $l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      var $lim;
      var $ci;
      $1=$g;
      $2=$l;
      var $3=$2;
      var $4=(($3+72)|0);
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0) >= 4;
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $9=$2;
      var $10=(($9+72)|0);
      var $11=(($10)|0);
      var $12=$11;
      var $13=HEAP32[(($12)>>2)];
      var $14=$13;
      var $15=(($14+5)|0);
      var $16=HEAPU8[($15)];
      var $17=(($16)&255);
      var $18=$17 & 3;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $21=$1;
      var $22=$2;
      var $23=(($22+72)|0);
      var $24=(($23)|0);
      var $25=$24;
      var $26=HEAP32[(($25)>>2)];
      _reallymarkobject($21, $26);
      __label__ = 5; break;
    case 5: 
      var $28=$2;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      $lim=$30;
      var $31=$2;
      var $32=(($31+40)|0);
      var $33=HEAP32[(($32)>>2)];
      $ci=$33;
      __label__ = 6; break;
    case 6: 
      var $35=$ci;
      var $36=$2;
      var $37=(($36+20)|0);
      var $38=HEAPU32[(($37)>>2)];
      var $39=(($35)>>>0) <= (($38)>>>0);
      if ($39) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $41=$lim;
      var $42=$ci;
      var $43=(($42+8)|0);
      var $44=HEAPU32[(($43)>>2)];
      var $45=(($41)>>>0) < (($44)>>>0);
      if ($45) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $47=$ci;
      var $48=(($47+8)|0);
      var $49=HEAP32[(($48)>>2)];
      $lim=$49;
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $52=$ci;
      var $53=(($52+24)|0);
      $ci=$53;
      __label__ = 6; break;
    case 11: 
      var $55=$2;
      var $56=(($55+32)|0);
      var $57=HEAP32[(($56)>>2)];
      $o=$57;
      __label__ = 12; break;
    case 12: 
      var $59=$o;
      var $60=$2;
      var $61=(($60+8)|0);
      var $62=HEAPU32[(($61)>>2)];
      var $63=(($59)>>>0) < (($62)>>>0);
      if ($63) { __label__ = 13; break; } else { __label__ = 18; break; }
    case 13: 
      var $65=$o;
      var $66=(($65+8)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67)|0) >= 4;
      if ($68) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $70=$o;
      var $71=(($70)|0);
      var $72=$71;
      var $73=HEAP32[(($72)>>2)];
      var $74=$73;
      var $75=(($74+5)|0);
      var $76=HEAPU8[($75)];
      var $77=(($76)&255);
      var $78=$77 & 3;
      var $79=(($78)|0)!=0;
      if ($79) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $81=$1;
      var $82=$o;
      var $83=(($82)|0);
      var $84=$83;
      var $85=HEAP32[(($84)>>2)];
      _reallymarkobject($81, $85);
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $88=$o;
      var $89=(($88+12)|0);
      $o=$89;
      __label__ = 12; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $92=$o;
      var $93=$lim;
      var $94=(($92)>>>0) <= (($93)>>>0);
      if ($94) { __label__ = 20; break; } else { __label__ = 22; break; }
    case 20: 
      var $96=$o;
      var $97=(($96+8)|0);
      HEAP32[(($97)>>2)]=0;
      __label__ = 21; break;
    case 21: 
      var $99=$o;
      var $100=(($99+12)|0);
      $o=$100;
      __label__ = 19; break;
    case 22: 
      var $102=$2;
      var $103=$lim;
      _checkstacksizes($102, $103);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_traversestack["X"]=1;

function _traverseproto($g, $f) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      $1=$g;
      $2=$f;
      var $3=$2;
      var $4=(($3+32)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$2;
      var $9=(($8+32)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      var $12=(($11+5)|0);
      var $13=HEAPU8[($12)];
      var $14=(($13)&255);
      var $15=$14 & 252;
      var $16=(($15) & 255);
      HEAP8[($12)]=$16;
      __label__ = 4; break;
    case 4: 
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $19=$i;
      var $20=$2;
      var $21=(($20+40)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($19)|0) < (($22)|0);
      if ($23) { __label__ = 6; break; } else { __label__ = 11; break; }
    case 6: 
      var $25=$i;
      var $26=$2;
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+($25)*(12))|0);
      var $30=(($29+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31)|0) >= 4;
      if ($32) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $34=$i;
      var $35=$2;
      var $36=(($35+8)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+($34)*(12))|0);
      var $39=(($38)|0);
      var $40=$39;
      var $41=HEAP32[(($40)>>2)];
      var $42=$41;
      var $43=(($42+5)|0);
      var $44=HEAPU8[($43)];
      var $45=(($44)&255);
      var $46=$45 & 3;
      var $47=(($46)|0)!=0;
      if ($47) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $49=$1;
      var $50=$i;
      var $51=$2;
      var $52=(($51+8)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+($50)*(12))|0);
      var $55=(($54)|0);
      var $56=$55;
      var $57=HEAP32[(($56)>>2)];
      _reallymarkobject($49, $57);
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $60=$i;
      var $61=((($60)+(1))|0);
      $i=$61;
      __label__ = 5; break;
    case 11: 
      $i=0;
      __label__ = 12; break;
    case 12: 
      var $64=$i;
      var $65=$2;
      var $66=(($65+36)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($64)|0) < (($67)|0);
      if ($68) { __label__ = 13; break; } else { __label__ = 17; break; }
    case 13: 
      var $70=$i;
      var $71=$2;
      var $72=(($71+28)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+($70<<2))|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75)|0)!=0;
      if ($76) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $78=$i;
      var $79=$2;
      var $80=(($79+28)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81+($78<<2))|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$83;
      var $85=(($84+5)|0);
      var $86=HEAPU8[($85)];
      var $87=(($86)&255);
      var $88=$87 & 252;
      var $89=(($88) & 255);
      HEAP8[($85)]=$89;
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $92=$i;
      var $93=((($92)+(1))|0);
      $i=$93;
      __label__ = 12; break;
    case 17: 
      $i=0;
      __label__ = 18; break;
    case 18: 
      var $96=$i;
      var $97=$2;
      var $98=(($97+52)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($96)|0) < (($99)|0);
      if ($100) { __label__ = 19; break; } else { __label__ = 25; break; }
    case 19: 
      var $102=$i;
      var $103=$2;
      var $104=(($103+16)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105+($102<<2))|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($107)|0)!=0;
      if ($108) { __label__ = 20; break; } else { __label__ = 23; break; }
    case 20: 
      var $110=$i;
      var $111=$2;
      var $112=(($111+16)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113+($110<<2))|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$115;
      var $117=$116;
      var $118=(($117+5)|0);
      var $119=HEAPU8[($118)];
      var $120=(($119)&255);
      var $121=$120 & 3;
      var $122=(($121)|0)!=0;
      if ($122) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $124=$1;
      var $125=$i;
      var $126=$2;
      var $127=(($126+16)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=(($128+($125<<2))|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=$130;
      _reallymarkobject($124, $131);
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $135=$i;
      var $136=((($135)+(1))|0);
      $i=$136;
      __label__ = 18; break;
    case 25: 
      $i=0;
      __label__ = 26; break;
    case 26: 
      var $139=$i;
      var $140=$2;
      var $141=(($140+56)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=(($139)|0) < (($142)|0);
      if ($143) { __label__ = 27; break; } else { __label__ = 31; break; }
    case 27: 
      var $145=$i;
      var $146=$2;
      var $147=(($146+24)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=(($148+($145)*(12))|0);
      var $150=(($149)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=(($151)|0)!=0;
      if ($152) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $154=$i;
      var $155=$2;
      var $156=(($155+24)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=(($157+($154)*(12))|0);
      var $159=(($158)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=$160;
      var $162=(($161+5)|0);
      var $163=HEAPU8[($162)];
      var $164=(($163)&255);
      var $165=$164 & 252;
      var $166=(($165) & 255);
      HEAP8[($162)]=$166;
      __label__ = 29; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      var $169=$i;
      var $170=((($169)+(1))|0);
      $i=$170;
      __label__ = 26; break;
    case 31: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_traverseproto["X"]=1;

function _checkstacksizes($L, $max) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $ci_used;
      var $s_used;
      $1=$L;
      $2=$max;
      var $3=$1;
      var $4=(($3+20)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$1;
      var $7=(($6+40)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$5;
      var $10=$8;
      var $11=((($9)-($10))|0);
      var $12=((((($11)|0))/(24))&-1);
      $ci_used=$12;
      var $13=$2;
      var $14=$1;
      var $15=(($14+32)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$13;
      var $18=$16;
      var $19=((($17)-($18))|0);
      var $20=((((($19)|0))/(12))&-1);
      $s_used=$20;
      var $21=$1;
      var $22=(($21+48)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|0) > 20000;
      if ($24) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 10; break;
    case 4: 
      var $27=$ci_used;
      var $28=((($27<<2))|0);
      var $29=$1;
      var $30=(($29+48)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($28)|0) < (($31)|0);
      if ($32) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $34=$1;
      var $35=(($34+48)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=16 < (($36)|0);
      if ($37) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $39=$1;
      var $40=$1;
      var $41=(($40+48)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=((((($42)|0))/(2))&-1);
      _luaD_reallocCI($39, $43);
      __label__ = 7; break;
    case 7: 
      var $45=$s_used;
      var $46=((($45<<2))|0);
      var $47=$1;
      var $48=(($47+44)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($46)|0) < (($49)|0);
      if ($50) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $52=$1;
      var $53=(($52+44)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=90 < (($54)|0);
      if ($55) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $57=$1;
      var $58=$1;
      var $59=(($58+44)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=((((($60)|0))/(2))&-1);
      _luaD_reallocstack($57, $61);
      __label__ = 10; break;
    case 10: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_checkstacksizes["X"]=1;

function _freeobj($L, $o) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$o;
      var $3=$2;
      var $4=$3;
      var $5=(($4+4)|0);
      var $6=HEAPU8[($5)];
      var $7=(($6)&255);
      if ((($7)|0) == 9) {
        __label__ = 3; break;
      }
      else if ((($7)|0) == 6) {
        __label__ = 4; break;
      }
      else if ((($7)|0) == 10) {
        __label__ = 5; break;
      }
      else if ((($7)|0) == 5) {
        __label__ = 6; break;
      }
      else if ((($7)|0) == 8) {
        __label__ = 7; break;
      }
      else if ((($7)|0) == 4) {
        __label__ = 8; break;
      }
      else if ((($7)|0) == 7) {
        __label__ = 9; break;
      }
      else {
      __label__ = 10; break;
      }
      
    case 3: 
      var $9=$1;
      var $10=$2;
      var $11=$10;
      _luaF_freeproto($9, $11);
      __label__ = 11; break;
    case 4: 
      var $13=$1;
      var $14=$2;
      var $15=$14;
      _luaF_freeclosure($13, $15);
      __label__ = 11; break;
    case 5: 
      var $17=$1;
      var $18=$2;
      var $19=$18;
      _luaF_freeupval($17, $19);
      __label__ = 11; break;
    case 6: 
      var $21=$1;
      var $22=$2;
      var $23=$22;
      _luaH_free($21, $23);
      __label__ = 11; break;
    case 7: 
      var $25=$1;
      var $26=$2;
      var $27=$26;
      _luaE_freethread($25, $27);
      __label__ = 11; break;
    case 8: 
      var $29=$1;
      var $30=(($29+16)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31)|0);
      var $33=(($32+4)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=((($34)-(1))|0);
      HEAP32[(($33)>>2)]=$35;
      var $36=$1;
      var $37=$2;
      var $38=$37;
      var $39=$2;
      var $40=$39;
      var $41=$40;
      var $42=(($41+12)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=((($43)+(1))|0);
      var $45=(($44)|0);
      var $46=((($45)+(16))|0);
      var $47=_luaM_realloc_($36, $38, $46, 0);
      __label__ = 11; break;
    case 9: 
      var $49=$1;
      var $50=$2;
      var $51=$50;
      var $52=$2;
      var $53=$52;
      var $54=$53;
      var $55=(($54+16)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=((($56)+(20))|0);
      var $58=_luaM_realloc_($49, $51, $57, 0);
      __label__ = 11; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_freeobj["X"]=1;

function _luaX_init($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $i;
      var $ts;
      $1=$L;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $3=$i;
      var $4=(($3)|0) < 21;
      if ($4) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $6=$1;
      var $7=$i;
      var $8=((_luaX_tokens+($7<<2))|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$i;
      var $11=((_luaX_tokens+($10<<2))|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=_strlen($12);
      var $14=_luaS_newlstr($6, $9, $13);
      $ts=$14;
      var $15=$ts;
      var $16=$15;
      var $17=(($16+5)|0);
      var $18=HEAPU8[($17)];
      var $19=(($18)&255);
      var $20=$19 | 32;
      var $21=(($20) & 255);
      HEAP8[($17)]=$21;
      var $22=$i;
      var $23=((($22)+(1))|0);
      var $24=(($23) & 255);
      var $25=$ts;
      var $26=$25;
      var $27=(($26+6)|0);
      HEAP8[($27)]=$24;
      __label__ = 5; break;
    case 5: 
      var $29=$i;
      var $30=((($29)+(1))|0);
      $i=$30;
      __label__ = 3; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaX_token2str($ls, $token) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ls;
      $3=$token;
      var $4=$3;
      var $5=(($4)|0) < 257;
      if ($5) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $7=$3;
      var $8=_iscntrl($7);
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $11=$2;
      var $12=(($11+40)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$3;
      var $15=_luaO_pushfstring($13, ((STRING_TABLE.__str31428)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$14,tempInt));
      var $23 = $15;__label__ = 6; break;
    case 5: 
      var $17=$2;
      var $18=(($17+40)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$3;
      var $21=_luaO_pushfstring($19, ((STRING_TABLE.__str32429)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$20,tempInt));
      var $23 = $21;__label__ = 6; break;
    case 6: 
      var $23;
      $1=$23;
      __label__ = 8; break;
    case 7: 
      var $25=$3;
      var $26=((($25)-(257))|0);
      var $27=((_luaX_tokens+($26<<2))|0);
      var $28=HEAP32[(($27)>>2)];
      $1=$28;
      __label__ = 8; break;
    case 8: 
      var $30=$1;
      STACKTOP = __stackBase__;
      return $30;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaX_lexerror($ls, $msg, $token) {
  var __stackBase__  = STACKTOP; STACKTOP += 80; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $buff=__stackBase__;
      $1=$ls;
      $2=$msg;
      $3=$token;
      var $4=(($buff)|0);
      var $5=$1;
      var $6=(($5+52)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7+16)|0);
      var $9=$8;
      _luaO_chunkid($4, $9, 80);
      var $10=$1;
      var $11=(($10+40)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($buff)|0);
      var $14=$1;
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$2;
      var $18=_luaO_pushfstring($12, ((STRING_TABLE.__str33430)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$13,HEAP32[(((tempInt)+(4))>>2)]=$16,HEAP32[(((tempInt)+(8))>>2)]=$17,tempInt));
      $2=$18;
      var $19=$3;
      var $20=(($19)|0)!=0;
      if ($20) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $22=$1;
      var $23=(($22+40)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$2;
      var $26=$1;
      var $27=$3;
      var $28=_txtToken($26, $27);
      var $29=_luaO_pushfstring($24, ((STRING_TABLE.__str34431)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$25,HEAP32[(((tempInt)+(4))>>2)]=$28,tempInt));
      __label__ = 4; break;
    case 4: 
      var $31=$1;
      var $32=(($31+40)|0);
      var $33=HEAP32[(($32)>>2)];
      _luaD_throw($33, 3);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _txtToken($ls, $token) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ls;
      $3=$token;
      var $4=$3;
      if ((($4)|0) == 285 || (($4)|0) == 286 || (($4)|0) == 284) {
        __label__ = 3; break;
      }
      else {
      __label__ = 4; break;
      }
      
    case 3: 
      var $6=$2;
      _save($6, 0);
      var $7=$2;
      var $8=(($7+48)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      $1=$11;
      __label__ = 5; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15=_luaX_token2str($13, $14);
      $1=$15;
      __label__ = 5; break;
    case 5: 
      var $17=$1;
      ;
      return $17;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaX_syntaxerror($ls, $msg) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ls;
  $2=$msg;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+12)|0);
  var $7=(($6)|0);
  var $8=HEAP32[(($7)>>2)];
  _luaX_lexerror($3, $4, $8);
  ;
  return;
}


function _luaX_newstring($ls, $str, $l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $L;
      var $ts;
      var $o;
      var $i_o;
      $1=$ls;
      $2=$str;
      $3=$l;
      var $4=$1;
      var $5=(($4+40)|0);
      var $6=HEAP32[(($5)>>2)];
      $L=$6;
      var $7=$L;
      var $8=$2;
      var $9=$3;
      var $10=_luaS_newlstr($7, $8, $9);
      $ts=$10;
      var $11=$L;
      var $12=$1;
      var $13=(($12+36)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$ts;
      var $18=_luaH_setstr($11, $16, $17);
      $o=$18;
      var $19=$o;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|0)==0;
      if ($22) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $24=$o;
      $i_o=$24;
      var $25=$i_o;
      var $26=(($25)|0);
      var $27=$26;
      HEAP32[(($27)>>2)]=1;
      var $28=$i_o;
      var $29=(($28+8)|0);
      HEAP32[(($29)>>2)]=1;
      var $30=$L;
      var $31=(($30+16)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+68)|0);
      var $34=HEAPU32[(($33)>>2)];
      var $35=$L;
      var $36=(($35+16)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+64)|0);
      var $39=HEAPU32[(($38)>>2)];
      var $40=(($34)>>>0) >= (($39)>>>0);
      if ($40) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $42=$L;
      _luaC_step($42);
      __label__ = 5; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $45=$ts;
      ;
      return $45;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaX_newstring["X"]=1;

function _luaX_setinput($L, $ls, $z, $source) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$L;
      $2=$ls;
      $3=$z;
      $4=$source;
      var $5=$2;
      var $6=(($5+56)|0);
      HEAP8[($6)]=46;
      var $7=$1;
      var $8=$2;
      var $9=(($8+40)|0);
      HEAP32[(($9)>>2)]=$7;
      var $10=$2;
      var $11=(($10+24)|0);
      var $12=(($11)|0);
      HEAP32[(($12)>>2)]=287;
      var $13=$3;
      var $14=$2;
      var $15=(($14+44)|0);
      HEAP32[(($15)>>2)]=$13;
      var $16=$2;
      var $17=(($16+36)|0);
      HEAP32[(($17)>>2)]=0;
      var $18=$2;
      var $19=(($18+4)|0);
      HEAP32[(($19)>>2)]=1;
      var $20=$2;
      var $21=(($20+8)|0);
      HEAP32[(($21)>>2)]=1;
      var $22=$4;
      var $23=$2;
      var $24=(($23+52)|0);
      HEAP32[(($24)>>2)]=$22;
      var $25=$2;
      var $26=(($25+40)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$2;
      var $29=(($28+48)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$2;
      var $34=(($33+48)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+8)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|0);
      var $39=_luaM_realloc_($27, $32, $38, 32);
      var $40=$2;
      var $41=(($40+48)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42)|0);
      HEAP32[(($43)>>2)]=$39;
      var $44=$2;
      var $45=(($44+48)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+8)|0);
      HEAP32[(($47)>>2)]=32;
      var $48=$2;
      var $49=(($48+44)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50)|0);
      var $52=HEAPU32[(($51)>>2)];
      var $53=((($52)-(1))|0);
      HEAP32[(($51)>>2)]=$53;
      var $54=(($52)>>>0) > 0;
      if ($54) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $56=$2;
      var $57=(($56+44)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+1)|0);
      HEAP32[(($59)>>2)]=$61;
      var $62=HEAPU8[($60)];
      var $63=(($62)&255);
      var $70 = $63;__label__ = 5; break;
    case 4: 
      var $65=$2;
      var $66=(($65+44)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=_luaZ_fill($67);
      var $70 = $68;__label__ = 5; break;
    case 5: 
      var $70;
      var $71=$2;
      var $72=(($71)|0);
      HEAP32[(($72)>>2)]=$70;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaX_setinput["X"]=1;

function _luaX_next($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$ls;
      var $2=$1;
      var $3=(($2+4)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=$1;
      var $6=(($5+8)|0);
      HEAP32[(($6)>>2)]=$4;
      var $7=$1;
      var $8=(($7+24)|0);
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0)!=287;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$1;
      var $14=(($13+12)|0);
      var $15=$1;
      var $16=(($15+24)|0);
      var $17=$14;
      var $18=$16;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      var $19=$1;
      var $20=(($19+24)|0);
      var $21=(($20)|0);
      HEAP32[(($21)>>2)]=287;
      __label__ = 5; break;
    case 4: 
      var $23=$1;
      var $24=$1;
      var $25=(($24+12)|0);
      var $26=(($25+4)|0);
      var $27=_llex($23, $26);
      var $28=$1;
      var $29=(($28+12)|0);
      var $30=(($29)|0);
      HEAP32[(($30)>>2)]=$27;
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _llex($ls, $seminfo) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $sep;
      var $sep1;
      var $ts;
      var $c;
      $2=$ls;
      $3=$seminfo;
      var $4=$2;
      var $5=(($4+48)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+4)|0);
      HEAP32[(($7)>>2)]=0;
      __label__ = 3; break;
    case 3: 
      var $9=$2;
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      if ((($11)|0) == 10 || (($11)|0) == 13) {
        __label__ = 4; break;
      }
      else if ((($11)|0) == 45) {
        __label__ = 5; break;
      }
      else if ((($11)|0) == 91) {
        __label__ = 27; break;
      }
      else if ((($11)|0) == 61) {
        __label__ = 34; break;
      }
      else if ((($11)|0) == 60) {
        __label__ = 43; break;
      }
      else if ((($11)|0) == 62) {
        __label__ = 52; break;
      }
      else if ((($11)|0) == 126) {
        __label__ = 61; break;
      }
      else if ((($11)|0) == 34 || (($11)|0) == 39) {
        __label__ = 70; break;
      }
      else if ((($11)|0) == 46) {
        __label__ = 71; break;
      }
      else if ((($11)|0) == -1) {
        __label__ = 81; break;
      }
      else {
      __label__ = 82; break;
      }
      
    case 4: 
      var $13=$2;
      _inclinenumber($13);
      __label__ = 3; break;
    case 5: 
      var $15=$2;
      var $16=(($15+44)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|0);
      var $19=HEAPU32[(($18)>>2)];
      var $20=((($19)-(1))|0);
      HEAP32[(($18)>>2)]=$20;
      var $21=(($19)>>>0) > 0;
      if ($21) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $23=$2;
      var $24=(($23+44)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+1)|0);
      HEAP32[(($26)>>2)]=$28;
      var $29=HEAPU8[($27)];
      var $30=(($29)&255);
      var $37 = $30;__label__ = 8; break;
    case 7: 
      var $32=$2;
      var $33=(($32+44)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=_luaZ_fill($34);
      var $37 = $35;__label__ = 8; break;
    case 8: 
      var $37;
      var $38=$2;
      var $39=(($38)|0);
      HEAP32[(($39)>>2)]=$37;
      var $40=$2;
      var $41=(($40)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42)|0)!=45;
      if ($43) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $1=45;
      __label__ = 106; break;
    case 10: 
      var $46=$2;
      var $47=(($46+44)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48)|0);
      var $50=HEAPU32[(($49)>>2)];
      var $51=((($50)-(1))|0);
      HEAP32[(($49)>>2)]=$51;
      var $52=(($50)>>>0) > 0;
      if ($52) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $54=$2;
      var $55=(($54+44)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+4)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+1)|0);
      HEAP32[(($57)>>2)]=$59;
      var $60=HEAPU8[($58)];
      var $61=(($60)&255);
      var $68 = $61;__label__ = 13; break;
    case 12: 
      var $63=$2;
      var $64=(($63+44)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=_luaZ_fill($65);
      var $68 = $66;__label__ = 13; break;
    case 13: 
      var $68;
      var $69=$2;
      var $70=(($69)|0);
      HEAP32[(($70)>>2)]=$68;
      var $71=$2;
      var $72=(($71)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73)|0)==91;
      if ($74) { __label__ = 14; break; } else { __label__ = 17; break; }
    case 14: 
      var $76=$2;
      var $77=_skip_sep($76);
      $sep=$77;
      var $78=$2;
      var $79=(($78+48)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80+4)|0);
      HEAP32[(($81)>>2)]=0;
      var $82=$sep;
      var $83=(($82)|0) >= 0;
      if ($83) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $85=$2;
      var $86=$sep;
      _read_long_string($85, 0, $86);
      var $87=$2;
      var $88=(($87+48)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+4)|0);
      HEAP32[(($90)>>2)]=0;
      __label__ = 3; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $94=$2;
      var $95=(($94)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96)|0)==10;
      if ($97) { var $109 = 0;__label__ = 21; break; } else { __label__ = 19; break; }
    case 19: 
      var $99=$2;
      var $100=(($99)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($101)|0)==13;
      if ($102) { var $109 = 0;__label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      var $104=$2;
      var $105=(($104)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106)|0)!=-1;
      var $109 = $107;__label__ = 21; break;
    case 21: 
      var $109;
      if ($109) { __label__ = 22; break; } else { __label__ = 26; break; }
    case 22: 
      var $111=$2;
      var $112=(($111+44)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113)|0);
      var $115=HEAPU32[(($114)>>2)];
      var $116=((($115)-(1))|0);
      HEAP32[(($114)>>2)]=$116;
      var $117=(($115)>>>0) > 0;
      if ($117) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $119=$2;
      var $120=(($119+44)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=(($121+4)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+1)|0);
      HEAP32[(($122)>>2)]=$124;
      var $125=HEAPU8[($123)];
      var $126=(($125)&255);
      var $133 = $126;__label__ = 25; break;
    case 24: 
      var $128=$2;
      var $129=(($128+44)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=_luaZ_fill($130);
      var $133 = $131;__label__ = 25; break;
    case 25: 
      var $133;
      var $134=$2;
      var $135=(($134)|0);
      HEAP32[(($135)>>2)]=$133;
      __label__ = 18; break;
    case 26: 
      __label__ = 3; break;
    case 27: 
      var $138=$2;
      var $139=_skip_sep($138);
      $sep1=$139;
      var $140=$sep1;
      var $141=(($140)|0) >= 0;
      if ($141) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $143=$2;
      var $144=$3;
      var $145=$sep1;
      _read_long_string($143, $144, $145);
      $1=286;
      __label__ = 106; break;
    case 29: 
      var $147=$sep1;
      var $148=(($147)|0)==-1;
      if ($148) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      $1=91;
      __label__ = 106; break;
    case 31: 
      var $151=$2;
      _luaX_lexerror($151, ((STRING_TABLE.__str35432)|0), 286);
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      var $155=$2;
      var $156=(($155+44)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=(($157)|0);
      var $159=HEAPU32[(($158)>>2)];
      var $160=((($159)-(1))|0);
      HEAP32[(($158)>>2)]=$160;
      var $161=(($159)>>>0) > 0;
      if ($161) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $163=$2;
      var $164=(($163+44)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=(($165+4)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=(($167+1)|0);
      HEAP32[(($166)>>2)]=$168;
      var $169=HEAPU8[($167)];
      var $170=(($169)&255);
      var $177 = $170;__label__ = 37; break;
    case 36: 
      var $172=$2;
      var $173=(($172+44)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=_luaZ_fill($174);
      var $177 = $175;__label__ = 37; break;
    case 37: 
      var $177;
      var $178=$2;
      var $179=(($178)|0);
      HEAP32[(($179)>>2)]=$177;
      var $180=$2;
      var $181=(($180)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=(($182)|0)!=61;
      if ($183) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      $1=61;
      __label__ = 106; break;
    case 39: 
      var $186=$2;
      var $187=(($186+44)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=(($188)|0);
      var $190=HEAPU32[(($189)>>2)];
      var $191=((($190)-(1))|0);
      HEAP32[(($189)>>2)]=$191;
      var $192=(($190)>>>0) > 0;
      if ($192) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      var $194=$2;
      var $195=(($194+44)|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=(($196+4)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=(($198+1)|0);
      HEAP32[(($197)>>2)]=$199;
      var $200=HEAPU8[($198)];
      var $201=(($200)&255);
      var $208 = $201;__label__ = 42; break;
    case 41: 
      var $203=$2;
      var $204=(($203+44)|0);
      var $205=HEAP32[(($204)>>2)];
      var $206=_luaZ_fill($205);
      var $208 = $206;__label__ = 42; break;
    case 42: 
      var $208;
      var $209=$2;
      var $210=(($209)|0);
      HEAP32[(($210)>>2)]=$208;
      $1=280;
      __label__ = 106; break;
    case 43: 
      var $212=$2;
      var $213=(($212+44)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=(($214)|0);
      var $216=HEAPU32[(($215)>>2)];
      var $217=((($216)-(1))|0);
      HEAP32[(($215)>>2)]=$217;
      var $218=(($216)>>>0) > 0;
      if ($218) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $220=$2;
      var $221=(($220+44)|0);
      var $222=HEAP32[(($221)>>2)];
      var $223=(($222+4)|0);
      var $224=HEAP32[(($223)>>2)];
      var $225=(($224+1)|0);
      HEAP32[(($223)>>2)]=$225;
      var $226=HEAPU8[($224)];
      var $227=(($226)&255);
      var $234 = $227;__label__ = 46; break;
    case 45: 
      var $229=$2;
      var $230=(($229+44)|0);
      var $231=HEAP32[(($230)>>2)];
      var $232=_luaZ_fill($231);
      var $234 = $232;__label__ = 46; break;
    case 46: 
      var $234;
      var $235=$2;
      var $236=(($235)|0);
      HEAP32[(($236)>>2)]=$234;
      var $237=$2;
      var $238=(($237)|0);
      var $239=HEAP32[(($238)>>2)];
      var $240=(($239)|0)!=61;
      if ($240) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      $1=60;
      __label__ = 106; break;
    case 48: 
      var $243=$2;
      var $244=(($243+44)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=(($245)|0);
      var $247=HEAPU32[(($246)>>2)];
      var $248=((($247)-(1))|0);
      HEAP32[(($246)>>2)]=$248;
      var $249=(($247)>>>0) > 0;
      if ($249) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $251=$2;
      var $252=(($251+44)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=(($253+4)|0);
      var $255=HEAP32[(($254)>>2)];
      var $256=(($255+1)|0);
      HEAP32[(($254)>>2)]=$256;
      var $257=HEAPU8[($255)];
      var $258=(($257)&255);
      var $265 = $258;__label__ = 51; break;
    case 50: 
      var $260=$2;
      var $261=(($260+44)|0);
      var $262=HEAP32[(($261)>>2)];
      var $263=_luaZ_fill($262);
      var $265 = $263;__label__ = 51; break;
    case 51: 
      var $265;
      var $266=$2;
      var $267=(($266)|0);
      HEAP32[(($267)>>2)]=$265;
      $1=282;
      __label__ = 106; break;
    case 52: 
      var $269=$2;
      var $270=(($269+44)|0);
      var $271=HEAP32[(($270)>>2)];
      var $272=(($271)|0);
      var $273=HEAPU32[(($272)>>2)];
      var $274=((($273)-(1))|0);
      HEAP32[(($272)>>2)]=$274;
      var $275=(($273)>>>0) > 0;
      if ($275) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $277=$2;
      var $278=(($277+44)|0);
      var $279=HEAP32[(($278)>>2)];
      var $280=(($279+4)|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=(($281+1)|0);
      HEAP32[(($280)>>2)]=$282;
      var $283=HEAPU8[($281)];
      var $284=(($283)&255);
      var $291 = $284;__label__ = 55; break;
    case 54: 
      var $286=$2;
      var $287=(($286+44)|0);
      var $288=HEAP32[(($287)>>2)];
      var $289=_luaZ_fill($288);
      var $291 = $289;__label__ = 55; break;
    case 55: 
      var $291;
      var $292=$2;
      var $293=(($292)|0);
      HEAP32[(($293)>>2)]=$291;
      var $294=$2;
      var $295=(($294)|0);
      var $296=HEAP32[(($295)>>2)];
      var $297=(($296)|0)!=61;
      if ($297) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      $1=62;
      __label__ = 106; break;
    case 57: 
      var $300=$2;
      var $301=(($300+44)|0);
      var $302=HEAP32[(($301)>>2)];
      var $303=(($302)|0);
      var $304=HEAPU32[(($303)>>2)];
      var $305=((($304)-(1))|0);
      HEAP32[(($303)>>2)]=$305;
      var $306=(($304)>>>0) > 0;
      if ($306) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: 
      var $308=$2;
      var $309=(($308+44)|0);
      var $310=HEAP32[(($309)>>2)];
      var $311=(($310+4)|0);
      var $312=HEAP32[(($311)>>2)];
      var $313=(($312+1)|0);
      HEAP32[(($311)>>2)]=$313;
      var $314=HEAPU8[($312)];
      var $315=(($314)&255);
      var $322 = $315;__label__ = 60; break;
    case 59: 
      var $317=$2;
      var $318=(($317+44)|0);
      var $319=HEAP32[(($318)>>2)];
      var $320=_luaZ_fill($319);
      var $322 = $320;__label__ = 60; break;
    case 60: 
      var $322;
      var $323=$2;
      var $324=(($323)|0);
      HEAP32[(($324)>>2)]=$322;
      $1=281;
      __label__ = 106; break;
    case 61: 
      var $326=$2;
      var $327=(($326+44)|0);
      var $328=HEAP32[(($327)>>2)];
      var $329=(($328)|0);
      var $330=HEAPU32[(($329)>>2)];
      var $331=((($330)-(1))|0);
      HEAP32[(($329)>>2)]=$331;
      var $332=(($330)>>>0) > 0;
      if ($332) { __label__ = 62; break; } else { __label__ = 63; break; }
    case 62: 
      var $334=$2;
      var $335=(($334+44)|0);
      var $336=HEAP32[(($335)>>2)];
      var $337=(($336+4)|0);
      var $338=HEAP32[(($337)>>2)];
      var $339=(($338+1)|0);
      HEAP32[(($337)>>2)]=$339;
      var $340=HEAPU8[($338)];
      var $341=(($340)&255);
      var $348 = $341;__label__ = 64; break;
    case 63: 
      var $343=$2;
      var $344=(($343+44)|0);
      var $345=HEAP32[(($344)>>2)];
      var $346=_luaZ_fill($345);
      var $348 = $346;__label__ = 64; break;
    case 64: 
      var $348;
      var $349=$2;
      var $350=(($349)|0);
      HEAP32[(($350)>>2)]=$348;
      var $351=$2;
      var $352=(($351)|0);
      var $353=HEAP32[(($352)>>2)];
      var $354=(($353)|0)!=61;
      if ($354) { __label__ = 65; break; } else { __label__ = 66; break; }
    case 65: 
      $1=126;
      __label__ = 106; break;
    case 66: 
      var $357=$2;
      var $358=(($357+44)|0);
      var $359=HEAP32[(($358)>>2)];
      var $360=(($359)|0);
      var $361=HEAPU32[(($360)>>2)];
      var $362=((($361)-(1))|0);
      HEAP32[(($360)>>2)]=$362;
      var $363=(($361)>>>0) > 0;
      if ($363) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: 
      var $365=$2;
      var $366=(($365+44)|0);
      var $367=HEAP32[(($366)>>2)];
      var $368=(($367+4)|0);
      var $369=HEAP32[(($368)>>2)];
      var $370=(($369+1)|0);
      HEAP32[(($368)>>2)]=$370;
      var $371=HEAPU8[($369)];
      var $372=(($371)&255);
      var $379 = $372;__label__ = 69; break;
    case 68: 
      var $374=$2;
      var $375=(($374+44)|0);
      var $376=HEAP32[(($375)>>2)];
      var $377=_luaZ_fill($376);
      var $379 = $377;__label__ = 69; break;
    case 69: 
      var $379;
      var $380=$2;
      var $381=(($380)|0);
      HEAP32[(($381)>>2)]=$379;
      $1=283;
      __label__ = 106; break;
    case 70: 
      var $383=$2;
      var $384=$2;
      var $385=(($384)|0);
      var $386=HEAP32[(($385)>>2)];
      var $387=$3;
      _read_string($383, $386, $387);
      $1=286;
      __label__ = 106; break;
    case 71: 
      var $389=$2;
      var $390=$2;
      var $391=(($390)|0);
      var $392=HEAP32[(($391)>>2)];
      _save($389, $392);
      var $393=$2;
      var $394=(($393+44)|0);
      var $395=HEAP32[(($394)>>2)];
      var $396=(($395)|0);
      var $397=HEAPU32[(($396)>>2)];
      var $398=((($397)-(1))|0);
      HEAP32[(($396)>>2)]=$398;
      var $399=(($397)>>>0) > 0;
      if ($399) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: 
      var $401=$2;
      var $402=(($401+44)|0);
      var $403=HEAP32[(($402)>>2)];
      var $404=(($403+4)|0);
      var $405=HEAP32[(($404)>>2)];
      var $406=(($405+1)|0);
      HEAP32[(($404)>>2)]=$406;
      var $407=HEAPU8[($405)];
      var $408=(($407)&255);
      var $415 = $408;__label__ = 74; break;
    case 73: 
      var $410=$2;
      var $411=(($410+44)|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=_luaZ_fill($412);
      var $415 = $413;__label__ = 74; break;
    case 74: 
      var $415;
      var $416=$2;
      var $417=(($416)|0);
      HEAP32[(($417)>>2)]=$415;
      var $418=$2;
      var $419=_check_next($418, ((STRING_TABLE.__str36433)|0));
      var $420=(($419)|0)!=0;
      if ($420) { __label__ = 75; break; } else { __label__ = 78; break; }
    case 75: 
      var $422=$2;
      var $423=_check_next($422, ((STRING_TABLE.__str36433)|0));
      var $424=(($423)|0)!=0;
      if ($424) { __label__ = 76; break; } else { __label__ = 77; break; }
    case 76: 
      $1=279;
      __label__ = 106; break;
    case 77: 
      $1=278;
      __label__ = 106; break;
    case 78: 
      var $428=$2;
      var $429=(($428)|0);
      var $430=HEAP32[(($429)>>2)];
      var $431=_isdigit($430);
      var $432=(($431)|0)!=0;
      if ($432) { __label__ = 80; break; } else { __label__ = 79; break; }
    case 79: 
      $1=46;
      __label__ = 106; break;
    case 80: 
      var $435=$2;
      var $436=$3;
      _read_numeral($435, $436);
      $1=284;
      __label__ = 106; break;
    case 81: 
      $1=287;
      __label__ = 106; break;
    case 82: 
      var $439=$2;
      var $440=(($439)|0);
      var $441=HEAP32[(($440)>>2)];
      var $442=_isspace($441);
      var $443=(($442)|0)!=0;
      if ($443) { __label__ = 83; break; } else { __label__ = 87; break; }
    case 83: 
      var $445=$2;
      var $446=(($445+44)|0);
      var $447=HEAP32[(($446)>>2)];
      var $448=(($447)|0);
      var $449=HEAPU32[(($448)>>2)];
      var $450=((($449)-(1))|0);
      HEAP32[(($448)>>2)]=$450;
      var $451=(($449)>>>0) > 0;
      if ($451) { __label__ = 84; break; } else { __label__ = 85; break; }
    case 84: 
      var $453=$2;
      var $454=(($453+44)|0);
      var $455=HEAP32[(($454)>>2)];
      var $456=(($455+4)|0);
      var $457=HEAP32[(($456)>>2)];
      var $458=(($457+1)|0);
      HEAP32[(($456)>>2)]=$458;
      var $459=HEAPU8[($457)];
      var $460=(($459)&255);
      var $467 = $460;__label__ = 86; break;
    case 85: 
      var $462=$2;
      var $463=(($462+44)|0);
      var $464=HEAP32[(($463)>>2)];
      var $465=_luaZ_fill($464);
      var $467 = $465;__label__ = 86; break;
    case 86: 
      var $467;
      var $468=$2;
      var $469=(($468)|0);
      HEAP32[(($469)>>2)]=$467;
      __label__ = 3; break;
    case 87: 
      var $471=$2;
      var $472=(($471)|0);
      var $473=HEAP32[(($472)>>2)];
      var $474=_isdigit($473);
      var $475=(($474)|0)!=0;
      if ($475) { __label__ = 88; break; } else { __label__ = 89; break; }
    case 88: 
      var $477=$2;
      var $478=$3;
      _read_numeral($477, $478);
      $1=284;
      __label__ = 106; break;
    case 89: 
      var $480=$2;
      var $481=(($480)|0);
      var $482=HEAP32[(($481)>>2)];
      var $483=_isalpha($482);
      var $484=(($483)|0)!=0;
      if ($484) { __label__ = 91; break; } else { __label__ = 90; break; }
    case 90: 
      var $486=$2;
      var $487=(($486)|0);
      var $488=HEAP32[(($487)>>2)];
      var $489=(($488)|0)==95;
      if ($489) { __label__ = 91; break; } else { __label__ = 102; break; }
    case 91: 
      __label__ = 92; break;
    case 92: 
      var $492=$2;
      var $493=$2;
      var $494=(($493)|0);
      var $495=HEAP32[(($494)>>2)];
      _save($492, $495);
      var $496=$2;
      var $497=(($496+44)|0);
      var $498=HEAP32[(($497)>>2)];
      var $499=(($498)|0);
      var $500=HEAPU32[(($499)>>2)];
      var $501=((($500)-(1))|0);
      HEAP32[(($499)>>2)]=$501;
      var $502=(($500)>>>0) > 0;
      if ($502) { __label__ = 93; break; } else { __label__ = 94; break; }
    case 93: 
      var $504=$2;
      var $505=(($504+44)|0);
      var $506=HEAP32[(($505)>>2)];
      var $507=(($506+4)|0);
      var $508=HEAP32[(($507)>>2)];
      var $509=(($508+1)|0);
      HEAP32[(($507)>>2)]=$509;
      var $510=HEAPU8[($508)];
      var $511=(($510)&255);
      var $518 = $511;__label__ = 95; break;
    case 94: 
      var $513=$2;
      var $514=(($513+44)|0);
      var $515=HEAP32[(($514)>>2)];
      var $516=_luaZ_fill($515);
      var $518 = $516;__label__ = 95; break;
    case 95: 
      var $518;
      var $519=$2;
      var $520=(($519)|0);
      HEAP32[(($520)>>2)]=$518;
      __label__ = 96; break;
    case 96: 
      var $522=$2;
      var $523=(($522)|0);
      var $524=HEAP32[(($523)>>2)];
      var $525=_isalnum($524);
      var $526=(($525)|0)!=0;
      if ($526) { var $533 = 1;__label__ = 98; break; } else { __label__ = 97; break; }
    case 97: 
      var $528=$2;
      var $529=(($528)|0);
      var $530=HEAP32[(($529)>>2)];
      var $531=(($530)|0)==95;
      var $533 = $531;__label__ = 98; break;
    case 98: 
      var $533;
      if ($533) { __label__ = 92; break; } else { __label__ = 99; break; }
    case 99: 
      var $535=$2;
      var $536=$2;
      var $537=(($536+48)|0);
      var $538=HEAP32[(($537)>>2)];
      var $539=(($538)|0);
      var $540=HEAP32[(($539)>>2)];
      var $541=$2;
      var $542=(($541+48)|0);
      var $543=HEAP32[(($542)>>2)];
      var $544=(($543+4)|0);
      var $545=HEAP32[(($544)>>2)];
      var $546=_luaX_newstring($535, $540, $545);
      $ts=$546;
      var $547=$ts;
      var $548=$547;
      var $549=(($548+6)|0);
      var $550=HEAPU8[($549)];
      var $551=(($550)&255);
      var $552=(($551)|0) > 0;
      if ($552) { __label__ = 100; break; } else { __label__ = 101; break; }
    case 100: 
      var $554=$ts;
      var $555=$554;
      var $556=(($555+6)|0);
      var $557=HEAPU8[($556)];
      var $558=(($557)&255);
      var $559=((($558)-(1))|0);
      var $560=((($559)+(257))|0);
      $1=$560;
      __label__ = 106; break;
    case 101: 
      var $562=$ts;
      var $563=$3;
      var $564=$563;
      HEAP32[(($564)>>2)]=$562;
      $1=285;
      __label__ = 106; break;
    case 102: 
      var $566=$2;
      var $567=(($566)|0);
      var $568=HEAP32[(($567)>>2)];
      $c=$568;
      var $569=$2;
      var $570=(($569+44)|0);
      var $571=HEAP32[(($570)>>2)];
      var $572=(($571)|0);
      var $573=HEAPU32[(($572)>>2)];
      var $574=((($573)-(1))|0);
      HEAP32[(($572)>>2)]=$574;
      var $575=(($573)>>>0) > 0;
      if ($575) { __label__ = 103; break; } else { __label__ = 104; break; }
    case 103: 
      var $577=$2;
      var $578=(($577+44)|0);
      var $579=HEAP32[(($578)>>2)];
      var $580=(($579+4)|0);
      var $581=HEAP32[(($580)>>2)];
      var $582=(($581+1)|0);
      HEAP32[(($580)>>2)]=$582;
      var $583=HEAPU8[($581)];
      var $584=(($583)&255);
      var $591 = $584;__label__ = 105; break;
    case 104: 
      var $586=$2;
      var $587=(($586+44)|0);
      var $588=HEAP32[(($587)>>2)];
      var $589=_luaZ_fill($588);
      var $591 = $589;__label__ = 105; break;
    case 105: 
      var $591;
      var $592=$2;
      var $593=(($592)|0);
      HEAP32[(($593)>>2)]=$591;
      var $594=$c;
      $1=$594;
      __label__ = 106; break;
    case 106: 
      var $596=$1;
      ;
      return $596;
    default: assert(0, "bad label: " + __label__);
  }
}
_llex["X"]=1;

function _luaX_lookahead($ls) {
  ;
  var __label__;

  var $1;
  $1=$ls;
  var $2=$1;
  var $3=$1;
  var $4=(($3+24)|0);
  var $5=(($4+4)|0);
  var $6=_llex($2, $5);
  var $7=$1;
  var $8=(($7+24)|0);
  var $9=(($8)|0);
  HEAP32[(($9)>>2)]=$6;
  ;
  return;
}


function _inclinenumber($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $old;
      $1=$ls;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAP32[(($3)>>2)];
      $old=$4;
      var $5=$1;
      var $6=(($5+44)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|0);
      var $9=HEAPU32[(($8)>>2)];
      var $10=((($9)-(1))|0);
      HEAP32[(($8)>>2)]=$10;
      var $11=(($9)>>>0) > 0;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$1;
      var $14=(($13+44)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+1)|0);
      HEAP32[(($16)>>2)]=$18;
      var $19=HEAPU8[($17)];
      var $20=(($19)&255);
      var $27 = $20;__label__ = 5; break;
    case 4: 
      var $22=$1;
      var $23=(($22+44)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=_luaZ_fill($24);
      var $27 = $25;__label__ = 5; break;
    case 5: 
      var $27;
      var $28=$1;
      var $29=(($28)|0);
      HEAP32[(($29)>>2)]=$27;
      var $30=$1;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|0)==10;
      if ($33) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $35=$1;
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|0)==13;
      if ($38) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      var $40=$1;
      var $41=(($40)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$old;
      var $44=(($42)|0)!=(($43)|0);
      if ($44) { __label__ = 8; break; } else { __label__ = 12; break; }
    case 8: 
      var $46=$1;
      var $47=(($46+44)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48)|0);
      var $50=HEAPU32[(($49)>>2)];
      var $51=((($50)-(1))|0);
      HEAP32[(($49)>>2)]=$51;
      var $52=(($50)>>>0) > 0;
      if ($52) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $54=$1;
      var $55=(($54+44)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+4)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+1)|0);
      HEAP32[(($57)>>2)]=$59;
      var $60=HEAPU8[($58)];
      var $61=(($60)&255);
      var $68 = $61;__label__ = 11; break;
    case 10: 
      var $63=$1;
      var $64=(($63+44)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=_luaZ_fill($65);
      var $68 = $66;__label__ = 11; break;
    case 11: 
      var $68;
      var $69=$1;
      var $70=(($69)|0);
      HEAP32[(($70)>>2)]=$68;
      __label__ = 12; break;
    case 12: 
      var $72=$1;
      var $73=(($72+4)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=((($74)+(1))|0);
      HEAP32[(($73)>>2)]=$75;
      var $76=(($75)|0) >= 2147483645;
      if ($76) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $78=$1;
      _luaX_syntaxerror($78, ((STRING_TABLE.__str46443)|0));
      __label__ = 14; break;
    case 14: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_inclinenumber["X"]=1;

function _skip_sep($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $count;
      var $s;
      $1=$ls;
      $count=0;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAP32[(($3)>>2)];
      $s=$4;
      var $5=$1;
      var $6=$1;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      _save($5, $8);
      var $9=$1;
      var $10=(($9+44)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|0);
      var $13=HEAPU32[(($12)>>2)];
      var $14=((($13)-(1))|0);
      HEAP32[(($12)>>2)]=$14;
      var $15=(($13)>>>0) > 0;
      if ($15) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $17=$1;
      var $18=(($17+44)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+1)|0);
      HEAP32[(($20)>>2)]=$22;
      var $23=HEAPU8[($21)];
      var $24=(($23)&255);
      var $31 = $24;__label__ = 5; break;
    case 4: 
      var $26=$1;
      var $27=(($26+44)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=_luaZ_fill($28);
      var $31 = $29;__label__ = 5; break;
    case 5: 
      var $31;
      var $32=$1;
      var $33=(($32)|0);
      HEAP32[(($33)>>2)]=$31;
      __label__ = 6; break;
    case 6: 
      var $35=$1;
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|0)==61;
      if ($38) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $40=$1;
      var $41=$1;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      _save($40, $43);
      var $44=$1;
      var $45=(($44+44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46)|0);
      var $48=HEAPU32[(($47)>>2)];
      var $49=((($48)-(1))|0);
      HEAP32[(($47)>>2)]=$49;
      var $50=(($48)>>>0) > 0;
      if ($50) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $52=$1;
      var $53=(($52+44)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+1)|0);
      HEAP32[(($55)>>2)]=$57;
      var $58=HEAPU8[($56)];
      var $59=(($58)&255);
      var $66 = $59;__label__ = 10; break;
    case 9: 
      var $61=$1;
      var $62=(($61+44)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=_luaZ_fill($63);
      var $66 = $64;__label__ = 10; break;
    case 10: 
      var $66;
      var $67=$1;
      var $68=(($67)|0);
      HEAP32[(($68)>>2)]=$66;
      var $69=$count;
      var $70=((($69)+(1))|0);
      $count=$70;
      __label__ = 6; break;
    case 11: 
      var $72=$1;
      var $73=(($72)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=$s;
      var $76=(($74)|0)==(($75)|0);
      if ($76) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $78=$count;
      var $84 = $78;__label__ = 14; break;
    case 13: 
      var $80=$count;
      var $81=(((-$80))|0);
      var $82=((($81)-(1))|0);
      var $84 = $82;__label__ = 14; break;
    case 14: 
      var $84;
      ;
      return $84;
    default: assert(0, "bad label: " + __label__);
  }
}
_skip_sep["X"]=1;

function _read_long_string($ls, $seminfo, $sep) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $cont;
      $1=$ls;
      $2=$seminfo;
      $3=$sep;
      $cont=0;
      var $4=$cont;
      var $5=$1;
      var $6=$1;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      _save($5, $8);
      var $9=$1;
      var $10=(($9+44)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|0);
      var $13=HEAPU32[(($12)>>2)];
      var $14=((($13)-(1))|0);
      HEAP32[(($12)>>2)]=$14;
      var $15=(($13)>>>0) > 0;
      if ($15) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $17=$1;
      var $18=(($17+44)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+1)|0);
      HEAP32[(($20)>>2)]=$22;
      var $23=HEAPU8[($21)];
      var $24=(($23)&255);
      var $31 = $24;__label__ = 5; break;
    case 4: 
      var $26=$1;
      var $27=(($26+44)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=_luaZ_fill($28);
      var $31 = $29;__label__ = 5; break;
    case 5: 
      var $31;
      var $32=$1;
      var $33=(($32)|0);
      HEAP32[(($33)>>2)]=$31;
      var $34=$1;
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|0)==10;
      if ($37) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $39=$1;
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41)|0)==13;
      if ($42) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $44=$1;
      _inclinenumber($44);
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $47=$1;
      var $48=(($47)|0);
      var $49=HEAP32[(($48)>>2)];
      if ((($49)|0) == -1) {
        __label__ = 10; break;
      }
      else if ((($49)|0) == 91) {
        __label__ = 11; break;
      }
      else if ((($49)|0) == 93) {
        __label__ = 19; break;
      }
      else if ((($49)|0) == 10 || (($49)|0) == 13) {
        __label__ = 25; break;
      }
      else {
      __label__ = 28; break;
      }
      
    case 10: 
      var $51=$1;
      var $52=$2;
      var $53=(($52)|0)!=0;
      var $54=$53 ? (((STRING_TABLE.__str43440)|0)) : (((STRING_TABLE.__str44441)|0));
      _luaX_lexerror($51, $54, 287);
      __label__ = 38; break;
    case 11: 
      var $56=$1;
      var $57=_skip_sep($56);
      var $58=$3;
      var $59=(($57)|0)==(($58)|0);
      if ($59) { __label__ = 12; break; } else { __label__ = 18; break; }
    case 12: 
      var $61=$1;
      var $62=$1;
      var $63=(($62)|0);
      var $64=HEAP32[(($63)>>2)];
      _save($61, $64);
      var $65=$1;
      var $66=(($65+44)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67)|0);
      var $69=HEAPU32[(($68)>>2)];
      var $70=((($69)-(1))|0);
      HEAP32[(($68)>>2)]=$70;
      var $71=(($69)>>>0) > 0;
      if ($71) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $73=$1;
      var $74=(($73+44)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+4)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+1)|0);
      HEAP32[(($76)>>2)]=$78;
      var $79=HEAPU8[($77)];
      var $80=(($79)&255);
      var $87 = $80;__label__ = 15; break;
    case 14: 
      var $82=$1;
      var $83=(($82+44)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=_luaZ_fill($84);
      var $87 = $85;__label__ = 15; break;
    case 15: 
      var $87;
      var $88=$1;
      var $89=(($88)|0);
      HEAP32[(($89)>>2)]=$87;
      var $90=$cont;
      var $91=((($90)+(1))|0);
      $cont=$91;
      var $92=$3;
      var $93=(($92)|0)==0;
      if ($93) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $95=$1;
      _luaX_lexerror($95, ((STRING_TABLE.__str45442)|0), 91);
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 38; break;
    case 19: 
      var $99=$1;
      var $100=_skip_sep($99);
      var $101=$3;
      var $102=(($100)|0)==(($101)|0);
      if ($102) { __label__ = 20; break; } else { __label__ = 24; break; }
    case 20: 
      var $104=$1;
      var $105=$1;
      var $106=(($105)|0);
      var $107=HEAP32[(($106)>>2)];
      _save($104, $107);
      var $108=$1;
      var $109=(($108+44)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110)|0);
      var $112=HEAPU32[(($111)>>2)];
      var $113=((($112)-(1))|0);
      HEAP32[(($111)>>2)]=$113;
      var $114=(($112)>>>0) > 0;
      if ($114) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $116=$1;
      var $117=(($116+44)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=(($118+4)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=(($120+1)|0);
      HEAP32[(($119)>>2)]=$121;
      var $122=HEAPU8[($120)];
      var $123=(($122)&255);
      var $130 = $123;__label__ = 23; break;
    case 22: 
      var $125=$1;
      var $126=(($125+44)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=_luaZ_fill($127);
      var $130 = $128;__label__ = 23; break;
    case 23: 
      var $130;
      var $131=$1;
      var $132=(($131)|0);
      HEAP32[(($132)>>2)]=$130;
      __label__ = 39; break;
    case 24: 
      __label__ = 38; break;
    case 25: 
      var $135=$1;
      _save($135, 10);
      var $136=$1;
      _inclinenumber($136);
      var $137=$2;
      var $138=(($137)|0)!=0;
      if ($138) { __label__ = 27; break; } else { __label__ = 26; break; }
    case 26: 
      var $140=$1;
      var $141=(($140+48)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=(($142+4)|0);
      HEAP32[(($143)>>2)]=0;
      __label__ = 27; break;
    case 27: 
      __label__ = 38; break;
    case 28: 
      var $146=$2;
      var $147=(($146)|0)!=0;
      if ($147) { __label__ = 29; break; } else { __label__ = 33; break; }
    case 29: 
      var $149=$1;
      var $150=$1;
      var $151=(($150)|0);
      var $152=HEAP32[(($151)>>2)];
      _save($149, $152);
      var $153=$1;
      var $154=(($153+44)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=(($155)|0);
      var $157=HEAPU32[(($156)>>2)];
      var $158=((($157)-(1))|0);
      HEAP32[(($156)>>2)]=$158;
      var $159=(($157)>>>0) > 0;
      if ($159) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $161=$1;
      var $162=(($161+44)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=(($163+4)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=(($165+1)|0);
      HEAP32[(($164)>>2)]=$166;
      var $167=HEAPU8[($165)];
      var $168=(($167)&255);
      var $175 = $168;__label__ = 32; break;
    case 31: 
      var $170=$1;
      var $171=(($170+44)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=_luaZ_fill($172);
      var $175 = $173;__label__ = 32; break;
    case 32: 
      var $175;
      var $176=$1;
      var $177=(($176)|0);
      HEAP32[(($177)>>2)]=$175;
      __label__ = 37; break;
    case 33: 
      var $179=$1;
      var $180=(($179+44)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($181)|0);
      var $183=HEAPU32[(($182)>>2)];
      var $184=((($183)-(1))|0);
      HEAP32[(($182)>>2)]=$184;
      var $185=(($183)>>>0) > 0;
      if ($185) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $187=$1;
      var $188=(($187+44)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=(($189+4)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=(($191+1)|0);
      HEAP32[(($190)>>2)]=$192;
      var $193=HEAPU8[($191)];
      var $194=(($193)&255);
      var $201 = $194;__label__ = 36; break;
    case 35: 
      var $196=$1;
      var $197=(($196+44)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=_luaZ_fill($198);
      var $201 = $199;__label__ = 36; break;
    case 36: 
      var $201;
      var $202=$1;
      var $203=(($202)|0);
      HEAP32[(($203)>>2)]=$201;
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      __label__ = 9; break;
    case 39: 
      var $207=$2;
      var $208=(($207)|0)!=0;
      if ($208) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      var $210=$1;
      var $211=$1;
      var $212=(($211+48)|0);
      var $213=HEAP32[(($212)>>2)];
      var $214=(($213)|0);
      var $215=HEAP32[(($214)>>2)];
      var $216=$3;
      var $217=((($216)+(2))|0);
      var $218=(($215+$217)|0);
      var $219=$1;
      var $220=(($219+48)|0);
      var $221=HEAP32[(($220)>>2)];
      var $222=(($221+4)|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=$3;
      var $225=((($224)+(2))|0);
      var $226=((($225<<1))|0);
      var $227=((($223)-($226))|0);
      var $228=_luaX_newstring($210, $218, $227);
      var $229=$2;
      var $230=$229;
      HEAP32[(($230)>>2)]=$228;
      __label__ = 41; break;
    case 41: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_read_long_string["X"]=1;

function _buffreplace($ls, $from, $to) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $n;
      var $p;
      $1=$ls;
      $2=$from;
      $3=$to;
      var $4=$1;
      var $5=(($4+48)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      $n=$8;
      var $9=$1;
      var $10=(($9+48)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      $p=$13;
      __label__ = 3; break;
    case 3: 
      var $15=$n;
      var $16=((($15)-(1))|0);
      $n=$16;
      var $17=(($15)|0)!=0;
      if ($17) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $19=$n;
      var $20=$p;
      var $21=(($20+$19)|0);
      var $22=HEAP8[($21)];
      var $23=(($22 << 24) >> 24);
      var $24=$2;
      var $25=(($24 << 24) >> 24);
      var $26=(($23)|0)==(($25)|0);
      if ($26) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $28=$3;
      var $29=$n;
      var $30=$p;
      var $31=(($30+$29)|0);
      HEAP8[($31)]=$28;
      __label__ = 6; break;
    case 6: 
      __label__ = 3; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _read_string($ls, $del, $seminfo) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $c;
      var $i;
      $1=$ls;
      $2=$del;
      $3=$seminfo;
      var $4=$1;
      var $5=$1;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      _save($4, $7);
      var $8=$1;
      var $9=(($8+44)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0);
      var $12=HEAPU32[(($11)>>2)];
      var $13=((($12)-(1))|0);
      HEAP32[(($11)>>2)]=$13;
      var $14=(($12)>>>0) > 0;
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $16=$1;
      var $17=(($16+44)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+4)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+1)|0);
      HEAP32[(($19)>>2)]=$21;
      var $22=HEAPU8[($20)];
      var $23=(($22)&255);
      var $30 = $23;__label__ = 5; break;
    case 4: 
      var $25=$1;
      var $26=(($25+44)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=_luaZ_fill($27);
      var $30 = $28;__label__ = 5; break;
    case 5: 
      var $30;
      var $31=$1;
      var $32=(($31)|0);
      HEAP32[(($32)>>2)]=$30;
      __label__ = 6; break;
    case 6: 
      var $34=$1;
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$2;
      var $38=(($36)|0)!=(($37)|0);
      if ($38) { __label__ = 7; break; } else { __label__ = 49; break; }
    case 7: 
      var $40=$1;
      var $41=(($40)|0);
      var $42=HEAP32[(($41)>>2)];
      if ((($42)|0) == -1) {
        __label__ = 8; break;
      }
      else if ((($42)|0) == 10 || (($42)|0) == 13) {
        __label__ = 9; break;
      }
      else if ((($42)|0) == 92) {
        __label__ = 10; break;
      }
      else {
      __label__ = 44; break;
      }
      
    case 8: 
      var $44=$1;
      _luaX_lexerror($44, ((STRING_TABLE.__str41438)|0), 287);
      __label__ = 6; break;
    case 9: 
      var $46=$1;
      _luaX_lexerror($46, ((STRING_TABLE.__str41438)|0), 286);
      __label__ = 6; break;
    case 10: 
      var $48=$1;
      var $49=(($48+44)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50)|0);
      var $52=HEAPU32[(($51)>>2)];
      var $53=((($52)-(1))|0);
      HEAP32[(($51)>>2)]=$53;
      var $54=(($52)>>>0) > 0;
      if ($54) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $56=$1;
      var $57=(($56+44)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+1)|0);
      HEAP32[(($59)>>2)]=$61;
      var $62=HEAPU8[($60)];
      var $63=(($62)&255);
      var $70 = $63;__label__ = 13; break;
    case 12: 
      var $65=$1;
      var $66=(($65+44)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=_luaZ_fill($67);
      var $70 = $68;__label__ = 13; break;
    case 13: 
      var $70;
      var $71=$1;
      var $72=(($71)|0);
      HEAP32[(($72)>>2)]=$70;
      var $73=$1;
      var $74=(($73)|0);
      var $75=HEAP32[(($74)>>2)];
      if ((($75)|0) == 97) {
        __label__ = 14; break;
      }
      else if ((($75)|0) == 98) {
        __label__ = 15; break;
      }
      else if ((($75)|0) == 102) {
        __label__ = 16; break;
      }
      else if ((($75)|0) == 110) {
        __label__ = 17; break;
      }
      else if ((($75)|0) == 114) {
        __label__ = 18; break;
      }
      else if ((($75)|0) == 116) {
        __label__ = 19; break;
      }
      else if ((($75)|0) == 118) {
        __label__ = 20; break;
      }
      else if ((($75)|0) == 10 || (($75)|0) == 13) {
        __label__ = 21; break;
      }
      else if ((($75)|0) == -1) {
        __label__ = 22; break;
      }
      else {
      __label__ = 23; break;
      }
      
    case 14: 
      $c=7;
      __label__ = 40; break;
    case 15: 
      $c=8;
      __label__ = 40; break;
    case 16: 
      $c=12;
      __label__ = 40; break;
    case 17: 
      $c=10;
      __label__ = 40; break;
    case 18: 
      $c=13;
      __label__ = 40; break;
    case 19: 
      $c=9;
      __label__ = 40; break;
    case 20: 
      $c=11;
      __label__ = 40; break;
    case 21: 
      var $84=$1;
      _save($84, 10);
      var $85=$1;
      _inclinenumber($85);
      __label__ = 6; break;
    case 22: 
      __label__ = 6; break;
    case 23: 
      var $88=$1;
      var $89=(($88)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=_isdigit($90);
      var $92=(($91)|0)!=0;
      if ($92) { __label__ = 28; break; } else { __label__ = 24; break; }
    case 24: 
      var $94=$1;
      var $95=$1;
      var $96=(($95)|0);
      var $97=HEAP32[(($96)>>2)];
      _save($94, $97);
      var $98=$1;
      var $99=(($98+44)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100)|0);
      var $102=HEAPU32[(($101)>>2)];
      var $103=((($102)-(1))|0);
      HEAP32[(($101)>>2)]=$103;
      var $104=(($102)>>>0) > 0;
      if ($104) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $106=$1;
      var $107=(($106+44)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=(($108+4)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110+1)|0);
      HEAP32[(($109)>>2)]=$111;
      var $112=HEAPU8[($110)];
      var $113=(($112)&255);
      var $120 = $113;__label__ = 27; break;
    case 26: 
      var $115=$1;
      var $116=(($115+44)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=_luaZ_fill($117);
      var $120 = $118;__label__ = 27; break;
    case 27: 
      var $120;
      var $121=$1;
      var $122=(($121)|0);
      HEAP32[(($122)>>2)]=$120;
      __label__ = 39; break;
    case 28: 
      $i=0;
      $c=0;
      __label__ = 29; break;
    case 29: 
      var $125=$c;
      var $126=((($125)*(10))|0);
      var $127=$1;
      var $128=(($127)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=((($129)-(48))|0);
      var $131=((($126)+($130))|0);
      $c=$131;
      var $132=$1;
      var $133=(($132+44)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=(($134)|0);
      var $136=HEAPU32[(($135)>>2)];
      var $137=((($136)-(1))|0);
      HEAP32[(($135)>>2)]=$137;
      var $138=(($136)>>>0) > 0;
      if ($138) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $140=$1;
      var $141=(($140+44)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=(($142+4)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=(($144+1)|0);
      HEAP32[(($143)>>2)]=$145;
      var $146=HEAPU8[($144)];
      var $147=(($146)&255);
      var $154 = $147;__label__ = 32; break;
    case 31: 
      var $149=$1;
      var $150=(($149+44)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=_luaZ_fill($151);
      var $154 = $152;__label__ = 32; break;
    case 32: 
      var $154;
      var $155=$1;
      var $156=(($155)|0);
      HEAP32[(($156)>>2)]=$154;
      __label__ = 33; break;
    case 33: 
      var $158=$i;
      var $159=((($158)+(1))|0);
      $i=$159;
      var $160=(($159)|0) < 3;
      if ($160) { __label__ = 34; break; } else { var $168 = 0;__label__ = 35; break; }
    case 34: 
      var $162=$1;
      var $163=(($162)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=_isdigit($164);
      var $166=(($165)|0)!=0;
      var $168 = $166;__label__ = 35; break;
    case 35: 
      var $168;
      if ($168) { __label__ = 29; break; } else { __label__ = 36; break; }
    case 36: 
      var $170=$c;
      var $171=(($170)|0) > 255;
      if ($171) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $173=$1;
      _luaX_lexerror($173, ((STRING_TABLE.__str42439)|0), 286);
      __label__ = 38; break;
    case 38: 
      var $175=$1;
      var $176=$c;
      _save($175, $176);
      __label__ = 39; break;
    case 39: 
      __label__ = 6; break;
    case 40: 
      var $179=$1;
      var $180=$c;
      _save($179, $180);
      var $181=$1;
      var $182=(($181+44)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=(($183)|0);
      var $185=HEAPU32[(($184)>>2)];
      var $186=((($185)-(1))|0);
      HEAP32[(($184)>>2)]=$186;
      var $187=(($185)>>>0) > 0;
      if ($187) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $189=$1;
      var $190=(($189+44)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=(($191+4)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=(($193+1)|0);
      HEAP32[(($192)>>2)]=$194;
      var $195=HEAPU8[($193)];
      var $196=(($195)&255);
      var $203 = $196;__label__ = 43; break;
    case 42: 
      var $198=$1;
      var $199=(($198+44)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=_luaZ_fill($200);
      var $203 = $201;__label__ = 43; break;
    case 43: 
      var $203;
      var $204=$1;
      var $205=(($204)|0);
      HEAP32[(($205)>>2)]=$203;
      __label__ = 6; break;
    case 44: 
      var $207=$1;
      var $208=$1;
      var $209=(($208)|0);
      var $210=HEAP32[(($209)>>2)];
      _save($207, $210);
      var $211=$1;
      var $212=(($211+44)|0);
      var $213=HEAP32[(($212)>>2)];
      var $214=(($213)|0);
      var $215=HEAPU32[(($214)>>2)];
      var $216=((($215)-(1))|0);
      HEAP32[(($214)>>2)]=$216;
      var $217=(($215)>>>0) > 0;
      if ($217) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $219=$1;
      var $220=(($219+44)|0);
      var $221=HEAP32[(($220)>>2)];
      var $222=(($221+4)|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=(($223+1)|0);
      HEAP32[(($222)>>2)]=$224;
      var $225=HEAPU8[($223)];
      var $226=(($225)&255);
      var $233 = $226;__label__ = 47; break;
    case 46: 
      var $228=$1;
      var $229=(($228+44)|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=_luaZ_fill($230);
      var $233 = $231;__label__ = 47; break;
    case 47: 
      var $233;
      var $234=$1;
      var $235=(($234)|0);
      HEAP32[(($235)>>2)]=$233;
      __label__ = 48; break;
    case 48: 
      __label__ = 6; break;
    case 49: 
      var $238=$1;
      var $239=$1;
      var $240=(($239)|0);
      var $241=HEAP32[(($240)>>2)];
      _save($238, $241);
      var $242=$1;
      var $243=(($242+44)|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=(($244)|0);
      var $246=HEAPU32[(($245)>>2)];
      var $247=((($246)-(1))|0);
      HEAP32[(($245)>>2)]=$247;
      var $248=(($246)>>>0) > 0;
      if ($248) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $250=$1;
      var $251=(($250+44)|0);
      var $252=HEAP32[(($251)>>2)];
      var $253=(($252+4)|0);
      var $254=HEAP32[(($253)>>2)];
      var $255=(($254+1)|0);
      HEAP32[(($253)>>2)]=$255;
      var $256=HEAPU8[($254)];
      var $257=(($256)&255);
      var $264 = $257;__label__ = 52; break;
    case 51: 
      var $259=$1;
      var $260=(($259+44)|0);
      var $261=HEAP32[(($260)>>2)];
      var $262=_luaZ_fill($261);
      var $264 = $262;__label__ = 52; break;
    case 52: 
      var $264;
      var $265=$1;
      var $266=(($265)|0);
      HEAP32[(($266)>>2)]=$264;
      var $267=$1;
      var $268=$1;
      var $269=(($268+48)|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=(($270)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=(($272+1)|0);
      var $274=$1;
      var $275=(($274+48)|0);
      var $276=HEAP32[(($275)>>2)];
      var $277=(($276+4)|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=((($278)-(2))|0);
      var $280=_luaX_newstring($267, $273, $279);
      var $281=$3;
      var $282=$281;
      HEAP32[(($282)>>2)]=$280;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_read_string["X"]=1;

function _save($ls, $c) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $b;
      var $newsize;
      $1=$ls;
      $2=$c;
      var $3=$1;
      var $4=(($3+48)|0);
      var $5=HEAP32[(($4)>>2)];
      $b=$5;
      var $6=$b;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=((($8)+(1))|0);
      var $10=$b;
      var $11=(($10+8)|0);
      var $12=HEAPU32[(($11)>>2)];
      var $13=(($9)>>>0) > (($12)>>>0);
      if ($13) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $15=$b;
      var $16=(($15+8)|0);
      var $17=HEAPU32[(($16)>>2)];
      var $18=(($17)>>>0) >= 2147483646;
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $20=$1;
      _luaX_lexerror($20, ((STRING_TABLE.__str40437)|0), 0);
      __label__ = 5; break;
    case 5: 
      var $22=$b;
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=((($24<<1))|0);
      $newsize=$25;
      var $26=$newsize;
      var $27=((($26)+(1))|0);
      var $28=(($27)>>>0) <= 4294967293;
      if ($28) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $30=$1;
      var $31=(($30+40)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$b;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$b;
      var $37=(($36+8)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|0);
      var $40=$newsize;
      var $41=(($40)|0);
      var $42=_luaM_realloc_($32, $35, $39, $41);
      var $49 = $42;__label__ = 8; break;
    case 7: 
      var $44=$1;
      var $45=(($44+40)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=_luaM_toobig($46);
      var $49 = $47;__label__ = 8; break;
    case 8: 
      var $49;
      var $50=$b;
      var $51=(($50)|0);
      HEAP32[(($51)>>2)]=$49;
      var $52=$newsize;
      var $53=$b;
      var $54=(($53+8)|0);
      HEAP32[(($54)>>2)]=$52;
      __label__ = 9; break;
    case 9: 
      var $56=$2;
      var $57=(($56) & 255);
      var $58=$b;
      var $59=(($58+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=((($60)+(1))|0);
      HEAP32[(($59)>>2)]=$61;
      var $62=$b;
      var $63=(($62)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64+$60)|0);
      HEAP8[($65)]=$57;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_save["X"]=1;

function _check_next($ls, $set) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ls;
      $3=$set;
      var $4=$3;
      var $5=$2;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=_strchr($4, $7);
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=0;
      __label__ = 8; break;
    case 4: 
      var $12=$2;
      var $13=$2;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      _save($12, $15);
      var $16=$2;
      var $17=(($16+44)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|0);
      var $20=HEAPU32[(($19)>>2)];
      var $21=((($20)-(1))|0);
      HEAP32[(($19)>>2)]=$21;
      var $22=(($20)>>>0) > 0;
      if ($22) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $24=$2;
      var $25=(($24+44)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+4)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+1)|0);
      HEAP32[(($27)>>2)]=$29;
      var $30=HEAPU8[($28)];
      var $31=(($30)&255);
      var $38 = $31;__label__ = 7; break;
    case 6: 
      var $33=$2;
      var $34=(($33+44)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=_luaZ_fill($35);
      var $38 = $36;__label__ = 7; break;
    case 7: 
      var $38;
      var $39=$2;
      var $40=(($39)|0);
      HEAP32[(($40)>>2)]=$38;
      $1=1;
      __label__ = 8; break;
    case 8: 
      var $42=$1;
      ;
      return $42;
    default: assert(0, "bad label: " + __label__);
  }
}
_check_next["X"]=1;

function _read_numeral($ls, $seminfo) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$ls;
      $2=$seminfo;
      __label__ = 3; break;
    case 3: 
      var $4=$1;
      var $5=$1;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      _save($4, $7);
      var $8=$1;
      var $9=(($8+44)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0);
      var $12=HEAPU32[(($11)>>2)];
      var $13=((($12)-(1))|0);
      HEAP32[(($11)>>2)]=$13;
      var $14=(($12)>>>0) > 0;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $16=$1;
      var $17=(($16+44)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+4)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+1)|0);
      HEAP32[(($19)>>2)]=$21;
      var $22=HEAPU8[($20)];
      var $23=(($22)&255);
      var $30 = $23;__label__ = 6; break;
    case 5: 
      var $25=$1;
      var $26=(($25+44)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=_luaZ_fill($27);
      var $30 = $28;__label__ = 6; break;
    case 6: 
      var $30;
      var $31=$1;
      var $32=(($31)|0);
      HEAP32[(($32)>>2)]=$30;
      __label__ = 7; break;
    case 7: 
      var $34=$1;
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=_isdigit($36);
      var $38=(($37)|0)!=0;
      if ($38) { var $45 = 1;__label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $40=$1;
      var $41=(($40)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42)|0)==46;
      var $45 = $43;__label__ = 9; break;
    case 9: 
      var $45;
      if ($45) { __label__ = 3; break; } else { __label__ = 10; break; }
    case 10: 
      var $47=$1;
      var $48=_check_next($47, ((STRING_TABLE.__str37434)|0));
      var $49=(($48)|0)!=0;
      if ($49) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $51=$1;
      var $52=_check_next($51, ((STRING_TABLE.__str38435)|0));
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $55=$1;
      var $56=(($55)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=_isalnum($57);
      var $59=(($58)|0)!=0;
      if ($59) { var $66 = 1;__label__ = 15; break; } else { __label__ = 14; break; }
    case 14: 
      var $61=$1;
      var $62=(($61)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63)|0)==95;
      var $66 = $64;__label__ = 15; break;
    case 15: 
      var $66;
      if ($66) { __label__ = 16; break; } else { __label__ = 20; break; }
    case 16: 
      var $68=$1;
      var $69=$1;
      var $70=(($69)|0);
      var $71=HEAP32[(($70)>>2)];
      _save($68, $71);
      var $72=$1;
      var $73=(($72+44)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74)|0);
      var $76=HEAPU32[(($75)>>2)];
      var $77=((($76)-(1))|0);
      HEAP32[(($75)>>2)]=$77;
      var $78=(($76)>>>0) > 0;
      if ($78) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $80=$1;
      var $81=(($80+44)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($82+4)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+1)|0);
      HEAP32[(($83)>>2)]=$85;
      var $86=HEAPU8[($84)];
      var $87=(($86)&255);
      var $94 = $87;__label__ = 19; break;
    case 18: 
      var $89=$1;
      var $90=(($89+44)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=_luaZ_fill($91);
      var $94 = $92;__label__ = 19; break;
    case 19: 
      var $94;
      var $95=$1;
      var $96=(($95)|0);
      HEAP32[(($96)>>2)]=$94;
      __label__ = 13; break;
    case 20: 
      var $98=$1;
      _save($98, 0);
      var $99=$1;
      var $100=$1;
      var $101=(($100+56)|0);
      var $102=HEAP8[($101)];
      _buffreplace($99, 46, $102);
      var $103=$1;
      var $104=(($103+48)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=$2;
      var $109=$108;
      var $110=_luaO_str2d($107, $109);
      var $111=(($110)|0)!=0;
      if ($111) { __label__ = 22; break; } else { __label__ = 21; break; }
    case 21: 
      var $113=$1;
      var $114=$2;
      _trydecpoint($113, $114);
      __label__ = 22; break;
    case 22: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_read_numeral["X"]=1;

function _trydecpoint($ls, $seminfo) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $cv;
      var $old;
      $1=$ls;
      $2=$seminfo;
      var $3=_localeconv();
      $cv=$3;
      var $4=$1;
      var $5=(($4+56)|0);
      var $6=HEAP8[($5)];
      $old=$6;
      var $7=$cv;
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$cv;
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|0);
      var $14=HEAP8[($13)];
      var $15=(($14 << 24) >> 24);
      var $18 = $15;__label__ = 5; break;
    case 4: 
      var $18 = 46;__label__ = 5; break;
    case 5: 
      var $18;
      var $19=(($18) & 255);
      var $20=$1;
      var $21=(($20+56)|0);
      HEAP8[($21)]=$19;
      var $22=$1;
      var $23=$old;
      var $24=$1;
      var $25=(($24+56)|0);
      var $26=HEAP8[($25)];
      _buffreplace($22, $23, $26);
      var $27=$1;
      var $28=(($27+48)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$2;
      var $33=$32;
      var $34=_luaO_str2d($31, $33);
      var $35=(($34)|0)!=0;
      if ($35) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $37=$1;
      var $38=$1;
      var $39=(($38+56)|0);
      var $40=HEAP8[($39)];
      _buffreplace($37, $40, 46);
      var $41=$1;
      _luaX_lexerror($41, ((STRING_TABLE.__str39436)|0), 284);
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_trydecpoint["X"]=1;

function _luaM_growaux_($L, $block, $size, $size_elems, $limit, $errormsg) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $newblock;
      var $newsize;
      $1=$L;
      $2=$block;
      $3=$size;
      $4=$size_elems;
      $5=$limit;
      $6=$errormsg;
      var $7=$3;
      var $8=HEAP32[(($7)>>2)];
      var $9=$5;
      var $10=((((($9)|0))/(2))&-1);
      var $11=(($8)|0) >= (($10)|0);
      if ($11) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $13=$3;
      var $14=HEAP32[(($13)>>2)];
      var $15=$5;
      var $16=(($14)|0) >= (($15)|0);
      if ($16) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $18=$1;
      var $19=$6;
      _luaG_runerror($18, $19, (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 5; break;
    case 5: 
      var $21=$5;
      $newsize=$21;
      __label__ = 9; break;
    case 6: 
      var $23=$3;
      var $24=HEAP32[(($23)>>2)];
      var $25=((($24<<1))|0);
      $newsize=$25;
      var $26=$newsize;
      var $27=(($26)|0) < 4;
      if ($27) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $newsize=4;
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $31=$newsize;
      var $32=((($31)+(1))|0);
      var $33=$4;
      var $34=Math.floor((4294967293)/((($33)>>>0)));
      var $35=(($32)>>>0) <= (($34)>>>0);
      if ($35) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $37=$1;
      var $38=$2;
      var $39=$3;
      var $40=HEAP32[(($39)>>2)];
      var $41=$4;
      var $42=((($40)*($41))|0);
      var $43=$newsize;
      var $44=$4;
      var $45=((($43)*($44))|0);
      var $46=_luaM_realloc_($37, $38, $42, $45);
      var $51 = $46;__label__ = 12; break;
    case 11: 
      var $48=$1;
      var $49=_luaM_toobig($48);
      var $51 = $49;__label__ = 12; break;
    case 12: 
      var $51;
      $newblock=$51;
      var $52=$newsize;
      var $53=$3;
      HEAP32[(($53)>>2)]=$52;
      var $54=$newblock;
      STACKTOP = __stackBase__;
      return $54;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaM_growaux_["X"]=1;

function _luaO_int2fb($x) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $e;
      $2=$x;
      $e=0;
      __label__ = 3; break;
    case 3: 
      var $4=$2;
      var $5=(($4)>>>0) >= 16;
      if ($5) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $7=$2;
      var $8=((($7)+(1))|0);
      var $9=$8 >>> 1;
      $2=$9;
      var $10=$e;
      var $11=((($10)+(1))|0);
      $e=$11;
      __label__ = 3; break;
    case 5: 
      var $13=$2;
      var $14=(($13)>>>0) < 8;
      if ($14) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $16=$2;
      $1=$16;
      __label__ = 8; break;
    case 7: 
      var $18=$e;
      var $19=((($18)+(1))|0);
      var $20=$19 << 3;
      var $21=$2;
      var $22=((($21)-(8))|0);
      var $23=$20 | $22;
      $1=$23;
      __label__ = 8; break;
    case 8: 
      var $25=$1;
      ;
      return $25;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaO_fb2int($x) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $e;
      $2=$x;
      var $3=$2;
      var $4=$3 >> 3;
      var $5=$4 & 31;
      $e=$5;
      var $6=$e;
      var $7=(($6)|0)==0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$2;
      $1=$9;
      __label__ = 5; break;
    case 4: 
      var $11=$2;
      var $12=$11 & 7;
      var $13=((($12)+(8))|0);
      var $14=$e;
      var $15=((($14)-(1))|0);
      var $16=$13 << $15;
      $1=$16;
      __label__ = 5; break;
    case 5: 
      var $18=$1;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaO_log2($x) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $l;
      $1=$x;
      $l=-1;
      __label__ = 3; break;
    case 3: 
      var $3=$1;
      var $4=(($3)>>>0) >= 256;
      if ($4) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $6=$l;
      var $7=((($6)+(8))|0);
      $l=$7;
      var $8=$1;
      var $9=$8 >>> 8;
      $1=$9;
      __label__ = 3; break;
    case 5: 
      var $11=$l;
      var $12=$1;
      var $13=((STRING_TABLE._luaO_log2_log_2+$12)|0);
      var $14=HEAPU8[($13)];
      var $15=(($14)&255);
      var $16=((($11)+($15))|0);
      ;
      return $16;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaO_rawequalObj($t1, $t2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$t1;
      $3=$t2;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$3;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($6)|0)!=(($9)|0);
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 10; break;
    case 4: 
      var $13=$2;
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      if ((($15)|0) == 0) {
        __label__ = 5; break;
      }
      else if ((($15)|0) == 3) {
        __label__ = 6; break;
      }
      else if ((($15)|0) == 1) {
        __label__ = 7; break;
      }
      else if ((($15)|0) == 2) {
        __label__ = 8; break;
      }
      else {
      __label__ = 9; break;
      }
      
    case 5: 
      $1=1;
      __label__ = 10; break;
    case 6: 
      var $18=$2;
      var $19=(($18)|0);
      var $20=$19;
      var $21=(tempDoubleI32[0]=HEAP32[(($20)>>2)],tempDoubleI32[1]=HEAP32[((($20)+(4))>>2)],tempDoubleF64[0]);
      var $22=$3;
      var $23=(($22)|0);
      var $24=$23;
      var $25=(tempDoubleI32[0]=HEAP32[(($24)>>2)],tempDoubleI32[1]=HEAP32[((($24)+(4))>>2)],tempDoubleF64[0]);
      var $26=$21 == $25;
      var $27=(($26)&1);
      $1=$27;
      __label__ = 10; break;
    case 7: 
      var $29=$2;
      var $30=(($29)|0);
      var $31=$30;
      var $32=HEAP32[(($31)>>2)];
      var $33=$3;
      var $34=(($33)|0);
      var $35=$34;
      var $36=HEAP32[(($35)>>2)];
      var $37=(($32)|0)==(($36)|0);
      var $38=(($37)&1);
      $1=$38;
      __label__ = 10; break;
    case 8: 
      var $40=$2;
      var $41=(($40)|0);
      var $42=$41;
      var $43=HEAP32[(($42)>>2)];
      var $44=$3;
      var $45=(($44)|0);
      var $46=$45;
      var $47=HEAP32[(($46)>>2)];
      var $48=(($43)|0)==(($47)|0);
      var $49=(($48)&1);
      $1=$49;
      __label__ = 10; break;
    case 9: 
      var $51=$2;
      var $52=(($51)|0);
      var $53=$52;
      var $54=HEAP32[(($53)>>2)];
      var $55=$3;
      var $56=(($55)|0);
      var $57=$56;
      var $58=HEAP32[(($57)>>2)];
      var $59=(($54)|0)==(($58)|0);
      var $60=(($59)&1);
      $1=$60;
      __label__ = 10; break;
    case 10: 
      var $62=$1;
      ;
      return $62;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaO_rawequalObj["X"]=1;

function _luaM_realloc_($L, $block, $osize, $nsize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $g;
      $1=$L;
      $2=$block;
      $3=$osize;
      $4=$nsize;
      var $5=$1;
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      $g=$7;
      var $8=$g;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$g;
      var $12=(($11+16)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$2;
      var $15=$3;
      var $16=$4;
      var $17=FUNCTION_TABLE[$10]($13, $14, $15, $16);
      $2=$17;
      var $18=$2;
      var $19=(($18)|0)==0;
      if ($19) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $21=$4;
      var $22=(($21)>>>0) > 0;
      if ($22) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $24=$1;
      _luaD_throw($24, 4);
      __label__ = 5; break;
    case 5: 
      var $26=$g;
      var $27=(($26+68)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$3;
      var $30=((($28)-($29))|0);
      var $31=$4;
      var $32=((($30)+($31))|0);
      var $33=$g;
      var $34=(($33+68)|0);
      HEAP32[(($34)>>2)]=$32;
      var $35=$2;
      ;
      return $35;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaM_toobig($L) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  _luaG_runerror($2, ((STRING_TABLE.__str482)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  STACKTOP = __stackBase__;
  return 0;
}


function _luaO_str2d($s, $result) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $endptr=__stackBase__;
      $2=$s;
      $3=$result;
      var $4=$2;
      var $5=_strtod($4, $endptr);
      var $6=$3;
      (tempDoubleF64[0]=$5,HEAP32[(($6)>>2)]=tempDoubleI32[0],HEAP32[((($6)+(4))>>2)]=tempDoubleI32[1]);
      var $7=HEAP32[(($endptr)>>2)];
      var $8=$2;
      var $9=(($7)|0)==(($8)|0);
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 15; break;
    case 4: 
      var $12=HEAP32[(($endptr)>>2)];
      var $13=HEAP8[($12)];
      var $14=(($13 << 24) >> 24);
      var $15=(($14)|0)==120;
      if ($15) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $17=HEAP32[(($endptr)>>2)];
      var $18=HEAP8[($17)];
      var $19=(($18 << 24) >> 24);
      var $20=(($19)|0)==88;
      if ($20) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $22=$2;
      var $23=_strtoul($22, $endptr, 16);
      var $24=(($23)>>>0);
      var $25=$3;
      (tempDoubleF64[0]=$24,HEAP32[(($25)>>2)]=tempDoubleI32[0],HEAP32[((($25)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 7; break;
    case 7: 
      var $27=HEAP32[(($endptr)>>2)];
      var $28=HEAP8[($27)];
      var $29=(($28 << 24) >> 24);
      var $30=(($29)|0)==0;
      if ($30) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $1=1;
      __label__ = 15; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $34=HEAP32[(($endptr)>>2)];
      var $35=HEAPU8[($34)];
      var $36=(($35)&255);
      var $37=_isspace($36);
      var $38=(($37)|0)!=0;
      if ($38) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $40=HEAP32[(($endptr)>>2)];
      var $41=(($40+1)|0);
      HEAP32[(($endptr)>>2)]=$41;
      __label__ = 10; break;
    case 12: 
      var $43=HEAP32[(($endptr)>>2)];
      var $44=HEAP8[($43)];
      var $45=(($44 << 24) >> 24);
      var $46=(($45)|0)!=0;
      if ($46) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $1=0;
      __label__ = 15; break;
    case 14: 
      $1=1;
      __label__ = 15; break;
    case 15: 
      var $50=$1;
      STACKTOP = __stackBase__;
      return $50;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaO_str2d["X"]=1;

function _luaO_pushvfstring($L, $fmt, $argp) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $n;
      var $e;
      var $i_o;
      var $s;
      var $buff=__stackBase__;
      var $i_o1;
      var $i_o2;
      var $buff3=(__stackBase__)+(4);
      var $buff4=(__stackBase__)+(28);
      $1=$L;
      $2=$fmt;
      $3=$argp;
      $n=1;
      var $4=$1;
      _pushstr($4, ((__str546)|0));
      __label__ = 3; break;
    case 3: 
      var $6=$2;
      var $7=_strchr($6, 37);
      $e=$7;
      var $8=$e;
      var $9=(($8)|0)==0;
      if ($9) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 25; break;
    case 5: 
      var $12=$1;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      $i_o=$14;
      var $15=$1;
      var $16=$2;
      var $17=$e;
      var $18=$2;
      var $19=$17;
      var $20=$18;
      var $21=((($19)-($20))|0);
      var $22=_luaS_newlstr($15, $16, $21);
      var $23=$22;
      var $24=$i_o;
      var $25=(($24)|0);
      var $26=$25;
      HEAP32[(($26)>>2)]=$23;
      var $27=$i_o;
      var $28=(($27+8)|0);
      HEAP32[(($28)>>2)]=4;
      var $29=$1;
      var $30=(($29+28)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      var $33=$1;
      var $34=(($33+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      var $37=$32;
      var $38=$36;
      var $39=((($37)-($38))|0);
      var $40=(($39)|0) <= 12;
      if ($40) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $42=$1;
      _luaD_growstack($42, 1);
      __label__ = 8; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $45=$1;
      var $46=(($45+8)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+12)|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=$e;
      var $50=(($49+1)|0);
      var $51=HEAP8[($50)];
      var $52=(($51 << 24) >> 24);
      if ((($52)|0) == 115) {
        __label__ = 9; break;
      }
      else if ((($52)|0) == 99) {
        __label__ = 12; break;
      }
      else if ((($52)|0) == 100) {
        __label__ = 13; break;
      }
      else if ((($52)|0) == 102) {
        __label__ = 17; break;
      }
      else if ((($52)|0) == 112) {
        __label__ = 21; break;
      }
      else if ((($52)|0) == 37) {
        __label__ = 22; break;
      }
      else {
      __label__ = 23; break;
      }
      
    case 9: 
      var $54=$3;
      var $55=$54;
      var $56=(($54+4)|0);
      $3=$56;
      var $57=HEAP32[(($55)>>2)];
      $s=$57;
      var $58=$s;
      var $59=(($58)|0)==0;
      if ($59) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      $s=((STRING_TABLE.__str1547)|0);
      __label__ = 11; break;
    case 11: 
      var $62=$1;
      var $63=$s;
      _pushstr($62, $63);
      __label__ = 24; break;
    case 12: 
      var $65=$3;
      var $66=$65;
      var $67=(($65+4)|0);
      $3=$67;
      var $68=HEAP32[(($66)>>2)];
      var $69=(($68) & 255);
      var $70=(($buff)|0);
      HEAP8[($70)]=$69;
      var $71=(($buff+1)|0);
      HEAP8[($71)]=0;
      var $72=$1;
      var $73=(($buff)|0);
      _pushstr($72, $73);
      __label__ = 24; break;
    case 13: 
      var $75=$1;
      var $76=(($75+8)|0);
      var $77=HEAP32[(($76)>>2)];
      $i_o1=$77;
      var $78=$3;
      var $79=$78;
      var $80=(($78+4)|0);
      $3=$80;
      var $81=HEAP32[(($79)>>2)];
      var $82=(($81)|0);
      var $83=$i_o1;
      var $84=(($83)|0);
      var $85=$84;
      (tempDoubleF64[0]=$82,HEAP32[(($85)>>2)]=tempDoubleI32[0],HEAP32[((($85)+(4))>>2)]=tempDoubleI32[1]);
      var $86=$i_o1;
      var $87=(($86+8)|0);
      HEAP32[(($87)>>2)]=3;
      var $88=$1;
      var $89=(($88+28)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$90;
      var $92=$1;
      var $93=(($92+8)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=$94;
      var $96=$91;
      var $97=$95;
      var $98=((($96)-($97))|0);
      var $99=(($98)|0) <= 12;
      if ($99) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $101=$1;
      _luaD_growstack($101, 1);
      __label__ = 16; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $104=$1;
      var $105=(($104+8)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+12)|0);
      HEAP32[(($105)>>2)]=$107;
      __label__ = 24; break;
    case 17: 
      var $109=$1;
      var $110=(($109+8)|0);
      var $111=HEAP32[(($110)>>2)];
      $i_o2=$111;
      var $112=$3;
      var $113=$112;
      var $114=(($112+8)|0);
      $3=$114;
      var $115=(tempDoubleI32[0]=HEAP32[(($113)>>2)],tempDoubleI32[1]=HEAP32[((($113)+(4))>>2)],tempDoubleF64[0]);
      var $116=$i_o2;
      var $117=(($116)|0);
      var $118=$117;
      (tempDoubleF64[0]=$115,HEAP32[(($118)>>2)]=tempDoubleI32[0],HEAP32[((($118)+(4))>>2)]=tempDoubleI32[1]);
      var $119=$i_o2;
      var $120=(($119+8)|0);
      HEAP32[(($120)>>2)]=3;
      var $121=$1;
      var $122=(($121+28)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=$123;
      var $125=$1;
      var $126=(($125+8)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=$127;
      var $129=$124;
      var $130=$128;
      var $131=((($129)-($130))|0);
      var $132=(($131)|0) <= 12;
      if ($132) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $134=$1;
      _luaD_growstack($134, 1);
      __label__ = 20; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $137=$1;
      var $138=(($137+8)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=(($139+12)|0);
      HEAP32[(($138)>>2)]=$140;
      __label__ = 24; break;
    case 21: 
      var $142=(($buff3)|0);
      var $143=$3;
      var $144=$143;
      var $145=(($143+4)|0);
      $3=$145;
      var $146=HEAP32[(($144)>>2)];
      var $147=_sprintf($142, ((STRING_TABLE.__str2548)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$146,tempInt));
      var $148=$1;
      var $149=(($buff3)|0);
      _pushstr($148, $149);
      __label__ = 24; break;
    case 22: 
      var $151=$1;
      _pushstr($151, ((STRING_TABLE.__str3549)|0));
      __label__ = 24; break;
    case 23: 
      var $153=(($buff4)|0);
      HEAP8[($153)]=37;
      var $154=$e;
      var $155=(($154+1)|0);
      var $156=HEAP8[($155)];
      var $157=(($buff4+1)|0);
      HEAP8[($157)]=$156;
      var $158=(($buff4+2)|0);
      HEAP8[($158)]=0;
      var $159=$1;
      var $160=(($buff4)|0);
      _pushstr($159, $160);
      __label__ = 24; break;
    case 24: 
      var $162=$n;
      var $163=((($162)+(2))|0);
      $n=$163;
      var $164=$e;
      var $165=(($164+2)|0);
      $2=$165;
      __label__ = 3; break;
    case 25: 
      var $167=$1;
      var $168=$2;
      _pushstr($167, $168);
      var $169=$1;
      var $170=$n;
      var $171=((($170)+(1))|0);
      var $172=$1;
      var $173=(($172+8)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=$1;
      var $176=(($175+12)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=$174;
      var $179=$177;
      var $180=((($178)-($179))|0);
      var $181=((((($180)|0))/(12))&-1);
      var $182=((($181)-(1))|0);
      _luaV_concat($169, $171, $182);
      var $183=$n;
      var $184=$1;
      var $185=(($184+8)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=(((-$183))|0);
      var $188=(($186+($187)*(12))|0);
      HEAP32[(($185)>>2)]=$188;
      var $189=$1;
      var $190=(($189+8)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=((($191)-(12))|0);
      var $193=(($192)|0);
      var $194=$193;
      var $195=HEAP32[(($194)>>2)];
      var $196=$195;
      var $197=(($196+16)|0);
      var $198=$197;
      STACKTOP = __stackBase__;
      return $198;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaO_pushvfstring["X"]=1;

function _pushstr($L, $str) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i_o;
      $1=$L;
      $2=$str;
      var $3=$1;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      $i_o=$5;
      var $6=$1;
      var $7=$2;
      var $8=$2;
      var $9=_strlen($8);
      var $10=_luaS_newlstr($6, $7, $9);
      var $11=$10;
      var $12=$i_o;
      var $13=(($12)|0);
      var $14=$13;
      HEAP32[(($14)>>2)]=$11;
      var $15=$i_o;
      var $16=(($15+8)|0);
      HEAP32[(($16)>>2)]=4;
      var $17=$1;
      var $18=(($17+28)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      var $21=$1;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$23;
      var $25=$20;
      var $26=$24;
      var $27=((($25)-($26))|0);
      var $28=(($27)|0) <= 12;
      if ($28) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $30=$1;
      _luaD_growstack($30, 1);
      __label__ = 5; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $33=$1;
      var $34=(($33+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+12)|0);
      HEAP32[(($34)>>2)]=$36;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaO_pushfstring($L, $fmt) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $msg;
  var $argp=__stackBase__;
  $1=$L;
  $2=$fmt;
  var $3=$argp;
  HEAP32[(($3)>>2)]=arguments[_luaO_pushfstring.length];
  var $4=$1;
  var $5=$2;
  var $6=HEAP32[(($argp)>>2)];
  var $7=_luaO_pushvfstring($4, $5, $6);
  $msg=$7;
  var $8=$argp;
  ;
  var $9=$msg;
  STACKTOP = __stackBase__;
  return $9;
}


function _luaO_chunkid($out, $source, $bufflen) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $l;
      var $len;
      $1=$out;
      $2=$source;
      $3=$bufflen;
      var $4=$2;
      var $5=HEAP8[($4)];
      var $6=(($5 << 24) >> 24);
      var $7=(($6)|0)==61;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$1;
      var $10=$2;
      var $11=(($10+1)|0);
      var $12=$3;
      var $13=_strncpy($9, $11, $12);
      var $14=$3;
      var $15=((($14)-(1))|0);
      var $16=$1;
      var $17=(($16+$15)|0);
      HEAP8[($17)]=0;
      __label__ = 15; break;
    case 4: 
      var $19=$2;
      var $20=HEAP8[($19)];
      var $21=(($20 << 24) >> 24);
      var $22=(($21)|0)==64;
      if ($22) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $24=$2;
      var $25=(($24+1)|0);
      $2=$25;
      var $26=$3;
      var $27=((($26)-(8))|0);
      $3=$27;
      var $28=$2;
      var $29=_strlen($28);
      $l=$29;
      var $30=$1;
      var $31=_strcpy($30, ((__str546)|0));
      var $32=$l;
      var $33=$3;
      var $34=(($32)>>>0) > (($33)>>>0);
      if ($34) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $36=$l;
      var $37=$3;
      var $38=((($36)-($37))|0);
      var $39=$2;
      var $40=(($39+$38)|0);
      $2=$40;
      var $41=$1;
      var $42=_strcat($41, ((STRING_TABLE.__str4550)|0));
      __label__ = 7; break;
    case 7: 
      var $44=$1;
      var $45=$2;
      var $46=_strcat($44, $45);
      __label__ = 14; break;
    case 8: 
      var $48=$2;
      var $49=_strcspn($48, ((STRING_TABLE.__str5551)|0));
      $len=$49;
      var $50=$3;
      var $51=((($50)-(17))|0);
      $3=$51;
      var $52=$len;
      var $53=$3;
      var $54=(($52)>>>0) > (($53)>>>0);
      if ($54) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $56=$3;
      $len=$56;
      __label__ = 10; break;
    case 10: 
      var $58=$1;
      var $59=_strcpy($58, ((STRING_TABLE.__str6552)|0));
      var $60=$len;
      var $61=$2;
      var $62=(($61+$60)|0);
      var $63=HEAP8[($62)];
      var $64=(($63 << 24) >> 24);
      var $65=(($64)|0)!=0;
      if ($65) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $67=$1;
      var $68=$2;
      var $69=$len;
      var $70=_strncat($67, $68, $69);
      var $71=$1;
      var $72=_strcat($71, ((STRING_TABLE.__str4550)|0));
      __label__ = 13; break;
    case 12: 
      var $74=$1;
      var $75=$2;
      var $76=_strcat($74, $75);
      __label__ = 13; break;
    case 13: 
      var $78=$1;
      var $79=_strcat($78, ((STRING_TABLE.__str7553)|0));
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaO_chunkid["X"]=1;

function _luaY_parser($L, $z, $buff, $name) {
  var __stackBase__  = STACKTOP; STACKTOP += 632; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $lexstate=__stackBase__;
  var $funcstate=(__stackBase__)+(60);
  $1=$L;
  $2=$z;
  $3=$buff;
  $4=$name;
  var $5=$3;
  var $6=(($lexstate+48)|0);
  HEAP32[(($6)>>2)]=$5;
  var $7=$1;
  var $8=$2;
  var $9=$1;
  var $10=$4;
  var $11=$4;
  var $12=_strlen($11);
  var $13=_luaS_newlstr($9, $10, $12);
  _luaX_setinput($7, $lexstate, $8, $13);
  _open_func($lexstate, $funcstate);
  var $14=(($funcstate)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=(($15+74)|0);
  HEAP8[($16)]=2;
  _luaX_next($lexstate);
  _chunk($lexstate);
  _check($lexstate, 287);
  _close_func($lexstate);
  var $17=(($funcstate)|0);
  var $18=HEAP32[(($17)>>2)];
  STACKTOP = __stackBase__;
  return $18;
}


function _block_follow($token) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$token;
      var $3=$2;
      if ((($3)|0) == 260 || (($3)|0) == 261 || (($3)|0) == 262 || (($3)|0) == 276 || (($3)|0) == 287) {
        __label__ = 3; break;
      }
      else {
      __label__ = 4; break;
      }
      
    case 3: 
      $1=1;
      __label__ = 5; break;
    case 4: 
      $1=0;
      __label__ = 5; break;
    case 5: 
      var $7=$1;
      ;
      return $7;
    default: assert(0, "bad label: " + __label__);
  }
}


function _open_func($ls, $fs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $L;
      var $f;
      var $i_o;
      var $i_o1;
      $1=$ls;
      $2=$fs;
      var $3=$1;
      var $4=(($3+40)|0);
      var $5=HEAP32[(($4)>>2)];
      $L=$5;
      var $6=$L;
      var $7=_luaF_newproto($6);
      $f=$7;
      var $8=$f;
      var $9=$2;
      var $10=(($9)|0);
      HEAP32[(($10)>>2)]=$8;
      var $11=$1;
      var $12=(($11+36)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$2;
      var $15=(($14+8)|0);
      HEAP32[(($15)>>2)]=$13;
      var $16=$1;
      var $17=$2;
      var $18=(($17+12)|0);
      HEAP32[(($18)>>2)]=$16;
      var $19=$L;
      var $20=$2;
      var $21=(($20+16)|0);
      HEAP32[(($21)>>2)]=$19;
      var $22=$2;
      var $23=$1;
      var $24=(($23+36)|0);
      HEAP32[(($24)>>2)]=$22;
      var $25=$2;
      var $26=(($25+24)|0);
      HEAP32[(($26)>>2)]=0;
      var $27=$2;
      var $28=(($27+28)|0);
      HEAP32[(($28)>>2)]=-1;
      var $29=$2;
      var $30=(($29+32)|0);
      HEAP32[(($30)>>2)]=-1;
      var $31=$2;
      var $32=(($31+36)|0);
      HEAP32[(($32)>>2)]=0;
      var $33=$2;
      var $34=(($33+40)|0);
      HEAP32[(($34)>>2)]=0;
      var $35=$2;
      var $36=(($35+44)|0);
      HEAP32[(($36)>>2)]=0;
      var $37=$2;
      var $38=(($37+48)|0);
      HEAP16[(($38)>>1)]=0;
      var $39=$2;
      var $40=(($39+50)|0);
      HEAP8[($40)]=0;
      var $41=$2;
      var $42=(($41+20)|0);
      HEAP32[(($42)>>2)]=0;
      var $43=$1;
      var $44=(($43+52)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$f;
      var $47=(($46+32)|0);
      HEAP32[(($47)>>2)]=$45;
      var $48=$f;
      var $49=(($48+75)|0);
      HEAP8[($49)]=2;
      var $50=$L;
      var $51=_luaH_new($50, 0, 0);
      var $52=$2;
      var $53=(($52+4)|0);
      HEAP32[(($53)>>2)]=$51;
      var $54=$L;
      var $55=(($54+8)|0);
      var $56=HEAP32[(($55)>>2)];
      $i_o=$56;
      var $57=$2;
      var $58=(($57+4)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$59;
      var $61=$i_o;
      var $62=(($61)|0);
      var $63=$62;
      HEAP32[(($63)>>2)]=$60;
      var $64=$i_o;
      var $65=(($64+8)|0);
      HEAP32[(($65)>>2)]=5;
      var $66=$L;
      var $67=(($66+28)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$68;
      var $70=$L;
      var $71=(($70+8)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$72;
      var $74=$69;
      var $75=$73;
      var $76=((($74)-($75))|0);
      var $77=(($76)|0) <= 12;
      if ($77) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $79=$L;
      _luaD_growstack($79, 1);
      __label__ = 5; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $82=$L;
      var $83=(($82+8)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+12)|0);
      HEAP32[(($83)>>2)]=$85;
      var $86=$L;
      var $87=(($86+8)|0);
      var $88=HEAP32[(($87)>>2)];
      $i_o1=$88;
      var $89=$f;
      var $90=$89;
      var $91=$i_o1;
      var $92=(($91)|0);
      var $93=$92;
      HEAP32[(($93)>>2)]=$90;
      var $94=$i_o1;
      var $95=(($94+8)|0);
      HEAP32[(($95)>>2)]=9;
      var $96=$L;
      var $97=(($96+28)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$98;
      var $100=$L;
      var $101=(($100+8)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=$102;
      var $104=$99;
      var $105=$103;
      var $106=((($104)-($105))|0);
      var $107=(($106)|0) <= 12;
      if ($107) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $109=$L;
      _luaD_growstack($109, 1);
      __label__ = 8; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $112=$L;
      var $113=(($112+8)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114+12)|0);
      HEAP32[(($113)>>2)]=$115;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_open_func["X"]=1;

function _chunk($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $islast;
      $1=$ls;
      $islast=0;
      var $2=$1;
      _enterlevel($2);
      __label__ = 3; break;
    case 3: 
      var $4=$islast;
      var $5=(($4)|0)!=0;
      if ($5) { var $15 = 0;__label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $7=$1;
      var $8=(($7+12)|0);
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=_block_follow($10);
      var $12=(($11)|0)!=0;
      var $13=$12 ^ 1;
      var $15 = $13;__label__ = 5; break;
    case 5: 
      var $15;
      if ($15) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $17=$1;
      var $18=_statement($17);
      $islast=$18;
      var $19=$1;
      var $20=_testnext($19, 59);
      var $21=$1;
      var $22=(($21+36)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+50)|0);
      var $25=HEAPU8[($24)];
      var $26=(($25)&255);
      var $27=$1;
      var $28=(($27+36)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+36)|0);
      HEAP32[(($30)>>2)]=$26;
      __label__ = 3; break;
    case 7: 
      var $32=$1;
      var $33=(($32+40)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+52)|0);
      var $36=HEAP16[(($35)>>1)];
      var $37=((($36)-(1))&65535);
      HEAP16[(($35)>>1)]=$37;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _check($ls, $c) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$ls;
      $2=$c;
      var $3=$1;
      var $4=(($3+12)|0);
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$2;
      var $8=(($6)|0)!=(($7)|0);
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$1;
      var $11=$2;
      _error_expected($10, $11);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _close_func($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $L;
      var $fs;
      var $f;
      $1=$ls;
      var $2=$1;
      var $3=(($2+40)|0);
      var $4=HEAP32[(($3)>>2)];
      $L=$4;
      var $5=$1;
      var $6=(($5+36)|0);
      var $7=HEAP32[(($6)>>2)];
      $fs=$7;
      var $8=$fs;
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      $f=$10;
      var $11=$1;
      _removevars($11, 0);
      var $12=$fs;
      _luaK_ret($12, 0, 0);
      var $13=$fs;
      var $14=(($13+24)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=((($15)+(1))|0);
      var $17=(($16)>>>0) <= 1073741823;
      if ($17) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $19=$L;
      var $20=$f;
      var $21=(($20+12)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      var $24=$f;
      var $25=(($24+44)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=((($26<<2))|0);
      var $28=$fs;
      var $29=(($28+24)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=((($30<<2))|0);
      var $32=_luaM_realloc_($19, $23, $27, $31);
      var $37 = $32;__label__ = 5; break;
    case 4: 
      var $34=$L;
      var $35=_luaM_toobig($34);
      var $37 = $35;__label__ = 5; break;
    case 5: 
      var $37;
      var $38=$37;
      var $39=$f;
      var $40=(($39+12)|0);
      HEAP32[(($40)>>2)]=$38;
      var $41=$fs;
      var $42=(($41+24)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$f;
      var $45=(($44+44)|0);
      HEAP32[(($45)>>2)]=$43;
      var $46=$fs;
      var $47=(($46+24)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)+(1))|0);
      var $50=(($49)>>>0) <= 1073741823;
      if ($50) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $52=$L;
      var $53=$f;
      var $54=(($53+20)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$55;
      var $57=$f;
      var $58=(($57+48)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=((($59<<2))|0);
      var $61=$fs;
      var $62=(($61+24)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=((($63<<2))|0);
      var $65=_luaM_realloc_($52, $56, $60, $64);
      var $70 = $65;__label__ = 8; break;
    case 7: 
      var $67=$L;
      var $68=_luaM_toobig($67);
      var $70 = $68;__label__ = 8; break;
    case 8: 
      var $70;
      var $71=$70;
      var $72=$f;
      var $73=(($72+20)|0);
      HEAP32[(($73)>>2)]=$71;
      var $74=$fs;
      var $75=(($74+24)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$f;
      var $78=(($77+48)|0);
      HEAP32[(($78)>>2)]=$76;
      var $79=$fs;
      var $80=(($79+40)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=((($81)+(1))|0);
      var $83=(($82)>>>0) <= 357913941;
      if ($83) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $85=$L;
      var $86=$f;
      var $87=(($86+8)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$88;
      var $90=$f;
      var $91=(($90+40)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=((($92)*(12))|0);
      var $94=$fs;
      var $95=(($94+40)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=((($96)*(12))|0);
      var $98=_luaM_realloc_($85, $89, $93, $97);
      var $103 = $98;__label__ = 11; break;
    case 10: 
      var $100=$L;
      var $101=_luaM_toobig($100);
      var $103 = $101;__label__ = 11; break;
    case 11: 
      var $103;
      var $104=$103;
      var $105=$f;
      var $106=(($105+8)|0);
      HEAP32[(($106)>>2)]=$104;
      var $107=$fs;
      var $108=(($107+40)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$f;
      var $111=(($110+40)|0);
      HEAP32[(($111)>>2)]=$109;
      var $112=$fs;
      var $113=(($112+44)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=((($114)+(1))|0);
      var $116=(($115)>>>0) <= 1073741823;
      if ($116) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $118=$L;
      var $119=$f;
      var $120=(($119+16)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=$121;
      var $123=$f;
      var $124=(($123+52)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=((($125<<2))|0);
      var $127=$fs;
      var $128=(($127+44)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=((($129<<2))|0);
      var $131=_luaM_realloc_($118, $122, $126, $130);
      var $136 = $131;__label__ = 14; break;
    case 13: 
      var $133=$L;
      var $134=_luaM_toobig($133);
      var $136 = $134;__label__ = 14; break;
    case 14: 
      var $136;
      var $137=$136;
      var $138=$f;
      var $139=(($138+16)|0);
      HEAP32[(($139)>>2)]=$137;
      var $140=$fs;
      var $141=(($140+44)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=$f;
      var $144=(($143+52)|0);
      HEAP32[(($144)>>2)]=$142;
      var $145=$fs;
      var $146=(($145+48)|0);
      var $147=HEAP16[(($146)>>1)];
      var $148=(($147 << 16) >> 16);
      var $149=((($148)+(1))|0);
      var $150=(($149)>>>0) <= 357913941;
      if ($150) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $152=$L;
      var $153=$f;
      var $154=(($153+24)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=$155;
      var $157=$f;
      var $158=(($157+56)|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=((($159)*(12))|0);
      var $161=$fs;
      var $162=(($161+48)|0);
      var $163=HEAP16[(($162)>>1)];
      var $164=(($163 << 16) >> 16);
      var $165=((($164)*(12))|0);
      var $166=_luaM_realloc_($152, $156, $160, $165);
      var $171 = $166;__label__ = 17; break;
    case 16: 
      var $168=$L;
      var $169=_luaM_toobig($168);
      var $171 = $169;__label__ = 17; break;
    case 17: 
      var $171;
      var $172=$171;
      var $173=$f;
      var $174=(($173+24)|0);
      HEAP32[(($174)>>2)]=$172;
      var $175=$fs;
      var $176=(($175+48)|0);
      var $177=HEAP16[(($176)>>1)];
      var $178=(($177 << 16) >> 16);
      var $179=$f;
      var $180=(($179+56)|0);
      HEAP32[(($180)>>2)]=$178;
      var $181=$f;
      var $182=(($181+72)|0);
      var $183=HEAPU8[($182)];
      var $184=(($183)&255);
      var $185=((($184)+(1))|0);
      var $186=(($185)>>>0) <= 1073741823;
      if ($186) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $188=$L;
      var $189=$f;
      var $190=(($189+28)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=$191;
      var $193=$f;
      var $194=(($193+36)|0);
      var $195=HEAP32[(($194)>>2)];
      var $196=((($195<<2))|0);
      var $197=$f;
      var $198=(($197+72)|0);
      var $199=HEAPU8[($198)];
      var $200=(($199)&255);
      var $201=((($200<<2))|0);
      var $202=_luaM_realloc_($188, $192, $196, $201);
      var $207 = $202;__label__ = 20; break;
    case 19: 
      var $204=$L;
      var $205=_luaM_toobig($204);
      var $207 = $205;__label__ = 20; break;
    case 20: 
      var $207;
      var $208=$207;
      var $209=$f;
      var $210=(($209+28)|0);
      HEAP32[(($210)>>2)]=$208;
      var $211=$f;
      var $212=(($211+72)|0);
      var $213=HEAPU8[($212)];
      var $214=(($213)&255);
      var $215=$f;
      var $216=(($215+36)|0);
      HEAP32[(($216)>>2)]=$214;
      var $217=$fs;
      var $218=(($217+8)|0);
      var $219=HEAP32[(($218)>>2)];
      var $220=$1;
      var $221=(($220+36)|0);
      HEAP32[(($221)>>2)]=$219;
      var $222=$fs;
      var $223=(($222)|0)!=0;
      if ($223) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $225=$1;
      _anchor_token($225);
      __label__ = 22; break;
    case 22: 
      var $227=$L;
      var $228=(($227+8)|0);
      var $229=HEAP32[(($228)>>2)];
      var $230=((($229)-(24))|0);
      HEAP32[(($228)>>2)]=$230;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_close_func["X"]=1;

function _enterlevel($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$ls;
      var $2=$1;
      var $3=(($2+40)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4+52)|0);
      var $6=HEAP16[(($5)>>1)];
      var $7=((($6)+(1))&65535);
      HEAP16[(($5)>>1)]=$7;
      var $8=(($7)&65535);
      var $9=(($8)|0) > 200;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$1;
      _luaX_lexerror($11, ((STRING_TABLE.__str27664)|0), 0);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _statement($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $line;
      $2=$ls;
      var $3=$2;
      var $4=(($3+4)|0);
      var $5=HEAP32[(($4)>>2)];
      $line=$5;
      var $6=$2;
      var $7=(($6+12)|0);
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      if ((($9)|0) == 266) {
        __label__ = 3; break;
      }
      else if ((($9)|0) == 277) {
        __label__ = 4; break;
      }
      else if ((($9)|0) == 259) {
        __label__ = 5; break;
      }
      else if ((($9)|0) == 264) {
        __label__ = 6; break;
      }
      else if ((($9)|0) == 272) {
        __label__ = 7; break;
      }
      else if ((($9)|0) == 265) {
        __label__ = 8; break;
      }
      else if ((($9)|0) == 268) {
        __label__ = 9; break;
      }
      else if ((($9)|0) == 273) {
        __label__ = 13; break;
      }
      else if ((($9)|0) == 258) {
        __label__ = 14; break;
      }
      else {
      __label__ = 15; break;
      }
      
    case 3: 
      var $11=$2;
      var $12=$line;
      _ifstat($11, $12);
      $1=0;
      __label__ = 16; break;
    case 4: 
      var $14=$2;
      var $15=$line;
      _whilestat($14, $15);
      $1=0;
      __label__ = 16; break;
    case 5: 
      var $17=$2;
      _luaX_next($17);
      var $18=$2;
      _block($18);
      var $19=$2;
      var $20=$line;
      _check_match($19, 262, 259, $20);
      $1=0;
      __label__ = 16; break;
    case 6: 
      var $22=$2;
      var $23=$line;
      _forstat($22, $23);
      $1=0;
      __label__ = 16; break;
    case 7: 
      var $25=$2;
      var $26=$line;
      _repeatstat($25, $26);
      $1=0;
      __label__ = 16; break;
    case 8: 
      var $28=$2;
      var $29=$line;
      _funcstat($28, $29);
      $1=0;
      __label__ = 16; break;
    case 9: 
      var $31=$2;
      _luaX_next($31);
      var $32=$2;
      var $33=_testnext($32, 265);
      var $34=(($33)|0)!=0;
      if ($34) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $36=$2;
      _localfunc($36);
      __label__ = 12; break;
    case 11: 
      var $38=$2;
      _localstat($38);
      __label__ = 12; break;
    case 12: 
      $1=0;
      __label__ = 16; break;
    case 13: 
      var $41=$2;
      _retstat($41);
      $1=1;
      __label__ = 16; break;
    case 14: 
      var $43=$2;
      _luaX_next($43);
      var $44=$2;
      _breakstat($44);
      $1=1;
      __label__ = 16; break;
    case 15: 
      var $46=$2;
      _exprstat($46);
      $1=0;
      __label__ = 16; break;
    case 16: 
      var $48=$1;
      ;
      return $48;
    default: assert(0, "bad label: " + __label__);
  }
}
_statement["X"]=1;

function _testnext($ls, $c) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ls;
      $3=$c;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$3;
      var $9=(($7)|0)==(($8)|0);
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$2;
      _luaX_next($11);
      $1=1;
      __label__ = 5; break;
    case 4: 
      $1=0;
      __label__ = 5; break;
    case 5: 
      var $14=$1;
      ;
      return $14;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ifstat($ls, $line) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      var $flist;
      var $escapelist=__stackBase__;
      $1=$ls;
      $2=$line;
      var $3=$1;
      var $4=(($3+36)|0);
      var $5=HEAP32[(($4)>>2)];
      $fs=$5;
      HEAP32[(($escapelist)>>2)]=-1;
      var $6=$1;
      var $7=_test_then_block($6);
      $flist=$7;
      __label__ = 3; break;
    case 3: 
      var $9=$1;
      var $10=(($9+12)|0);
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|0)==261;
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $15=$fs;
      var $16=$fs;
      var $17=_luaK_jump($16);
      _luaK_concat($15, $escapelist, $17);
      var $18=$fs;
      var $19=$flist;
      _luaK_patchtohere($18, $19);
      var $20=$1;
      var $21=_test_then_block($20);
      $flist=$21;
      __label__ = 3; break;
    case 5: 
      var $23=$1;
      var $24=(($23+12)|0);
      var $25=(($24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|0)==260;
      if ($27) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $29=$fs;
      var $30=$fs;
      var $31=_luaK_jump($30);
      _luaK_concat($29, $escapelist, $31);
      var $32=$fs;
      var $33=$flist;
      _luaK_patchtohere($32, $33);
      var $34=$1;
      _luaX_next($34);
      var $35=$1;
      _block($35);
      __label__ = 8; break;
    case 7: 
      var $37=$fs;
      var $38=$flist;
      _luaK_concat($37, $escapelist, $38);
      __label__ = 8; break;
    case 8: 
      var $40=$fs;
      var $41=HEAP32[(($escapelist)>>2)];
      _luaK_patchtohere($40, $41);
      var $42=$1;
      var $43=$2;
      _check_match($42, 262, 266, $43);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ifstat["X"]=1;

function _whilestat($ls, $line) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $fs;
  var $whileinit;
  var $condexit;
  var $bl=__stackBase__;
  $1=$ls;
  $2=$line;
  var $3=$1;
  var $4=(($3+36)|0);
  var $5=HEAP32[(($4)>>2)];
  $fs=$5;
  var $6=$1;
  _luaX_next($6);
  var $7=$fs;
  var $8=_luaK_getlabel($7);
  $whileinit=$8;
  var $9=$1;
  var $10=_cond($9);
  $condexit=$10;
  var $11=$fs;
  _enterblock($11, $bl, 1);
  var $12=$1;
  _checknext($12, 259);
  var $13=$1;
  _block($13);
  var $14=$fs;
  var $15=$fs;
  var $16=_luaK_jump($15);
  var $17=$whileinit;
  _luaK_patchlist($14, $16, $17);
  var $18=$1;
  var $19=$2;
  _check_match($18, 262, 277, $19);
  var $20=$fs;
  _leaveblock($20);
  var $21=$fs;
  var $22=$condexit;
  _luaK_patchtohere($21, $22);
  STACKTOP = __stackBase__;
  return;
}


function _block($ls) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $fs;
  var $bl=__stackBase__;
  $1=$ls;
  var $2=$1;
  var $3=(($2+36)|0);
  var $4=HEAP32[(($3)>>2)];
  $fs=$4;
  var $5=$fs;
  _enterblock($5, $bl, 0);
  var $6=$1;
  _chunk($6);
  var $7=$fs;
  _leaveblock($7);
  STACKTOP = __stackBase__;
  return;
}


function _check_match($ls, $what, $who, $where) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$ls;
      $2=$what;
      $3=$who;
      $4=$where;
      var $5=$1;
      var $6=$2;
      var $7=_testnext($5, $6);
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 7; break; } else { __label__ = 3; break; }
    case 3: 
      var $10=$4;
      var $11=$1;
      var $12=(($11+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($10)|0)==(($13)|0);
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $16=$1;
      var $17=$2;
      _error_expected($16, $17);
      __label__ = 6; break;
    case 5: 
      var $19=$1;
      var $20=$1;
      var $21=(($20+40)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$1;
      var $24=$2;
      var $25=_luaX_token2str($23, $24);
      var $26=$1;
      var $27=$3;
      var $28=_luaX_token2str($26, $27);
      var $29=$4;
      var $30=_luaO_pushfstring($22, ((STRING_TABLE.__str25662)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$25,HEAP32[(((tempInt)+(4))>>2)]=$28,HEAP32[(((tempInt)+(8))>>2)]=$29,tempInt));
      _luaX_syntaxerror($19, $30);
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _forstat($ls, $line) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      var $varname;
      var $bl=__stackBase__;
      $1=$ls;
      $2=$line;
      var $3=$1;
      var $4=(($3+36)|0);
      var $5=HEAP32[(($4)>>2)];
      $fs=$5;
      var $6=$fs;
      _enterblock($6, $bl, 1);
      var $7=$1;
      _luaX_next($7);
      var $8=$1;
      var $9=_str_checkname($8);
      $varname=$9;
      var $10=$1;
      var $11=(($10+12)|0);
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      if ((($13)|0) == 61) {
        __label__ = 3; break;
      }
      else if ((($13)|0) == 44 || (($13)|0) == 267) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      var $15=$1;
      var $16=$varname;
      var $17=$2;
      _fornum($15, $16, $17);
      __label__ = 6; break;
    case 4: 
      var $19=$1;
      var $20=$varname;
      _forlist($19, $20);
      __label__ = 6; break;
    case 5: 
      var $22=$1;
      _luaX_syntaxerror($22, ((STRING_TABLE.__str18655)|0));
      __label__ = 6; break;
    case 6: 
      var $24=$1;
      var $25=$2;
      _check_match($24, 262, 264, $25);
      var $26=$fs;
      _leaveblock($26);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _repeatstat($ls, $line) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $condexit;
      var $fs;
      var $repeat_init;
      var $bl1=__stackBase__;
      var $bl2=(__stackBase__)+(12);
      $1=$ls;
      $2=$line;
      var $3=$1;
      var $4=(($3+36)|0);
      var $5=HEAP32[(($4)>>2)];
      $fs=$5;
      var $6=$fs;
      var $7=_luaK_getlabel($6);
      $repeat_init=$7;
      var $8=$fs;
      _enterblock($8, $bl1, 1);
      var $9=$fs;
      _enterblock($9, $bl2, 0);
      var $10=$1;
      _luaX_next($10);
      var $11=$1;
      _chunk($11);
      var $12=$1;
      var $13=$2;
      _check_match($12, 276, 272, $13);
      var $14=$1;
      var $15=_cond($14);
      $condexit=$15;
      var $16=(($bl2+9)|0);
      var $17=HEAP8[($16)];
      var $18=(($17 << 24) >> 24)!=0;
      if ($18) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $20=$fs;
      _leaveblock($20);
      var $21=$1;
      var $22=(($21+36)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$condexit;
      var $25=$repeat_init;
      _luaK_patchlist($23, $24, $25);
      __label__ = 5; break;
    case 4: 
      var $27=$1;
      _breakstat($27);
      var $28=$1;
      var $29=(($28+36)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$condexit;
      _luaK_patchtohere($30, $31);
      var $32=$fs;
      _leaveblock($32);
      var $33=$1;
      var $34=(($33+36)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$fs;
      var $37=_luaK_jump($36);
      var $38=$repeat_init;
      _luaK_patchlist($35, $37, $38);
      __label__ = 5; break;
    case 5: 
      var $40=$fs;
      _leaveblock($40);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_repeatstat["X"]=1;

function _funcstat($ls, $line) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $needself;
  var $v=__stackBase__;
  var $b=(__stackBase__)+(20);
  $1=$ls;
  $2=$line;
  var $3=$1;
  _luaX_next($3);
  var $4=$1;
  var $5=_funcname($4, $v);
  $needself=$5;
  var $6=$1;
  var $7=$needself;
  var $8=$2;
  _body($6, $b, $7, $8);
  var $9=$1;
  var $10=(($9+36)|0);
  var $11=HEAP32[(($10)>>2)];
  _luaK_storevar($11, $v, $b);
  var $12=$1;
  var $13=(($12+36)|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=$2;
  _luaK_fixline($14, $15);
  STACKTOP = __stackBase__;
  return;
}


function _localfunc($ls) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $v=__stackBase__;
  var $b=(__stackBase__)+(20);
  var $fs;
  $1=$ls;
  var $2=$1;
  var $3=(($2+36)|0);
  var $4=HEAP32[(($3)>>2)];
  $fs=$4;
  var $5=$1;
  var $6=$1;
  var $7=_str_checkname($6);
  _new_localvar($5, $7, 0);
  var $8=$fs;
  var $9=(($8+36)|0);
  var $10=HEAP32[(($9)>>2)];
  _init_exp($v, 6, $10);
  var $11=$fs;
  _luaK_reserveregs($11, 1);
  var $12=$1;
  _adjustlocalvars($12, 1);
  var $13=$1;
  var $14=$1;
  var $15=(($14+4)|0);
  var $16=HEAP32[(($15)>>2)];
  _body($13, $b, 0, $16);
  var $17=$fs;
  _luaK_storevar($17, $v, $b);
  var $18=$fs;
  var $19=(($18+24)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=$fs;
  var $22=(($21+50)|0);
  var $23=HEAPU8[($22)];
  var $24=(($23)&255);
  var $25=((($24)-(1))|0);
  var $26=$fs;
  var $27=(($26+172)|0);
  var $28=(($27+($25<<1))|0);
  var $29=HEAPU16[(($28)>>1)];
  var $30=(($29)&65535);
  var $31=$fs;
  var $32=(($31)|0);
  var $33=HEAP32[(($32)>>2)];
  var $34=(($33+24)|0);
  var $35=HEAP32[(($34)>>2)];
  var $36=(($35+($30)*(12))|0);
  var $37=(($36+4)|0);
  HEAP32[(($37)>>2)]=$20;
  STACKTOP = __stackBase__;
  return;
}
_localfunc["X"]=1;

function _localstat($ls) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $nvars;
      var $nexps;
      var $e=__stackBase__;
      $1=$ls;
      $nvars=0;
      __label__ = 3; break;
    case 3: 
      var $3=$1;
      var $4=$1;
      var $5=_str_checkname($4);
      var $6=$nvars;
      var $7=((($6)+(1))|0);
      $nvars=$7;
      _new_localvar($3, $5, $6);
      __label__ = 4; break;
    case 4: 
      var $9=$1;
      var $10=_testnext($9, 44);
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 5: 
      var $13=$1;
      var $14=_testnext($13, 61);
      var $15=(($14)|0)!=0;
      if ($15) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $17=$1;
      var $18=_explist1($17, $e);
      $nexps=$18;
      __label__ = 8; break;
    case 7: 
      var $20=(($e)|0);
      HEAP32[(($20)>>2)]=0;
      $nexps=0;
      __label__ = 8; break;
    case 8: 
      var $22=$1;
      var $23=$nvars;
      var $24=$nexps;
      _adjust_assign($22, $23, $24, $e);
      var $25=$1;
      var $26=$nvars;
      _adjustlocalvars($25, $26);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _retstat($ls) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $fs;
      var $e=__stackBase__;
      var $first;
      var $nret;
      $1=$ls;
      var $2=$1;
      var $3=(($2+36)|0);
      var $4=HEAP32[(($3)>>2)];
      $fs=$4;
      var $5=$1;
      _luaX_next($5);
      var $6=$1;
      var $7=(($6+12)|0);
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=_block_follow($9);
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $13=$1;
      var $14=(($13+12)|0);
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|0)==59;
      if ($17) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $nret=0;
      $first=0;
      __label__ = 16; break;
    case 5: 
      var $20=$1;
      var $21=_explist1($20, $e);
      $nret=$21;
      var $22=(($e)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|0)==13;
      if ($24) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $26=(($e)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|0)==14;
      if ($28) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $30=$fs;
      _luaK_setreturns($30, $e, -1);
      var $31=(($e)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|0)==13;
      if ($33) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $35=$nret;
      var $36=(($35)|0)==1;
      if ($36) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $38=(($e+4)|0);
      var $39=$38;
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$fs;
      var $43=(($42)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+12)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+($41<<2))|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$48 & -64;
      var $50=$49 | 29;
      var $51=(($e+4)|0);
      var $52=$51;
      var $53=(($52)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$fs;
      var $56=(($55)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+12)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+($54<<2))|0);
      HEAP32[(($60)>>2)]=$50;
      __label__ = 10; break;
    case 10: 
      var $62=$fs;
      var $63=(($62+50)|0);
      var $64=HEAPU8[($63)];
      var $65=(($64)&255);
      $first=$65;
      $nret=-1;
      __label__ = 15; break;
    case 11: 
      var $67=$nret;
      var $68=(($67)|0)==1;
      if ($68) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $70=$fs;
      var $71=_luaK_exp2anyreg($70, $e);
      $first=$71;
      __label__ = 14; break;
    case 13: 
      var $73=$fs;
      _luaK_exp2nextreg($73, $e);
      var $74=$fs;
      var $75=(($74+50)|0);
      var $76=HEAPU8[($75)];
      var $77=(($76)&255);
      $first=$77;
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $81=$fs;
      var $82=$first;
      var $83=$nret;
      _luaK_ret($81, $82, $83);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_retstat["X"]=1;

function _breakstat($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $fs;
      var $bl;
      var $upval;
      $1=$ls;
      var $2=$1;
      var $3=(($2+36)|0);
      var $4=HEAP32[(($3)>>2)];
      $fs=$4;
      var $5=$fs;
      var $6=(($5+20)|0);
      var $7=HEAP32[(($6)>>2)];
      $bl=$7;
      $upval=0;
      __label__ = 3; break;
    case 3: 
      var $9=$bl;
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 4; break; } else { var $18 = 0;__label__ = 5; break; }
    case 4: 
      var $12=$bl;
      var $13=(($12+10)|0);
      var $14=HEAP8[($13)];
      var $15=(($14 << 24) >> 24)!=0;
      var $16=$15 ^ 1;
      var $18 = $16;__label__ = 5; break;
    case 5: 
      var $18;
      if ($18) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $20=$bl;
      var $21=(($20+9)|0);
      var $22=HEAPU8[($21)];
      var $23=(($22)&255);
      var $24=$upval;
      var $25=$24 | $23;
      $upval=$25;
      var $26=$bl;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      $bl=$28;
      __label__ = 3; break;
    case 7: 
      var $30=$bl;
      var $31=(($30)|0)!=0;
      if ($31) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $33=$1;
      _luaX_syntaxerror($33, ((STRING_TABLE.__str17654)|0));
      __label__ = 9; break;
    case 9: 
      var $35=$upval;
      var $36=(($35)|0)!=0;
      if ($36) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $38=$fs;
      var $39=$bl;
      var $40=(($39+8)|0);
      var $41=HEAPU8[($40)];
      var $42=(($41)&255);
      var $43=_luaK_codeABC($38, 35, $42, 0, 0);
      __label__ = 11; break;
    case 11: 
      var $45=$fs;
      var $46=$bl;
      var $47=(($46+4)|0);
      var $48=$fs;
      var $49=_luaK_jump($48);
      _luaK_concat($45, $47, $49);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_breakstat["X"]=1;

function _exprstat($ls) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $fs;
      var $v=__stackBase__;
      $1=$ls;
      var $2=$1;
      var $3=(($2+36)|0);
      var $4=HEAP32[(($3)>>2)];
      $fs=$4;
      var $5=$1;
      var $6=(($v+4)|0);
      _primaryexp($5, $6);
      var $7=(($v+4)|0);
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0)==13;
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $12=(($v+4)|0);
      var $13=(($12+4)|0);
      var $14=$13;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$fs;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+($16<<2))|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 & -8372225;
      var $25=$24 | 16384;
      var $26=(($v+4)|0);
      var $27=(($26+4)|0);
      var $28=$27;
      var $29=(($28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$fs;
      var $32=(($31)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+12)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+($30<<2))|0);
      HEAP32[(($36)>>2)]=$25;
      __label__ = 5; break;
    case 4: 
      var $38=(($v)|0);
      HEAP32[(($38)>>2)]=0;
      var $39=$1;
      _assignment($39, $v, 1);
      __label__ = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _primaryexp($ls, $v) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      var $key=__stackBase__;
      var $key1=(__stackBase__)+(20);
      $1=$ls;
      $2=$v;
      var $3=$1;
      var $4=(($3+36)|0);
      var $5=HEAP32[(($4)>>2)];
      $fs=$5;
      var $6=$1;
      var $7=$2;
      _prefixexp($6, $7);
      __label__ = 3; break;
    case 3: 
      var $9=$1;
      var $10=(($9+12)|0);
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      if ((($12)|0) == 46) {
        __label__ = 4; break;
      }
      else if ((($12)|0) == 91) {
        __label__ = 5; break;
      }
      else if ((($12)|0) == 58) {
        __label__ = 6; break;
      }
      else if ((($12)|0) == 40 || (($12)|0) == 286 || (($12)|0) == 123) {
        __label__ = 7; break;
      }
      else {
      __label__ = 8; break;
      }
      
    case 4: 
      var $14=$1;
      var $15=$2;
      _field($14, $15);
      __label__ = 9; break;
    case 5: 
      var $17=$fs;
      var $18=$2;
      var $19=_luaK_exp2anyreg($17, $18);
      var $20=$1;
      _yindex($20, $key);
      var $21=$fs;
      var $22=$2;
      _luaK_indexed($21, $22, $key);
      __label__ = 9; break;
    case 6: 
      var $24=$1;
      _luaX_next($24);
      var $25=$1;
      _checkname($25, $key1);
      var $26=$fs;
      var $27=$2;
      _luaK_self($26, $27, $key1);
      var $28=$1;
      var $29=$2;
      _funcargs($28, $29);
      __label__ = 9; break;
    case 7: 
      var $31=$fs;
      var $32=$2;
      _luaK_exp2nextreg($31, $32);
      var $33=$1;
      var $34=$2;
      _funcargs($33, $34);
      __label__ = 9; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    case 9: 
      __label__ = 3; break;
    default: assert(0, "bad label: " + __label__);
  }
}
_primaryexp["X"]=1;

function _assignment($ls, $lh, $nvars) {
  var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $e=__stackBase__;
      var $nv=(__stackBase__)+(20);
      var $nexps;
      $1=$ls;
      $2=$lh;
      $3=$nvars;
      var $4=$2;
      var $5=(($4+4)|0);
      var $6=(($5)|0);
      var $7=HEAPU32[(($6)>>2)];
      var $8=6 <= (($7)>>>0);
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$2;
      var $11=(($10+4)|0);
      var $12=(($11)|0);
      var $13=HEAPU32[(($12)>>2)];
      var $14=(($13)>>>0) <= 9;
      if ($14) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $16=$1;
      _luaX_syntaxerror($16, ((STRING_TABLE.__str637)|0));
      __label__ = 5; break;
    case 5: 
      var $18=$1;
      var $19=_testnext($18, 44);
      var $20=(($19)|0)!=0;
      if ($20) { __label__ = 6; break; } else { __label__ = 11; break; }
    case 6: 
      var $22=$2;
      var $23=(($nv)|0);
      HEAP32[(($23)>>2)]=$22;
      var $24=$1;
      var $25=(($nv+4)|0);
      _primaryexp($24, $25);
      var $26=(($nv+4)|0);
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0)==6;
      if ($29) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $31=$1;
      var $32=$2;
      var $33=(($nv+4)|0);
      _check_conflict($31, $32, $33);
      __label__ = 8; break;
    case 8: 
      var $35=$3;
      var $36=$1;
      var $37=(($36+40)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+52)|0);
      var $40=HEAPU16[(($39)>>1)];
      var $41=(($40)&65535);
      var $42=(((200)-($41))|0);
      var $43=(($35)|0) > (($42)|0);
      if ($43) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $45=$1;
      var $46=(($45+36)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$1;
      var $49=(($48+40)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+52)|0);
      var $52=HEAPU16[(($51)>>1)];
      var $53=(($52)&65535);
      var $54=(((200)-($53))|0);
      _errorlimit($47, $54, ((STRING_TABLE.__str1638)|0));
      __label__ = 10; break;
    case 10: 
      var $56=$1;
      var $57=$3;
      var $58=((($57)+(1))|0);
      _assignment($56, $nv, $58);
      __label__ = 17; break;
    case 11: 
      var $60=$1;
      _checknext($60, 61);
      var $61=$1;
      var $62=_explist1($61, $e);
      $nexps=$62;
      var $63=$nexps;
      var $64=$3;
      var $65=(($63)|0)!=(($64)|0);
      if ($65) { __label__ = 12; break; } else { __label__ = 15; break; }
    case 12: 
      var $67=$1;
      var $68=$3;
      var $69=$nexps;
      _adjust_assign($67, $68, $69, $e);
      var $70=$nexps;
      var $71=$3;
      var $72=(($70)|0) > (($71)|0);
      if ($72) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $74=$nexps;
      var $75=$3;
      var $76=((($74)-($75))|0);
      var $77=$1;
      var $78=(($77+36)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+36)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=((($81)-($76))|0);
      HEAP32[(($80)>>2)]=$82;
      __label__ = 14; break;
    case 14: 
      __label__ = 16; break;
    case 15: 
      var $85=$1;
      var $86=(($85+36)|0);
      var $87=HEAP32[(($86)>>2)];
      _luaK_setoneret($87, $e);
      var $88=$1;
      var $89=(($88+36)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$2;
      var $92=(($91+4)|0);
      _luaK_storevar($90, $92, $e);
      __label__ = 18; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $95=$1;
      var $96=(($95+36)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97+36)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=((($99)-(1))|0);
      _init_exp($e, 12, $100);
      var $101=$1;
      var $102=(($101+36)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=$2;
      var $105=(($104+4)|0);
      _luaK_storevar($103, $105, $e);
      __label__ = 18; break;
    case 18: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_assignment["X"]=1;

function _check_conflict($ls, $lh, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $fs;
      var $extra;
      var $conflict;
      $1=$ls;
      $2=$lh;
      $3=$v;
      var $4=$1;
      var $5=(($4+36)|0);
      var $6=HEAP32[(($5)>>2)];
      $fs=$6;
      var $7=$fs;
      var $8=(($7+36)|0);
      var $9=HEAP32[(($8)>>2)];
      $extra=$9;
      $conflict=0;
      __label__ = 3; break;
    case 3: 
      var $11=$2;
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 4; break; } else { __label__ = 12; break; }
    case 4: 
      var $14=$2;
      var $15=(($14+4)|0);
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|0)==9;
      if ($18) { __label__ = 5; break; } else { __label__ = 10; break; }
    case 5: 
      var $20=$2;
      var $21=(($20+4)|0);
      var $22=(($21+4)|0);
      var $23=$22;
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$3;
      var $27=(($26+4)|0);
      var $28=$27;
      var $29=(($28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($25)|0)==(($30)|0);
      if ($31) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $conflict=1;
      var $33=$extra;
      var $34=$2;
      var $35=(($34+4)|0);
      var $36=(($35+4)|0);
      var $37=$36;
      var $38=(($37)|0);
      HEAP32[(($38)>>2)]=$33;
      __label__ = 7; break;
    case 7: 
      var $40=$2;
      var $41=(($40+4)|0);
      var $42=(($41+4)|0);
      var $43=$42;
      var $44=(($43+4)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$3;
      var $47=(($46+4)|0);
      var $48=$47;
      var $49=(($48)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($45)|0)==(($50)|0);
      if ($51) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $conflict=1;
      var $53=$extra;
      var $54=$2;
      var $55=(($54+4)|0);
      var $56=(($55+4)|0);
      var $57=$56;
      var $58=(($57+4)|0);
      HEAP32[(($58)>>2)]=$53;
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $62=$2;
      var $63=(($62)|0);
      var $64=HEAP32[(($63)>>2)];
      $2=$64;
      __label__ = 3; break;
    case 12: 
      var $66=$conflict;
      var $67=(($66)|0)!=0;
      if ($67) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $69=$fs;
      var $70=$fs;
      var $71=(($70+36)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$3;
      var $74=(($73+4)|0);
      var $75=$74;
      var $76=(($75)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=_luaK_codeABC($69, 0, $72, $77, 0);
      var $79=$fs;
      _luaK_reserveregs($79, 1);
      __label__ = 14; break;
    case 14: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_check_conflict["X"]=1;

function _errorlimit($fs, $limit, $what) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $msg;
      $1=$fs;
      $2=$limit;
      $3=$what;
      var $4=$1;
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+60)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)==0;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$1;
      var $12=(($11+16)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$2;
      var $15=$3;
      var $16=_luaO_pushfstring($13, ((STRING_TABLE.__str10647)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$15,tempInt));
      var $30 = $16;__label__ = 5; break;
    case 4: 
      var $18=$1;
      var $19=(($18+16)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$1;
      var $22=(($21)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+60)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$2;
      var $27=$3;
      var $28=_luaO_pushfstring($20, ((STRING_TABLE.__str11648)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$25,HEAP32[(((tempInt)+(4))>>2)]=$26,HEAP32[(((tempInt)+(8))>>2)]=$27,tempInt));
      var $30 = $28;__label__ = 5; break;
    case 5: 
      var $30;
      $msg=$30;
      var $31=$1;
      var $32=(($31+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$msg;
      _luaX_lexerror($33, $34, 0);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _checknext($ls, $c) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ls;
  $2=$c;
  var $3=$1;
  var $4=$2;
  _check($3, $4);
  var $5=$1;
  _luaX_next($5);
  ;
  return;
}


function _explist1($ls, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $n;
      $1=$ls;
      $2=$v;
      $n=1;
      var $3=$1;
      var $4=$2;
      _expr($3, $4);
      __label__ = 3; break;
    case 3: 
      var $6=$1;
      var $7=_testnext($6, 44);
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $10=$1;
      var $11=(($10+36)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$2;
      _luaK_exp2nextreg($12, $13);
      var $14=$1;
      var $15=$2;
      _expr($14, $15);
      var $16=$n;
      var $17=((($16)+(1))|0);
      $n=$17;
      __label__ = 3; break;
    case 5: 
      var $19=$n;
      ;
      return $19;
    default: assert(0, "bad label: " + __label__);
  }
}


function _getunopr($op) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$op;
      var $3=$2;
      if ((($3)|0) == 270) {
        __label__ = 3; break;
      }
      else if ((($3)|0) == 45) {
        __label__ = 4; break;
      }
      else if ((($3)|0) == 35) {
        __label__ = 5; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 3: 
      $1=1;
      __label__ = 7; break;
    case 4: 
      $1=0;
      __label__ = 7; break;
    case 5: 
      $1=2;
      __label__ = 7; break;
    case 6: 
      $1=3;
      __label__ = 7; break;
    case 7: 
      var $9=$1;
      ;
      return $9;
    default: assert(0, "bad label: " + __label__);
  }
}


function _getbinopr($op) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$op;
      var $3=$2;
      if ((($3)|0) == 43) {
        __label__ = 3; break;
      }
      else if ((($3)|0) == 45) {
        __label__ = 4; break;
      }
      else if ((($3)|0) == 42) {
        __label__ = 5; break;
      }
      else if ((($3)|0) == 47) {
        __label__ = 6; break;
      }
      else if ((($3)|0) == 37) {
        __label__ = 7; break;
      }
      else if ((($3)|0) == 94) {
        __label__ = 8; break;
      }
      else if ((($3)|0) == 278) {
        __label__ = 9; break;
      }
      else if ((($3)|0) == 283) {
        __label__ = 10; break;
      }
      else if ((($3)|0) == 280) {
        __label__ = 11; break;
      }
      else if ((($3)|0) == 60) {
        __label__ = 12; break;
      }
      else if ((($3)|0) == 282) {
        __label__ = 13; break;
      }
      else if ((($3)|0) == 62) {
        __label__ = 14; break;
      }
      else if ((($3)|0) == 281) {
        __label__ = 15; break;
      }
      else if ((($3)|0) == 257) {
        __label__ = 16; break;
      }
      else if ((($3)|0) == 271) {
        __label__ = 17; break;
      }
      else {
      __label__ = 18; break;
      }
      
    case 3: 
      $1=0;
      __label__ = 19; break;
    case 4: 
      $1=1;
      __label__ = 19; break;
    case 5: 
      $1=2;
      __label__ = 19; break;
    case 6: 
      $1=3;
      __label__ = 19; break;
    case 7: 
      $1=4;
      __label__ = 19; break;
    case 8: 
      $1=5;
      __label__ = 19; break;
    case 9: 
      $1=6;
      __label__ = 19; break;
    case 10: 
      $1=7;
      __label__ = 19; break;
    case 11: 
      $1=8;
      __label__ = 19; break;
    case 12: 
      $1=9;
      __label__ = 19; break;
    case 13: 
      $1=10;
      __label__ = 19; break;
    case 14: 
      $1=11;
      __label__ = 19; break;
    case 15: 
      $1=12;
      __label__ = 19; break;
    case 16: 
      $1=13;
      __label__ = 19; break;
    case 17: 
      $1=14;
      __label__ = 19; break;
    case 18: 
      $1=15;
      __label__ = 19; break;
    case 19: 
      var $21=$1;
      ;
      return $21;
    default: assert(0, "bad label: " + __label__);
  }
}


function _init_exp($e, $k, $i) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$e;
  $2=$k;
  $3=$i;
  var $4=$1;
  var $5=(($4+12)|0);
  HEAP32[(($5)>>2)]=-1;
  var $6=$1;
  var $7=(($6+16)|0);
  HEAP32[(($7)>>2)]=-1;
  var $8=$2;
  var $9=$1;
  var $10=(($9)|0);
  HEAP32[(($10)>>2)]=$8;
  var $11=$3;
  var $12=$1;
  var $13=(($12+4)|0);
  var $14=$13;
  var $15=(($14)|0);
  HEAP32[(($15)>>2)]=$11;
  ;
  return;
}


function _adjustlocalvars($ls, $nvars) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      $1=$ls;
      $2=$nvars;
      var $3=$1;
      var $4=(($3+36)|0);
      var $5=HEAP32[(($4)>>2)];
      $fs=$5;
      var $6=$fs;
      var $7=(($6+50)|0);
      var $8=HEAPU8[($7)];
      var $9=(($8)&255);
      var $10=$2;
      var $11=((($9)+($10))|0);
      var $12=(($11) & 255);
      var $13=$fs;
      var $14=(($13+50)|0);
      HEAP8[($14)]=$12;
      __label__ = 3; break;
    case 3: 
      var $16=$2;
      var $17=(($16)|0)!=0;
      if ($17) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $19=$fs;
      var $20=(($19+24)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$fs;
      var $23=(($22+50)|0);
      var $24=HEAPU8[($23)];
      var $25=(($24)&255);
      var $26=$2;
      var $27=((($25)-($26))|0);
      var $28=$fs;
      var $29=(($28+172)|0);
      var $30=(($29+($27<<1))|0);
      var $31=HEAPU16[(($30)>>1)];
      var $32=(($31)&65535);
      var $33=$fs;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+24)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+($32)*(12))|0);
      var $39=(($38+4)|0);
      HEAP32[(($39)>>2)]=$21;
      __label__ = 5; break;
    case 5: 
      var $41=$2;
      var $42=((($41)-(1))|0);
      $2=$42;
      __label__ = 3; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_adjustlocalvars["X"]=1;

function _adjust_assign($ls, $nvars, $nexps, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $fs;
      var $extra;
      var $reg;
      $1=$ls;
      $2=$nvars;
      $3=$nexps;
      $4=$e;
      var $5=$1;
      var $6=(($5+36)|0);
      var $7=HEAP32[(($6)>>2)];
      $fs=$7;
      var $8=$2;
      var $9=$3;
      var $10=((($8)-($9))|0);
      $extra=$10;
      var $11=$4;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0)==13;
      if ($14) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $16=$4;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|0)==14;
      if ($19) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $21=$extra;
      var $22=((($21)+(1))|0);
      $extra=$22;
      var $23=$extra;
      var $24=(($23)|0) < 0;
      if ($24) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $extra=0;
      __label__ = 6; break;
    case 6: 
      var $27=$fs;
      var $28=$4;
      var $29=$extra;
      _luaK_setreturns($27, $28, $29);
      var $30=$extra;
      var $31=(($30)|0) > 1;
      if ($31) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $33=$fs;
      var $34=$extra;
      var $35=((($34)-(1))|0);
      _luaK_reserveregs($33, $35);
      __label__ = 8; break;
    case 8: 
      __label__ = 14; break;
    case 9: 
      var $38=$4;
      var $39=(($38)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40)|0)!=0;
      if ($41) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $43=$fs;
      var $44=$4;
      _luaK_exp2nextreg($43, $44);
      __label__ = 11; break;
    case 11: 
      var $46=$extra;
      var $47=(($46)|0) > 0;
      if ($47) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $49=$fs;
      var $50=(($49+36)|0);
      var $51=HEAP32[(($50)>>2)];
      $reg=$51;
      var $52=$fs;
      var $53=$extra;
      _luaK_reserveregs($52, $53);
      var $54=$fs;
      var $55=$reg;
      var $56=$extra;
      _luaK_nil($54, $55, $56);
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_adjust_assign["X"]=1;

function _expr($ls, $v) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ls;
  $2=$v;
  var $3=$1;
  var $4=$2;
  var $5=_subexpr($3, $4, 0);
  ;
  return;
}


function _subexpr($ls, $v, $limit) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $op;
      var $uop;
      var $v2=__stackBase__;
      var $nextop;
      $1=$ls;
      $2=$v;
      $3=$limit;
      var $4=$1;
      _enterlevel($4);
      var $5=$1;
      var $6=(($5+12)|0);
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=_getunopr($8);
      $uop=$9;
      var $10=$uop;
      var $11=(($10)|0)!=3;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$1;
      _luaX_next($13);
      var $14=$1;
      var $15=$2;
      var $16=_subexpr($14, $15, 8);
      var $17=$1;
      var $18=(($17+36)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$uop;
      var $21=$2;
      _luaK_prefix($19, $20, $21);
      __label__ = 5; break;
    case 4: 
      var $23=$1;
      var $24=$2;
      _simpleexp($23, $24);
      __label__ = 5; break;
    case 5: 
      var $26=$1;
      var $27=(($26+12)|0);
      var $28=(($27)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=_getbinopr($29);
      $op=$30;
      __label__ = 6; break;
    case 6: 
      var $32=$op;
      var $33=(($32)|0)!=15;
      if ($33) { __label__ = 7; break; } else { var $43 = 0;__label__ = 8; break; }
    case 7: 
      var $35=$op;
      var $36=((_priority+($35<<1))|0);
      var $37=(($36)|0);
      var $38=HEAPU8[($37)];
      var $39=(($38)&255);
      var $40=$3;
      var $41=(($39)>>>0) > (($40)>>>0);
      var $43 = $41;__label__ = 8; break;
    case 8: 
      var $43;
      if ($43) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $45=$1;
      _luaX_next($45);
      var $46=$1;
      var $47=(($46+36)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$op;
      var $50=$2;
      _luaK_infix($48, $49, $50);
      var $51=$1;
      var $52=$op;
      var $53=((_priority+($52<<1))|0);
      var $54=(($53+1)|0);
      var $55=HEAPU8[($54)];
      var $56=(($55)&255);
      var $57=_subexpr($51, $v2, $56);
      $nextop=$57;
      var $58=$1;
      var $59=(($58+36)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$op;
      var $62=$2;
      _luaK_posfix($60, $61, $62, $v2);
      var $63=$nextop;
      $op=$63;
      __label__ = 6; break;
    case 10: 
      var $65=$1;
      var $66=(($65+40)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+52)|0);
      var $69=HEAP16[(($68)>>1)];
      var $70=((($69)-(1))&65535);
      HEAP16[(($68)>>1)]=$70;
      var $71=$op;
      STACKTOP = __stackBase__;
      return $71;
    default: assert(0, "bad label: " + __label__);
  }
}
_subexpr["X"]=1;

function _simpleexp($ls, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      $1=$ls;
      $2=$v;
      var $3=$1;
      var $4=(($3+12)|0);
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      if ((($6)|0) == 284) {
        __label__ = 3; break;
      }
      else if ((($6)|0) == 286) {
        __label__ = 4; break;
      }
      else if ((($6)|0) == 269) {
        __label__ = 5; break;
      }
      else if ((($6)|0) == 275) {
        __label__ = 6; break;
      }
      else if ((($6)|0) == 263) {
        __label__ = 7; break;
      }
      else if ((($6)|0) == 279) {
        __label__ = 8; break;
      }
      else if ((($6)|0) == 123) {
        __label__ = 11; break;
      }
      else if ((($6)|0) == 265) {
        __label__ = 12; break;
      }
      else {
      __label__ = 13; break;
      }
      
    case 3: 
      var $8=$2;
      _init_exp($8, 5, 0);
      var $9=$1;
      var $10=(($9+12)|0);
      var $11=(($10+4)|0);
      var $12=$11;
      var $13=(tempDoubleI32[0]=HEAP32[(($12)>>2)],tempDoubleI32[1]=HEAP32[((($12)+(4))>>2)],tempDoubleF64[0]);
      var $14=$2;
      var $15=(($14+4)|0);
      var $16=$15;
      (tempDoubleF64[0]=$13,HEAP32[(($16)>>2)]=tempDoubleI32[0],HEAP32[((($16)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 14; break;
    case 4: 
      var $18=$1;
      var $19=$2;
      var $20=$1;
      var $21=(($20+12)|0);
      var $22=(($21+4)|0);
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      _codestring($18, $19, $24);
      __label__ = 14; break;
    case 5: 
      var $26=$2;
      _init_exp($26, 1, 0);
      __label__ = 14; break;
    case 6: 
      var $28=$2;
      _init_exp($28, 2, 0);
      __label__ = 14; break;
    case 7: 
      var $30=$2;
      _init_exp($30, 3, 0);
      __label__ = 14; break;
    case 8: 
      var $32=$1;
      var $33=(($32+36)|0);
      var $34=HEAP32[(($33)>>2)];
      $fs=$34;
      var $35=$fs;
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+74)|0);
      var $39=HEAP8[($38)];
      var $40=(($39 << 24) >> 24)!=0;
      if ($40) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $42=$1;
      _luaX_syntaxerror($42, ((STRING_TABLE.__str2639)|0));
      __label__ = 10; break;
    case 10: 
      var $44=$fs;
      var $45=(($44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+74)|0);
      var $48=HEAPU8[($47)];
      var $49=(($48)&255);
      var $50=$49 & -5;
      var $51=(($50) & 255);
      HEAP8[($47)]=$51;
      var $52=$2;
      var $53=$fs;
      var $54=_luaK_codeABC($53, 37, 0, 1, 0);
      _init_exp($52, 14, $54);
      __label__ = 14; break;
    case 11: 
      var $56=$1;
      var $57=$2;
      _constructor($56, $57);
      __label__ = 15; break;
    case 12: 
      var $59=$1;
      _luaX_next($59);
      var $60=$1;
      var $61=$2;
      var $62=$1;
      var $63=(($62+4)|0);
      var $64=HEAP32[(($63)>>2)];
      _body($60, $61, 0, $64);
      __label__ = 15; break;
    case 13: 
      var $66=$1;
      var $67=$2;
      _primaryexp($66, $67);
      __label__ = 15; break;
    case 14: 
      var $69=$1;
      _luaX_next($69);
      __label__ = 15; break;
    case 15: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_simpleexp["X"]=1;

function _codestring($ls, $e, $s) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$ls;
  $2=$e;
  $3=$s;
  var $4=$2;
  var $5=$1;
  var $6=(($5+36)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$3;
  var $9=_luaK_stringK($7, $8);
  _init_exp($4, 4, $9);
  ;
  return;
}


function _constructor($ls, $t) {
  var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      var $line;
      var $pc;
      var $cc=__stackBase__;
      $1=$ls;
      $2=$t;
      var $3=$1;
      var $4=(($3+36)|0);
      var $5=HEAP32[(($4)>>2)];
      $fs=$5;
      var $6=$1;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      $line=$8;
      var $9=$fs;
      var $10=_luaK_codeABC($9, 10, 0, 0, 0);
      $pc=$10;
      var $11=(($cc+32)|0);
      HEAP32[(($11)>>2)]=0;
      var $12=(($cc+24)|0);
      HEAP32[(($12)>>2)]=0;
      var $13=(($cc+28)|0);
      HEAP32[(($13)>>2)]=0;
      var $14=$2;
      var $15=(($cc+20)|0);
      HEAP32[(($15)>>2)]=$14;
      var $16=$2;
      var $17=$pc;
      _init_exp($16, 11, $17);
      var $18=(($cc)|0);
      _init_exp($18, 0, 0);
      var $19=$1;
      var $20=(($19+36)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$2;
      _luaK_exp2nextreg($21, $22);
      var $23=$1;
      _checknext($23, 123);
      __label__ = 3; break;
    case 3: 
      var $25=$1;
      var $26=(($25+12)|0);
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0)==125;
      if ($29) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 16; break;
    case 5: 
      var $32=$fs;
      _closelistfield($32, $cc);
      var $33=$1;
      var $34=(($33+12)|0);
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      if ((($36)|0) == 285) {
        __label__ = 6; break;
      }
      else if ((($36)|0) == 91) {
        __label__ = 10; break;
      }
      else {
      __label__ = 11; break;
      }
      
    case 6: 
      var $38=$1;
      _luaX_lookahead($38);
      var $39=$1;
      var $40=(($39+24)|0);
      var $41=(($40)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42)|0)!=61;
      if ($43) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $45=$1;
      _listfield($45, $cc);
      __label__ = 9; break;
    case 8: 
      var $47=$1;
      _recfield($47, $cc);
      __label__ = 9; break;
    case 9: 
      __label__ = 12; break;
    case 10: 
      var $50=$1;
      _recfield($50, $cc);
      __label__ = 12; break;
    case 11: 
      var $52=$1;
      _listfield($52, $cc);
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $55=$1;
      var $56=_testnext($55, 44);
      var $57=(($56)|0)!=0;
      if ($57) { var $63 = 1;__label__ = 15; break; } else { __label__ = 14; break; }
    case 14: 
      var $59=$1;
      var $60=_testnext($59, 59);
      var $61=(($60)|0)!=0;
      var $63 = $61;__label__ = 15; break;
    case 15: 
      var $63;
      if ($63) { __label__ = 3; break; } else { __label__ = 16; break; }
    case 16: 
      var $65=$1;
      var $66=$line;
      _check_match($65, 125, 123, $66);
      var $67=$fs;
      _lastlistfield($67, $cc);
      var $68=$pc;
      var $69=$fs;
      var $70=(($69)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+12)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+($68<<2))|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$75 & 8388607;
      var $77=(($cc+28)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=_luaO_int2fb($78);
      var $80=$79 << 23;
      var $81=$80 & -8388608;
      var $82=$76 | $81;
      var $83=$pc;
      var $84=$fs;
      var $85=(($84)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+12)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88+($83<<2))|0);
      HEAP32[(($89)>>2)]=$82;
      var $90=$pc;
      var $91=$fs;
      var $92=(($91)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+12)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95+($90<<2))|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$97 & -8372225;
      var $99=(($cc+24)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=_luaO_int2fb($100);
      var $102=$101 << 14;
      var $103=$102 & 8372224;
      var $104=$98 | $103;
      var $105=$pc;
      var $106=$fs;
      var $107=(($106)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=(($108+12)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110+($105<<2))|0);
      HEAP32[(($111)>>2)]=$104;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_constructor["X"]=1;

function _body($ls, $e, $needself, $line) {
  var __stackBase__  = STACKTOP; STACKTOP += 572; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $new_fs=__stackBase__;
      $1=$ls;
      $2=$e;
      $3=$needself;
      $4=$line;
      var $5=$1;
      _open_func($5, $new_fs);
      var $6=$4;
      var $7=(($new_fs)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8+60)|0);
      HEAP32[(($9)>>2)]=$6;
      var $10=$1;
      _checknext($10, 40);
      var $11=$3;
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $14=$1;
      var $15=$1;
      var $16=_luaX_newstring($15, ((STRING_TABLE.__str3640)|0), 4);
      _new_localvar($14, $16, 0);
      var $17=$1;
      _adjustlocalvars($17, 1);
      __label__ = 4; break;
    case 4: 
      var $19=$1;
      _parlist($19);
      var $20=$1;
      _checknext($20, 41);
      var $21=$1;
      _chunk($21);
      var $22=$1;
      var $23=(($22+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($new_fs)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+64)|0);
      HEAP32[(($27)>>2)]=$24;
      var $28=$1;
      var $29=$4;
      _check_match($28, 262, 265, $29);
      var $30=$1;
      _close_func($30);
      var $31=$1;
      var $32=$2;
      _pushclosure($31, $new_fs, $32);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_body["X"]=1;

function _new_localvar($ls, $name, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $fs;
      $1=$ls;
      $2=$name;
      $3=$n;
      var $4=$1;
      var $5=(($4+36)|0);
      var $6=HEAP32[(($5)>>2)];
      $fs=$6;
      var $7=$fs;
      var $8=(($7+50)|0);
      var $9=HEAPU8[($8)];
      var $10=(($9)&255);
      var $11=$3;
      var $12=((($10)+($11))|0);
      var $13=((($12)+(1))|0);
      var $14=(($13)|0) > 200;
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $16=$fs;
      _errorlimit($16, 200, ((STRING_TABLE.__str7644)|0));
      __label__ = 4; break;
    case 4: 
      var $18=$1;
      var $19=$2;
      var $20=_registerlocalvar($18, $19);
      var $21=(($20) & 65535);
      var $22=$fs;
      var $23=(($22+50)|0);
      var $24=HEAPU8[($23)];
      var $25=(($24)&255);
      var $26=$3;
      var $27=((($25)+($26))|0);
      var $28=$fs;
      var $29=(($28+172)|0);
      var $30=(($29+($27<<1))|0);
      HEAP16[(($30)>>1)]=$21;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _parlist($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $fs;
      var $f;
      var $nparams;
      $1=$ls;
      var $2=$1;
      var $3=(($2+36)|0);
      var $4=HEAP32[(($3)>>2)];
      $fs=$4;
      var $5=$fs;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      $f=$7;
      $nparams=0;
      var $8=$f;
      var $9=(($8+74)|0);
      HEAP8[($9)]=0;
      var $10=$1;
      var $11=(($10+12)|0);
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0)!=41;
      if ($14) { __label__ = 3; break; } else { __label__ = 13; break; }
    case 3: 
      __label__ = 4; break;
    case 4: 
      var $17=$1;
      var $18=(($17+12)|0);
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      if ((($20)|0) == 285) {
        __label__ = 5; break;
      }
      else if ((($20)|0) == 279) {
        __label__ = 6; break;
      }
      else {
      __label__ = 7; break;
      }
      
    case 5: 
      var $22=$1;
      var $23=$1;
      var $24=_str_checkname($23);
      var $25=$nparams;
      var $26=((($25)+(1))|0);
      $nparams=$26;
      _new_localvar($22, $24, $25);
      __label__ = 8; break;
    case 6: 
      var $28=$1;
      _luaX_next($28);
      var $29=$1;
      var $30=$1;
      var $31=_luaX_newstring($30, ((STRING_TABLE.__str5642)|0), 3);
      var $32=$nparams;
      var $33=((($32)+(1))|0);
      $nparams=$33;
      _new_localvar($29, $31, $32);
      var $34=$f;
      var $35=(($34+74)|0);
      HEAP8[($35)]=5;
      var $36=$f;
      var $37=(($36+74)|0);
      var $38=HEAPU8[($37)];
      var $39=(($38)&255);
      var $40=$39 | 2;
      var $41=(($40) & 255);
      HEAP8[($37)]=$41;
      __label__ = 8; break;
    case 7: 
      var $43=$1;
      _luaX_syntaxerror($43, ((STRING_TABLE.__str6643)|0));
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $46=$f;
      var $47=(($46+74)|0);
      var $48=HEAP8[($47)];
      var $49=(($48 << 24) >> 24)!=0;
      if ($49) { var $55 = 0;__label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $51=$1;
      var $52=_testnext($51, 44);
      var $53=(($52)|0)!=0;
      var $55 = $53;__label__ = 11; break;
    case 11: 
      var $55;
      if ($55) { __label__ = 4; break; } else { __label__ = 12; break; }
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $58=$1;
      var $59=$nparams;
      _adjustlocalvars($58, $59);
      var $60=$fs;
      var $61=(($60+50)|0);
      var $62=HEAPU8[($61)];
      var $63=(($62)&255);
      var $64=$f;
      var $65=(($64+74)|0);
      var $66=HEAPU8[($65)];
      var $67=(($66)&255);
      var $68=$67 & 1;
      var $69=((($63)-($68))|0);
      var $70=(($69) & 255);
      var $71=$f;
      var $72=(($71+73)|0);
      HEAP8[($72)]=$70;
      var $73=$fs;
      var $74=$fs;
      var $75=(($74+50)|0);
      var $76=HEAPU8[($75)];
      var $77=(($76)&255);
      _luaK_reserveregs($73, $77);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_parlist["X"]=1;

function _pushclosure($ls, $func, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $fs;
      var $f;
      var $oldsize;
      var $i;
      var $o;
      $1=$ls;
      $2=$func;
      $3=$v;
      var $4=$1;
      var $5=(($4+36)|0);
      var $6=HEAP32[(($5)>>2)];
      $fs=$6;
      var $7=$fs;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      $f=$9;
      var $10=$f;
      var $11=(($10+52)|0);
      var $12=HEAP32[(($11)>>2)];
      $oldsize=$12;
      var $13=$fs;
      var $14=(($13+44)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=((($15)+(1))|0);
      var $17=$f;
      var $18=(($17+52)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($16)|0) > (($19)|0);
      if ($20) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $22=$1;
      var $23=(($22+40)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$f;
      var $26=(($25+16)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$27;
      var $29=$f;
      var $30=(($29+52)|0);
      var $31=_luaM_growaux_($24, $28, $30, 4, 262143, ((STRING_TABLE.__str4641)|0));
      var $32=$31;
      var $33=$f;
      var $34=(($33+16)|0);
      HEAP32[(($34)>>2)]=$32;
      __label__ = 4; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $37=$oldsize;
      var $38=$f;
      var $39=(($38+52)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($37)|0) < (($40)|0);
      if ($41) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $43=$oldsize;
      var $44=((($43)+(1))|0);
      $oldsize=$44;
      var $45=$f;
      var $46=(($45+16)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+($43<<2))|0);
      HEAP32[(($48)>>2)]=0;
      __label__ = 5; break;
    case 7: 
      var $50=$2;
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$fs;
      var $54=(($53+44)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=((($55)+(1))|0);
      HEAP32[(($54)>>2)]=$56;
      var $57=$f;
      var $58=(($57+16)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+($55<<2))|0);
      HEAP32[(($60)>>2)]=$52;
      var $61=$2;
      var $62=(($61)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$63;
      var $65=$64;
      var $66=(($65+5)|0);
      var $67=HEAPU8[($66)];
      var $68=(($67)&255);
      var $69=$68 & 3;
      var $70=(($69)|0)!=0;
      if ($70) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $72=$f;
      var $73=$72;
      var $74=$73;
      var $75=(($74+5)|0);
      var $76=HEAPU8[($75)];
      var $77=(($76)&255);
      var $78=$77 & 4;
      var $79=(($78)|0)!=0;
      if ($79) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $81=$1;
      var $82=(($81+40)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$f;
      var $85=$84;
      var $86=$2;
      var $87=(($86)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$88;
      _luaC_barrierf($83, $85, $89);
      __label__ = 10; break;
    case 10: 
      var $91=$3;
      var $92=$fs;
      var $93=$fs;
      var $94=(($93+44)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=((($95)-(1))|0);
      var $97=_luaK_codeABx($92, 36, 0, $96);
      _init_exp($91, 11, $97);
      $i=0;
      __label__ = 11; break;
    case 11: 
      var $99=$i;
      var $100=$2;
      var $101=(($100)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=(($102+72)|0);
      var $104=HEAPU8[($103)];
      var $105=(($104)&255);
      var $106=(($99)|0) < (($105)|0);
      if ($106) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $108=$i;
      var $109=$2;
      var $110=(($109+51)|0);
      var $111=(($110+($108<<1))|0);
      var $112=(($111)|0);
      var $113=HEAPU8[($112)];
      var $114=(($113)&255);
      var $115=(($114)|0)==6;
      var $116=$115 ? 0 : 4;
      $o=$116;
      var $117=$fs;
      var $118=$o;
      var $119=$i;
      var $120=$2;
      var $121=(($120+51)|0);
      var $122=(($121+($119<<1))|0);
      var $123=(($122+1)|0);
      var $124=HEAPU8[($123)];
      var $125=(($124)&255);
      var $126=_luaK_codeABC($117, $118, 0, $125, 0);
      __label__ = 13; break;
    case 13: 
      var $128=$i;
      var $129=((($128)+(1))|0);
      $i=$129;
      __label__ = 11; break;
    case 14: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_pushclosure["X"]=1;

function _str_checkname($ls) {
  ;
  var __label__;

  var $1;
  var $ts;
  $1=$ls;
  var $2=$1;
  _check($2, 285);
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=(($4+4)|0);
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  $ts=$7;
  var $8=$1;
  _luaX_next($8);
  var $9=$ts;
  ;
  return $9;
}


function _registerlocalvar($ls, $varname) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      var $f;
      var $oldsize;
      $1=$ls;
      $2=$varname;
      var $3=$1;
      var $4=(($3+36)|0);
      var $5=HEAP32[(($4)>>2)];
      $fs=$5;
      var $6=$fs;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      $f=$8;
      var $9=$f;
      var $10=(($9+56)|0);
      var $11=HEAP32[(($10)>>2)];
      $oldsize=$11;
      var $12=$fs;
      var $13=(($12+48)|0);
      var $14=HEAP16[(($13)>>1)];
      var $15=(($14 << 16) >> 16);
      var $16=((($15)+(1))|0);
      var $17=$f;
      var $18=(($17+56)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($16)|0) > (($19)|0);
      if ($20) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $22=$1;
      var $23=(($22+40)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$f;
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$27;
      var $29=$f;
      var $30=(($29+56)|0);
      var $31=_luaM_growaux_($24, $28, $30, 12, 32767, ((STRING_TABLE.__str8645)|0));
      var $32=$31;
      var $33=$f;
      var $34=(($33+24)|0);
      HEAP32[(($34)>>2)]=$32;
      __label__ = 4; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $37=$oldsize;
      var $38=$f;
      var $39=(($38+56)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($37)|0) < (($40)|0);
      if ($41) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $43=$oldsize;
      var $44=((($43)+(1))|0);
      $oldsize=$44;
      var $45=$f;
      var $46=(($45+24)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+($43)*(12))|0);
      var $49=(($48)|0);
      HEAP32[(($49)>>2)]=0;
      __label__ = 5; break;
    case 7: 
      var $51=$2;
      var $52=$fs;
      var $53=(($52+48)|0);
      var $54=HEAP16[(($53)>>1)];
      var $55=(($54 << 16) >> 16);
      var $56=$f;
      var $57=(($56+24)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+($55)*(12))|0);
      var $60=(($59)|0);
      HEAP32[(($60)>>2)]=$51;
      var $61=$2;
      var $62=$61;
      var $63=$62;
      var $64=(($63+5)|0);
      var $65=HEAPU8[($64)];
      var $66=(($65)&255);
      var $67=$66 & 3;
      var $68=(($67)|0)!=0;
      if ($68) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $70=$f;
      var $71=$70;
      var $72=$71;
      var $73=(($72+5)|0);
      var $74=HEAPU8[($73)];
      var $75=(($74)&255);
      var $76=$75 & 4;
      var $77=(($76)|0)!=0;
      if ($77) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $79=$1;
      var $80=(($79+40)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$f;
      var $83=$82;
      var $84=$2;
      var $85=$84;
      _luaC_barrierf($81, $83, $85);
      __label__ = 10; break;
    case 10: 
      var $87=$fs;
      var $88=(($87+48)|0);
      var $89=HEAP16[(($88)>>1)];
      var $90=((($89)+(1))&65535);
      HEAP16[(($88)>>1)]=$90;
      var $91=(($89 << 16) >> 16);
      ;
      return $91;
    default: assert(0, "bad label: " + __label__);
  }
}
_registerlocalvar["X"]=1;

function _closelistfield($fs, $cc) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$fs;
      $2=$cc;
      var $3=$2;
      var $4=(($3)|0);
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)==0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 6; break;
    case 4: 
      var $10=$1;
      var $11=$2;
      var $12=(($11)|0);
      _luaK_exp2nextreg($10, $12);
      var $13=$2;
      var $14=(($13)|0);
      var $15=(($14)|0);
      HEAP32[(($15)>>2)]=0;
      var $16=$2;
      var $17=(($16+32)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|0)==50;
      if ($19) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $21=$1;
      var $22=$2;
      var $23=(($22+20)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+4)|0);
      var $26=$25;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$2;
      var $30=(($29+28)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$2;
      var $33=(($32+32)|0);
      var $34=HEAP32[(($33)>>2)];
      _luaK_setlist($21, $28, $31, $34);
      var $35=$2;
      var $36=(($35+32)|0);
      HEAP32[(($36)>>2)]=0;
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _listfield($ls, $cc) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$ls;
      $2=$cc;
      var $3=$1;
      var $4=$2;
      var $5=(($4)|0);
      _expr($3, $5);
      var $6=$2;
      var $7=(($6+28)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0) > 2147483645;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$1;
      var $12=(($11+36)|0);
      var $13=HEAP32[(($12)>>2)];
      _errorlimit($13, 2147483645, ((STRING_TABLE.__str9646)|0));
      __label__ = 4; break;
    case 4: 
      var $15=$2;
      var $16=(($15+28)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17)+(1))|0);
      HEAP32[(($16)>>2)]=$18;
      var $19=$2;
      var $20=(($19+32)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=((($21)+(1))|0);
      HEAP32[(($20)>>2)]=$22;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _recfield($ls, $cc) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      var $reg;
      var $key=__stackBase__;
      var $val=(__stackBase__)+(20);
      var $rkkey;
      $1=$ls;
      $2=$cc;
      var $3=$1;
      var $4=(($3+36)|0);
      var $5=HEAP32[(($4)>>2)];
      $fs=$5;
      var $6=$1;
      var $7=(($6+36)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8+36)|0);
      var $10=HEAP32[(($9)>>2)];
      $reg=$10;
      var $11=$1;
      var $12=(($11+12)|0);
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0)==285;
      if ($15) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $17=$2;
      var $18=(($17+24)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|0) > 2147483645;
      if ($20) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $22=$fs;
      _errorlimit($22, 2147483645, ((STRING_TABLE.__str9646)|0));
      __label__ = 5; break;
    case 5: 
      var $24=$1;
      _checkname($24, $key);
      __label__ = 7; break;
    case 6: 
      var $26=$1;
      _yindex($26, $key);
      __label__ = 7; break;
    case 7: 
      var $28=$2;
      var $29=(($28+24)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=((($30)+(1))|0);
      HEAP32[(($29)>>2)]=$31;
      var $32=$1;
      _checknext($32, 61);
      var $33=$fs;
      var $34=_luaK_exp2RK($33, $key);
      $rkkey=$34;
      var $35=$1;
      _expr($35, $val);
      var $36=$fs;
      var $37=$2;
      var $38=(($37+20)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+4)|0);
      var $41=$40;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$rkkey;
      var $45=$fs;
      var $46=_luaK_exp2RK($45, $val);
      var $47=_luaK_codeABC($36, 9, $43, $44, $46);
      var $48=$reg;
      var $49=$fs;
      var $50=(($49+36)|0);
      HEAP32[(($50)>>2)]=$48;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_recfield["X"]=1;

function _lastlistfield($fs, $cc) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$fs;
      $2=$cc;
      var $3=$2;
      var $4=(($3+32)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)==0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 10; break;
    case 4: 
      var $9=$2;
      var $10=(($9)|0);
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|0)==13;
      if ($13) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $15=$2;
      var $16=(($15)|0);
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|0)==14;
      if ($19) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $21=$1;
      var $22=$2;
      var $23=(($22)|0);
      _luaK_setreturns($21, $23, -1);
      var $24=$1;
      var $25=$2;
      var $26=(($25+20)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+4)|0);
      var $29=$28;
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$2;
      var $33=(($32+28)|0);
      var $34=HEAP32[(($33)>>2)];
      _luaK_setlist($24, $31, $34, -1);
      var $35=$2;
      var $36=(($35+28)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=((($37)-(1))|0);
      HEAP32[(($36)>>2)]=$38;
      __label__ = 10; break;
    case 7: 
      var $40=$2;
      var $41=(($40)|0);
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43)|0)!=0;
      if ($44) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $46=$1;
      var $47=$2;
      var $48=(($47)|0);
      _luaK_exp2nextreg($46, $48);
      __label__ = 9; break;
    case 9: 
      var $50=$1;
      var $51=$2;
      var $52=(($51+20)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+4)|0);
      var $55=$54;
      var $56=(($55)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$2;
      var $59=(($58+28)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$2;
      var $62=(($61+32)|0);
      var $63=HEAP32[(($62)>>2)];
      _luaK_setlist($50, $57, $60, $63);
      __label__ = 10; break;
    case 10: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_lastlistfield["X"]=1;

function _checkname($ls, $e) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ls;
  $2=$e;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=_str_checkname($5);
  _codestring($3, $4, $6);
  ;
  return;
}


function _yindex($ls, $v) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ls;
  $2=$v;
  var $3=$1;
  _luaX_next($3);
  var $4=$1;
  var $5=$2;
  _expr($4, $5);
  var $6=$1;
  var $7=(($6+36)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  _luaK_exp2val($8, $9);
  var $10=$1;
  _checknext($10, 93);
  ;
  return;
}


function _prefixexp($ls, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $line;
      $1=$ls;
      $2=$v;
      var $3=$1;
      var $4=(($3+12)|0);
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      if ((($6)|0) == 40) {
        __label__ = 3; break;
      }
      else if ((($6)|0) == 285) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      var $8=$1;
      var $9=(($8+4)|0);
      var $10=HEAP32[(($9)>>2)];
      $line=$10;
      var $11=$1;
      _luaX_next($11);
      var $12=$1;
      var $13=$2;
      _expr($12, $13);
      var $14=$1;
      var $15=$line;
      _check_match($14, 41, 40, $15);
      var $16=$1;
      var $17=(($16+36)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      _luaK_dischargevars($18, $19);
      __label__ = 6; break;
    case 4: 
      var $21=$1;
      var $22=$2;
      _singlevar($21, $22);
      __label__ = 6; break;
    case 5: 
      var $24=$1;
      _luaX_syntaxerror($24, ((STRING_TABLE.__str14651)|0));
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _field($ls, $v) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $fs;
  var $key=__stackBase__;
  $1=$ls;
  $2=$v;
  var $3=$1;
  var $4=(($3+36)|0);
  var $5=HEAP32[(($4)>>2)];
  $fs=$5;
  var $6=$fs;
  var $7=$2;
  var $8=_luaK_exp2anyreg($6, $7);
  var $9=$1;
  _luaX_next($9);
  var $10=$1;
  _checkname($10, $key);
  var $11=$fs;
  var $12=$2;
  _luaK_indexed($11, $12, $key);
  STACKTOP = __stackBase__;
  return;
}


function _funcargs($ls, $f) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      var $args=__stackBase__;
      var $base;
      var $nparams;
      var $line;
      $1=$ls;
      $2=$f;
      var $3=$1;
      var $4=(($3+36)|0);
      var $5=HEAP32[(($4)>>2)];
      $fs=$5;
      var $6=$1;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      $line=$8;
      var $9=$1;
      var $10=(($9+12)|0);
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      if ((($12)|0) == 40) {
        __label__ = 3; break;
      }
      else if ((($12)|0) == 123) {
        __label__ = 9; break;
      }
      else if ((($12)|0) == 286) {
        __label__ = 10; break;
      }
      else {
      __label__ = 11; break;
      }
      
    case 3: 
      var $14=$line;
      var $15=$1;
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($14)|0)!=(($17)|0);
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $20=$1;
      _luaX_syntaxerror($20, ((STRING_TABLE.__str12649)|0));
      __label__ = 5; break;
    case 5: 
      var $22=$1;
      _luaX_next($22);
      var $23=$1;
      var $24=(($23+12)|0);
      var $25=(($24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|0)==41;
      if ($27) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $29=(($args)|0);
      HEAP32[(($29)>>2)]=0;
      __label__ = 8; break;
    case 7: 
      var $31=$1;
      var $32=_explist1($31, $args);
      var $33=$fs;
      _luaK_setreturns($33, $args, -1);
      __label__ = 8; break;
    case 8: 
      var $35=$1;
      var $36=$line;
      _check_match($35, 41, 40, $36);
      __label__ = 12; break;
    case 9: 
      var $38=$1;
      _constructor($38, $args);
      __label__ = 12; break;
    case 10: 
      var $40=$1;
      var $41=$1;
      var $42=(($41+12)|0);
      var $43=(($42+4)|0);
      var $44=$43;
      var $45=HEAP32[(($44)>>2)];
      _codestring($40, $args, $45);
      var $46=$1;
      _luaX_next($46);
      __label__ = 12; break;
    case 11: 
      var $48=$1;
      _luaX_syntaxerror($48, ((STRING_TABLE.__str13650)|0));
      __label__ = 19; break;
    case 12: 
      var $50=$2;
      var $51=(($50+4)|0);
      var $52=$51;
      var $53=(($52)|0);
      var $54=HEAP32[(($53)>>2)];
      $base=$54;
      var $55=(($args)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56)|0)==13;
      if ($57) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      var $59=(($args)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60)|0)==14;
      if ($61) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      $nparams=-1;
      __label__ = 18; break;
    case 15: 
      var $64=(($args)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)|0)!=0;
      if ($66) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $68=$fs;
      _luaK_exp2nextreg($68, $args);
      __label__ = 17; break;
    case 17: 
      var $70=$fs;
      var $71=(($70+36)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$base;
      var $74=((($73)+(1))|0);
      var $75=((($72)-($74))|0);
      $nparams=$75;
      __label__ = 18; break;
    case 18: 
      var $77=$2;
      var $78=$fs;
      var $79=$base;
      var $80=$nparams;
      var $81=((($80)+(1))|0);
      var $82=_luaK_codeABC($78, 28, $79, $81, 2);
      _init_exp($77, 13, $82);
      var $83=$fs;
      var $84=$line;
      _luaK_fixline($83, $84);
      var $85=$base;
      var $86=((($85)+(1))|0);
      var $87=$fs;
      var $88=(($87+36)|0);
      HEAP32[(($88)>>2)]=$86;
      __label__ = 19; break;
    case 19: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_funcargs["X"]=1;

function _singlevar($ls, $var) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $varname;
      var $fs;
      $1=$ls;
      $2=$var;
      var $3=$1;
      var $4=_str_checkname($3);
      $varname=$4;
      var $5=$1;
      var $6=(($5+36)|0);
      var $7=HEAP32[(($6)>>2)];
      $fs=$7;
      var $8=$fs;
      var $9=$varname;
      var $10=$2;
      var $11=_singlevaraux($8, $9, $10, 1);
      var $12=(($11)|0)==8;
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $14=$fs;
      var $15=$varname;
      var $16=_luaK_stringK($14, $15);
      var $17=$2;
      var $18=(($17+4)|0);
      var $19=$18;
      var $20=(($19)|0);
      HEAP32[(($20)>>2)]=$16;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _singlevaraux($fs, $n, $var, $base) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $v;
      $2=$fs;
      $3=$n;
      $4=$var;
      $5=$base;
      var $6=$2;
      var $7=(($6)|0)==0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$4;
      _init_exp($9, 8, 255);
      $1=8;
      __label__ = 11; break;
    case 4: 
      var $11=$2;
      var $12=$3;
      var $13=_searchvar($11, $12);
      $v=$13;
      var $14=$v;
      var $15=(($14)|0) >= 0;
      if ($15) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $17=$4;
      var $18=$v;
      _init_exp($17, 6, $18);
      var $19=$5;
      var $20=(($19)|0)!=0;
      if ($20) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $22=$2;
      var $23=$v;
      _markupval($22, $23);
      __label__ = 7; break;
    case 7: 
      $1=6;
      __label__ = 11; break;
    case 8: 
      var $26=$2;
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$3;
      var $30=$4;
      var $31=_singlevaraux($28, $29, $30, 0);
      var $32=(($31)|0)==8;
      if ($32) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $1=8;
      __label__ = 11; break;
    case 10: 
      var $35=$2;
      var $36=$3;
      var $37=$4;
      var $38=_indexupvalue($35, $36, $37);
      var $39=$4;
      var $40=(($39+4)|0);
      var $41=$40;
      var $42=(($41)|0);
      HEAP32[(($42)>>2)]=$38;
      var $43=$4;
      var $44=(($43)|0);
      HEAP32[(($44)>>2)]=7;
      $1=7;
      __label__ = 11; break;
    case 11: 
      var $46=$1;
      ;
      return $46;
    default: assert(0, "bad label: " + __label__);
  }
}
_singlevaraux["X"]=1;

function _searchvar($fs, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $2=$fs;
      $3=$n;
      var $4=$2;
      var $5=(($4+50)|0);
      var $6=HEAPU8[($5)];
      var $7=(($6)&255);
      var $8=((($7)-(1))|0);
      $i=$8;
      __label__ = 3; break;
    case 3: 
      var $10=$i;
      var $11=(($10)|0) >= 0;
      if ($11) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $13=$3;
      var $14=$i;
      var $15=$2;
      var $16=(($15+172)|0);
      var $17=(($16+($14<<1))|0);
      var $18=HEAPU16[(($17)>>1)];
      var $19=(($18)&65535);
      var $20=$2;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+24)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+($19)*(12))|0);
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($13)|0)==(($27)|0);
      if ($28) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $30=$i;
      $1=$30;
      __label__ = 9; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $33=$i;
      var $34=((($33)-(1))|0);
      $i=$34;
      __label__ = 3; break;
    case 8: 
      $1=-1;
      __label__ = 9; break;
    case 9: 
      var $37=$1;
      ;
      return $37;
    default: assert(0, "bad label: " + __label__);
  }
}


function _markupval($fs, $level) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $bl;
      $1=$fs;
      $2=$level;
      var $3=$1;
      var $4=(($3+20)|0);
      var $5=HEAP32[(($4)>>2)];
      $bl=$5;
      __label__ = 3; break;
    case 3: 
      var $7=$bl;
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 4; break; } else { var $17 = 0;__label__ = 5; break; }
    case 4: 
      var $10=$bl;
      var $11=(($10+8)|0);
      var $12=HEAPU8[($11)];
      var $13=(($12)&255);
      var $14=$2;
      var $15=(($13)|0) > (($14)|0);
      var $17 = $15;__label__ = 5; break;
    case 5: 
      var $17;
      if ($17) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $19=$bl;
      var $20=(($19)|0);
      var $21=HEAP32[(($20)>>2)];
      $bl=$21;
      __label__ = 3; break;
    case 7: 
      var $23=$bl;
      var $24=(($23)|0)!=0;
      if ($24) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $26=$bl;
      var $27=(($26+9)|0);
      HEAP8[($27)]=1;
      __label__ = 9; break;
    case 9: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _enterblock($fs, $bl, $isbreakable) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$fs;
  $2=$bl;
  $3=$isbreakable;
  var $4=$2;
  var $5=(($4+4)|0);
  HEAP32[(($5)>>2)]=-1;
  var $6=$3;
  var $7=$2;
  var $8=(($7+10)|0);
  HEAP8[($8)]=$6;
  var $9=$1;
  var $10=(($9+50)|0);
  var $11=HEAP8[($10)];
  var $12=$2;
  var $13=(($12+8)|0);
  HEAP8[($13)]=$11;
  var $14=$2;
  var $15=(($14+9)|0);
  HEAP8[($15)]=0;
  var $16=$1;
  var $17=(($16+20)|0);
  var $18=HEAP32[(($17)>>2)];
  var $19=$2;
  var $20=(($19)|0);
  HEAP32[(($20)>>2)]=$18;
  var $21=$2;
  var $22=$1;
  var $23=(($22+20)|0);
  HEAP32[(($23)>>2)]=$21;
  ;
  return;
}


function _removevars($ls, $tolevel) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      $1=$ls;
      $2=$tolevel;
      var $3=$1;
      var $4=(($3+36)|0);
      var $5=HEAP32[(($4)>>2)];
      $fs=$5;
      __label__ = 3; break;
    case 3: 
      var $7=$fs;
      var $8=(($7+50)|0);
      var $9=HEAPU8[($8)];
      var $10=(($9)&255);
      var $11=$2;
      var $12=(($10)|0) > (($11)|0);
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $14=$fs;
      var $15=(($14+24)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$fs;
      var $18=(($17+50)|0);
      var $19=HEAP8[($18)];
      var $20=((($19)-(1))&255);
      HEAP8[($18)]=$20;
      var $21=(($20)&255);
      var $22=$fs;
      var $23=(($22+172)|0);
      var $24=(($23+($21<<1))|0);
      var $25=HEAPU16[(($24)>>1)];
      var $26=(($25)&65535);
      var $27=$fs;
      var $28=(($27)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+24)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+($26)*(12))|0);
      var $33=(($32+8)|0);
      HEAP32[(($33)>>2)]=$16;
      __label__ = 3; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _indexupvalue($fs, $name, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $f;
      var $oldsize;
      $2=$fs;
      $3=$name;
      $4=$v;
      var $5=$2;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      $f=$7;
      var $8=$f;
      var $9=(($8+36)|0);
      var $10=HEAP32[(($9)>>2)];
      $oldsize=$10;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $12=$i;
      var $13=$f;
      var $14=(($13+72)|0);
      var $15=HEAPU8[($14)];
      var $16=(($15)&255);
      var $17=(($12)|0) < (($16)|0);
      if ($17) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $19=$i;
      var $20=$2;
      var $21=(($20+51)|0);
      var $22=(($21+($19<<1))|0);
      var $23=(($22)|0);
      var $24=HEAPU8[($23)];
      var $25=(($24)&255);
      var $26=$4;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($25)|0)==(($28)|0);
      if ($29) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $31=$i;
      var $32=$2;
      var $33=(($32+51)|0);
      var $34=(($33+($31<<1))|0);
      var $35=(($34+1)|0);
      var $36=HEAPU8[($35)];
      var $37=(($36)&255);
      var $38=$4;
      var $39=(($38+4)|0);
      var $40=$39;
      var $41=(($40)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($37)|0)==(($42)|0);
      if ($43) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $45=$i;
      $1=$45;
      __label__ = 20; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $48=$i;
      var $49=((($48)+(1))|0);
      $i=$49;
      __label__ = 3; break;
    case 9: 
      var $51=$f;
      var $52=(($51+72)|0);
      var $53=HEAPU8[($52)];
      var $54=(($53)&255);
      var $55=((($54)+(1))|0);
      var $56=(($55)|0) > 60;
      if ($56) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $58=$2;
      _errorlimit($58, 60, ((STRING_TABLE.__str15652)|0));
      __label__ = 11; break;
    case 11: 
      var $60=$f;
      var $61=(($60+72)|0);
      var $62=HEAPU8[($61)];
      var $63=(($62)&255);
      var $64=((($63)+(1))|0);
      var $65=$f;
      var $66=(($65+36)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($64)|0) > (($67)|0);
      if ($68) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $70=$2;
      var $71=(($70+16)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$f;
      var $74=(($73+28)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$75;
      var $77=$f;
      var $78=(($77+36)|0);
      var $79=_luaM_growaux_($72, $76, $78, 4, 2147483645, ((__str16653)|0));
      var $80=$79;
      var $81=$f;
      var $82=(($81+28)|0);
      HEAP32[(($82)>>2)]=$80;
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $85=$oldsize;
      var $86=$f;
      var $87=(($86+36)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($85)|0) < (($88)|0);
      if ($89) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $91=$oldsize;
      var $92=((($91)+(1))|0);
      $oldsize=$92;
      var $93=$f;
      var $94=(($93+28)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95+($91<<2))|0);
      HEAP32[(($96)>>2)]=0;
      __label__ = 14; break;
    case 16: 
      var $98=$3;
      var $99=$f;
      var $100=(($99+72)|0);
      var $101=HEAPU8[($100)];
      var $102=(($101)&255);
      var $103=$f;
      var $104=(($103+28)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105+($102<<2))|0);
      HEAP32[(($106)>>2)]=$98;
      var $107=$3;
      var $108=$107;
      var $109=$108;
      var $110=(($109+5)|0);
      var $111=HEAPU8[($110)];
      var $112=(($111)&255);
      var $113=$112 & 3;
      var $114=(($113)|0)!=0;
      if ($114) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      var $116=$f;
      var $117=$116;
      var $118=$117;
      var $119=(($118+5)|0);
      var $120=HEAPU8[($119)];
      var $121=(($120)&255);
      var $122=$121 & 4;
      var $123=(($122)|0)!=0;
      if ($123) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $125=$2;
      var $126=(($125+16)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=$f;
      var $129=$128;
      var $130=$3;
      var $131=$130;
      _luaC_barrierf($127, $129, $131);
      __label__ = 19; break;
    case 19: 
      var $133=$4;
      var $134=(($133)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=(($135) & 255);
      var $137=$f;
      var $138=(($137+72)|0);
      var $139=HEAPU8[($138)];
      var $140=(($139)&255);
      var $141=$2;
      var $142=(($141+51)|0);
      var $143=(($142+($140<<1))|0);
      var $144=(($143)|0);
      HEAP8[($144)]=$136;
      var $145=$4;
      var $146=(($145+4)|0);
      var $147=$146;
      var $148=(($147)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=(($149) & 255);
      var $151=$f;
      var $152=(($151+72)|0);
      var $153=HEAPU8[($152)];
      var $154=(($153)&255);
      var $155=$2;
      var $156=(($155+51)|0);
      var $157=(($156+($154<<1))|0);
      var $158=(($157+1)|0);
      HEAP8[($158)]=$150;
      var $159=$f;
      var $160=(($159+72)|0);
      var $161=HEAPU8[($160)];
      var $162=((($161)+(1))&255);
      HEAP8[($160)]=$162;
      var $163=(($161)&255);
      $1=$163;
      __label__ = 20; break;
    case 20: 
      var $165=$1;
      ;
      return $165;
    default: assert(0, "bad label: " + __label__);
  }
}
_indexupvalue["X"]=1;

function _funcname($ls, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $needself;
      $1=$ls;
      $2=$v;
      $needself=0;
      var $3=$1;
      var $4=$2;
      _singlevar($3, $4);
      __label__ = 3; break;
    case 3: 
      var $6=$1;
      var $7=(($6+12)|0);
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0)==46;
      if ($10) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $12=$1;
      var $13=$2;
      _field($12, $13);
      __label__ = 3; break;
    case 5: 
      var $15=$1;
      var $16=(($15+12)|0);
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|0)==58;
      if ($19) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $needself=1;
      var $21=$1;
      var $22=$2;
      _field($21, $22);
      __label__ = 7; break;
    case 7: 
      var $24=$needself;
      ;
      return $24;
    default: assert(0, "bad label: " + __label__);
  }
}


function _cond($ls) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $v=__stackBase__;
      $1=$ls;
      var $2=$1;
      _expr($2, $v);
      var $3=(($v)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|0)==1;
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $7=(($v)|0);
      HEAP32[(($7)>>2)]=3;
      __label__ = 4; break;
    case 4: 
      var $9=$1;
      var $10=(($9+36)|0);
      var $11=HEAP32[(($10)>>2)];
      _luaK_goiftrue($11, $v);
      var $12=(($v+16)|0);
      var $13=HEAP32[(($12)>>2)];
      STACKTOP = __stackBase__;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _leaveblock($fs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $bl;
      $1=$fs;
      var $2=$1;
      var $3=(($2+20)|0);
      var $4=HEAP32[(($3)>>2)];
      $bl=$4;
      var $5=$bl;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$1;
      var $9=(($8+20)|0);
      HEAP32[(($9)>>2)]=$7;
      var $10=$1;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$bl;
      var $14=(($13+8)|0);
      var $15=HEAPU8[($14)];
      var $16=(($15)&255);
      _removevars($12, $16);
      var $17=$bl;
      var $18=(($17+9)|0);
      var $19=HEAP8[($18)];
      var $20=(($19 << 24) >> 24)!=0;
      if ($20) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $22=$1;
      var $23=$bl;
      var $24=(($23+8)|0);
      var $25=HEAPU8[($24)];
      var $26=(($25)&255);
      var $27=_luaK_codeABC($22, 35, $26, 0, 0);
      __label__ = 4; break;
    case 4: 
      var $29=$1;
      var $30=(($29+50)|0);
      var $31=HEAPU8[($30)];
      var $32=(($31)&255);
      var $33=$1;
      var $34=(($33+36)|0);
      HEAP32[(($34)>>2)]=$32;
      var $35=$1;
      var $36=$bl;
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      _luaK_patchtohere($35, $38);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _fornum($ls, $varname, $line) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $fs;
      var $base;
      $1=$ls;
      $2=$varname;
      $3=$line;
      var $4=$1;
      var $5=(($4+36)|0);
      var $6=HEAP32[(($5)>>2)];
      $fs=$6;
      var $7=$fs;
      var $8=(($7+36)|0);
      var $9=HEAP32[(($8)>>2)];
      $base=$9;
      var $10=$1;
      var $11=$1;
      var $12=_luaX_newstring($11, ((STRING_TABLE.__str22659)|0), 11);
      _new_localvar($10, $12, 0);
      var $13=$1;
      var $14=$1;
      var $15=_luaX_newstring($14, ((STRING_TABLE.__str23660)|0), 11);
      _new_localvar($13, $15, 1);
      var $16=$1;
      var $17=$1;
      var $18=_luaX_newstring($17, ((STRING_TABLE.__str24661)|0), 10);
      _new_localvar($16, $18, 2);
      var $19=$1;
      var $20=$2;
      _new_localvar($19, $20, 3);
      var $21=$1;
      _checknext($21, 61);
      var $22=$1;
      var $23=_exp1($22);
      var $24=$1;
      _checknext($24, 44);
      var $25=$1;
      var $26=_exp1($25);
      var $27=$1;
      var $28=_testnext($27, 44);
      var $29=(($28)|0)!=0;
      if ($29) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $31=$1;
      var $32=_exp1($31);
      __label__ = 5; break;
    case 4: 
      var $34=$fs;
      var $35=$fs;
      var $36=(($35+36)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$fs;
      var $39=_luaK_numberK($38, 1);
      var $40=_luaK_codeABx($34, 1, $37, $39);
      var $41=$fs;
      _luaK_reserveregs($41, 1);
      __label__ = 5; break;
    case 5: 
      var $43=$1;
      var $44=$base;
      var $45=$3;
      _forbody($43, $44, $45, 1, 1);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_fornum["X"]=1;

function _forlist($ls, $indexname) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      var $e=__stackBase__;
      var $nvars;
      var $line;
      var $base;
      $1=$ls;
      $2=$indexname;
      var $3=$1;
      var $4=(($3+36)|0);
      var $5=HEAP32[(($4)>>2)];
      $fs=$5;
      $nvars=0;
      var $6=$fs;
      var $7=(($6+36)|0);
      var $8=HEAP32[(($7)>>2)];
      $base=$8;
      var $9=$1;
      var $10=$1;
      var $11=_luaX_newstring($10, ((STRING_TABLE.__str19656)|0), 15);
      var $12=$nvars;
      var $13=((($12)+(1))|0);
      $nvars=$13;
      _new_localvar($9, $11, $12);
      var $14=$1;
      var $15=$1;
      var $16=_luaX_newstring($15, ((STRING_TABLE.__str20657)|0), 11);
      var $17=$nvars;
      var $18=((($17)+(1))|0);
      $nvars=$18;
      _new_localvar($14, $16, $17);
      var $19=$1;
      var $20=$1;
      var $21=_luaX_newstring($20, ((STRING_TABLE.__str21658)|0), 13);
      var $22=$nvars;
      var $23=((($22)+(1))|0);
      $nvars=$23;
      _new_localvar($19, $21, $22);
      var $24=$1;
      var $25=$2;
      var $26=$nvars;
      var $27=((($26)+(1))|0);
      $nvars=$27;
      _new_localvar($24, $25, $26);
      __label__ = 3; break;
    case 3: 
      var $29=$1;
      var $30=_testnext($29, 44);
      var $31=(($30)|0)!=0;
      if ($31) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $33=$1;
      var $34=$1;
      var $35=_str_checkname($34);
      var $36=$nvars;
      var $37=((($36)+(1))|0);
      $nvars=$37;
      _new_localvar($33, $35, $36);
      __label__ = 3; break;
    case 5: 
      var $39=$1;
      _checknext($39, 267);
      var $40=$1;
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      $line=$42;
      var $43=$1;
      var $44=$1;
      var $45=_explist1($44, $e);
      _adjust_assign($43, 3, $45, $e);
      var $46=$fs;
      _luaK_checkstack($46, 3);
      var $47=$1;
      var $48=$base;
      var $49=$line;
      var $50=$nvars;
      var $51=((($50)-(3))|0);
      _forbody($47, $48, $49, $51, 0);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_forlist["X"]=1;

function _forbody($ls, $base, $line, $nvars, $isnum) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $bl=__stackBase__;
      var $fs;
      var $prep;
      var $endfor;
      $1=$ls;
      $2=$base;
      $3=$line;
      $4=$nvars;
      $5=$isnum;
      var $6=$1;
      var $7=(($6+36)|0);
      var $8=HEAP32[(($7)>>2)];
      $fs=$8;
      var $9=$1;
      _adjustlocalvars($9, 3);
      var $10=$1;
      _checknext($10, 259);
      var $11=$5;
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $14=$fs;
      var $15=$2;
      var $16=_luaK_codeABx($14, 32, $15, 131070);
      var $21 = $16;__label__ = 5; break;
    case 4: 
      var $18=$fs;
      var $19=_luaK_jump($18);
      var $21 = $19;__label__ = 5; break;
    case 5: 
      var $21;
      $prep=$21;
      var $22=$fs;
      _enterblock($22, $bl, 0);
      var $23=$1;
      var $24=$4;
      _adjustlocalvars($23, $24);
      var $25=$fs;
      var $26=$4;
      _luaK_reserveregs($25, $26);
      var $27=$1;
      _block($27);
      var $28=$fs;
      _leaveblock($28);
      var $29=$fs;
      var $30=$prep;
      _luaK_patchtohere($29, $30);
      var $31=$5;
      var $32=(($31)|0)!=0;
      if ($32) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $34=$fs;
      var $35=$2;
      var $36=_luaK_codeABx($34, 31, $35, 131070);
      var $43 = $36;__label__ = 8; break;
    case 7: 
      var $38=$fs;
      var $39=$2;
      var $40=$4;
      var $41=_luaK_codeABC($38, 33, $39, 0, $40);
      var $43 = $41;__label__ = 8; break;
    case 8: 
      var $43;
      $endfor=$43;
      var $44=$fs;
      var $45=$3;
      _luaK_fixline($44, $45);
      var $46=$fs;
      var $47=$5;
      var $48=(($47)|0)!=0;
      if ($48) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $50=$endfor;
      var $55 = $50;__label__ = 11; break;
    case 10: 
      var $52=$fs;
      var $53=_luaK_jump($52);
      var $55 = $53;__label__ = 11; break;
    case 11: 
      var $55;
      var $56=$prep;
      var $57=((($56)+(1))|0);
      _luaK_patchlist($46, $55, $57);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_forbody["X"]=1;

function _exp1($ls) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $e=__stackBase__;
  var $k;
  $1=$ls;
  var $2=$1;
  _expr($2, $e);
  var $3=(($e)|0);
  var $4=HEAP32[(($3)>>2)];
  $k=$4;
  var $5=$1;
  var $6=(($5+36)|0);
  var $7=HEAP32[(($6)>>2)];
  _luaK_exp2nextreg($7, $e);
  var $8=$k;
  STACKTOP = __stackBase__;
  return $8;
}


function _error_expected($ls, $token) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  $1=$ls;
  $2=$token;
  var $3=$1;
  var $4=$1;
  var $5=(($4+40)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$1;
  var $8=$2;
  var $9=_luaX_token2str($7, $8);
  var $10=_luaO_pushfstring($6, ((STRING_TABLE.__str26663)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$9,tempInt));
  _luaX_syntaxerror($3, $10);
  STACKTOP = __stackBase__;
  return;
}


function _test_then_block($ls) {
  ;
  var __label__;

  var $1;
  var $condexit;
  $1=$ls;
  var $2=$1;
  _luaX_next($2);
  var $3=$1;
  var $4=_cond($3);
  $condexit=$4;
  var $5=$1;
  _checknext($5, 274);
  var $6=$1;
  _block($6);
  var $7=$condexit;
  ;
  return $7;
}


function _anchor_token($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $ts;
      $1=$ls;
      var $2=$1;
      var $3=(($2+12)|0);
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)==285;
      if ($6) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $8=$1;
      var $9=(($8+12)|0);
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|0)==286;
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $14=$1;
      var $15=(($14+12)|0);
      var $16=(($15+4)|0);
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      $ts=$18;
      var $19=$1;
      var $20=$ts;
      var $21=(($20+16)|0);
      var $22=$21;
      var $23=$ts;
      var $24=$23;
      var $25=(($24+12)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=_luaX_newstring($19, $22, $26);
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaE_newthread($L) {
  ;
  var __label__;

  var $1;
  var $L1;
  var $o2;
  var $o1;
  $1=$L;
  var $2=$1;
  var $3=_luaM_realloc_($2, 0, 0, 112);
  var $4=(($3)|0);
  var $5=$4;
  $L1=$5;
  var $6=$1;
  var $7=$L1;
  var $8=$7;
  _luaC_link($6, $8, 8);
  var $9=$L1;
  var $10=$1;
  var $11=(($10+16)|0);
  var $12=HEAP32[(($11)>>2)];
  _preinit_state($9, $12);
  var $13=$L1;
  var $14=$1;
  _stack_init($13, $14);
  var $15=$1;
  var $16=(($15+72)|0);
  $o2=$16;
  var $17=$L1;
  var $18=(($17+72)|0);
  $o1=$18;
  var $19=$o1;
  var $20=(($19)|0);
  var $21=$o2;
  var $22=(($21)|0);
  var $23=$20;
  var $24=$22;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];
  var $25=$o2;
  var $26=(($25+8)|0);
  var $27=HEAP32[(($26)>>2)];
  var $28=$o1;
  var $29=(($28+8)|0);
  HEAP32[(($29)>>2)]=$27;
  var $30=$1;
  var $31=(($30+56)|0);
  var $32=HEAP8[($31)];
  var $33=$L1;
  var $34=(($33+56)|0);
  HEAP8[($34)]=$32;
  var $35=$1;
  var $36=(($35+60)|0);
  var $37=HEAP32[(($36)>>2)];
  var $38=$L1;
  var $39=(($38+60)|0);
  HEAP32[(($39)>>2)]=$37;
  var $40=$1;
  var $41=(($40+68)|0);
  var $42=HEAP32[(($41)>>2)];
  var $43=$L1;
  var $44=(($43+68)|0);
  HEAP32[(($44)>>2)]=$42;
  var $45=$L1;
  var $46=(($45+60)|0);
  var $47=HEAP32[(($46)>>2)];
  var $48=$L1;
  var $49=(($48+64)|0);
  HEAP32[(($49)>>2)]=$47;
  var $50=$L1;
  ;
  return $50;
}
_luaE_newthread["X"]=1;

function _preinit_state($L, $g) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L;
  $2=$g;
  var $3=$2;
  var $4=$1;
  var $5=(($4+16)|0);
  HEAP32[(($5)>>2)]=$3;
  var $6=$1;
  var $7=(($6+32)|0);
  HEAP32[(($7)>>2)]=0;
  var $8=$1;
  var $9=(($8+44)|0);
  HEAP32[(($9)>>2)]=0;
  var $10=$1;
  var $11=(($10+104)|0);
  HEAP32[(($11)>>2)]=0;
  var $12=$1;
  var $13=(($12+68)|0);
  HEAP32[(($13)>>2)]=0;
  var $14=$1;
  var $15=(($14+56)|0);
  HEAP8[($15)]=0;
  var $16=$1;
  var $17=(($16+60)|0);
  HEAP32[(($17)>>2)]=0;
  var $18=$1;
  var $19=(($18+57)|0);
  HEAP8[($19)]=1;
  var $20=$1;
  var $21=(($20+60)|0);
  var $22=HEAP32[(($21)>>2)];
  var $23=$1;
  var $24=(($23+64)|0);
  HEAP32[(($24)>>2)]=$22;
  var $25=$1;
  var $26=(($25+96)|0);
  HEAP32[(($26)>>2)]=0;
  var $27=$1;
  var $28=(($27+48)|0);
  HEAP32[(($28)>>2)]=0;
  var $29=$1;
  var $30=(($29+54)|0);
  HEAP16[(($30)>>1)]=0;
  var $31=$1;
  var $32=(($31+52)|0);
  HEAP16[(($32)>>1)]=0;
  var $33=$1;
  var $34=(($33+6)|0);
  HEAP8[($34)]=0;
  var $35=$1;
  var $36=(($35+20)|0);
  HEAP32[(($36)>>2)]=0;
  var $37=$1;
  var $38=(($37+40)|0);
  HEAP32[(($38)>>2)]=0;
  var $39=$1;
  var $40=(($39+24)|0);
  HEAP32[(($40)>>2)]=0;
  var $41=$1;
  var $42=(($41+108)|0);
  HEAP32[(($42)>>2)]=0;
  var $43=$1;
  var $44=(($43+72)|0);
  var $45=(($44+8)|0);
  HEAP32[(($45)>>2)]=0;
  ;
  return;
}
_preinit_state["X"]=1;

function _stack_init($L1, $L) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L1;
  $2=$L;
  var $3=$2;
  var $4=_luaM_realloc_($3, 0, 0, 192);
  var $5=$4;
  var $6=$1;
  var $7=(($6+40)|0);
  HEAP32[(($7)>>2)]=$5;
  var $8=$1;
  var $9=(($8+40)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$1;
  var $12=(($11+20)|0);
  HEAP32[(($12)>>2)]=$10;
  var $13=$1;
  var $14=(($13+48)|0);
  HEAP32[(($14)>>2)]=8;
  var $15=$1;
  var $16=(($15+40)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=$1;
  var $19=(($18+48)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=(($17+($20)*(24))|0);
  var $22=((($21)-(24))|0);
  var $23=$1;
  var $24=(($23+36)|0);
  HEAP32[(($24)>>2)]=$22;
  var $25=$2;
  var $26=_luaM_realloc_($25, 0, 0, 540);
  var $27=$26;
  var $28=$1;
  var $29=(($28+32)|0);
  HEAP32[(($29)>>2)]=$27;
  var $30=$1;
  var $31=(($30+44)|0);
  HEAP32[(($31)>>2)]=45;
  var $32=$1;
  var $33=(($32+32)|0);
  var $34=HEAP32[(($33)>>2)];
  var $35=$1;
  var $36=(($35+8)|0);
  HEAP32[(($36)>>2)]=$34;
  var $37=$1;
  var $38=(($37+32)|0);
  var $39=HEAP32[(($38)>>2)];
  var $40=$1;
  var $41=(($40+44)|0);
  var $42=HEAP32[(($41)>>2)];
  var $43=((($42)-(5))|0);
  var $44=(($39+($43)*(12))|0);
  var $45=((($44)-(12))|0);
  var $46=$1;
  var $47=(($46+28)|0);
  HEAP32[(($47)>>2)]=$45;
  var $48=$1;
  var $49=(($48+8)|0);
  var $50=HEAP32[(($49)>>2)];
  var $51=$1;
  var $52=(($51+20)|0);
  var $53=HEAP32[(($52)>>2)];
  var $54=(($53+4)|0);
  HEAP32[(($54)>>2)]=$50;
  var $55=$1;
  var $56=(($55+8)|0);
  var $57=HEAP32[(($56)>>2)];
  var $58=(($57+12)|0);
  HEAP32[(($56)>>2)]=$58;
  var $59=(($57+8)|0);
  HEAP32[(($59)>>2)]=0;
  var $60=$1;
  var $61=(($60+8)|0);
  var $62=HEAP32[(($61)>>2)];
  var $63=$1;
  var $64=(($63+20)|0);
  var $65=HEAP32[(($64)>>2)];
  var $66=(($65)|0);
  HEAP32[(($66)>>2)]=$62;
  var $67=$1;
  var $68=(($67+12)|0);
  HEAP32[(($68)>>2)]=$62;
  var $69=$1;
  var $70=(($69+8)|0);
  var $71=HEAP32[(($70)>>2)];
  var $72=(($71+240)|0);
  var $73=$1;
  var $74=(($73+20)|0);
  var $75=HEAP32[(($74)>>2)];
  var $76=(($75+8)|0);
  HEAP32[(($76)>>2)]=$72;
  ;
  return;
}
_stack_init["X"]=1;

function _luaE_freethread($L, $L1) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L;
  $2=$L1;
  var $3=$2;
  var $4=$2;
  var $5=(($4+32)|0);
  var $6=HEAP32[(($5)>>2)];
  _luaF_close($3, $6);
  var $7=$2;
  var $8=$1;
  var $9=$2;
  _freestack($8, $9);
  var $10=$1;
  var $11=$2;
  var $12=$11;
  var $13=(($12)|0);
  var $14=_luaM_realloc_($10, $13, 112, 0);
  ;
  return;
}


function _freestack($L, $L1) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L;
  $2=$L1;
  var $3=$1;
  var $4=$2;
  var $5=(($4+40)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$6;
  var $8=$2;
  var $9=(($8+48)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=((($10)*(24))|0);
  var $12=_luaM_realloc_($3, $7, $11, 0);
  var $13=$1;
  var $14=$2;
  var $15=(($14+32)|0);
  var $16=HEAP32[(($15)>>2)];
  var $17=$16;
  var $18=$2;
  var $19=(($18+44)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=((($20)*(12))|0);
  var $22=_luaM_realloc_($13, $17, $21, 0);
  ;
  return;
}


function _lua_newstate($f, $ud) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $L;
      var $g;
      var $l;
      $2=$f;
      $3=$ud;
      var $4=$2;
      var $5=$3;
      var $6=FUNCTION_TABLE[$4]($5, 0, 0, 348);
      $l=$6;
      var $7=$l;
      var $8=(($7)|0)==0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 12; break;
    case 4: 
      var $11=$l;
      var $12=(($11)|0);
      var $13=$12;
      $L=$13;
      var $14=$L;
      var $15=$14;
      var $16=(($15+112)|0);
      $g=$16;
      var $17=$L;
      var $18=(($17)|0);
      HEAP32[(($18)>>2)]=0;
      var $19=$L;
      var $20=(($19+4)|0);
      HEAP8[($20)]=8;
      var $21=$g;
      var $22=(($21+20)|0);
      HEAP8[($22)]=33;
      var $23=$g;
      var $24=(($23+20)|0);
      var $25=HEAPU8[($24)];
      var $26=(($25)&255);
      var $27=$26 & 3;
      var $28=(($27) & 255);
      var $29=$L;
      var $30=(($29+5)|0);
      HEAP8[($30)]=$28;
      var $31=$L;
      var $32=(($31+5)|0);
      var $33=HEAPU8[($32)];
      var $34=(($33)&255);
      var $35=$34 | 96;
      var $36=(($35) & 255);
      HEAP8[($32)]=$36;
      var $37=$L;
      var $38=$g;
      _preinit_state($37, $38);
      var $39=$2;
      var $40=$g;
      var $41=(($40+12)|0);
      HEAP32[(($41)>>2)]=$39;
      var $42=$3;
      var $43=$g;
      var $44=(($43+16)|0);
      HEAP32[(($44)>>2)]=$42;
      var $45=$L;
      var $46=$g;
      var $47=(($46+104)|0);
      HEAP32[(($47)>>2)]=$45;
      var $48=$g;
      var $49=(($48+108)|0);
      var $50=$g;
      var $51=(($50+108)|0);
      var $52=(($51+12)|0);
      var $53=$52;
      var $54=(($53)|0);
      HEAP32[(($54)>>2)]=$49;
      var $55=$g;
      var $56=(($55+108)|0);
      var $57=$g;
      var $58=(($57+108)|0);
      var $59=(($58+12)|0);
      var $60=$59;
      var $61=(($60+4)|0);
      HEAP32[(($61)>>2)]=$56;
      var $62=$g;
      var $63=(($62+64)|0);
      HEAP32[(($63)>>2)]=0;
      var $64=$g;
      var $65=(($64)|0);
      var $66=(($65+8)|0);
      HEAP32[(($66)>>2)]=0;
      var $67=$g;
      var $68=(($67)|0);
      var $69=(($68+4)|0);
      HEAP32[(($69)>>2)]=0;
      var $70=$g;
      var $71=(($70)|0);
      var $72=(($71)|0);
      HEAP32[(($72)>>2)]=0;
      var $73=$L;
      var $74=(($73+16)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+92)|0);
      var $77=(($76+8)|0);
      HEAP32[(($77)>>2)]=0;
      var $78=$g;
      var $79=(($78+52)|0);
      var $80=(($79)|0);
      HEAP32[(($80)>>2)]=0;
      var $81=$g;
      var $82=(($81+52)|0);
      var $83=(($82+8)|0);
      HEAP32[(($83)>>2)]=0;
      var $84=$g;
      var $85=(($84+88)|0);
      HEAP32[(($85)>>2)]=0;
      var $86=$g;
      var $87=(($86+21)|0);
      HEAP8[($87)]=0;
      var $88=$L;
      var $89=$88;
      var $90=$g;
      var $91=(($90+28)|0);
      HEAP32[(($91)>>2)]=$89;
      var $92=$g;
      var $93=(($92+24)|0);
      HEAP32[(($93)>>2)]=0;
      var $94=$g;
      var $95=(($94+28)|0);
      var $96=$g;
      var $97=(($96+32)|0);
      HEAP32[(($97)>>2)]=$95;
      var $98=$g;
      var $99=(($98+36)|0);
      HEAP32[(($99)>>2)]=0;
      var $100=$g;
      var $101=(($100+40)|0);
      HEAP32[(($101)>>2)]=0;
      var $102=$g;
      var $103=(($102+44)|0);
      HEAP32[(($103)>>2)]=0;
      var $104=$g;
      var $105=(($104+48)|0);
      HEAP32[(($105)>>2)]=0;
      var $106=$g;
      var $107=(($106+68)|0);
      HEAP32[(($107)>>2)]=348;
      var $108=$g;
      var $109=(($108+80)|0);
      HEAP32[(($109)>>2)]=200;
      var $110=$g;
      var $111=(($110+84)|0);
      HEAP32[(($111)>>2)]=200;
      var $112=$g;
      var $113=(($112+76)|0);
      HEAP32[(($113)>>2)]=0;
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $115=$i;
      var $116=(($115)|0) < 9;
      if ($116) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $118=$i;
      var $119=$g;
      var $120=(($119+132)|0);
      var $121=(($120+($118<<2))|0);
      HEAP32[(($121)>>2)]=0;
      __label__ = 7; break;
    case 7: 
      var $123=$i;
      var $124=((($123)+(1))|0);
      $i=$124;
      __label__ = 5; break;
    case 8: 
      var $126=$L;
      var $127=_luaD_rawrunprotected($126, 42, 0);
      var $128=(($127)|0)!=0;
      if ($128) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $130=$L;
      _close_state($130);
      $L=0;
      __label__ = 11; break;
    case 10: 
      var $132=$L;
      __label__ = 11; break;
    case 11: 
      var $134=$L;
      $1=$134;
      __label__ = 12; break;
    case 12: 
      var $136=$1;
      ;
      return $136;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_newstate["X"]=1;

function _f_luaopen($L, $ud) {
  ;
  var __label__;

  var $1;
  var $2;
  var $g;
  var $i_o;
  var $i_o1;
  $1=$L;
  $2=$ud;
  var $3=$1;
  var $4=(($3+16)|0);
  var $5=HEAP32[(($4)>>2)];
  $g=$5;
  var $6=$2;
  var $7=$1;
  var $8=$1;
  _stack_init($7, $8);
  var $9=$1;
  var $10=(($9+72)|0);
  $i_o=$10;
  var $11=$1;
  var $12=_luaH_new($11, 0, 2);
  var $13=$12;
  var $14=$i_o;
  var $15=(($14)|0);
  var $16=$15;
  HEAP32[(($16)>>2)]=$13;
  var $17=$i_o;
  var $18=(($17+8)|0);
  HEAP32[(($18)>>2)]=5;
  var $19=$1;
  var $20=(($19+16)|0);
  var $21=HEAP32[(($20)>>2)];
  var $22=(($21+92)|0);
  $i_o1=$22;
  var $23=$1;
  var $24=_luaH_new($23, 0, 2);
  var $25=$24;
  var $26=$i_o1;
  var $27=(($26)|0);
  var $28=$27;
  HEAP32[(($28)>>2)]=$25;
  var $29=$i_o1;
  var $30=(($29+8)|0);
  HEAP32[(($30)>>2)]=5;
  var $31=$1;
  _luaS_resize($31, 32);
  var $32=$1;
  _luaT_init($32);
  var $33=$1;
  _luaX_init($33);
  var $34=$1;
  var $35=_luaS_newlstr($34, ((STRING_TABLE.__str667)|0), 17);
  var $36=$35;
  var $37=(($36+5)|0);
  var $38=HEAPU8[($37)];
  var $39=(($38)&255);
  var $40=$39 | 32;
  var $41=(($40) & 255);
  HEAP8[($37)]=$41;
  var $42=$g;
  var $43=(($42+68)|0);
  var $44=HEAP32[(($43)>>2)];
  var $45=((($44<<2))|0);
  var $46=$g;
  var $47=(($46+64)|0);
  HEAP32[(($47)>>2)]=$45;
  ;
  return;
}
_f_luaopen["X"]=1;

function _close_state($L) {
  ;
  var __label__;

  var $1;
  var $g;
  $1=$L;
  var $2=$1;
  var $3=(($2+16)|0);
  var $4=HEAP32[(($3)>>2)];
  $g=$4;
  var $5=$1;
  var $6=$1;
  var $7=(($6+32)|0);
  var $8=HEAP32[(($7)>>2)];
  _luaF_close($5, $8);
  var $9=$1;
  _luaC_freeall($9);
  var $10=$1;
  var $11=$1;
  var $12=(($11+16)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=(($13)|0);
  var $15=(($14)|0);
  var $16=HEAP32[(($15)>>2)];
  var $17=$16;
  var $18=$1;
  var $19=(($18+16)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=(($20)|0);
  var $22=(($21+8)|0);
  var $23=HEAP32[(($22)>>2)];
  var $24=((($23<<2))|0);
  var $25=_luaM_realloc_($10, $17, $24, 0);
  var $26=$1;
  var $27=$g;
  var $28=(($27+52)|0);
  var $29=(($28)|0);
  var $30=HEAP32[(($29)>>2)];
  var $31=$g;
  var $32=(($31+52)|0);
  var $33=(($32+8)|0);
  var $34=HEAP32[(($33)>>2)];
  var $35=(($34)|0);
  var $36=_luaM_realloc_($26, $30, $35, 0);
  var $37=$g;
  var $38=(($37+52)|0);
  var $39=(($38)|0);
  HEAP32[(($39)>>2)]=$36;
  var $40=$g;
  var $41=(($40+52)|0);
  var $42=(($41+8)|0);
  HEAP32[(($42)>>2)]=0;
  var $43=$1;
  var $44=$1;
  _freestack($43, $44);
  var $45=$g;
  var $46=(($45+12)|0);
  var $47=HEAP32[(($46)>>2)];
  var $48=$g;
  var $49=(($48+16)|0);
  var $50=HEAP32[(($49)>>2)];
  var $51=$1;
  var $52=$51;
  var $53=(($52)|0);
  var $54=FUNCTION_TABLE[$47]($50, $53, 348, 0);
  ;
  return;
}
_close_state["X"]=1;

function _lua_close($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$L;
      var $2=$1;
      var $3=(($2+16)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4+104)|0);
      var $6=HEAP32[(($5)>>2)];
      $1=$6;
      var $7=$1;
      var $8=$1;
      var $9=(($8+32)|0);
      var $10=HEAP32[(($9)>>2)];
      _luaF_close($7, $10);
      var $11=$1;
      var $12=_luaC_separateudata($11, 1);
      var $13=$1;
      var $14=(($13+108)|0);
      HEAP32[(($14)>>2)]=0;
      __label__ = 3; break;
    case 3: 
      var $16=$1;
      var $17=(($16+40)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$1;
      var $20=(($19+20)|0);
      HEAP32[(($20)>>2)]=$18;
      var $21=$1;
      var $22=(($21+20)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$1;
      var $27=(($26+8)|0);
      HEAP32[(($27)>>2)]=$25;
      var $28=$1;
      var $29=(($28+12)|0);
      HEAP32[(($29)>>2)]=$25;
      var $30=$1;
      var $31=(($30+54)|0);
      HEAP16[(($31)>>1)]=0;
      var $32=$1;
      var $33=(($32+52)|0);
      HEAP16[(($33)>>1)]=0;
      __label__ = 4; break;
    case 4: 
      var $35=$1;
      var $36=_luaD_rawrunprotected($35, 44, 0);
      var $37=(($36)|0)!=0;
      if ($37) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 5: 
      var $39=$1;
      var $40=$1;
      _close_state($40);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_close["X"]=1;

function _callallgcTM($L, $ud) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L;
  $2=$ud;
  var $3=$2;
  var $4=$1;
  _luaC_callGCTM($4);
  ;
  return;
}


function _luaS_resize($L, $newsize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $newhash;
      var $tb;
      var $i;
      var $p;
      var $next;
      var $h;
      var $h1;
      $1=$L;
      $2=$newsize;
      var $3=$1;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+21)|0);
      var $7=HEAPU8[($6)];
      var $8=(($7)&255);
      var $9=(($8)|0)==2;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 19; break;
    case 4: 
      var $12=$2;
      var $13=((($12)+(1))|0);
      var $14=(($13)>>>0) <= 1073741823;
      if ($14) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $16=$1;
      var $17=$2;
      var $18=((($17<<2))|0);
      var $19=_luaM_realloc_($16, 0, 0, $18);
      var $24 = $19;__label__ = 7; break;
    case 6: 
      var $21=$1;
      var $22=_luaM_toobig($21);
      var $24 = $22;__label__ = 7; break;
    case 7: 
      var $24;
      var $25=$24;
      $newhash=$25;
      var $26=$1;
      var $27=(($26+16)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0);
      $tb=$29;
      $i=0;
      __label__ = 8; break;
    case 8: 
      var $31=$i;
      var $32=$2;
      var $33=(($31)|0) < (($32)|0);
      if ($33) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $35=$i;
      var $36=$newhash;
      var $37=(($36+($35<<2))|0);
      HEAP32[(($37)>>2)]=0;
      __label__ = 10; break;
    case 10: 
      var $39=$i;
      var $40=((($39)+(1))|0);
      $i=$40;
      __label__ = 8; break;
    case 11: 
      $i=0;
      __label__ = 12; break;
    case 12: 
      var $43=$i;
      var $44=$tb;
      var $45=(($44+8)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($43)|0) < (($46)|0);
      if ($47) { __label__ = 13; break; } else { __label__ = 18; break; }
    case 13: 
      var $49=$i;
      var $50=$tb;
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+($49<<2))|0);
      var $54=HEAP32[(($53)>>2)];
      $p=$54;
      __label__ = 14; break;
    case 14: 
      var $56=$p;
      var $57=(($56)|0)!=0;
      if ($57) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $59=$p;
      var $60=$59;
      var $61=(($60)|0);
      var $62=HEAP32[(($61)>>2)];
      $next=$62;
      var $63=$p;
      var $64=$63;
      var $65=$64;
      var $66=(($65+8)|0);
      var $67=HEAP32[(($66)>>2)];
      $h=$67;
      var $68=$h;
      var $69=$2;
      var $70=((($69)-(1))|0);
      var $71=$68 & $70;
      $h1=$71;
      var $72=$h1;
      var $73=$newhash;
      var $74=(($73+($72<<2))|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$p;
      var $77=$76;
      var $78=(($77)|0);
      HEAP32[(($78)>>2)]=$75;
      var $79=$p;
      var $80=$h1;
      var $81=$newhash;
      var $82=(($81+($80<<2))|0);
      HEAP32[(($82)>>2)]=$79;
      var $83=$next;
      $p=$83;
      __label__ = 14; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $86=$i;
      var $87=((($86)+(1))|0);
      $i=$87;
      __label__ = 12; break;
    case 18: 
      var $89=$1;
      var $90=$tb;
      var $91=(($90)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=$92;
      var $94=$tb;
      var $95=(($94+8)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=((($96<<2))|0);
      var $98=_luaM_realloc_($89, $93, $97, 0);
      var $99=$2;
      var $100=$tb;
      var $101=(($100+8)|0);
      HEAP32[(($101)>>2)]=$99;
      var $102=$newhash;
      var $103=$tb;
      var $104=(($103)|0);
      HEAP32[(($104)>>2)]=$102;
      __label__ = 19; break;
    case 19: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaS_resize["X"]=1;

function _luaS_newlstr($L, $str, $l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $o;
      var $h;
      var $step;
      var $l1;
      var $ts;
      $2=$L;
      $3=$str;
      $4=$l;
      var $5=$4;
      $h=$5;
      var $6=$4;
      var $7=$6 >>> 5;
      var $8=((($7)+(1))|0);
      $step=$8;
      var $9=$4;
      $l1=$9;
      __label__ = 3; break;
    case 3: 
      var $11=$l1;
      var $12=$step;
      var $13=(($11)>>>0) >= (($12)>>>0);
      if ($13) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $15=$h;
      var $16=$h;
      var $17=$16 << 5;
      var $18=$h;
      var $19=$18 >>> 2;
      var $20=((($17)+($19))|0);
      var $21=$l1;
      var $22=((($21)-(1))|0);
      var $23=$3;
      var $24=(($23+$22)|0);
      var $25=HEAPU8[($24)];
      var $26=(($25)&255);
      var $27=((($20)+($26))|0);
      var $28=$15 ^ $27;
      $h=$28;
      __label__ = 5; break;
    case 5: 
      var $30=$step;
      var $31=$l1;
      var $32=((($31)-($30))|0);
      $l1=$32;
      __label__ = 3; break;
    case 6: 
      var $34=$h;
      var $35=$2;
      var $36=(($35+16)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|0);
      var $39=(($38+8)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=((($40)-(1))|0);
      var $42=$34 & $41;
      var $43=$2;
      var $44=(($43+16)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0);
      var $47=(($46)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+($42<<2))|0);
      var $50=HEAP32[(($49)>>2)];
      $o=$50;
      __label__ = 7; break;
    case 7: 
      var $52=$o;
      var $53=(($52)|0)!=0;
      if ($53) { __label__ = 8; break; } else { __label__ = 15; break; }
    case 8: 
      var $55=$o;
      var $56=$55;
      $ts=$56;
      var $57=$ts;
      var $58=$57;
      var $59=(($58+12)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$4;
      var $62=(($60)|0)==(($61)|0);
      if ($62) { __label__ = 9; break; } else { __label__ = 13; break; }
    case 9: 
      var $64=$3;
      var $65=$ts;
      var $66=(($65+16)|0);
      var $67=$66;
      var $68=$4;
      var $69=_memcmp($64, $67, $68);
      var $70=(($69)|0)==0;
      if ($70) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      var $72=$o;
      var $73=$72;
      var $74=(($73+5)|0);
      var $75=HEAPU8[($74)];
      var $76=(($75)&255);
      var $77=$2;
      var $78=(($77+16)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+20)|0);
      var $81=HEAPU8[($80)];
      var $82=(($81)&255);
      var $83=$82 ^ 3;
      var $84=$76 & $83;
      var $85=$84 & 3;
      var $86=(($85)|0)!=0;
      if ($86) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $88=$o;
      var $89=$88;
      var $90=(($89+5)|0);
      var $91=HEAPU8[($90)];
      var $92=(($91)&255);
      var $93=$92 ^ 3;
      var $94=(($93) & 255);
      HEAP8[($90)]=$94;
      __label__ = 12; break;
    case 12: 
      var $96=$ts;
      $1=$96;
      __label__ = 16; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $99=$o;
      var $100=$99;
      var $101=(($100)|0);
      var $102=HEAP32[(($101)>>2)];
      $o=$102;
      __label__ = 7; break;
    case 15: 
      var $104=$2;
      var $105=$3;
      var $106=$4;
      var $107=$h;
      var $108=_newlstr($104, $105, $106, $107);
      $1=$108;
      __label__ = 16; break;
    case 16: 
      var $110=$1;
      ;
      return $110;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaS_newlstr["X"]=1;

function _newlstr($L, $str, $l, $h) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ts;
      var $tb;
      $1=$L;
      $2=$str;
      $3=$l;
      $4=$h;
      var $5=$3;
      var $6=((($5)+(1))|0);
      var $7=(($6)>>>0) > 4294967277;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$1;
      var $10=_luaM_toobig($9);
      __label__ = 4; break;
    case 4: 
      var $12=$1;
      var $13=$3;
      var $14=((($13)+(1))|0);
      var $15=(($14)|0);
      var $16=((($15)+(16))|0);
      var $17=_luaM_realloc_($12, 0, 0, $16);
      var $18=$17;
      $ts=$18;
      var $19=$3;
      var $20=$ts;
      var $21=$20;
      var $22=(($21+12)|0);
      HEAP32[(($22)>>2)]=$19;
      var $23=$4;
      var $24=$ts;
      var $25=$24;
      var $26=(($25+8)|0);
      HEAP32[(($26)>>2)]=$23;
      var $27=$1;
      var $28=(($27+16)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+20)|0);
      var $31=HEAPU8[($30)];
      var $32=(($31)&255);
      var $33=$32 & 3;
      var $34=(($33) & 255);
      var $35=$ts;
      var $36=$35;
      var $37=(($36+5)|0);
      HEAP8[($37)]=$34;
      var $38=$ts;
      var $39=$38;
      var $40=(($39+4)|0);
      HEAP8[($40)]=4;
      var $41=$ts;
      var $42=$41;
      var $43=(($42+6)|0);
      HEAP8[($43)]=0;
      var $44=$ts;
      var $45=(($44+16)|0);
      var $46=$45;
      var $47=$2;
      var $48=$3;
      var $49=(($48)|0);
      assert($49 % 1 === 0, 'memcpy given ' + $49 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($46, $47, $49, 1);
      var $50=$3;
      var $51=$ts;
      var $52=(($51+16)|0);
      var $53=$52;
      var $54=(($53+$50)|0);
      HEAP8[($54)]=0;
      var $55=$1;
      var $56=(($55+16)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57)|0);
      $tb=$58;
      var $59=$4;
      var $60=$tb;
      var $61=(($60+8)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=((($62)-(1))|0);
      var $64=$59 & $63;
      $4=$64;
      var $65=$4;
      var $66=$tb;
      var $67=(($66)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+($65<<2))|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$ts;
      var $72=$71;
      var $73=(($72)|0);
      HEAP32[(($73)>>2)]=$70;
      var $74=$ts;
      var $75=$74;
      var $76=$4;
      var $77=$tb;
      var $78=(($77)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+($76<<2))|0);
      HEAP32[(($80)>>2)]=$75;
      var $81=$tb;
      var $82=(($81+4)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=((($83)+(1))|0);
      HEAP32[(($82)>>2)]=$84;
      var $85=$tb;
      var $86=(($85+4)|0);
      var $87=HEAPU32[(($86)>>2)];
      var $88=$tb;
      var $89=(($88+8)|0);
      var $90=HEAPU32[(($89)>>2)];
      var $91=(($87)>>>0) > (($90)>>>0);
      if ($91) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $93=$tb;
      var $94=(($93+8)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95)|0) <= 1073741822;
      if ($96) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $98=$1;
      var $99=$tb;
      var $100=(($99+8)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=((($101<<1))|0);
      _luaS_resize($98, $102);
      __label__ = 7; break;
    case 7: 
      var $104=$ts;
      ;
      return $104;
    default: assert(0, "bad label: " + __label__);
  }
}
_newlstr["X"]=1;

function _luaS_newudata($L, $s, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $u;
      $1=$L;
      $2=$s;
      $3=$e;
      var $4=$2;
      var $5=(($4)>>>0) > 4294967273;
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $7=$1;
      var $8=_luaM_toobig($7);
      __label__ = 4; break;
    case 4: 
      var $10=$1;
      var $11=$2;
      var $12=((($11)+(20))|0);
      var $13=_luaM_realloc_($10, 0, 0, $12);
      var $14=$13;
      $u=$14;
      var $15=$1;
      var $16=(($15+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+20)|0);
      var $19=HEAPU8[($18)];
      var $20=(($19)&255);
      var $21=$20 & 3;
      var $22=(($21) & 255);
      var $23=$u;
      var $24=$23;
      var $25=(($24+5)|0);
      HEAP8[($25)]=$22;
      var $26=$u;
      var $27=$26;
      var $28=(($27+4)|0);
      HEAP8[($28)]=7;
      var $29=$2;
      var $30=$u;
      var $31=$30;
      var $32=(($31+16)|0);
      HEAP32[(($32)>>2)]=$29;
      var $33=$u;
      var $34=$33;
      var $35=(($34+8)|0);
      HEAP32[(($35)>>2)]=0;
      var $36=$3;
      var $37=$u;
      var $38=$37;
      var $39=(($38+12)|0);
      HEAP32[(($39)>>2)]=$36;
      var $40=$1;
      var $41=(($40+16)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+104)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$u;
      var $48=$47;
      var $49=(($48)|0);
      HEAP32[(($49)>>2)]=$46;
      var $50=$u;
      var $51=$50;
      var $52=$1;
      var $53=(($52+16)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+104)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56)|0);
      HEAP32[(($57)>>2)]=$51;
      var $58=$u;
      ;
      return $58;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaS_newudata["X"]=1;

function _luaopen_string($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  _luaL_register($2, ((STRING_TABLE.__str682)|0), ((_strlib)|0));
  var $3=$1;
  _lua_getfield($3, -1, ((STRING_TABLE.__str1683)|0));
  var $4=$1;
  _lua_setfield($4, -2, ((STRING_TABLE.__str2684)|0));
  var $5=$1;
  _createmetatable($5);
  ;
  return 1;
}


function _createmetatable($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  _lua_createtable($2, 0, 1);
  var $3=$1;
  _lua_pushlstring($3, ((__str3685)|0), 0);
  var $4=$1;
  _lua_pushvalue($4, -2);
  var $5=$1;
  var $6=_lua_setmetatable($5, -2);
  var $7=$1;
  _lua_settop($7, -2);
  var $8=$1;
  _lua_pushvalue($8, -2);
  var $9=$1;
  _lua_setfield($9, -2, ((STRING_TABLE.__str4686)|0));
  var $10=$1;
  _lua_settop($10, -2);
  ;
  return;
}


function _str_byte($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $l=__stackBase__;
      var $s;
      var $posi;
      var $pose;
      var $n;
      var $i;
      $2=$L;
      var $3=$2;
      var $4=_luaL_checklstring($3, 1, $l);
      $s=$4;
      var $5=$2;
      var $6=_luaL_optinteger($5, 2, 1);
      var $7=HEAP32[(($l)>>2)];
      var $8=_posrelat($6, $7);
      $posi=$8;
      var $9=$2;
      var $10=$posi;
      var $11=_luaL_optinteger($9, 3, $10);
      var $12=HEAP32[(($l)>>2)];
      var $13=_posrelat($11, $12);
      $pose=$13;
      var $14=$posi;
      var $15=(($14)|0) <= 0;
      if ($15) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $posi=1;
      __label__ = 4; break;
    case 4: 
      var $18=$pose;
      var $19=HEAPU32[(($l)>>2)];
      var $20=(($18)>>>0) > (($19)>>>0);
      if ($20) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $22=HEAP32[(($l)>>2)];
      $pose=$22;
      __label__ = 6; break;
    case 6: 
      var $24=$posi;
      var $25=$pose;
      var $26=(($24)|0) > (($25)|0);
      if ($26) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $1=0;
      __label__ = 15; break;
    case 8: 
      var $29=$pose;
      var $30=$posi;
      var $31=((($29)-($30))|0);
      var $32=((($31)+(1))|0);
      $n=$32;
      var $33=$posi;
      var $34=$n;
      var $35=((($33)+($34))|0);
      var $36=$pose;
      var $37=(($35)|0) <= (($36)|0);
      if ($37) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $39=$2;
      var $40=_luaL_error($39, ((STRING_TABLE.__str40722)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 10; break;
    case 10: 
      var $42=$2;
      var $43=$n;
      _luaL_checkstack($42, $43, ((STRING_TABLE.__str40722)|0));
      $i=0;
      __label__ = 11; break;
    case 11: 
      var $45=$i;
      var $46=$n;
      var $47=(($45)|0) < (($46)|0);
      if ($47) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $49=$2;
      var $50=$posi;
      var $51=$i;
      var $52=((($50)+($51))|0);
      var $53=((($52)-(1))|0);
      var $54=$s;
      var $55=(($54+$53)|0);
      var $56=HEAPU8[($55)];
      var $57=(($56)&255);
      _lua_pushinteger($49, $57);
      __label__ = 13; break;
    case 13: 
      var $59=$i;
      var $60=((($59)+(1))|0);
      $i=$60;
      __label__ = 11; break;
    case 14: 
      var $62=$n;
      $1=$62;
      __label__ = 15; break;
    case 15: 
      var $64=$1;
      STACKTOP = __stackBase__;
      return $64;
    default: assert(0, "bad label: " + __label__);
  }
}
_str_byte["X"]=1;

function _str_char($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 1036; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $n;
      var $i;
      var $b=__stackBase__;
      var $c;
      $1=$L;
      var $2=$1;
      var $3=_lua_gettop($2);
      $n=$3;
      var $4=$1;
      _luaL_buffinit($4, $b);
      $i=1;
      __label__ = 3; break;
    case 3: 
      var $6=$i;
      var $7=$n;
      var $8=(($6)|0) <= (($7)|0);
      if ($8) { __label__ = 4; break; } else { __label__ = 10; break; }
    case 4: 
      var $10=$1;
      var $11=$i;
      var $12=_luaL_checkinteger($10, $11);
      $c=$12;
      var $13=$c;
      var $14=(($13) & 255);
      var $15=(($14)&255);
      var $16=$c;
      var $17=(($15)|0)==(($16)|0);
      if ($17) { var $24 = 1;__label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $19=$1;
      var $20=$i;
      var $21=_luaL_argerror($19, $20, ((STRING_TABLE.__str39721)|0));
      var $22=(($21)|0)!=0;
      var $24 = $22;__label__ = 6; break;
    case 6: 
      var $24;
      var $25=(($24)&1);
      var $26=(($b)|0);
      var $27=HEAPU32[(($26)>>2)];
      var $28=(($b+12)|0);
      var $29=(($28)|0);
      var $30=(($29+1024)|0);
      var $31=(($27)>>>0) < (($30)>>>0);
      if ($31) { var $36 = 1;__label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $33=_luaL_prepbuffer($b);
      var $34=(($33)|0)!=0;
      var $36 = $34;__label__ = 8; break;
    case 8: 
      var $36;
      var $37=(($36)&1);
      var $38=$c;
      var $39=(($38) & 255);
      var $40=(($b)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+1)|0);
      HEAP32[(($40)>>2)]=$42;
      HEAP8[($41)]=$39;
      __label__ = 9; break;
    case 9: 
      var $44=$i;
      var $45=((($44)+(1))|0);
      $i=$45;
      __label__ = 3; break;
    case 10: 
      _luaL_pushresult($b);
      STACKTOP = __stackBase__;
      return 1;
    default: assert(0, "bad label: " + __label__);
  }
}
_str_char["X"]=1;

function _str_dump($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 1036; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $b=__stackBase__;
      $1=$L;
      var $2=$1;
      _luaL_checktype($2, 1, 6);
      var $3=$1;
      _lua_settop($3, 1);
      var $4=$1;
      _luaL_buffinit($4, $b);
      var $5=$1;
      var $6=$b;
      var $7=_lua_dump($5, 46, $6);
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$1;
      var $11=_luaL_error($10, ((STRING_TABLE.__str38720)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 4; break;
    case 4: 
      _luaL_pushresult($b);
      STACKTOP = __stackBase__;
      return 1;
    default: assert(0, "bad label: " + __label__);
  }
}


function _str_find($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  var $3=_str_find_aux($2, 1);
  ;
  return $3;
}


function _str_format($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 1576; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $top;
      var $arg;
      var $sfl=__stackBase__;
      var $strfrmt;
      var $strfrmt_end;
      var $b=(__stackBase__)+(4);
      var $form=(__stackBase__)+(1040);
      var $buff=(__stackBase__)+(1060);
      var $l=(__stackBase__)+(1572);
      var $s;
      $2=$L;
      var $3=$2;
      var $4=_lua_gettop($3);
      $top=$4;
      $arg=1;
      var $5=$2;
      var $6=$arg;
      var $7=_luaL_checklstring($5, $6, $sfl);
      $strfrmt=$7;
      var $8=$strfrmt;
      var $9=HEAP32[(($sfl)>>2)];
      var $10=(($8+$9)|0);
      $strfrmt_end=$10;
      var $11=$2;
      _luaL_buffinit($11, $b);
      __label__ = 3; break;
    case 3: 
      var $13=$strfrmt;
      var $14=$strfrmt_end;
      var $15=(($13)>>>0) < (($14)>>>0);
      if ($15) { __label__ = 4; break; } else { __label__ = 28; break; }
    case 4: 
      var $17=$strfrmt;
      var $18=HEAP8[($17)];
      var $19=(($18 << 24) >> 24);
      var $20=(($19)|0)!=37;
      if ($20) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $22=(($b)|0);
      var $23=HEAPU32[(($22)>>2)];
      var $24=(($b+12)|0);
      var $25=(($24)|0);
      var $26=(($25+1024)|0);
      var $27=(($23)>>>0) < (($26)>>>0);
      if ($27) { var $32 = 1;__label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $29=_luaL_prepbuffer($b);
      var $30=(($29)|0)!=0;
      var $32 = $30;__label__ = 7; break;
    case 7: 
      var $32;
      var $33=(($32)&1);
      var $34=$strfrmt;
      var $35=(($34+1)|0);
      $strfrmt=$35;
      var $36=HEAP8[($34)];
      var $37=(($b)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+1)|0);
      HEAP32[(($37)>>2)]=$39;
      HEAP8[($38)]=$36;
      __label__ = 27; break;
    case 8: 
      var $41=$strfrmt;
      var $42=(($41+1)|0);
      $strfrmt=$42;
      var $43=HEAP8[($42)];
      var $44=(($43 << 24) >> 24);
      var $45=(($44)|0)==37;
      if ($45) { __label__ = 9; break; } else { __label__ = 12; break; }
    case 9: 
      var $47=(($b)|0);
      var $48=HEAPU32[(($47)>>2)];
      var $49=(($b+12)|0);
      var $50=(($49)|0);
      var $51=(($50+1024)|0);
      var $52=(($48)>>>0) < (($51)>>>0);
      if ($52) { var $57 = 1;__label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $54=_luaL_prepbuffer($b);
      var $55=(($54)|0)!=0;
      var $57 = $55;__label__ = 11; break;
    case 11: 
      var $57;
      var $58=(($57)&1);
      var $59=$strfrmt;
      var $60=(($59+1)|0);
      $strfrmt=$60;
      var $61=HEAP8[($59)];
      var $62=(($b)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+1)|0);
      HEAP32[(($62)>>2)]=$64;
      HEAP8[($63)]=$61;
      __label__ = 26; break;
    case 12: 
      var $66=$arg;
      var $67=((($66)+(1))|0);
      $arg=$67;
      var $68=$top;
      var $69=(($67)|0) > (($68)|0);
      if ($69) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $71=$2;
      var $72=$arg;
      var $73=_luaL_argerror($71, $72, ((STRING_TABLE.__str30712)|0));
      __label__ = 14; break;
    case 14: 
      var $75=$2;
      var $76=$strfrmt;
      var $77=(($form)|0);
      var $78=_scanformat($75, $76, $77);
      $strfrmt=$78;
      var $79=$strfrmt;
      var $80=(($79+1)|0);
      $strfrmt=$80;
      var $81=HEAP8[($79)];
      var $82=(($81 << 24) >> 24);
      if ((($82)|0) == 99) {
        __label__ = 15; break;
      }
      else if ((($82)|0) == 100 || (($82)|0) == 105) {
        __label__ = 16; break;
      }
      else if ((($82)|0) == 111 || (($82)|0) == 117 || (($82)|0) == 120 || (($82)|0) == 88) {
        __label__ = 17; break;
      }
      else if ((($82)|0) == 101 || (($82)|0) == 69 || (($82)|0) == 102 || (($82)|0) == 103 || (($82)|0) == 71) {
        __label__ = 18; break;
      }
      else if ((($82)|0) == 113) {
        __label__ = 19; break;
      }
      else if ((($82)|0) == 115) {
        __label__ = 20; break;
      }
      else {
      __label__ = 24; break;
      }
      
    case 15: 
      var $84=(($buff)|0);
      var $85=(($form)|0);
      var $86=$2;
      var $87=$arg;
      var $88=_luaL_checknumber($86, $87);
      var $89=(($88)&-1);
      var $90=_sprintf($84, $85, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$89,tempInt));
      __label__ = 25; break;
    case 16: 
      var $92=(($form)|0);
      _addintlen($92);
      var $93=(($buff)|0);
      var $94=(($form)|0);
      var $95=$2;
      var $96=$arg;
      var $97=_luaL_checknumber($95, $96);
      var $98=(($97)&-1);
      var $99=_sprintf($93, $94, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$98,tempInt));
      __label__ = 25; break;
    case 17: 
      var $101=(($form)|0);
      _addintlen($101);
      var $102=(($buff)|0);
      var $103=(($form)|0);
      var $104=$2;
      var $105=$arg;
      var $106=_luaL_checknumber($104, $105);
      var $107=($106 >= 0 ? Math.floor($106) : Math.ceil($106));
      var $108=_sprintf($102, $103, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$107,tempInt));
      __label__ = 25; break;
    case 18: 
      var $110=(($buff)|0);
      var $111=(($form)|0);
      var $112=$2;
      var $113=$arg;
      var $114=_luaL_checknumber($112, $113);
      var $115=_sprintf($110, $111, (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$114,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),tempInt));
      __label__ = 25; break;
    case 19: 
      var $117=$2;
      var $118=$arg;
      _addquoted($117, $b, $118);
      __label__ = 3; break;
    case 20: 
      var $120=$2;
      var $121=$arg;
      var $122=_luaL_checklstring($120, $121, $l);
      $s=$122;
      var $123=(($form)|0);
      var $124=_strchr($123, 46);
      var $125=(($124)|0)!=0;
      if ($125) { __label__ = 23; break; } else { __label__ = 21; break; }
    case 21: 
      var $127=HEAPU32[(($l)>>2)];
      var $128=(($127)>>>0) >= 100;
      if ($128) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $130=$2;
      var $131=$arg;
      _lua_pushvalue($130, $131);
      _luaL_addvalue($b);
      __label__ = 3; break;
    case 23: 
      var $133=(($buff)|0);
      var $134=(($form)|0);
      var $135=$s;
      var $136=_sprintf($133, $134, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$135,tempInt));
      __label__ = 25; break;
    case 24: 
      var $138=$2;
      var $139=$strfrmt;
      var $140=((($139)-(1))|0);
      var $141=HEAP8[($140)];
      var $142=(($141 << 24) >> 24);
      var $143=_luaL_error($138, ((STRING_TABLE.__str31713)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$142,tempInt));
      $1=$143;
      __label__ = 29; break;
    case 25: 
      var $145=(($buff)|0);
      var $146=(($buff)|0);
      var $147=_strlen($146);
      _luaL_addlstring($b, $145, $147);
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 3; break;
    case 28: 
      _luaL_pushresult($b);
      $1=1;
      __label__ = 29; break;
    case 29: 
      var $152=$1;
      STACKTOP = __stackBase__;
      return $152;
    default: assert(0, "bad label: " + __label__);
  }
}
_str_format["X"]=1;

function _gfind_nodef($L) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  var $3=_luaL_error($2, ((STRING_TABLE.__str29711)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  STACKTOP = __stackBase__;
  return $3;
}


function _gmatch($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  var $3=_luaL_checklstring($2, 1, 0);
  var $4=$1;
  var $5=_luaL_checklstring($4, 2, 0);
  var $6=$1;
  _lua_settop($6, 2);
  var $7=$1;
  _lua_pushinteger($7, 0);
  var $8=$1;
  _lua_pushcclosure($8, 48, 3);
  ;
  return 1;
}


function _str_gsub($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 1312; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $srcl=__stackBase__;
      var $src;
      var $p;
      var $tr;
      var $max_s;
      var $anchor;
      var $n;
      var $ms=(__stackBase__)+(4);
      var $b=(__stackBase__)+(276);
      var $e;
      $1=$L;
      var $2=$1;
      var $3=_luaL_checklstring($2, 1, $srcl);
      $src=$3;
      var $4=$1;
      var $5=_luaL_checklstring($4, 2, 0);
      $p=$5;
      var $6=$1;
      var $7=_lua_type($6, 3);
      $tr=$7;
      var $8=$1;
      var $9=HEAP32[(($srcl)>>2)];
      var $10=((($9)+(1))|0);
      var $11=_luaL_optinteger($8, 4, $10);
      $max_s=$11;
      var $12=$p;
      var $13=HEAP8[($12)];
      var $14=(($13 << 24) >> 24);
      var $15=(($14)|0)==94;
      if ($15) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $17=$p;
      var $18=(($17+1)|0);
      $p=$18;
      var $21 = 1;__label__ = 5; break;
    case 4: 
      var $21 = 0;__label__ = 5; break;
    case 5: 
      var $21;
      $anchor=$21;
      $n=0;
      var $22=$tr;
      var $23=(($22)|0)==3;
      if ($23) { var $38 = 1;__label__ = 10; break; } else { __label__ = 6; break; }
    case 6: 
      var $25=$tr;
      var $26=(($25)|0)==4;
      if ($26) { var $38 = 1;__label__ = 10; break; } else { __label__ = 7; break; }
    case 7: 
      var $28=$tr;
      var $29=(($28)|0)==6;
      if ($29) { var $38 = 1;__label__ = 10; break; } else { __label__ = 8; break; }
    case 8: 
      var $31=$tr;
      var $32=(($31)|0)==5;
      if ($32) { var $38 = 1;__label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $34=$1;
      var $35=_luaL_argerror($34, 3, ((STRING_TABLE.__str27709)|0));
      var $36=(($35)|0)!=0;
      var $38 = $36;__label__ = 10; break;
    case 10: 
      var $38;
      var $39=(($38)&1);
      var $40=$1;
      _luaL_buffinit($40, $b);
      var $41=$1;
      var $42=(($ms+8)|0);
      HEAP32[(($42)>>2)]=$41;
      var $43=$src;
      var $44=(($ms)|0);
      HEAP32[(($44)>>2)]=$43;
      var $45=$src;
      var $46=HEAP32[(($srcl)>>2)];
      var $47=(($45+$46)|0);
      var $48=(($ms+4)|0);
      HEAP32[(($48)>>2)]=$47;
      __label__ = 11; break;
    case 11: 
      var $50=$n;
      var $51=$max_s;
      var $52=(($50)|0) < (($51)|0);
      if ($52) { __label__ = 12; break; } else { __label__ = 26; break; }
    case 12: 
      var $54=(($ms+12)|0);
      HEAP32[(($54)>>2)]=0;
      var $55=$src;
      var $56=$p;
      var $57=_match($ms, $55, $56);
      $e=$57;
      var $58=$e;
      var $59=(($58)|0)!=0;
      if ($59) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $61=$n;
      var $62=((($61)+(1))|0);
      $n=$62;
      var $63=$src;
      var $64=$e;
      _add_value($ms, $b, $63, $64);
      __label__ = 14; break;
    case 14: 
      var $66=$e;
      var $67=(($66)|0)!=0;
      if ($67) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: 
      var $69=$e;
      var $70=$src;
      var $71=(($69)>>>0) > (($70)>>>0);
      if ($71) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $73=$e;
      $src=$73;
      __label__ = 23; break;
    case 17: 
      var $75=$src;
      var $76=(($ms+4)|0);
      var $77=HEAPU32[(($76)>>2)];
      var $78=(($75)>>>0) < (($77)>>>0);
      if ($78) { __label__ = 18; break; } else { __label__ = 21; break; }
    case 18: 
      var $80=(($b)|0);
      var $81=HEAPU32[(($80)>>2)];
      var $82=(($b+12)|0);
      var $83=(($82)|0);
      var $84=(($83+1024)|0);
      var $85=(($81)>>>0) < (($84)>>>0);
      if ($85) { var $90 = 1;__label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      var $87=_luaL_prepbuffer($b);
      var $88=(($87)|0)!=0;
      var $90 = $88;__label__ = 20; break;
    case 20: 
      var $90;
      var $91=(($90)&1);
      var $92=$src;
      var $93=(($92+1)|0);
      $src=$93;
      var $94=HEAP8[($92)];
      var $95=(($b)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+1)|0);
      HEAP32[(($95)>>2)]=$97;
      HEAP8[($96)]=$94;
      __label__ = 22; break;
    case 21: 
      __label__ = 26; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $101=$anchor;
      var $102=(($101)|0)!=0;
      if ($102) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      __label__ = 26; break;
    case 25: 
      __label__ = 11; break;
    case 26: 
      var $106=$src;
      var $107=(($ms+4)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$src;
      var $110=$108;
      var $111=$109;
      var $112=((($110)-($111))|0);
      _luaL_addlstring($b, $106, $112);
      _luaL_pushresult($b);
      var $113=$1;
      var $114=$n;
      _lua_pushinteger($113, $114);
      STACKTOP = __stackBase__;
      return 2;
    default: assert(0, "bad label: " + __label__);
  }
}
_str_gsub["X"]=1;

function _str_len($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $l=__stackBase__;
  $1=$L;
  var $2=$1;
  var $3=_luaL_checklstring($2, 1, $l);
  var $4=$1;
  var $5=HEAP32[(($l)>>2)];
  _lua_pushinteger($4, $5);
  STACKTOP = __stackBase__;
  return 1;
}


function _posrelat($pos, $len) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$pos;
      $2=$len;
      var $3=$1;
      var $4=(($3)|0) < 0;
      if ($4) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $6=$2;
      var $7=((($6)+(1))|0);
      var $8=$1;
      var $9=((($8)+($7))|0);
      $1=$9;
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=(($11)|0) >= 0;
      if ($12) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $14=$1;
      var $17 = $14;__label__ = 7; break;
    case 6: 
      var $17 = 0;__label__ = 7; break;
    case 7: 
      var $17;
      ;
      return $17;
    default: assert(0, "bad label: " + __label__);
  }
}


function _str_lower($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 1040; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $l=__stackBase__;
      var $i;
      var $b=(__stackBase__)+(4);
      var $s;
      $1=$L;
      var $2=$1;
      var $3=_luaL_checklstring($2, 1, $l);
      $s=$3;
      var $4=$1;
      _luaL_buffinit($4, $b);
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $6=$i;
      var $7=HEAPU32[(($l)>>2)];
      var $8=(($6)>>>0) < (($7)>>>0);
      if ($8) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $10=(($b)|0);
      var $11=HEAPU32[(($10)>>2)];
      var $12=(($b+12)|0);
      var $13=(($12)|0);
      var $14=(($13+1024)|0);
      var $15=(($11)>>>0) < (($14)>>>0);
      if ($15) { var $20 = 1;__label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $17=_luaL_prepbuffer($b);
      var $18=(($17)|0)!=0;
      var $20 = $18;__label__ = 6; break;
    case 6: 
      var $20;
      var $21=(($20)&1);
      var $22=$i;
      var $23=$s;
      var $24=(($23+$22)|0);
      var $25=HEAPU8[($24)];
      var $26=(($25)&255);
      var $27=_tolower($26);
      var $28=(($27) & 255);
      var $29=(($b)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+1)|0);
      HEAP32[(($29)>>2)]=$31;
      HEAP8[($30)]=$28;
      __label__ = 7; break;
    case 7: 
      var $33=$i;
      var $34=((($33)+(1))|0);
      $i=$34;
      __label__ = 3; break;
    case 8: 
      _luaL_pushresult($b);
      STACKTOP = __stackBase__;
      return 1;
    default: assert(0, "bad label: " + __label__);
  }
}


function _str_match($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  var $3=_str_find_aux($2, 0);
  ;
  return $3;
}


function _str_rep($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 1040; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $l=__stackBase__;
      var $b=(__stackBase__)+(4);
      var $s;
      var $n;
      $1=$L;
      var $2=$1;
      var $3=_luaL_checklstring($2, 1, $l);
      $s=$3;
      var $4=$1;
      var $5=_luaL_checkinteger($4, 2);
      $n=$5;
      var $6=$1;
      _luaL_buffinit($6, $b);
      __label__ = 3; break;
    case 3: 
      var $8=$n;
      var $9=((($8)-(1))|0);
      $n=$9;
      var $10=(($8)|0) > 0;
      if ($10) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $12=$s;
      var $13=HEAP32[(($l)>>2)];
      _luaL_addlstring($b, $12, $13);
      __label__ = 3; break;
    case 5: 
      _luaL_pushresult($b);
      STACKTOP = __stackBase__;
      return 1;
    default: assert(0, "bad label: " + __label__);
  }
}


function _str_reverse($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 1040; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $l=__stackBase__;
      var $b=(__stackBase__)+(4);
      var $s;
      $1=$L;
      var $2=$1;
      var $3=_luaL_checklstring($2, 1, $l);
      $s=$3;
      var $4=$1;
      _luaL_buffinit($4, $b);
      __label__ = 3; break;
    case 3: 
      var $6=HEAP32[(($l)>>2)];
      var $7=((($6)-(1))|0);
      HEAP32[(($l)>>2)]=$7;
      var $8=(($6)|0)!=0;
      if ($8) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $10=(($b)|0);
      var $11=HEAPU32[(($10)>>2)];
      var $12=(($b+12)|0);
      var $13=(($12)|0);
      var $14=(($13+1024)|0);
      var $15=(($11)>>>0) < (($14)>>>0);
      if ($15) { var $20 = 1;__label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $17=_luaL_prepbuffer($b);
      var $18=(($17)|0)!=0;
      var $20 = $18;__label__ = 6; break;
    case 6: 
      var $20;
      var $21=(($20)&1);
      var $22=HEAP32[(($l)>>2)];
      var $23=$s;
      var $24=(($23+$22)|0);
      var $25=HEAP8[($24)];
      var $26=(($b)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+1)|0);
      HEAP32[(($26)>>2)]=$28;
      HEAP8[($27)]=$25;
      __label__ = 3; break;
    case 7: 
      _luaL_pushresult($b);
      STACKTOP = __stackBase__;
      return 1;
    default: assert(0, "bad label: " + __label__);
  }
}


function _str_sub($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $l=__stackBase__;
      var $s;
      var $start;
      var $end;
      $1=$L;
      var $2=$1;
      var $3=_luaL_checklstring($2, 1, $l);
      $s=$3;
      var $4=$1;
      var $5=_luaL_checkinteger($4, 2);
      var $6=HEAP32[(($l)>>2)];
      var $7=_posrelat($5, $6);
      $start=$7;
      var $8=$1;
      var $9=_luaL_optinteger($8, 3, -1);
      var $10=HEAP32[(($l)>>2)];
      var $11=_posrelat($9, $10);
      $end=$11;
      var $12=$start;
      var $13=(($12)|0) < 1;
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $start=1;
      __label__ = 4; break;
    case 4: 
      var $16=$end;
      var $17=HEAP32[(($l)>>2)];
      var $18=(($16)|0) > (($17)|0);
      if ($18) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $20=HEAP32[(($l)>>2)];
      $end=$20;
      __label__ = 6; break;
    case 6: 
      var $22=$start;
      var $23=$end;
      var $24=(($22)|0) <= (($23)|0);
      if ($24) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $26=$1;
      var $27=$s;
      var $28=$start;
      var $29=(($27+$28)|0);
      var $30=((($29)-(1))|0);
      var $31=$end;
      var $32=$start;
      var $33=((($31)-($32))|0);
      var $34=((($33)+(1))|0);
      _lua_pushlstring($26, $30, $34);
      __label__ = 9; break;
    case 8: 
      var $36=$1;
      _lua_pushlstring($36, ((__str3685)|0), 0);
      __label__ = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return 1;
    default: assert(0, "bad label: " + __label__);
  }
}
_str_sub["X"]=1;

function _str_upper($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 1040; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $l=__stackBase__;
      var $i;
      var $b=(__stackBase__)+(4);
      var $s;
      $1=$L;
      var $2=$1;
      var $3=_luaL_checklstring($2, 1, $l);
      $s=$3;
      var $4=$1;
      _luaL_buffinit($4, $b);
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $6=$i;
      var $7=HEAPU32[(($l)>>2)];
      var $8=(($6)>>>0) < (($7)>>>0);
      if ($8) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $10=(($b)|0);
      var $11=HEAPU32[(($10)>>2)];
      var $12=(($b+12)|0);
      var $13=(($12)|0);
      var $14=(($13+1024)|0);
      var $15=(($11)>>>0) < (($14)>>>0);
      if ($15) { var $20 = 1;__label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $17=_luaL_prepbuffer($b);
      var $18=(($17)|0)!=0;
      var $20 = $18;__label__ = 6; break;
    case 6: 
      var $20;
      var $21=(($20)&1);
      var $22=$i;
      var $23=$s;
      var $24=(($23+$22)|0);
      var $25=HEAPU8[($24)];
      var $26=(($25)&255);
      var $27=_toupper($26);
      var $28=(($27) & 255);
      var $29=(($b)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+1)|0);
      HEAP32[(($29)>>2)]=$31;
      HEAP8[($30)]=$28;
      __label__ = 7; break;
    case 7: 
      var $33=$i;
      var $34=((($33)+(1))|0);
      $i=$34;
      __label__ = 3; break;
    case 8: 
      _luaL_pushresult($b);
      STACKTOP = __stackBase__;
      return 1;
    default: assert(0, "bad label: " + __label__);
  }
}


function _str_find_aux($L, $find) {
  var __stackBase__  = STACKTOP; STACKTOP += 280; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $l1=__stackBase__;
      var $l2=(__stackBase__)+(4);
      var $s;
      var $p;
      var $init;
      var $s2;
      var $ms=(__stackBase__)+(8);
      var $anchor;
      var $s1;
      var $res;
      $2=$L;
      $3=$find;
      var $4=$2;
      var $5=_luaL_checklstring($4, 1, $l1);
      $s=$5;
      var $6=$2;
      var $7=_luaL_checklstring($6, 2, $l2);
      $p=$7;
      var $8=$2;
      var $9=_luaL_optinteger($8, 3, 1);
      var $10=HEAP32[(($l1)>>2)];
      var $11=_posrelat($9, $10);
      var $12=((($11)-(1))|0);
      $init=$12;
      var $13=$init;
      var $14=(($13)|0) < 0;
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $init=0;
      __label__ = 7; break;
    case 4: 
      var $17=$init;
      var $18=HEAPU32[(($l1)>>2)];
      var $19=(($17)>>>0) > (($18)>>>0);
      if ($19) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $21=HEAP32[(($l1)>>2)];
      $init=$21;
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $24=$3;
      var $25=(($24)|0)!=0;
      if ($25) { __label__ = 8; break; } else { __label__ = 13; break; }
    case 8: 
      var $27=$2;
      var $28=_lua_toboolean($27, 4);
      var $29=(($28)|0)!=0;
      if ($29) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $31=$p;
      var $32=_strpbrk($31, ((STRING_TABLE.__str18700)|0));
      var $33=(($32)|0)==0;
      if ($33) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      var $35=$s;
      var $36=$init;
      var $37=(($35+$36)|0);
      var $38=HEAP32[(($l1)>>2)];
      var $39=$init;
      var $40=((($38)-($39))|0);
      var $41=$p;
      var $42=HEAP32[(($l2)>>2)];
      var $43=_lmemfind($37, $40, $41, $42);
      $s2=$43;
      var $44=$s2;
      var $45=(($44)|0)!=0;
      if ($45) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $47=$2;
      var $48=$s2;
      var $49=$s;
      var $50=$48;
      var $51=$49;
      var $52=((($50)-($51))|0);
      var $53=((($52)+(1))|0);
      _lua_pushinteger($47, $53);
      var $54=$2;
      var $55=$s2;
      var $56=$s;
      var $57=$55;
      var $58=$56;
      var $59=((($57)-($58))|0);
      var $60=HEAP32[(($l2)>>2)];
      var $61=((($59)+($60))|0);
      _lua_pushinteger($54, $61);
      $1=2;
      __label__ = 27; break;
    case 12: 
      __label__ = 26; break;
    case 13: 
      var $64=$p;
      var $65=HEAP8[($64)];
      var $66=(($65 << 24) >> 24);
      var $67=(($66)|0)==94;
      if ($67) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $69=$p;
      var $70=(($69+1)|0);
      $p=$70;
      var $73 = 1;__label__ = 16; break;
    case 15: 
      var $73 = 0;__label__ = 16; break;
    case 16: 
      var $73;
      $anchor=$73;
      var $74=$s;
      var $75=$init;
      var $76=(($74+$75)|0);
      $s1=$76;
      var $77=$2;
      var $78=(($ms+8)|0);
      HEAP32[(($78)>>2)]=$77;
      var $79=$s;
      var $80=(($ms)|0);
      HEAP32[(($80)>>2)]=$79;
      var $81=$s;
      var $82=HEAP32[(($l1)>>2)];
      var $83=(($81+$82)|0);
      var $84=(($ms+4)|0);
      HEAP32[(($84)>>2)]=$83;
      __label__ = 17; break;
    case 17: 
      var $86=(($ms+12)|0);
      HEAP32[(($86)>>2)]=0;
      var $87=$s1;
      var $88=$p;
      var $89=_match($ms, $87, $88);
      $res=$89;
      var $90=(($89)|0)!=0;
      if ($90) { __label__ = 18; break; } else { __label__ = 21; break; }
    case 18: 
      var $92=$3;
      var $93=(($92)|0)!=0;
      if ($93) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $95=$2;
      var $96=$s1;
      var $97=$s;
      var $98=$96;
      var $99=$97;
      var $100=((($98)-($99))|0);
      var $101=((($100)+(1))|0);
      _lua_pushinteger($95, $101);
      var $102=$2;
      var $103=$res;
      var $104=$s;
      var $105=$103;
      var $106=$104;
      var $107=((($105)-($106))|0);
      _lua_pushinteger($102, $107);
      var $108=_push_captures($ms, 0, 0);
      var $109=((($108)+(2))|0);
      $1=$109;
      __label__ = 27; break;
    case 20: 
      var $111=$s1;
      var $112=$res;
      var $113=_push_captures($ms, $111, $112);
      $1=$113;
      __label__ = 27; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $116=$s1;
      var $117=(($116+1)|0);
      $s1=$117;
      var $118=(($ms+4)|0);
      var $119=HEAPU32[(($118)>>2)];
      var $120=(($116)>>>0) < (($119)>>>0);
      if ($120) { __label__ = 23; break; } else { var $126 = 0;__label__ = 24; break; }
    case 23: 
      var $122=$anchor;
      var $123=(($122)|0)!=0;
      var $124=$123 ^ 1;
      var $126 = $124;__label__ = 24; break;
    case 24: 
      var $126;
      if ($126) { __label__ = 17; break; } else { __label__ = 25; break; }
    case 25: 
      __label__ = 26; break;
    case 26: 
      var $129=$2;
      _lua_pushnil($129);
      $1=1;
      __label__ = 27; break;
    case 27: 
      var $131=$1;
      STACKTOP = __stackBase__;
      return $131;
    default: assert(0, "bad label: " + __label__);
  }
}
_str_find_aux["X"]=1;

function _lmemfind($s1, $l1, $s2, $l2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $init;
      $2=$s1;
      $3=$l1;
      $4=$s2;
      $5=$l2;
      var $6=$5;
      var $7=(($6)|0)==0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$2;
      $1=$9;
      __label__ = 15; break;
    case 4: 
      var $11=$5;
      var $12=$3;
      var $13=(($11)>>>0) > (($12)>>>0);
      if ($13) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=0;
      __label__ = 15; break;
    case 6: 
      var $16=$5;
      var $17=((($16)-(1))|0);
      $5=$17;
      var $18=$3;
      var $19=$5;
      var $20=((($18)-($19))|0);
      $3=$20;
      __label__ = 7; break;
    case 7: 
      var $22=$3;
      var $23=(($22)>>>0) > 0;
      if ($23) { __label__ = 8; break; } else { var $33 = 0;__label__ = 9; break; }
    case 8: 
      var $25=$2;
      var $26=$4;
      var $27=HEAP8[($26)];
      var $28=(($27 << 24) >> 24);
      var $29=$3;
      var $30=_memchr($25, $28, $29);
      $init=$30;
      var $31=(($30)|0)!=0;
      var $33 = $31;__label__ = 9; break;
    case 9: 
      var $33;
      if ($33) { __label__ = 10; break; } else { __label__ = 14; break; }
    case 10: 
      var $35=$init;
      var $36=(($35+1)|0);
      $init=$36;
      var $37=$init;
      var $38=$4;
      var $39=(($38+1)|0);
      var $40=$5;
      var $41=_memcmp($37, $39, $40);
      var $42=(($41)|0)==0;
      if ($42) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $44=$init;
      var $45=((($44)-(1))|0);
      $1=$45;
      __label__ = 15; break;
    case 12: 
      var $47=$init;
      var $48=$2;
      var $49=$47;
      var $50=$48;
      var $51=((($49)-($50))|0);
      var $52=$3;
      var $53=((($52)-($51))|0);
      $3=$53;
      var $54=$init;
      $2=$54;
      __label__ = 13; break;
    case 13: 
      __label__ = 7; break;
    case 14: 
      $1=0;
      __label__ = 15; break;
    case 15: 
      var $58=$1;
      ;
      return $58;
    default: assert(0, "bad label: " + __label__);
  }
}
_lmemfind["X"]=1;

function _match($ms, $s, $p) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ep;
      var $previous;
      var $ep1;
      var $m;
      var $res;
      $2=$ms;
      $3=$s;
      $4=$p;
      __label__ = 3; break;
    case 3: 
      var $6=$4;
      var $7=HEAP8[($6)];
      var $8=(($7 << 24) >> 24);
      if ((($8)|0) == 40) {
        __label__ = 4; break;
      }
      else if ((($8)|0) == 41) {
        __label__ = 7; break;
      }
      else if ((($8)|0) == 37) {
        __label__ = 8; break;
      }
      else if ((($8)|0) == 0) {
        __label__ = 26; break;
      }
      else if ((($8)|0) == 36) {
        __label__ = 27; break;
      }
      else {
      __label__ = 33; break;
      }
      
    case 4: 
      var $10=$4;
      var $11=(($10+1)|0);
      var $12=HEAP8[($11)];
      var $13=(($12 << 24) >> 24);
      var $14=(($13)|0)==41;
      if ($14) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $16=$2;
      var $17=$3;
      var $18=$4;
      var $19=(($18+2)|0);
      var $20=_start_capture($16, $17, $19, -2);
      $1=$20;
      __label__ = 50; break;
    case 6: 
      var $22=$2;
      var $23=$3;
      var $24=$4;
      var $25=(($24+1)|0);
      var $26=_start_capture($22, $23, $25, -1);
      $1=$26;
      __label__ = 50; break;
    case 7: 
      var $28=$2;
      var $29=$3;
      var $30=$4;
      var $31=(($30+1)|0);
      var $32=_end_capture($28, $29, $31);
      $1=$32;
      __label__ = 50; break;
    case 8: 
      var $34=$4;
      var $35=(($34+1)|0);
      var $36=HEAP8[($35)];
      var $37=(($36 << 24) >> 24);
      if ((($37)|0) == 98) {
        __label__ = 9; break;
      }
      else if ((($37)|0) == 102) {
        __label__ = 12; break;
      }
      else {
      __label__ = 21; break;
      }
      
    case 9: 
      var $39=$2;
      var $40=$3;
      var $41=$4;
      var $42=(($41+2)|0);
      var $43=_matchbalance($39, $40, $42);
      $3=$43;
      var $44=$3;
      var $45=(($44)|0)==0;
      if ($45) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      $1=0;
      __label__ = 50; break;
    case 11: 
      var $48=$4;
      var $49=(($48+4)|0);
      $4=$49;
      __label__ = 3; break;
    case 12: 
      var $51=$4;
      var $52=(($51+2)|0);
      $4=$52;
      var $53=$4;
      var $54=HEAP8[($53)];
      var $55=(($54 << 24) >> 24);
      var $56=(($55)|0)!=91;
      if ($56) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $58=$2;
      var $59=(($58+8)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=_luaL_error($60, ((STRING_TABLE.__str22704)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 14; break;
    case 14: 
      var $63=$2;
      var $64=$4;
      var $65=_classend($63, $64);
      $ep=$65;
      var $66=$3;
      var $67=$2;
      var $68=(($67)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($66)|0)==(($69)|0);
      if ($70) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $78 = 0;__label__ = 17; break;
    case 16: 
      var $73=$3;
      var $74=((($73)-(1))|0);
      var $75=HEAP8[($74)];
      var $76=(($75 << 24) >> 24);
      var $78 = $76;__label__ = 17; break;
    case 17: 
      var $78;
      var $79=(($78) & 255);
      $previous=$79;
      var $80=$previous;
      var $81=(($80)&255);
      var $82=$4;
      var $83=$ep;
      var $84=((($83)-(1))|0);
      var $85=_matchbracketclass($81, $82, $84);
      var $86=(($85)|0)!=0;
      if ($86) { __label__ = 19; break; } else { __label__ = 18; break; }
    case 18: 
      var $88=$3;
      var $89=HEAPU8[($88)];
      var $90=(($89)&255);
      var $91=$4;
      var $92=$ep;
      var $93=((($92)-(1))|0);
      var $94=_matchbracketclass($90, $91, $93);
      var $95=(($94)|0)!=0;
      if ($95) { __label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      $1=0;
      __label__ = 50; break;
    case 20: 
      var $98=$ep;
      $4=$98;
      __label__ = 3; break;
    case 21: 
      var $100=$4;
      var $101=(($100+1)|0);
      var $102=HEAPU8[($101)];
      var $103=(($102)&255);
      var $104=_isdigit($103);
      var $105=(($104)|0)!=0;
      if ($105) { __label__ = 22; break; } else { __label__ = 25; break; }
    case 22: 
      var $107=$2;
      var $108=$3;
      var $109=$4;
      var $110=(($109+1)|0);
      var $111=HEAPU8[($110)];
      var $112=(($111)&255);
      var $113=_match_capture($107, $108, $112);
      $3=$113;
      var $114=$3;
      var $115=(($114)|0)==0;
      if ($115) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      $1=0;
      __label__ = 50; break;
    case 24: 
      var $118=$4;
      var $119=(($118+2)|0);
      $4=$119;
      __label__ = 3; break;
    case 25: 
      __label__ = 34; break;
    case 26: 
      var $122=$3;
      $1=$122;
      __label__ = 50; break;
    case 27: 
      var $124=$4;
      var $125=(($124+1)|0);
      var $126=HEAP8[($125)];
      var $127=(($126 << 24) >> 24);
      var $128=(($127)|0)==0;
      if ($128) { __label__ = 28; break; } else { __label__ = 32; break; }
    case 28: 
      var $130=$3;
      var $131=$2;
      var $132=(($131+4)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=(($130)|0)==(($133)|0);
      if ($134) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $136=$3;
      var $139 = $136;__label__ = 31; break;
    case 30: 
      var $139 = 0;__label__ = 31; break;
    case 31: 
      var $139;
      $1=$139;
      __label__ = 50; break;
    case 32: 
      __label__ = 34; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      var $143=$2;
      var $144=$4;
      var $145=_classend($143, $144);
      $ep1=$145;
      var $146=$3;
      var $147=$2;
      var $148=(($147+4)|0);
      var $149=HEAPU32[(($148)>>2)];
      var $150=(($146)>>>0) < (($149)>>>0);
      if ($150) { __label__ = 35; break; } else { var $160 = 0;__label__ = 36; break; }
    case 35: 
      var $152=$3;
      var $153=HEAPU8[($152)];
      var $154=(($153)&255);
      var $155=$4;
      var $156=$ep1;
      var $157=_singlematch($154, $155, $156);
      var $158=(($157)|0)!=0;
      var $160 = $158;__label__ = 36; break;
    case 36: 
      var $160;
      var $161=(($160)&1);
      $m=$161;
      var $162=$ep1;
      var $163=HEAP8[($162)];
      var $164=(($163 << 24) >> 24);
      if ((($164)|0) == 63) {
        __label__ = 37; break;
      }
      else if ((($164)|0) == 42) {
        __label__ = 41; break;
      }
      else if ((($164)|0) == 43) {
        __label__ = 42; break;
      }
      else if ((($164)|0) == 45) {
        __label__ = 46; break;
      }
      else {
      __label__ = 47; break;
      }
      
    case 37: 
      var $166=$m;
      var $167=(($166)|0)!=0;
      if ($167) { __label__ = 38; break; } else { __label__ = 40; break; }
    case 38: 
      var $169=$2;
      var $170=$3;
      var $171=(($170+1)|0);
      var $172=$ep1;
      var $173=(($172+1)|0);
      var $174=_match($169, $171, $173);
      $res=$174;
      var $175=(($174)|0)!=0;
      if ($175) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $177=$res;
      $1=$177;
      __label__ = 50; break;
    case 40: 
      var $179=$ep1;
      var $180=(($179+1)|0);
      $4=$180;
      __label__ = 3; break;
    case 41: 
      var $182=$2;
      var $183=$3;
      var $184=$4;
      var $185=$ep1;
      var $186=_max_expand($182, $183, $184, $185);
      $1=$186;
      __label__ = 50; break;
    case 42: 
      var $188=$m;
      var $189=(($188)|0)!=0;
      if ($189) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $191=$2;
      var $192=$3;
      var $193=(($192+1)|0);
      var $194=$4;
      var $195=$ep1;
      var $196=_max_expand($191, $193, $194, $195);
      var $199 = $196;__label__ = 45; break;
    case 44: 
      var $199 = 0;__label__ = 45; break;
    case 45: 
      var $199;
      $1=$199;
      __label__ = 50; break;
    case 46: 
      var $201=$2;
      var $202=$3;
      var $203=$4;
      var $204=$ep1;
      var $205=_min_expand($201, $202, $203, $204);
      $1=$205;
      __label__ = 50; break;
    case 47: 
      var $207=$m;
      var $208=(($207)|0)!=0;
      if ($208) { __label__ = 49; break; } else { __label__ = 48; break; }
    case 48: 
      $1=0;
      __label__ = 50; break;
    case 49: 
      var $211=$3;
      var $212=(($211+1)|0);
      $3=$212;
      var $213=$ep1;
      $4=$213;
      __label__ = 3; break;
    case 50: 
      var $215=$1;
      STACKTOP = __stackBase__;
      return $215;
    default: assert(0, "bad label: " + __label__);
  }
}
_match["X"]=1;

function _push_captures($ms, $s, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $nlevels;
      $1=$ms;
      $2=$s;
      $3=$e;
      var $4=$1;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)==0;
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $9=$2;
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $17 = 1;__label__ = 6; break;
    case 5: 
      var $13=$1;
      var $14=(($13+12)|0);
      var $15=HEAP32[(($14)>>2)];
      var $17 = $15;__label__ = 6; break;
    case 6: 
      var $17;
      $nlevels=$17;
      var $18=$1;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$nlevels;
      _luaL_checkstack($20, $21, ((STRING_TABLE.__str19701)|0));
      $i=0;
      __label__ = 7; break;
    case 7: 
      var $23=$i;
      var $24=$nlevels;
      var $25=(($23)|0) < (($24)|0);
      if ($25) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $27=$1;
      var $28=$i;
      var $29=$2;
      var $30=$3;
      _push_onecapture($27, $28, $29, $30);
      __label__ = 9; break;
    case 9: 
      var $32=$i;
      var $33=((($32)+(1))|0);
      $i=$33;
      __label__ = 7; break;
    case 10: 
      var $35=$nlevels;
      ;
      return $35;
    default: assert(0, "bad label: " + __label__);
  }
}


function _push_onecapture($ms, $i, $s, $e) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $l;
      $1=$ms;
      $2=$i;
      $3=$s;
      $4=$e;
      var $5=$2;
      var $6=$1;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($5)|0) >= (($8)|0);
      if ($9) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $11=$2;
      var $12=(($11)|0)==0;
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $14=$1;
      var $15=(($14+8)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$3;
      var $18=$4;
      var $19=$3;
      var $20=$18;
      var $21=$19;
      var $22=((($20)-($21))|0);
      _lua_pushlstring($16, $17, $22);
      __label__ = 6; break;
    case 5: 
      var $24=$1;
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=_luaL_error($26, ((STRING_TABLE.__str20702)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 6; break;
    case 6: 
      __label__ = 13; break;
    case 7: 
      var $30=$2;
      var $31=$1;
      var $32=(($31+16)|0);
      var $33=(($32+($30<<3))|0);
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      $l=$35;
      var $36=$l;
      var $37=(($36)|0)==-1;
      if ($37) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $39=$1;
      var $40=(($39+8)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=_luaL_error($41, ((STRING_TABLE.__str21703)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 9; break;
    case 9: 
      var $44=$l;
      var $45=(($44)|0)==-2;
      if ($45) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $47=$1;
      var $48=(($47+8)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$2;
      var $51=$1;
      var $52=(($51+16)|0);
      var $53=(($52+($50<<3))|0);
      var $54=(($53)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$1;
      var $57=(($56)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$55;
      var $60=$58;
      var $61=((($59)-($60))|0);
      var $62=((($61)+(1))|0);
      _lua_pushinteger($49, $62);
      __label__ = 12; break;
    case 11: 
      var $64=$1;
      var $65=(($64+8)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$2;
      var $68=$1;
      var $69=(($68+16)|0);
      var $70=(($69+($67<<3))|0);
      var $71=(($70)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$l;
      _lua_pushlstring($66, $72, $73);
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_push_onecapture["X"]=1;

function _start_capture($ms, $s, $p, $what) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $res;
      var $level;
      $1=$ms;
      $2=$s;
      $3=$p;
      $4=$what;
      var $5=$1;
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      $level=$7;
      var $8=$level;
      var $9=(($8)|0) >= 32;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$1;
      var $12=(($11+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=_luaL_error($13, ((STRING_TABLE.__str19701)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 4; break;
    case 4: 
      var $16=$2;
      var $17=$level;
      var $18=$1;
      var $19=(($18+16)|0);
      var $20=(($19+($17<<3))|0);
      var $21=(($20)|0);
      HEAP32[(($21)>>2)]=$16;
      var $22=$4;
      var $23=$level;
      var $24=$1;
      var $25=(($24+16)|0);
      var $26=(($25+($23<<3))|0);
      var $27=(($26+4)|0);
      HEAP32[(($27)>>2)]=$22;
      var $28=$level;
      var $29=((($28)+(1))|0);
      var $30=$1;
      var $31=(($30+12)|0);
      HEAP32[(($31)>>2)]=$29;
      var $32=$1;
      var $33=$2;
      var $34=$3;
      var $35=_match($32, $33, $34);
      $res=$35;
      var $36=(($35)|0)==0;
      if ($36) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $38=$1;
      var $39=(($38+12)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=((($40)-(1))|0);
      HEAP32[(($39)>>2)]=$41;
      __label__ = 6; break;
    case 6: 
      var $43=$res;
      STACKTOP = __stackBase__;
      return $43;
    default: assert(0, "bad label: " + __label__);
  }
}
_start_capture["X"]=1;

function _end_capture($ms, $s, $p) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $l;
      var $res;
      $1=$ms;
      $2=$s;
      $3=$p;
      var $4=$1;
      var $5=_capture_to_close($4);
      $l=$5;
      var $6=$2;
      var $7=$l;
      var $8=$1;
      var $9=(($8+16)|0);
      var $10=(($9+($7<<3))|0);
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$6;
      var $14=$12;
      var $15=((($13)-($14))|0);
      var $16=$l;
      var $17=$1;
      var $18=(($17+16)|0);
      var $19=(($18+($16<<3))|0);
      var $20=(($19+4)|0);
      HEAP32[(($20)>>2)]=$15;
      var $21=$1;
      var $22=$2;
      var $23=$3;
      var $24=_match($21, $22, $23);
      $res=$24;
      var $25=(($24)|0)==0;
      if ($25) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $27=$l;
      var $28=$1;
      var $29=(($28+16)|0);
      var $30=(($29+($27<<3))|0);
      var $31=(($30+4)|0);
      HEAP32[(($31)>>2)]=-1;
      __label__ = 4; break;
    case 4: 
      var $33=$res;
      ;
      return $33;
    default: assert(0, "bad label: " + __label__);
  }
}


function _matchbalance($ms, $s, $p) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $b;
      var $e;
      var $cont;
      $2=$ms;
      $3=$s;
      $4=$p;
      var $5=$4;
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24);
      var $8=(($7)|0)==0;
      if ($8) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $10=$4;
      var $11=(($10+1)|0);
      var $12=HEAP8[($11)];
      var $13=(($12 << 24) >> 24);
      var $14=(($13)|0)==0;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $16=$2;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=_luaL_error($18, ((STRING_TABLE.__str25707)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 5; break;
    case 5: 
      var $21=$3;
      var $22=HEAP8[($21)];
      var $23=(($22 << 24) >> 24);
      var $24=$4;
      var $25=HEAP8[($24)];
      var $26=(($25 << 24) >> 24);
      var $27=(($23)|0)!=(($26)|0);
      if ($27) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $1=0;
      __label__ = 19; break;
    case 7: 
      var $30=$4;
      var $31=HEAP8[($30)];
      var $32=(($31 << 24) >> 24);
      $b=$32;
      var $33=$4;
      var $34=(($33+1)|0);
      var $35=HEAP8[($34)];
      var $36=(($35 << 24) >> 24);
      $e=$36;
      $cont=1;
      __label__ = 8; break;
    case 8: 
      var $38=$3;
      var $39=(($38+1)|0);
      $3=$39;
      var $40=$2;
      var $41=(($40+4)|0);
      var $42=HEAPU32[(($41)>>2)];
      var $43=(($39)>>>0) < (($42)>>>0);
      if ($43) { __label__ = 9; break; } else { __label__ = 17; break; }
    case 9: 
      var $45=$3;
      var $46=HEAP8[($45)];
      var $47=(($46 << 24) >> 24);
      var $48=$e;
      var $49=(($47)|0)==(($48)|0);
      if ($49) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      var $51=$cont;
      var $52=((($51)-(1))|0);
      $cont=$52;
      var $53=(($52)|0)==0;
      if ($53) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $55=$3;
      var $56=(($55+1)|0);
      $1=$56;
      __label__ = 19; break;
    case 12: 
      __label__ = 16; break;
    case 13: 
      var $59=$3;
      var $60=HEAP8[($59)];
      var $61=(($60 << 24) >> 24);
      var $62=$b;
      var $63=(($61)|0)==(($62)|0);
      if ($63) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $65=$cont;
      var $66=((($65)+(1))|0);
      $cont=$66;
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      __label__ = 8; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      $1=0;
      __label__ = 19; break;
    case 19: 
      var $72=$1;
      STACKTOP = __stackBase__;
      return $72;
    default: assert(0, "bad label: " + __label__);
  }
}
_matchbalance["X"]=1;

function _classend($ms, $p) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ms;
      $3=$p;
      var $4=$3;
      var $5=(($4+1)|0);
      $3=$5;
      var $6=HEAP8[($4)];
      var $7=(($6 << 24) >> 24);
      if ((($7)|0) == 37) {
        __label__ = 3; break;
      }
      else if ((($7)|0) == 91) {
        __label__ = 6; break;
      }
      else {
      __label__ = 17; break;
      }
      
    case 3: 
      var $9=$3;
      var $10=HEAP8[($9)];
      var $11=(($10 << 24) >> 24);
      var $12=(($11)|0)==0;
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $14=$2;
      var $15=(($14+8)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=_luaL_error($16, ((STRING_TABLE.__str23705)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 5; break;
    case 5: 
      var $19=$3;
      var $20=(($19+1)|0);
      $1=$20;
      __label__ = 18; break;
    case 6: 
      var $22=$3;
      var $23=HEAP8[($22)];
      var $24=(($23 << 24) >> 24);
      var $25=(($24)|0)==94;
      if ($25) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $27=$3;
      var $28=(($27+1)|0);
      $3=$28;
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $31=$3;
      var $32=HEAP8[($31)];
      var $33=(($32 << 24) >> 24);
      var $34=(($33)|0)==0;
      if ($34) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $36=$2;
      var $37=(($36+8)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=_luaL_error($38, ((STRING_TABLE.__str24706)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 11; break;
    case 11: 
      var $41=$3;
      var $42=(($41+1)|0);
      $3=$42;
      var $43=HEAP8[($41)];
      var $44=(($43 << 24) >> 24);
      var $45=(($44)|0)==37;
      if ($45) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $47=$3;
      var $48=HEAP8[($47)];
      var $49=(($48 << 24) >> 24);
      var $50=(($49)|0)!=0;
      if ($50) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $52=$3;
      var $53=(($52+1)|0);
      $3=$53;
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $56=$3;
      var $57=HEAP8[($56)];
      var $58=(($57 << 24) >> 24);
      var $59=(($58)|0)!=93;
      if ($59) { __label__ = 9; break; } else { __label__ = 16; break; }
    case 16: 
      var $61=$3;
      var $62=(($61+1)|0);
      $1=$62;
      __label__ = 18; break;
    case 17: 
      var $64=$3;
      $1=$64;
      __label__ = 18; break;
    case 18: 
      var $66=$1;
      STACKTOP = __stackBase__;
      return $66;
    default: assert(0, "bad label: " + __label__);
  }
}
_classend["X"]=1;

function _matchbracketclass($c, $p, $ec) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $sig;
      $2=$c;
      $3=$p;
      $4=$ec;
      $sig=1;
      var $5=$3;
      var $6=(($5+1)|0);
      var $7=HEAP8[($6)];
      var $8=(($7 << 24) >> 24);
      var $9=(($8)|0)==94;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $sig=0;
      var $11=$3;
      var $12=(($11+1)|0);
      $3=$12;
      __label__ = 4; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $15=$3;
      var $16=(($15+1)|0);
      $3=$16;
      var $17=$4;
      var $18=(($16)>>>0) < (($17)>>>0);
      if ($18) { __label__ = 6; break; } else { __label__ = 21; break; }
    case 6: 
      var $20=$3;
      var $21=HEAP8[($20)];
      var $22=(($21 << 24) >> 24);
      var $23=(($22)|0)==37;
      if ($23) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $25=$3;
      var $26=(($25+1)|0);
      $3=$26;
      var $27=$2;
      var $28=$3;
      var $29=HEAPU8[($28)];
      var $30=(($29)&255);
      var $31=_match_class($27, $30);
      var $32=(($31)|0)!=0;
      if ($32) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $34=$sig;
      $1=$34;
      __label__ = 22; break;
    case 9: 
      __label__ = 20; break;
    case 10: 
      var $37=$3;
      var $38=(($37+1)|0);
      var $39=HEAP8[($38)];
      var $40=(($39 << 24) >> 24);
      var $41=(($40)|0)==45;
      if ($41) { __label__ = 11; break; } else { __label__ = 16; break; }
    case 11: 
      var $43=$3;
      var $44=(($43+2)|0);
      var $45=$4;
      var $46=(($44)>>>0) < (($45)>>>0);
      if ($46) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $48=$3;
      var $49=(($48+2)|0);
      $3=$49;
      var $50=$3;
      var $51=((($50)-(2))|0);
      var $52=HEAPU8[($51)];
      var $53=(($52)&255);
      var $54=$2;
      var $55=(($53)|0) <= (($54)|0);
      if ($55) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: 
      var $57=$2;
      var $58=$3;
      var $59=HEAPU8[($58)];
      var $60=(($59)&255);
      var $61=(($57)|0) <= (($60)|0);
      if ($61) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $63=$sig;
      $1=$63;
      __label__ = 22; break;
    case 15: 
      __label__ = 19; break;
    case 16: 
      var $66=$3;
      var $67=HEAPU8[($66)];
      var $68=(($67)&255);
      var $69=$2;
      var $70=(($68)|0)==(($69)|0);
      if ($70) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $72=$sig;
      $1=$72;
      __label__ = 22; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 5; break;
    case 21: 
      var $77=$sig;
      var $78=(($77)|0)!=0;
      var $79=$78 ^ 1;
      var $80=(($79)&1);
      $1=$80;
      __label__ = 22; break;
    case 22: 
      var $82=$1;
      ;
      return $82;
    default: assert(0, "bad label: " + __label__);
  }
}
_matchbracketclass["X"]=1;

function _match_capture($ms, $s, $l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $len;
      $2=$ms;
      $3=$s;
      $4=$l;
      var $5=$2;
      var $6=$4;
      var $7=_check_capture($5, $6);
      $4=$7;
      var $8=$4;
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=(($10+($8<<3))|0);
      var $12=(($11+4)|0);
      var $13=HEAP32[(($12)>>2)];
      $len=$13;
      var $14=$2;
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$3;
      var $18=$16;
      var $19=$17;
      var $20=((($18)-($19))|0);
      var $21=$len;
      var $22=(($20)>>>0) >= (($21)>>>0);
      if ($22) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $24=$4;
      var $25=$2;
      var $26=(($25+16)|0);
      var $27=(($26+($24<<3))|0);
      var $28=(($27)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$3;
      var $31=$len;
      var $32=_memcmp($29, $30, $31);
      var $33=(($32)|0)==0;
      if ($33) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $35=$3;
      var $36=$len;
      var $37=(($35+$36)|0);
      $1=$37;
      __label__ = 6; break;
    case 5: 
      $1=0;
      __label__ = 6; break;
    case 6: 
      var $40=$1;
      ;
      return $40;
    default: assert(0, "bad label: " + __label__);
  }
}


function _singlematch($c, $p, $ep) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$c;
      $3=$p;
      $4=$ep;
      var $5=$3;
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24);
      if ((($7)|0) == 46) {
        __label__ = 3; break;
      }
      else if ((($7)|0) == 37) {
        __label__ = 4; break;
      }
      else if ((($7)|0) == 91) {
        __label__ = 5; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 3: 
      $1=1;
      __label__ = 7; break;
    case 4: 
      var $10=$2;
      var $11=$3;
      var $12=(($11+1)|0);
      var $13=HEAPU8[($12)];
      var $14=(($13)&255);
      var $15=_match_class($10, $14);
      $1=$15;
      __label__ = 7; break;
    case 5: 
      var $17=$2;
      var $18=$3;
      var $19=$4;
      var $20=((($19)-(1))|0);
      var $21=_matchbracketclass($17, $18, $20);
      $1=$21;
      __label__ = 7; break;
    case 6: 
      var $23=$3;
      var $24=HEAPU8[($23)];
      var $25=(($24)&255);
      var $26=$2;
      var $27=(($25)|0)==(($26)|0);
      var $28=(($27)&1);
      $1=$28;
      __label__ = 7; break;
    case 7: 
      var $30=$1;
      ;
      return $30;
    default: assert(0, "bad label: " + __label__);
  }
}


function _max_expand($ms, $s, $p, $ep) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $res;
      $2=$ms;
      $3=$s;
      $4=$p;
      $5=$ep;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $7=$3;
      var $8=$i;
      var $9=(($7+$8)|0);
      var $10=$2;
      var $11=(($10+4)|0);
      var $12=HEAPU32[(($11)>>2)];
      var $13=(($9)>>>0) < (($12)>>>0);
      if ($13) { __label__ = 4; break; } else { var $25 = 0;__label__ = 5; break; }
    case 4: 
      var $15=$3;
      var $16=$i;
      var $17=(($15+$16)|0);
      var $18=HEAPU8[($17)];
      var $19=(($18)&255);
      var $20=$4;
      var $21=$5;
      var $22=_singlematch($19, $20, $21);
      var $23=(($22)|0)!=0;
      var $25 = $23;__label__ = 5; break;
    case 5: 
      var $25;
      if ($25) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $27=$i;
      var $28=((($27)+(1))|0);
      $i=$28;
      __label__ = 3; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $31=$i;
      var $32=(($31)|0) >= 0;
      if ($32) { __label__ = 9; break; } else { __label__ = 12; break; }
    case 9: 
      var $34=$2;
      var $35=$3;
      var $36=$i;
      var $37=(($35+$36)|0);
      var $38=$5;
      var $39=(($38+1)|0);
      var $40=_match($34, $37, $39);
      $res=$40;
      var $41=$res;
      var $42=(($41)|0)!=0;
      if ($42) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $44=$res;
      $1=$44;
      __label__ = 13; break;
    case 11: 
      var $46=$i;
      var $47=((($46)-(1))|0);
      $i=$47;
      __label__ = 8; break;
    case 12: 
      $1=0;
      __label__ = 13; break;
    case 13: 
      var $50=$1;
      ;
      return $50;
    default: assert(0, "bad label: " + __label__);
  }
}
_max_expand["X"]=1;

function _min_expand($ms, $s, $p, $ep) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $res;
      $2=$ms;
      $3=$s;
      $4=$p;
      $5=$ep;
      __label__ = 3; break;
    case 3: 
      var $7=$2;
      var $8=$3;
      var $9=$5;
      var $10=(($9+1)|0);
      var $11=_match($7, $8, $10);
      $res=$11;
      var $12=$res;
      var $13=(($12)|0)!=0;
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $15=$res;
      $1=$15;
      __label__ = 11; break;
    case 5: 
      var $17=$3;
      var $18=$2;
      var $19=(($18+4)|0);
      var $20=HEAPU32[(($19)>>2)];
      var $21=(($17)>>>0) < (($20)>>>0);
      if ($21) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $23=$3;
      var $24=HEAPU8[($23)];
      var $25=(($24)&255);
      var $26=$4;
      var $27=$5;
      var $28=_singlematch($25, $26, $27);
      var $29=(($28)|0)!=0;
      if ($29) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $31=$3;
      var $32=(($31+1)|0);
      $3=$32;
      __label__ = 9; break;
    case 8: 
      $1=0;
      __label__ = 11; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      __label__ = 3; break;
    case 11: 
      var $37=$1;
      ;
      return $37;
    default: assert(0, "bad label: " + __label__);
  }
}


function _match_class($c, $cl) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $res;
      $2=$c;
      $3=$cl;
      var $4=$3;
      var $5=_tolower($4);
      if ((($5)|0) == 97) {
        __label__ = 3; break;
      }
      else if ((($5)|0) == 99) {
        __label__ = 4; break;
      }
      else if ((($5)|0) == 100) {
        __label__ = 5; break;
      }
      else if ((($5)|0) == 108) {
        __label__ = 6; break;
      }
      else if ((($5)|0) == 112) {
        __label__ = 7; break;
      }
      else if ((($5)|0) == 115) {
        __label__ = 8; break;
      }
      else if ((($5)|0) == 117) {
        __label__ = 9; break;
      }
      else if ((($5)|0) == 119) {
        __label__ = 10; break;
      }
      else if ((($5)|0) == 120) {
        __label__ = 11; break;
      }
      else if ((($5)|0) == 122) {
        __label__ = 12; break;
      }
      else {
      __label__ = 13; break;
      }
      
    case 3: 
      var $7=$2;
      var $8=_isalpha($7);
      $res=$8;
      __label__ = 14; break;
    case 4: 
      var $10=$2;
      var $11=_iscntrl($10);
      $res=$11;
      __label__ = 14; break;
    case 5: 
      var $13=$2;
      var $14=_isdigit($13);
      $res=$14;
      __label__ = 14; break;
    case 6: 
      var $16=$2;
      var $17=_islower($16);
      $res=$17;
      __label__ = 14; break;
    case 7: 
      var $19=$2;
      var $20=_ispunct($19);
      $res=$20;
      __label__ = 14; break;
    case 8: 
      var $22=$2;
      var $23=_isspace($22);
      $res=$23;
      __label__ = 14; break;
    case 9: 
      var $25=$2;
      var $26=_isupper($25);
      $res=$26;
      __label__ = 14; break;
    case 10: 
      var $28=$2;
      var $29=_isalnum($28);
      $res=$29;
      __label__ = 14; break;
    case 11: 
      var $31=$2;
      var $32=_isxdigit($31);
      $res=$32;
      __label__ = 14; break;
    case 12: 
      var $34=$2;
      var $35=(($34)|0)==0;
      var $36=(($35)&1);
      $res=$36;
      __label__ = 14; break;
    case 13: 
      var $38=$3;
      var $39=$2;
      var $40=(($38)|0)==(($39)|0);
      var $41=(($40)&1);
      $1=$41;
      __label__ = 18; break;
    case 14: 
      var $43=$3;
      var $44=_islower($43);
      var $45=(($44)|0)!=0;
      if ($45) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $47=$res;
      var $54 = $47;__label__ = 17; break;
    case 16: 
      var $49=$res;
      var $50=(($49)|0)!=0;
      var $51=$50 ^ 1;
      var $52=(($51)&1);
      var $54 = $52;__label__ = 17; break;
    case 17: 
      var $54;
      $1=$54;
      __label__ = 18; break;
    case 18: 
      var $56=$1;
      ;
      return $56;
    default: assert(0, "bad label: " + __label__);
  }
}
_match_class["X"]=1;

function _check_capture($ms, $l) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ms;
      $3=$l;
      var $4=$3;
      var $5=((($4)-(49))|0);
      $3=$5;
      var $6=$3;
      var $7=(($6)|0) < 0;
      if ($7) { __label__ = 5; break; } else { __label__ = 3; break; }
    case 3: 
      var $9=$3;
      var $10=$2;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($9)|0) >= (($12)|0);
      if ($13) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $15=$3;
      var $16=$2;
      var $17=(($16+16)|0);
      var $18=(($17+($15<<3))|0);
      var $19=(($18+4)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|0)==-1;
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $23=$2;
      var $24=(($23+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=_luaL_error($25, ((STRING_TABLE.__str20702)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$26;
      __label__ = 7; break;
    case 6: 
      var $28=$3;
      $1=$28;
      __label__ = 7; break;
    case 7: 
      var $30=$1;
      STACKTOP = __stackBase__;
      return $30;
    default: assert(0, "bad label: " + __label__);
  }
}


function _capture_to_close($ms) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $level;
      $2=$ms;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      $level=$5;
      var $6=$level;
      var $7=((($6)-(1))|0);
      $level=$7;
      __label__ = 3; break;
    case 3: 
      var $9=$level;
      var $10=(($9)|0) >= 0;
      if ($10) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $12=$level;
      var $13=$2;
      var $14=(($13+16)|0);
      var $15=(($14+($12<<3))|0);
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|0)==-1;
      if ($18) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $20=$level;
      $1=$20;
      __label__ = 9; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $23=$level;
      var $24=((($23)-(1))|0);
      $level=$24;
      __label__ = 3; break;
    case 8: 
      var $26=$2;
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=_luaL_error($28, ((STRING_TABLE.__str26708)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$29;
      __label__ = 9; break;
    case 9: 
      var $31=$1;
      STACKTOP = __stackBase__;
      return $31;
    default: assert(0, "bad label: " + __label__);
  }
}


function _add_value($ms, $b, $s, $e) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $L;
      var $n;
      $1=$ms;
      $2=$b;
      $3=$s;
      $4=$e;
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      $L=$7;
      var $8=$L;
      var $9=_lua_type($8, 3);
      if ((($9)|0) == 3 || (($9)|0) == 4) {
        __label__ = 3; break;
      }
      else if ((($9)|0) == 6) {
        __label__ = 4; break;
      }
      else if ((($9)|0) == 5) {
        __label__ = 5; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 3: 
      var $11=$1;
      var $12=$2;
      var $13=$3;
      var $14=$4;
      _add_s($11, $12, $13, $14);
      __label__ = 12; break;
    case 4: 
      var $16=$L;
      _lua_pushvalue($16, 3);
      var $17=$1;
      var $18=$3;
      var $19=$4;
      var $20=_push_captures($17, $18, $19);
      $n=$20;
      var $21=$L;
      var $22=$n;
      _lua_call($21, $22, 1);
      __label__ = 6; break;
    case 5: 
      var $24=$1;
      var $25=$3;
      var $26=$4;
      _push_onecapture($24, 0, $25, $26);
      var $27=$L;
      _lua_gettable($27, 3);
      __label__ = 6; break;
    case 6: 
      var $29=$L;
      var $30=_lua_toboolean($29, -1);
      var $31=(($30)|0)!=0;
      if ($31) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $33=$L;
      _lua_settop($33, -2);
      var $34=$L;
      var $35=$3;
      var $36=$4;
      var $37=$3;
      var $38=$36;
      var $39=$37;
      var $40=((($38)-($39))|0);
      _lua_pushlstring($34, $35, $40);
      __label__ = 11; break;
    case 8: 
      var $42=$L;
      var $43=_lua_isstring($42, -1);
      var $44=(($43)|0)!=0;
      if ($44) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $46=$L;
      var $47=$L;
      var $48=$L;
      var $49=_lua_type($48, -1);
      var $50=_lua_typename($47, $49);
      var $51=_luaL_error($46, ((STRING_TABLE.__str28710)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$50,tempInt));
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $54=$2;
      _luaL_addvalue($54);
      __label__ = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_add_value["X"]=1;

function _add_s($ms, $b, $s, $e) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $l=__stackBase__;
      var $i;
      var $news;
      $1=$ms;
      $2=$b;
      $3=$s;
      $4=$e;
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=_lua_tolstring($7, 3, $l);
      $news=$8;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $10=$i;
      var $11=HEAPU32[(($l)>>2)];
      var $12=(($10)>>>0) < (($11)>>>0);
      if ($12) { __label__ = 4; break; } else { __label__ = 19; break; }
    case 4: 
      var $14=$i;
      var $15=$news;
      var $16=(($15+$14)|0);
      var $17=HEAP8[($16)];
      var $18=(($17 << 24) >> 24);
      var $19=(($18)|0)!=37;
      if ($19) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $21=$2;
      var $22=(($21)|0);
      var $23=HEAPU32[(($22)>>2)];
      var $24=$2;
      var $25=(($24+12)|0);
      var $26=(($25)|0);
      var $27=(($26+1024)|0);
      var $28=(($23)>>>0) < (($27)>>>0);
      if ($28) { var $34 = 1;__label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $30=$2;
      var $31=_luaL_prepbuffer($30);
      var $32=(($31)|0)!=0;
      var $34 = $32;__label__ = 7; break;
    case 7: 
      var $34;
      var $35=(($34)&1);
      var $36=$i;
      var $37=$news;
      var $38=(($37+$36)|0);
      var $39=HEAP8[($38)];
      var $40=$2;
      var $41=(($40)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+1)|0);
      HEAP32[(($41)>>2)]=$43;
      HEAP8[($42)]=$39;
      __label__ = 17; break;
    case 8: 
      var $45=$i;
      var $46=((($45)+(1))|0);
      $i=$46;
      var $47=$i;
      var $48=$news;
      var $49=(($48+$47)|0);
      var $50=HEAPU8[($49)];
      var $51=(($50)&255);
      var $52=_isdigit($51);
      var $53=(($52)|0)!=0;
      if ($53) { __label__ = 12; break; } else { __label__ = 9; break; }
    case 9: 
      var $55=$2;
      var $56=(($55)|0);
      var $57=HEAPU32[(($56)>>2)];
      var $58=$2;
      var $59=(($58+12)|0);
      var $60=(($59)|0);
      var $61=(($60+1024)|0);
      var $62=(($57)>>>0) < (($61)>>>0);
      if ($62) { var $68 = 1;__label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $64=$2;
      var $65=_luaL_prepbuffer($64);
      var $66=(($65)|0)!=0;
      var $68 = $66;__label__ = 11; break;
    case 11: 
      var $68;
      var $69=(($68)&1);
      var $70=$i;
      var $71=$news;
      var $72=(($71+$70)|0);
      var $73=HEAP8[($72)];
      var $74=$2;
      var $75=(($74)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76+1)|0);
      HEAP32[(($75)>>2)]=$77;
      HEAP8[($76)]=$73;
      __label__ = 16; break;
    case 12: 
      var $79=$i;
      var $80=$news;
      var $81=(($80+$79)|0);
      var $82=HEAP8[($81)];
      var $83=(($82 << 24) >> 24);
      var $84=(($83)|0)==48;
      if ($84) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $86=$2;
      var $87=$3;
      var $88=$4;
      var $89=$3;
      var $90=$88;
      var $91=$89;
      var $92=((($90)-($91))|0);
      _luaL_addlstring($86, $87, $92);
      __label__ = 15; break;
    case 14: 
      var $94=$1;
      var $95=$i;
      var $96=$news;
      var $97=(($96+$95)|0);
      var $98=HEAP8[($97)];
      var $99=(($98 << 24) >> 24);
      var $100=((($99)-(49))|0);
      var $101=$3;
      var $102=$4;
      _push_onecapture($94, $100, $101, $102);
      var $103=$2;
      _luaL_addvalue($103);
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $108=$i;
      var $109=((($108)+(1))|0);
      $i=$109;
      __label__ = 3; break;
    case 19: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_add_s["X"]=1;

function _gmatch_aux($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 276; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $ms=__stackBase__;
      var $ls=(__stackBase__)+(272);
      var $s;
      var $p;
      var $src;
      var $e;
      var $newstart;
      $2=$L;
      var $3=$2;
      var $4=_lua_tolstring($3, -10003, $ls);
      $s=$4;
      var $5=$2;
      var $6=_lua_tolstring($5, -10004, 0);
      $p=$6;
      var $7=$2;
      var $8=(($ms+8)|0);
      HEAP32[(($8)>>2)]=$7;
      var $9=$s;
      var $10=(($ms)|0);
      HEAP32[(($10)>>2)]=$9;
      var $11=$s;
      var $12=HEAP32[(($ls)>>2)];
      var $13=(($11+$12)|0);
      var $14=(($ms+4)|0);
      HEAP32[(($14)>>2)]=$13;
      var $15=$s;
      var $16=$2;
      var $17=_lua_tointeger($16, -10005);
      var $18=(($15+$17)|0);
      $src=$18;
      __label__ = 3; break;
    case 3: 
      var $20=$src;
      var $21=(($ms+4)|0);
      var $22=HEAPU32[(($21)>>2)];
      var $23=(($20)>>>0) <= (($22)>>>0);
      if ($23) { __label__ = 4; break; } else { __label__ = 10; break; }
    case 4: 
      var $25=(($ms+12)|0);
      HEAP32[(($25)>>2)]=0;
      var $26=$src;
      var $27=$p;
      var $28=_match($ms, $26, $27);
      $e=$28;
      var $29=(($28)|0)!=0;
      if ($29) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $31=$e;
      var $32=$s;
      var $33=$31;
      var $34=$32;
      var $35=((($33)-($34))|0);
      $newstart=$35;
      var $36=$e;
      var $37=$src;
      var $38=(($36)|0)==(($37)|0);
      if ($38) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $40=$newstart;
      var $41=((($40)+(1))|0);
      $newstart=$41;
      __label__ = 7; break;
    case 7: 
      var $43=$2;
      var $44=$newstart;
      _lua_pushinteger($43, $44);
      var $45=$2;
      _lua_replace($45, -10005);
      var $46=$src;
      var $47=$e;
      var $48=_push_captures($ms, $46, $47);
      $1=$48;
      __label__ = 11; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $51=$src;
      var $52=(($51+1)|0);
      $src=$52;
      __label__ = 3; break;
    case 10: 
      $1=0;
      __label__ = 11; break;
    case 11: 
      var $55=$1;
      STACKTOP = __stackBase__;
      return $55;
    default: assert(0, "bad label: " + __label__);
  }
}
_gmatch_aux["X"]=1;

function _scanformat($L, $strfrmt, $form) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $p;
      $1=$L;
      $2=$strfrmt;
      $3=$form;
      var $4=$2;
      $p=$4;
      __label__ = 3; break;
    case 3: 
      var $6=$p;
      var $7=HEAP8[($6)];
      var $8=(($7 << 24) >> 24);
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 4; break; } else { var $17 = 0;__label__ = 5; break; }
    case 4: 
      var $11=$p;
      var $12=HEAP8[($11)];
      var $13=(($12 << 24) >> 24);
      var $14=_strchr(((STRING_TABLE.__str35717)|0), $13);
      var $15=(($14)|0)!=0;
      var $17 = $15;__label__ = 5; break;
    case 5: 
      var $17;
      if ($17) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $19=$p;
      var $20=(($19+1)|0);
      $p=$20;
      __label__ = 3; break;
    case 7: 
      var $22=$p;
      var $23=$2;
      var $24=$22;
      var $25=$23;
      var $26=((($24)-($25))|0);
      var $27=(($26)>>>0) >= 6;
      if ($27) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $29=$1;
      var $30=_luaL_error($29, ((STRING_TABLE.__str36718)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 9; break;
    case 9: 
      var $32=$p;
      var $33=HEAPU8[($32)];
      var $34=(($33)&255);
      var $35=_isdigit($34);
      var $36=(($35)|0)!=0;
      if ($36) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $38=$p;
      var $39=(($38+1)|0);
      $p=$39;
      __label__ = 11; break;
    case 11: 
      var $41=$p;
      var $42=HEAPU8[($41)];
      var $43=(($42)&255);
      var $44=_isdigit($43);
      var $45=(($44)|0)!=0;
      if ($45) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $47=$p;
      var $48=(($47+1)|0);
      $p=$48;
      __label__ = 13; break;
    case 13: 
      var $50=$p;
      var $51=HEAP8[($50)];
      var $52=(($51 << 24) >> 24);
      var $53=(($52)|0)==46;
      if ($53) { __label__ = 14; break; } else { __label__ = 19; break; }
    case 14: 
      var $55=$p;
      var $56=(($55+1)|0);
      $p=$56;
      var $57=$p;
      var $58=HEAPU8[($57)];
      var $59=(($58)&255);
      var $60=_isdigit($59);
      var $61=(($60)|0)!=0;
      if ($61) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $63=$p;
      var $64=(($63+1)|0);
      $p=$64;
      __label__ = 16; break;
    case 16: 
      var $66=$p;
      var $67=HEAPU8[($66)];
      var $68=(($67)&255);
      var $69=_isdigit($68);
      var $70=(($69)|0)!=0;
      if ($70) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $72=$p;
      var $73=(($72+1)|0);
      $p=$73;
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $76=$p;
      var $77=HEAPU8[($76)];
      var $78=(($77)&255);
      var $79=_isdigit($78);
      var $80=(($79)|0)!=0;
      if ($80) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $82=$1;
      var $83=_luaL_error($82, ((STRING_TABLE.__str37719)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 21; break;
    case 21: 
      var $85=$3;
      var $86=(($85+1)|0);
      $3=$86;
      HEAP8[($85)]=37;
      var $87=$3;
      var $88=$2;
      var $89=$p;
      var $90=$2;
      var $91=$89;
      var $92=$90;
      var $93=((($91)-($92))|0);
      var $94=((($93)+(1))|0);
      var $95=_strncpy($87, $88, $94);
      var $96=$p;
      var $97=$2;
      var $98=$96;
      var $99=$97;
      var $100=((($98)-($99))|0);
      var $101=((($100)+(1))|0);
      var $102=$3;
      var $103=(($102+$101)|0);
      $3=$103;
      var $104=$3;
      HEAP8[($104)]=0;
      var $105=$p;
      STACKTOP = __stackBase__;
      return $105;
    default: assert(0, "bad label: " + __label__);
  }
}
_scanformat["X"]=1;

function _addintlen($form) {
  ;
  var __label__;

  var $1;
  var $l;
  var $spec;
  $1=$form;
  var $2=$1;
  var $3=_strlen($2);
  $l=$3;
  var $4=$l;
  var $5=((($4)-(1))|0);
  var $6=$1;
  var $7=(($6+$5)|0);
  var $8=HEAP8[($7)];
  $spec=$8;
  var $9=$1;
  var $10=$l;
  var $11=(($9+$10)|0);
  var $12=((($11)-(1))|0);
  var $13=_strcpy($12, ((STRING_TABLE.__str34716)|0));
  var $14=$spec;
  var $15=$l;
  var $16=((($15)+(2))|0);
  var $17=((($16)-(2))|0);
  var $18=$1;
  var $19=(($18+$17)|0);
  HEAP8[($19)]=$14;
  var $20=$l;
  var $21=((($20)+(2))|0);
  var $22=((($21)-(1))|0);
  var $23=$1;
  var $24=(($23+$22)|0);
  HEAP8[($24)]=0;
  ;
  return;
}


function _addquoted($L, $b, $arg) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $l=__stackBase__;
      var $s;
      $1=$L;
      $2=$b;
      $3=$arg;
      var $4=$1;
      var $5=$3;
      var $6=_luaL_checklstring($4, $5, $l);
      $s=$6;
      var $7=$2;
      var $8=(($7)|0);
      var $9=HEAPU32[(($8)>>2)];
      var $10=$2;
      var $11=(($10+12)|0);
      var $12=(($11)|0);
      var $13=(($12+1024)|0);
      var $14=(($9)>>>0) < (($13)>>>0);
      if ($14) { var $20 = 1;__label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $16=$2;
      var $17=_luaL_prepbuffer($16);
      var $18=(($17)|0)!=0;
      var $20 = $18;__label__ = 4; break;
    case 4: 
      var $20;
      var $21=(($20)&1);
      var $22=$2;
      var $23=(($22)|0);
      var $24=HEAPU32[(($23)>>2)];
      var $25=(($24+1)|0);
      HEAP32[(($23)>>2)]=$25;
      HEAP8[($24)]=34;
      __label__ = 5; break;
    case 5: 
      var $27=HEAP32[(($l)>>2)];
      var $28=((($27)-(1))|0);
      HEAP32[(($l)>>2)]=$28;
      var $29=(($27)|0)!=0;
      if ($29) { __label__ = 6; break; } else { __label__ = 18; break; }
    case 6: 
      var $31=$s;
      var $32=HEAP8[($31)];
      var $33=(($32 << 24) >> 24);
      if ((($33)|0) == 34 || (($33)|0) == 92 || (($33)|0) == 10) {
        __label__ = 7; break;
      }
      else if ((($33)|0) == 13) {
        __label__ = 12; break;
      }
      else if ((($33)|0) == 0) {
        __label__ = 13; break;
      }
      else {
      __label__ = 14; break;
      }
      
    case 7: 
      var $35=$2;
      var $36=(($35)|0);
      var $37=HEAPU32[(($36)>>2)];
      var $38=$2;
      var $39=(($38+12)|0);
      var $40=(($39)|0);
      var $41=(($40+1024)|0);
      var $42=(($37)>>>0) < (($41)>>>0);
      if ($42) { var $48 = 1;__label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $44=$2;
      var $45=_luaL_prepbuffer($44);
      var $46=(($45)|0)!=0;
      var $48 = $46;__label__ = 9; break;
    case 9: 
      var $48;
      var $49=(($48)&1);
      var $50=$2;
      var $51=(($50)|0);
      var $52=HEAPU32[(($51)>>2)];
      var $53=(($52+1)|0);
      HEAP32[(($51)>>2)]=$53;
      HEAP8[($52)]=92;
      var $54=$2;
      var $55=(($54)|0);
      var $56=HEAPU32[(($55)>>2)];
      var $57=$2;
      var $58=(($57+12)|0);
      var $59=(($58)|0);
      var $60=(($59+1024)|0);
      var $61=(($56)>>>0) < (($60)>>>0);
      if ($61) { var $67 = 1;__label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $63=$2;
      var $64=_luaL_prepbuffer($63);
      var $65=(($64)|0)!=0;
      var $67 = $65;__label__ = 11; break;
    case 11: 
      var $67;
      var $68=(($67)&1);
      var $69=$s;
      var $70=HEAP8[($69)];
      var $71=$2;
      var $72=(($71)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+1)|0);
      HEAP32[(($72)>>2)]=$74;
      HEAP8[($73)]=$70;
      __label__ = 17; break;
    case 12: 
      var $76=$2;
      _luaL_addlstring($76, ((STRING_TABLE.__str32714)|0), 2);
      __label__ = 17; break;
    case 13: 
      var $78=$2;
      _luaL_addlstring($78, ((STRING_TABLE.__str33715)|0), 4);
      __label__ = 17; break;
    case 14: 
      var $80=$2;
      var $81=(($80)|0);
      var $82=HEAPU32[(($81)>>2)];
      var $83=$2;
      var $84=(($83+12)|0);
      var $85=(($84)|0);
      var $86=(($85+1024)|0);
      var $87=(($82)>>>0) < (($86)>>>0);
      if ($87) { var $93 = 1;__label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $89=$2;
      var $90=_luaL_prepbuffer($89);
      var $91=(($90)|0)!=0;
      var $93 = $91;__label__ = 16; break;
    case 16: 
      var $93;
      var $94=(($93)&1);
      var $95=$s;
      var $96=HEAP8[($95)];
      var $97=$2;
      var $98=(($97)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99+1)|0);
      HEAP32[(($98)>>2)]=$100;
      HEAP8[($99)]=$96;
      __label__ = 17; break;
    case 17: 
      var $102=$s;
      var $103=(($102+1)|0);
      $s=$103;
      __label__ = 5; break;
    case 18: 
      var $105=$2;
      var $106=(($105)|0);
      var $107=HEAPU32[(($106)>>2)];
      var $108=$2;
      var $109=(($108+12)|0);
      var $110=(($109)|0);
      var $111=(($110+1024)|0);
      var $112=(($107)>>>0) < (($111)>>>0);
      if ($112) { var $118 = 1;__label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      var $114=$2;
      var $115=_luaL_prepbuffer($114);
      var $116=(($115)|0)!=0;
      var $118 = $116;__label__ = 20; break;
    case 20: 
      var $118;
      var $119=(($118)&1);
      var $120=$2;
      var $121=(($120)|0);
      var $122=HEAPU32[(($121)>>2)];
      var $123=(($122+1)|0);
      HEAP32[(($121)>>2)]=$123;
      HEAP8[($122)]=34;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_addquoted["X"]=1;

function _writer($L, $b, $size, $B) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$L;
  $2=$b;
  $3=$size;
  $4=$B;
  var $5=$1;
  var $6=$4;
  var $7=$6;
  var $8=$2;
  var $9=$3;
  _luaL_addlstring($7, $8, $9);
  ;
  return 0;
}


function _luaH_next($L, $t, $key) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $i_o;
      var $o2;
      var $o1;
      var $o21;
      var $o12;
      var $o23;
      var $o14;
      $2=$L;
      $3=$t;
      $4=$key;
      var $5=$2;
      var $6=$3;
      var $7=$4;
      var $8=_findindex($5, $6, $7);
      $i=$8;
      var $9=$i;
      var $10=((($9)+(1))|0);
      $i=$10;
      __label__ = 3; break;
    case 3: 
      var $12=$i;
      var $13=$3;
      var $14=(($13+28)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($12)|0) < (($15)|0);
      if ($16) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $18=$i;
      var $19=$3;
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+($18)*(12))|0);
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|0)==0;
      if ($25) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $27=$4;
      $i_o=$27;
      var $28=$i;
      var $29=((($28)+(1))|0);
      var $30=(($29)|0);
      var $31=$i_o;
      var $32=(($31)|0);
      var $33=$32;
      (tempDoubleF64[0]=$30,HEAP32[(($33)>>2)]=tempDoubleI32[0],HEAP32[((($33)+(4))>>2)]=tempDoubleI32[1]);
      var $34=$i_o;
      var $35=(($34+8)|0);
      HEAP32[(($35)>>2)]=3;
      var $36=$i;
      var $37=$3;
      var $38=(($37+12)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+($36)*(12))|0);
      $o2=$40;
      var $41=$4;
      var $42=(($41+12)|0);
      $o1=$42;
      var $43=$o1;
      var $44=(($43)|0);
      var $45=$o2;
      var $46=(($45)|0);
      var $47=$44;
      var $48=$46;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($47)>>2)]=HEAP32[(($48)>>2)];HEAP32[((($47)+(4))>>2)]=HEAP32[((($48)+(4))>>2)];
      var $49=$o2;
      var $50=(($49+8)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$o1;
      var $53=(($52+8)|0);
      HEAP32[(($53)>>2)]=$51;
      $1=1;
      __label__ = 15; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $56=$i;
      var $57=((($56)+(1))|0);
      $i=$57;
      __label__ = 3; break;
    case 8: 
      var $59=$3;
      var $60=(($59+28)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$i;
      var $63=((($62)-($61))|0);
      $i=$63;
      __label__ = 9; break;
    case 9: 
      var $65=$i;
      var $66=$3;
      var $67=(($66+7)|0);
      var $68=HEAPU8[($67)];
      var $69=(($68)&255);
      var $70=1 << $69;
      var $71=(($65)|0) < (($70)|0);
      if ($71) { __label__ = 10; break; } else { __label__ = 14; break; }
    case 10: 
      var $73=$i;
      var $74=$3;
      var $75=(($74+16)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76+($73)*(28))|0);
      var $78=(($77)|0);
      var $79=(($78+8)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80)|0)==0;
      if ($81) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $83=$i;
      var $84=$3;
      var $85=(($84+16)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+($83)*(28))|0);
      var $88=(($87+12)|0);
      var $89=$88;
      $o21=$89;
      var $90=$4;
      $o12=$90;
      var $91=$o12;
      var $92=(($91)|0);
      var $93=$o21;
      var $94=(($93)|0);
      var $95=$92;
      var $96=$94;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($95)>>2)]=HEAP32[(($96)>>2)];HEAP32[((($95)+(4))>>2)]=HEAP32[((($96)+(4))>>2)];
      var $97=$o21;
      var $98=(($97+8)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=$o12;
      var $101=(($100+8)|0);
      HEAP32[(($101)>>2)]=$99;
      var $102=$i;
      var $103=$3;
      var $104=(($103+16)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105+($102)*(28))|0);
      var $107=(($106)|0);
      $o23=$107;
      var $108=$4;
      var $109=(($108+12)|0);
      $o14=$109;
      var $110=$o14;
      var $111=(($110)|0);
      var $112=$o23;
      var $113=(($112)|0);
      var $114=$111;
      var $115=$113;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($114)>>2)]=HEAP32[(($115)>>2)];HEAP32[((($114)+(4))>>2)]=HEAP32[((($115)+(4))>>2)];
      var $116=$o23;
      var $117=(($116+8)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=$o14;
      var $120=(($119+8)|0);
      HEAP32[(($120)>>2)]=$118;
      $1=1;
      __label__ = 15; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $123=$i;
      var $124=((($123)+(1))|0);
      $i=$124;
      __label__ = 9; break;
    case 14: 
      $1=0;
      __label__ = 15; break;
    case 15: 
      var $127=$1;
      ;
      return $127;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaH_next["X"]=1;

function _findindex($L, $t, $key) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $n;
      $2=$L;
      $3=$t;
      $4=$key;
      var $5=$4;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|0)==0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=-1;
      __label__ = 17; break;
    case 4: 
      var $11=$4;
      var $12=_arrayindex($11);
      $i=$12;
      var $13=$i;
      var $14=0 < (($13)|0);
      if ($14) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $16=$i;
      var $17=$3;
      var $18=(($17+28)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($16)|0) <= (($19)|0);
      if ($20) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $22=$i;
      var $23=((($22)-(1))|0);
      $1=$23;
      __label__ = 17; break;
    case 7: 
      var $25=$3;
      var $26=$4;
      var $27=_mainposition($25, $26);
      $n=$27;
      __label__ = 8; break;
    case 8: 
      var $29=$n;
      var $30=(($29+12)|0);
      var $31=$30;
      var $32=$4;
      var $33=_luaO_rawequalObj($31, $32);
      var $34=(($33)|0)!=0;
      if ($34) { __label__ = 12; break; } else { __label__ = 9; break; }
    case 9: 
      var $36=$n;
      var $37=(($36+12)|0);
      var $38=$37;
      var $39=(($38+8)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40)|0)==11;
      if ($41) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      var $43=$4;
      var $44=(($43+8)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0) >= 4;
      if ($46) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $48=$n;
      var $49=(($48+12)|0);
      var $50=$49;
      var $51=(($50)|0);
      var $52=$51;
      var $53=HEAP32[(($52)>>2)];
      var $54=$4;
      var $55=(($54)|0);
      var $56=$55;
      var $57=HEAP32[(($56)>>2)];
      var $58=(($53)|0)==(($57)|0);
      if ($58) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $60=$n;
      var $61=$3;
      var $62=(($61+16)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63)|0);
      var $65=$60;
      var $66=$64;
      var $67=((($65)-($66))|0);
      var $68=((((($67)|0))/(28))&-1);
      $i=$68;
      var $69=$i;
      var $70=$3;
      var $71=(($70+28)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=((($69)+($72))|0);
      $1=$73;
      __label__ = 17; break;
    case 13: 
      var $75=$n;
      var $76=(($75+12)|0);
      var $77=$76;
      var $78=(($77+12)|0);
      var $79=HEAP32[(($78)>>2)];
      $n=$79;
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $82=$n;
      var $83=(($82)|0)!=0;
      if ($83) { __label__ = 8; break; } else { __label__ = 16; break; }
    case 16: 
      var $85=$2;
      _luaG_runerror($85, ((STRING_TABLE.__str3728)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=0;
      __label__ = 17; break;
    case 17: 
      var $87=$1;
      STACKTOP = __stackBase__;
      return $87;
    default: assert(0, "bad label: " + __label__);
  }
}
_findindex["X"]=1;

function _luaH_resizearray($L, $t, $nasize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $nsize;
      $1=$L;
      $2=$t;
      $3=$nasize;
      var $4=$2;
      var $5=(($4+16)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)==((_dummynode_)|0);
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $16 = 0;__label__ = 5; break;
    case 4: 
      var $10=$2;
      var $11=(($10+7)|0);
      var $12=HEAPU8[($11)];
      var $13=(($12)&255);
      var $14=1 << $13;
      var $16 = $14;__label__ = 5; break;
    case 5: 
      var $16;
      $nsize=$16;
      var $17=$1;
      var $18=$2;
      var $19=$3;
      var $20=$nsize;
      _resize($17, $18, $19, $20);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _resize($L, $t, $nasize, $nhsize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $oldasize;
      var $oldhsize;
      var $nold;
      var $o2;
      var $o1;
      var $old;
      var $o21;
      var $o12;
      $1=$L;
      $2=$t;
      $3=$nasize;
      $4=$nhsize;
      var $5=$2;
      var $6=(($5+28)|0);
      var $7=HEAP32[(($6)>>2)];
      $oldasize=$7;
      var $8=$2;
      var $9=(($8+7)|0);
      var $10=HEAPU8[($9)];
      var $11=(($10)&255);
      $oldhsize=$11;
      var $12=$2;
      var $13=(($12+16)|0);
      var $14=HEAP32[(($13)>>2)];
      $nold=$14;
      var $15=$3;
      var $16=$oldasize;
      var $17=(($15)|0) > (($16)|0);
      if ($17) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $19=$1;
      var $20=$2;
      var $21=$3;
      _setarrayvector($19, $20, $21);
      __label__ = 4; break;
    case 4: 
      var $23=$1;
      var $24=$2;
      var $25=$4;
      _setnodevector($23, $24, $25);
      var $26=$3;
      var $27=$oldasize;
      var $28=(($26)|0) < (($27)|0);
      if ($28) { __label__ = 5; break; } else { __label__ = 15; break; }
    case 5: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+28)|0);
      HEAP32[(($32)>>2)]=$30;
      var $33=$3;
      $i=$33;
      __label__ = 6; break;
    case 6: 
      var $35=$i;
      var $36=$oldasize;
      var $37=(($35)|0) < (($36)|0);
      if ($37) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $39=$i;
      var $40=$2;
      var $41=(($40+12)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+($39)*(12))|0);
      var $44=(($43+8)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0)==0;
      if ($46) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $48=$i;
      var $49=$2;
      var $50=(($49+12)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+($48)*(12))|0);
      $o2=$52;
      var $53=$1;
      var $54=$2;
      var $55=$i;
      var $56=((($55)+(1))|0);
      var $57=_luaH_setnum($53, $54, $56);
      $o1=$57;
      var $58=$o1;
      var $59=(($58)|0);
      var $60=$o2;
      var $61=(($60)|0);
      var $62=$59;
      var $63=$61;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($62)>>2)]=HEAP32[(($63)>>2)];HEAP32[((($62)+(4))>>2)]=HEAP32[((($63)+(4))>>2)];
      var $64=$o2;
      var $65=(($64+8)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$o1;
      var $68=(($67+8)|0);
      HEAP32[(($68)>>2)]=$66;
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $71=$i;
      var $72=((($71)+(1))|0);
      $i=$72;
      __label__ = 6; break;
    case 11: 
      var $74=$3;
      var $75=((($74)+(1))|0);
      var $76=(($75)>>>0) <= 357913941;
      if ($76) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $78=$1;
      var $79=$2;
      var $80=(($79+12)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$81;
      var $83=$oldasize;
      var $84=((($83)*(12))|0);
      var $85=$3;
      var $86=((($85)*(12))|0);
      var $87=_luaM_realloc_($78, $82, $84, $86);
      var $92 = $87;__label__ = 14; break;
    case 13: 
      var $89=$1;
      var $90=_luaM_toobig($89);
      var $92 = $90;__label__ = 14; break;
    case 14: 
      var $92;
      var $93=$92;
      var $94=$2;
      var $95=(($94+12)|0);
      HEAP32[(($95)>>2)]=$93;
      __label__ = 15; break;
    case 15: 
      var $97=$oldhsize;
      var $98=1 << $97;
      var $99=((($98)-(1))|0);
      $i=$99;
      __label__ = 16; break;
    case 16: 
      var $101=$i;
      var $102=(($101)|0) >= 0;
      if ($102) { __label__ = 17; break; } else { __label__ = 21; break; }
    case 17: 
      var $104=$nold;
      var $105=$i;
      var $106=(($104+($105)*(28))|0);
      $old=$106;
      var $107=$old;
      var $108=(($107)|0);
      var $109=(($108+8)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110)|0)==0;
      if ($111) { __label__ = 19; break; } else { __label__ = 18; break; }
    case 18: 
      var $113=$old;
      var $114=(($113)|0);
      $o21=$114;
      var $115=$1;
      var $116=$2;
      var $117=$old;
      var $118=(($117+12)|0);
      var $119=$118;
      var $120=_luaH_set($115, $116, $119);
      $o12=$120;
      var $121=$o12;
      var $122=(($121)|0);
      var $123=$o21;
      var $124=(($123)|0);
      var $125=$122;
      var $126=$124;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($125)>>2)]=HEAP32[(($126)>>2)];HEAP32[((($125)+(4))>>2)]=HEAP32[((($126)+(4))>>2)];
      var $127=$o21;
      var $128=(($127+8)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$o12;
      var $131=(($130+8)|0);
      HEAP32[(($131)>>2)]=$129;
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $134=$i;
      var $135=((($134)-(1))|0);
      $i=$135;
      __label__ = 16; break;
    case 21: 
      var $137=$nold;
      var $138=(($137)|0)!=((_dummynode_)|0);
      if ($138) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $140=$1;
      var $141=$nold;
      var $142=$141;
      var $143=$oldhsize;
      var $144=1 << $143;
      var $145=((($144)*(28))|0);
      var $146=_luaM_realloc_($140, $142, $145, 0);
      __label__ = 23; break;
    case 23: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_resize["X"]=1;

function _luaH_getstr($t, $key) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $n;
      $2=$t;
      $3=$key;
      var $4=$3;
      var $5=$4;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$2;
      var $9=(($8+7)|0);
      var $10=HEAPU8[($9)];
      var $11=(($10)&255);
      var $12=1 << $11;
      var $13=((($12)-(1))|0);
      var $14=$7 & $13;
      var $15=$2;
      var $16=(($15+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+($14)*(28))|0);
      $n=$18;
      __label__ = 3; break;
    case 3: 
      var $20=$n;
      var $21=(($20+12)|0);
      var $22=$21;
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|0)==4;
      if ($25) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $27=$n;
      var $28=(($27+12)|0);
      var $29=$28;
      var $30=(($29)|0);
      var $31=$30;
      var $32=HEAP32[(($31)>>2)];
      var $33=$32;
      var $34=$3;
      var $35=(($33)|0)==(($34)|0);
      if ($35) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $37=$n;
      var $38=(($37)|0);
      $1=$38;
      __label__ = 10; break;
    case 6: 
      var $40=$n;
      var $41=(($40+12)|0);
      var $42=$41;
      var $43=(($42+12)|0);
      var $44=HEAP32[(($43)>>2)];
      $n=$44;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $47=$n;
      var $48=(($47)|0)!=0;
      if ($48) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 9: 
      $1=_luaO_nilobject_;
      __label__ = 10; break;
    case 10: 
      var $51=$1;
      ;
      return $51;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaH_getstr["X"]=1;

function _luaH_new($L, $narray, $nhash) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $t;
  $1=$L;
  $2=$narray;
  $3=$nhash;
  var $4=$1;
  var $5=_luaM_realloc_($4, 0, 0, 32);
  var $6=$5;
  $t=$6;
  var $7=$1;
  var $8=$t;
  var $9=$8;
  _luaC_link($7, $9, 5);
  var $10=$t;
  var $11=(($10+8)|0);
  HEAP32[(($11)>>2)]=0;
  var $12=$t;
  var $13=(($12+6)|0);
  HEAP8[($13)]=-1;
  var $14=$t;
  var $15=(($14+12)|0);
  HEAP32[(($15)>>2)]=0;
  var $16=$t;
  var $17=(($16+28)|0);
  HEAP32[(($17)>>2)]=0;
  var $18=$t;
  var $19=(($18+7)|0);
  HEAP8[($19)]=0;
  var $20=$t;
  var $21=(($20+16)|0);
  HEAP32[(($21)>>2)]=_dummynode_;
  var $22=$1;
  var $23=$t;
  var $24=$2;
  _setarrayvector($22, $23, $24);
  var $25=$1;
  var $26=$t;
  var $27=$3;
  _setnodevector($25, $26, $27);
  var $28=$t;
  ;
  return $28;
}


function _setarrayvector($L, $t, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $1=$L;
      $2=$t;
      $3=$size;
      var $4=$3;
      var $5=((($4)+(1))|0);
      var $6=(($5)>>>0) <= 357913941;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$1;
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11;
      var $13=$2;
      var $14=(($13+28)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=((($15)*(12))|0);
      var $17=$3;
      var $18=((($17)*(12))|0);
      var $19=_luaM_realloc_($8, $12, $16, $18);
      var $24 = $19;__label__ = 5; break;
    case 4: 
      var $21=$1;
      var $22=_luaM_toobig($21);
      var $24 = $22;__label__ = 5; break;
    case 5: 
      var $24;
      var $25=$24;
      var $26=$2;
      var $27=(($26+12)|0);
      HEAP32[(($27)>>2)]=$25;
      var $28=$2;
      var $29=(($28+28)|0);
      var $30=HEAP32[(($29)>>2)];
      $i=$30;
      __label__ = 6; break;
    case 6: 
      var $32=$i;
      var $33=$3;
      var $34=(($32)|0) < (($33)|0);
      if ($34) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $36=$i;
      var $37=$2;
      var $38=(($37+12)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+($36)*(12))|0);
      var $41=(($40+8)|0);
      HEAP32[(($41)>>2)]=0;
      __label__ = 8; break;
    case 8: 
      var $43=$i;
      var $44=((($43)+(1))|0);
      $i=$44;
      __label__ = 6; break;
    case 9: 
      var $46=$3;
      var $47=$2;
      var $48=(($47+28)|0);
      HEAP32[(($48)>>2)]=$46;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_setarrayvector["X"]=1;

function _setnodevector($L, $t, $size) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $lsize;
      var $i;
      var $n;
      $1=$L;
      $2=$t;
      $3=$size;
      var $4=$3;
      var $5=(($4)|0)==0;
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $7=$2;
      var $8=(($7+16)|0);
      HEAP32[(($8)>>2)]=_dummynode_;
      $lsize=0;
      __label__ = 14; break;
    case 4: 
      var $10=$3;
      var $11=((($10)-(1))|0);
      var $12=_luaO_log2($11);
      var $13=((($12)+(1))|0);
      $lsize=$13;
      var $14=$lsize;
      var $15=(($14)|0) > 26;
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $17=$1;
      _luaG_runerror($17, ((STRING_TABLE.__str2727)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 6; break;
    case 6: 
      var $19=$lsize;
      var $20=1 << $19;
      $3=$20;
      var $21=$3;
      var $22=((($21)+(1))|0);
      var $23=(($22)>>>0) <= 153391689;
      if ($23) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $25=$1;
      var $26=$3;
      var $27=((($26)*(28))|0);
      var $28=_luaM_realloc_($25, 0, 0, $27);
      var $33 = $28;__label__ = 9; break;
    case 8: 
      var $30=$1;
      var $31=_luaM_toobig($30);
      var $33 = $31;__label__ = 9; break;
    case 9: 
      var $33;
      var $34=$33;
      var $35=$2;
      var $36=(($35+16)|0);
      HEAP32[(($36)>>2)]=$34;
      $i=0;
      __label__ = 10; break;
    case 10: 
      var $38=$i;
      var $39=$3;
      var $40=(($38)|0) < (($39)|0);
      if ($40) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $42=$i;
      var $43=$2;
      var $44=(($43+16)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+($42)*(28))|0);
      $n=$46;
      var $47=$n;
      var $48=(($47+12)|0);
      var $49=$48;
      var $50=(($49+12)|0);
      HEAP32[(($50)>>2)]=0;
      var $51=$n;
      var $52=(($51+12)|0);
      var $53=$52;
      var $54=(($53+8)|0);
      HEAP32[(($54)>>2)]=0;
      var $55=$n;
      var $56=(($55)|0);
      var $57=(($56+8)|0);
      HEAP32[(($57)>>2)]=0;
      __label__ = 12; break;
    case 12: 
      var $59=$i;
      var $60=((($59)+(1))|0);
      $i=$60;
      __label__ = 10; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $63=$lsize;
      var $64=(($63) & 255);
      var $65=$2;
      var $66=(($65+7)|0);
      HEAP8[($66)]=$64;
      var $67=$3;
      var $68=$2;
      var $69=(($68+16)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+($67)*(28))|0);
      var $72=$2;
      var $73=(($72+20)|0);
      HEAP32[(($73)>>2)]=$71;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_setnodevector["X"]=1;

function _luaH_free($L, $t) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$t;
      var $3=$2;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)!=((_dummynode_)|0);
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$1;
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11;
      var $13=$2;
      var $14=(($13+7)|0);
      var $15=HEAPU8[($14)];
      var $16=(($15)&255);
      var $17=1 << $16;
      var $18=((($17)*(28))|0);
      var $19=_luaM_realloc_($8, $12, $18, 0);
      __label__ = 4; break;
    case 4: 
      var $21=$1;
      var $22=$2;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      var $26=$2;
      var $27=(($26+28)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=((($28)*(12))|0);
      var $30=_luaM_realloc_($21, $25, $29, 0);
      var $31=$1;
      var $32=$2;
      var $33=$32;
      var $34=_luaM_realloc_($31, $33, 32, 0);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaH_getnum($t, $key) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $nk;
      var $n;
      $2=$t;
      $3=$key;
      var $4=$3;
      var $5=((($4)-(1))|0);
      var $6=$2;
      var $7=(($6+28)|0);
      var $8=HEAPU32[(($7)>>2)];
      var $9=(($5)>>>0) < (($8)>>>0);
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$3;
      var $12=((($11)-(1))|0);
      var $13=$2;
      var $14=(($13+12)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+($12)*(12))|0);
      $1=$16;
      __label__ = 12; break;
    case 4: 
      var $18=$3;
      var $19=(($18)|0);
      $nk=$19;
      var $20=$2;
      var $21=$nk;
      var $22=_hashnum($20, $21);
      $n=$22;
      __label__ = 5; break;
    case 5: 
      var $24=$n;
      var $25=(($24+12)|0);
      var $26=$25;
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0)==3;
      if ($29) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $31=$n;
      var $32=(($31+12)|0);
      var $33=$32;
      var $34=(($33)|0);
      var $35=$34;
      var $36=(tempDoubleI32[0]=HEAP32[(($35)>>2)],tempDoubleI32[1]=HEAP32[((($35)+(4))>>2)],tempDoubleF64[0]);
      var $37=$nk;
      var $38=$36 == $37;
      if ($38) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $40=$n;
      var $41=(($40)|0);
      $1=$41;
      __label__ = 12; break;
    case 8: 
      var $43=$n;
      var $44=(($43+12)|0);
      var $45=$44;
      var $46=(($45+12)|0);
      var $47=HEAP32[(($46)>>2)];
      $n=$47;
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $50=$n;
      var $51=(($50)|0)!=0;
      if ($51) { __label__ = 5; break; } else { __label__ = 11; break; }
    case 11: 
      $1=_luaO_nilobject_;
      __label__ = 12; break;
    case 12: 
      var $54=$1;
      ;
      return $54;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaH_getnum["X"]=1;

function _hashnum($t, $n) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3=__stackBase__;
      var $a=(__stackBase__)+(8);
      var $i;
      $2=$t;
      (tempDoubleF64[0]=$n,HEAP32[(($3)>>2)]=tempDoubleI32[0],HEAP32[((($3)+(4))>>2)]=tempDoubleI32[1]);
      var $4=(tempDoubleI32[0]=HEAP32[(($3)>>2)],tempDoubleI32[1]=HEAP32[((($3)+(4))>>2)],tempDoubleF64[0]);
      var $5=$4 == 0;
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $7=$2;
      var $8=(($7+16)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0);
      $1=$10;
      __label__ = 9; break;
    case 4: 
      var $12=(($a)|0);
      var $13=$12;
      var $14=$3;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
      $i=1;
      __label__ = 5; break;
    case 5: 
      var $16=$i;
      var $17=(($16)|0) < 2;
      if ($17) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $19=$i;
      var $20=(($a+($19<<2))|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($a)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=((($23)+($21))|0);
      HEAP32[(($22)>>2)]=$24;
      __label__ = 7; break;
    case 7: 
      var $26=$i;
      var $27=((($26)+(1))|0);
      $i=$27;
      __label__ = 5; break;
    case 8: 
      var $29=(($a)|0);
      var $30=HEAPU32[(($29)>>2)];
      var $31=$2;
      var $32=(($31+7)|0);
      var $33=HEAPU8[($32)];
      var $34=(($33)&255);
      var $35=1 << $34;
      var $36=((($35)-(1))|0);
      var $37=$36 | 1;
      var $38=((($30)>>>0))%((($37)>>>0));
      var $39=$2;
      var $40=(($39+16)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+($38)*(28))|0);
      $1=$42;
      __label__ = 9; break;
    case 9: 
      var $44=$1;
      STACKTOP = __stackBase__;
      return $44;
    default: assert(0, "bad label: " + __label__);
  }
}
_hashnum["X"]=1;

function _luaH_get($t, $key) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $k;
      var $n;
      var $n1;
      $2=$t;
      $3=$key;
      var $4=$3;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      if ((($6)|0) == 0) {
        __label__ = 3; break;
      }
      else if ((($6)|0) == 4) {
        __label__ = 4; break;
      }
      else if ((($6)|0) == 3) {
        __label__ = 5; break;
      }
      else {
      __label__ = 8; break;
      }
      
    case 3: 
      $1=_luaO_nilobject_;
      __label__ = 15; break;
    case 4: 
      var $9=$2;
      var $10=$3;
      var $11=(($10)|0);
      var $12=$11;
      var $13=HEAP32[(($12)>>2)];
      var $14=$13;
      var $15=_luaH_getstr($9, $14);
      $1=$15;
      __label__ = 15; break;
    case 5: 
      var $17=$3;
      var $18=(($17)|0);
      var $19=$18;
      var $20=(tempDoubleI32[0]=HEAP32[(($19)>>2)],tempDoubleI32[1]=HEAP32[((($19)+(4))>>2)],tempDoubleF64[0]);
      $n=$20;
      var $21=$n;
      var $22=(($21)&-1);
      $k=$22;
      var $23=$k;
      var $24=(($23)|0);
      var $25=$3;
      var $26=(($25)|0);
      var $27=$26;
      var $28=(tempDoubleI32[0]=HEAP32[(($27)>>2)],tempDoubleI32[1]=HEAP32[((($27)+(4))>>2)],tempDoubleF64[0]);
      var $29=$24 == $28;
      if ($29) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $31=$2;
      var $32=$k;
      var $33=_luaH_getnum($31, $32);
      $1=$33;
      __label__ = 15; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $36=$2;
      var $37=$3;
      var $38=_mainposition($36, $37);
      $n1=$38;
      __label__ = 9; break;
    case 9: 
      var $40=$n1;
      var $41=(($40+12)|0);
      var $42=$41;
      var $43=$3;
      var $44=_luaO_rawequalObj($42, $43);
      var $45=(($44)|0)!=0;
      if ($45) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $47=$n1;
      var $48=(($47)|0);
      $1=$48;
      __label__ = 15; break;
    case 11: 
      var $50=$n1;
      var $51=(($50+12)|0);
      var $52=$51;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      $n1=$54;
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $57=$n1;
      var $58=(($57)|0)!=0;
      if ($58) { __label__ = 9; break; } else { __label__ = 14; break; }
    case 14: 
      $1=_luaO_nilobject_;
      __label__ = 15; break;
    case 15: 
      var $61=$1;
      ;
      return $61;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaH_get["X"]=1;

function _mainposition($t, $key) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$t;
      $3=$key;
      var $4=$3;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      if ((($6)|0) == 3) {
        __label__ = 3; break;
      }
      else if ((($6)|0) == 4) {
        __label__ = 4; break;
      }
      else if ((($6)|0) == 1) {
        __label__ = 5; break;
      }
      else if ((($6)|0) == 2) {
        __label__ = 6; break;
      }
      else {
      __label__ = 7; break;
      }
      
    case 3: 
      var $8=$2;
      var $9=$3;
      var $10=(($9)|0);
      var $11=$10;
      var $12=(tempDoubleI32[0]=HEAP32[(($11)>>2)],tempDoubleI32[1]=HEAP32[((($11)+(4))>>2)],tempDoubleF64[0]);
      var $13=_hashnum($8, $12);
      $1=$13;
      __label__ = 8; break;
    case 4: 
      var $15=$3;
      var $16=(($15)|0);
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      var $20=$19;
      var $21=(($20+8)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$2;
      var $24=(($23+7)|0);
      var $25=HEAPU8[($24)];
      var $26=(($25)&255);
      var $27=1 << $26;
      var $28=((($27)-(1))|0);
      var $29=$22 & $28;
      var $30=$2;
      var $31=(($30+16)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+($29)*(28))|0);
      $1=$33;
      __label__ = 8; break;
    case 5: 
      var $35=$3;
      var $36=(($35)|0);
      var $37=$36;
      var $38=HEAP32[(($37)>>2)];
      var $39=$2;
      var $40=(($39+7)|0);
      var $41=HEAPU8[($40)];
      var $42=(($41)&255);
      var $43=1 << $42;
      var $44=((($43)-(1))|0);
      var $45=$38 & $44;
      var $46=$2;
      var $47=(($46+16)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+($45)*(28))|0);
      $1=$49;
      __label__ = 8; break;
    case 6: 
      var $51=$3;
      var $52=(($51)|0);
      var $53=$52;
      var $54=HEAP32[(($53)>>2)];
      var $55=$54;
      var $56=$2;
      var $57=(($56+7)|0);
      var $58=HEAPU8[($57)];
      var $59=(($58)&255);
      var $60=1 << $59;
      var $61=((($60)-(1))|0);
      var $62=$61 | 1;
      var $63=((($55)>>>0))%((($62)>>>0));
      var $64=$2;
      var $65=(($64+16)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+($63)*(28))|0);
      $1=$67;
      __label__ = 8; break;
    case 7: 
      var $69=$3;
      var $70=(($69)|0);
      var $71=$70;
      var $72=HEAP32[(($71)>>2)];
      var $73=$72;
      var $74=$2;
      var $75=(($74+7)|0);
      var $76=HEAPU8[($75)];
      var $77=(($76)&255);
      var $78=1 << $77;
      var $79=((($78)-(1))|0);
      var $80=$79 | 1;
      var $81=((($73)>>>0))%((($80)>>>0));
      var $82=$2;
      var $83=(($82+16)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+($81)*(28))|0);
      $1=$85;
      __label__ = 8; break;
    case 8: 
      var $87=$1;
      ;
      return $87;
    default: assert(0, "bad label: " + __label__);
  }
}
_mainposition["X"]=1;

function _luaH_set($L, $t, $key) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      $2=$L;
      $3=$t;
      $4=$key;
      var $5=$3;
      var $6=$4;
      var $7=_luaH_get($5, $6);
      $p=$7;
      var $8=$3;
      var $9=(($8+6)|0);
      HEAP8[($9)]=0;
      var $10=$p;
      var $11=(($10)|0)!=((_luaO_nilobject_)|0);
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$p;
      $1=$13;
      __label__ = 11; break;
    case 4: 
      var $15=$4;
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|0)==0;
      if ($18) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $20=$2;
      _luaG_runerror($20, ((STRING_TABLE.__str725)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 10; break;
    case 6: 
      var $22=$4;
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|0)==3;
      if ($25) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $27=$4;
      var $28=(($27)|0);
      var $29=$28;
      var $30=(tempDoubleI32[0]=HEAP32[(($29)>>2)],tempDoubleI32[1]=HEAP32[((($29)+(4))>>2)],tempDoubleF64[0]);
      var $31=$4;
      var $32=(($31)|0);
      var $33=$32;
      var $34=(tempDoubleI32[0]=HEAP32[(($33)>>2)],tempDoubleI32[1]=HEAP32[((($33)+(4))>>2)],tempDoubleF64[0]);
      var $35=$30 == $34;
      if ($35) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $37=$2;
      _luaG_runerror($37, ((STRING_TABLE.__str1726)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $40=$2;
      var $41=$3;
      var $42=$4;
      var $43=_newkey($40, $41, $42);
      $1=$43;
      __label__ = 11; break;
    case 11: 
      var $45=$1;
      STACKTOP = __stackBase__;
      return $45;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaH_set["X"]=1;

function _getfreepos($t) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$t;
      __label__ = 3; break;
    case 3: 
      var $4=$2;
      var $5=(($4+20)|0);
      var $6=HEAPU32[(($5)>>2)];
      var $7=((($6)-(28))|0);
      HEAP32[(($5)>>2)]=$7;
      var $8=$2;
      var $9=(($8+16)|0);
      var $10=HEAPU32[(($9)>>2)];
      var $11=(($6)>>>0) > (($10)>>>0);
      if ($11) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $13=$2;
      var $14=(($13+20)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+12)|0);
      var $17=$16;
      var $18=(($17+8)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|0)==0;
      if ($20) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $22=$2;
      var $23=(($22+20)|0);
      var $24=HEAP32[(($23)>>2)];
      $1=$24;
      __label__ = 8; break;
    case 6: 
      __label__ = 3; break;
    case 7: 
      $1=0;
      __label__ = 8; break;
    case 8: 
      var $28=$1;
      ;
      return $28;
    default: assert(0, "bad label: " + __label__);
  }
}


function _numusearray($t, $nums) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $lg;
      var $ttlg;
      var $ause;
      var $i;
      var $lc;
      var $lim;
      $1=$t;
      $2=$nums;
      $ause=0;
      $i=1;
      $lg=0;
      $ttlg=1;
      __label__ = 3; break;
    case 3: 
      var $4=$lg;
      var $5=(($4)|0) <= 26;
      if ($5) { __label__ = 4; break; } else { __label__ = 16; break; }
    case 4: 
      $lc=0;
      var $7=$ttlg;
      $lim=$7;
      var $8=$lim;
      var $9=$1;
      var $10=(($9+28)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($8)|0) > (($11)|0);
      if ($12) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $14=$1;
      var $15=(($14+28)|0);
      var $16=HEAP32[(($15)>>2)];
      $lim=$16;
      var $17=$i;
      var $18=$lim;
      var $19=(($17)|0) > (($18)|0);
      if ($19) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 16; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $24=$i;
      var $25=$lim;
      var $26=(($24)|0) <= (($25)|0);
      if ($26) { __label__ = 10; break; } else { __label__ = 14; break; }
    case 10: 
      var $28=$i;
      var $29=((($28)-(1))|0);
      var $30=$1;
      var $31=(($30+12)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+($29)*(12))|0);
      var $34=(($33+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|0)==0;
      if ($36) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $38=$lc;
      var $39=((($38)+(1))|0);
      $lc=$39;
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $42=$i;
      var $43=((($42)+(1))|0);
      $i=$43;
      __label__ = 9; break;
    case 14: 
      var $45=$lc;
      var $46=$lg;
      var $47=$2;
      var $48=(($47+($46<<2))|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=((($49)+($45))|0);
      HEAP32[(($48)>>2)]=$50;
      var $51=$lc;
      var $52=$ause;
      var $53=((($52)+($51))|0);
      $ause=$53;
      __label__ = 15; break;
    case 15: 
      var $55=$lg;
      var $56=((($55)+(1))|0);
      $lg=$56;
      var $57=$ttlg;
      var $58=((($57<<1))|0);
      $ttlg=$58;
      __label__ = 3; break;
    case 16: 
      var $60=$ause;
      ;
      return $60;
    default: assert(0, "bad label: " + __label__);
  }
}
_numusearray["X"]=1;

function _computesizes($nums, $narray) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $twotoi;
      var $a;
      var $na;
      var $n;
      $1=$nums;
      $2=$narray;
      $a=0;
      $na=0;
      $n=0;
      $i=0;
      $twotoi=1;
      __label__ = 3; break;
    case 3: 
      var $4=$twotoi;
      var $5=((((($4)|0))/(2))&-1);
      var $6=$2;
      var $7=HEAP32[(($6)>>2)];
      var $8=(($5)|0) < (($7)|0);
      if ($8) { __label__ = 4; break; } else { __label__ = 12; break; }
    case 4: 
      var $10=$i;
      var $11=$1;
      var $12=(($11+($10<<2))|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0) > 0;
      if ($14) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $16=$i;
      var $17=$1;
      var $18=(($17+($16<<2))|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$a;
      var $21=((($20)+($19))|0);
      $a=$21;
      var $22=$a;
      var $23=$twotoi;
      var $24=((((($23)|0))/(2))&-1);
      var $25=(($22)|0) > (($24)|0);
      if ($25) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $27=$twotoi;
      $n=$27;
      var $28=$a;
      $na=$28;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $31=$a;
      var $32=$2;
      var $33=HEAP32[(($32)>>2)];
      var $34=(($31)|0)==(($33)|0);
      if ($34) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      __label__ = 12; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $38=$i;
      var $39=((($38)+(1))|0);
      $i=$39;
      var $40=$twotoi;
      var $41=((($40<<1))|0);
      $twotoi=$41;
      __label__ = 3; break;
    case 12: 
      var $43=$n;
      var $44=$2;
      HEAP32[(($44)>>2)]=$43;
      var $45=$na;
      ;
      return $45;
    default: assert(0, "bad label: " + __label__);
  }
}
_computesizes["X"]=1;

function _arrayindex($key) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $n;
      var $k;
      $2=$key;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)==3;
      if ($6) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $8=$2;
      var $9=(($8)|0);
      var $10=$9;
      var $11=(tempDoubleI32[0]=HEAP32[(($10)>>2)],tempDoubleI32[1]=HEAP32[((($10)+(4))>>2)],tempDoubleF64[0]);
      $n=$11;
      var $12=$n;
      var $13=(($12)&-1);
      $k=$13;
      var $14=$k;
      var $15=(($14)|0);
      var $16=$n;
      var $17=$15 == $16;
      if ($17) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $19=$k;
      $1=$19;
      __label__ = 7; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      $1=-1;
      __label__ = 7; break;
    case 7: 
      var $23=$1;
      ;
      return $23;
    default: assert(0, "bad label: " + __label__);
  }
}


function _newkey($L, $t, $key) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $mp;
      var $othern;
      var $n;
      $2=$L;
      $3=$t;
      $4=$key;
      var $5=$3;
      var $6=$4;
      var $7=_mainposition($5, $6);
      $mp=$7;
      var $8=$mp;
      var $9=(($8)|0);
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|0)==0;
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $14=$mp;
      var $15=(($14)|0)==((_dummynode_)|0);
      if ($15) { __label__ = 4; break; } else { __label__ = 13; break; }
    case 4: 
      var $17=$3;
      var $18=_getfreepos($17);
      $n=$18;
      var $19=$n;
      var $20=(($19)|0)==0;
      if ($20) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $22=$2;
      var $23=$3;
      var $24=$4;
      _rehash($22, $23, $24);
      var $25=$2;
      var $26=$3;
      var $27=$4;
      var $28=_luaH_set($25, $26, $27);
      $1=$28;
      __label__ = 18; break;
    case 6: 
      var $30=$3;
      var $31=$mp;
      var $32=(($31+12)|0);
      var $33=$32;
      var $34=_mainposition($30, $33);
      $othern=$34;
      var $35=$othern;
      var $36=$mp;
      var $37=(($35)|0)!=(($36)|0);
      if ($37) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $40=$othern;
      var $41=(($40+12)|0);
      var $42=$41;
      var $43=(($42+12)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$mp;
      var $46=(($44)|0)!=(($45)|0);
      if ($46) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $48=$othern;
      var $49=(($48+12)|0);
      var $50=$49;
      var $51=(($50+12)|0);
      var $52=HEAP32[(($51)>>2)];
      $othern=$52;
      __label__ = 8; break;
    case 10: 
      var $54=$n;
      var $55=$othern;
      var $56=(($55+12)|0);
      var $57=$56;
      var $58=(($57+12)|0);
      HEAP32[(($58)>>2)]=$54;
      var $59=$n;
      var $60=$mp;
      var $61=$59;
      var $62=$60;
      assert(28 % 1 === 0, 'memcpy given ' + 28 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($61)>>2)]=HEAP32[(($62)>>2)];HEAP32[((($61)+(4))>>2)]=HEAP32[((($62)+(4))>>2)];HEAP32[((($61)+(8))>>2)]=HEAP32[((($62)+(8))>>2)];HEAP32[((($61)+(12))>>2)]=HEAP32[((($62)+(12))>>2)];HEAP32[((($61)+(16))>>2)]=HEAP32[((($62)+(16))>>2)];HEAP32[((($61)+(20))>>2)]=HEAP32[((($62)+(20))>>2)];HEAP32[((($61)+(24))>>2)]=HEAP32[((($62)+(24))>>2)];
      var $63=$mp;
      var $64=(($63+12)|0);
      var $65=$64;
      var $66=(($65+12)|0);
      HEAP32[(($66)>>2)]=0;
      var $67=$mp;
      var $68=(($67)|0);
      var $69=(($68+8)|0);
      HEAP32[(($69)>>2)]=0;
      __label__ = 12; break;
    case 11: 
      var $71=$mp;
      var $72=(($71+12)|0);
      var $73=$72;
      var $74=(($73+12)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$n;
      var $77=(($76+12)|0);
      var $78=$77;
      var $79=(($78+12)|0);
      HEAP32[(($79)>>2)]=$75;
      var $80=$n;
      var $81=$mp;
      var $82=(($81+12)|0);
      var $83=$82;
      var $84=(($83+12)|0);
      HEAP32[(($84)>>2)]=$80;
      var $85=$n;
      $mp=$85;
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $88=$mp;
      var $89=(($88+12)|0);
      var $90=$89;
      var $91=(($90)|0);
      var $92=$4;
      var $93=(($92)|0);
      var $94=$91;
      var $95=$93;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($94)>>2)]=HEAP32[(($95)>>2)];HEAP32[((($94)+(4))>>2)]=HEAP32[((($95)+(4))>>2)];
      var $96=$4;
      var $97=(($96+8)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$mp;
      var $100=(($99+12)|0);
      var $101=$100;
      var $102=(($101+8)|0);
      HEAP32[(($102)>>2)]=$98;
      var $103=$4;
      var $104=(($103+8)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105)|0) >= 4;
      if ($106) { __label__ = 14; break; } else { __label__ = 17; break; }
    case 14: 
      var $108=$4;
      var $109=(($108)|0);
      var $110=$109;
      var $111=HEAP32[(($110)>>2)];
      var $112=$111;
      var $113=(($112+5)|0);
      var $114=HEAPU8[($113)];
      var $115=(($114)&255);
      var $116=$115 & 3;
      var $117=(($116)|0)!=0;
      if ($117) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: 
      var $119=$3;
      var $120=$119;
      var $121=$120;
      var $122=(($121+5)|0);
      var $123=HEAPU8[($122)];
      var $124=(($123)&255);
      var $125=$124 & 4;
      var $126=(($125)|0)!=0;
      if ($126) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $128=$2;
      var $129=$3;
      _luaC_barrierback($128, $129);
      __label__ = 17; break;
    case 17: 
      var $131=$mp;
      var $132=(($131)|0);
      $1=$132;
      __label__ = 18; break;
    case 18: 
      var $134=$1;
      ;
      return $134;
    default: assert(0, "bad label: " + __label__);
  }
}
_newkey["X"]=1;

function _luaH_setnum($L, $t, $key) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      var $k=__stackBase__;
      var $i_o;
      $2=$L;
      $3=$t;
      $4=$key;
      var $5=$3;
      var $6=$4;
      var $7=_luaH_getnum($5, $6);
      $p=$7;
      var $8=$p;
      var $9=(($8)|0)!=((_luaO_nilobject_)|0);
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$p;
      $1=$11;
      __label__ = 5; break;
    case 4: 
      $i_o=$k;
      var $13=$4;
      var $14=(($13)|0);
      var $15=$i_o;
      var $16=(($15)|0);
      var $17=$16;
      (tempDoubleF64[0]=$14,HEAP32[(($17)>>2)]=tempDoubleI32[0],HEAP32[((($17)+(4))>>2)]=tempDoubleI32[1]);
      var $18=$i_o;
      var $19=(($18+8)|0);
      HEAP32[(($19)>>2)]=3;
      var $20=$2;
      var $21=$3;
      var $22=_newkey($20, $21, $k);
      $1=$22;
      __label__ = 5; break;
    case 5: 
      var $24=$1;
      STACKTOP = __stackBase__;
      return $24;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaH_setstr($L, $t, $key) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      var $k=__stackBase__;
      var $i_o;
      $2=$L;
      $3=$t;
      $4=$key;
      var $5=$3;
      var $6=$4;
      var $7=_luaH_getstr($5, $6);
      $p=$7;
      var $8=$p;
      var $9=(($8)|0)!=((_luaO_nilobject_)|0);
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$p;
      $1=$11;
      __label__ = 5; break;
    case 4: 
      $i_o=$k;
      var $13=$4;
      var $14=$13;
      var $15=$i_o;
      var $16=(($15)|0);
      var $17=$16;
      HEAP32[(($17)>>2)]=$14;
      var $18=$i_o;
      var $19=(($18+8)|0);
      HEAP32[(($19)>>2)]=4;
      var $20=$2;
      var $21=$3;
      var $22=_newkey($20, $21, $k);
      $1=$22;
      __label__ = 5; break;
    case 5: 
      var $24=$1;
      STACKTOP = __stackBase__;
      return $24;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaH_getn($t) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $j;
      var $i;
      var $m;
      $2=$t;
      var $3=$2;
      var $4=(($3+28)|0);
      var $5=HEAP32[(($4)>>2)];
      $j=$5;
      var $6=$j;
      var $7=(($6)>>>0) > 0;
      if ($7) { __label__ = 3; break; } else { __label__ = 11; break; }
    case 3: 
      var $9=$j;
      var $10=((($9)-(1))|0);
      var $11=$2;
      var $12=(($11+12)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+($10)*(12))|0);
      var $15=(($14+8)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|0)==0;
      if ($17) { __label__ = 4; break; } else { __label__ = 11; break; }
    case 4: 
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $20=$j;
      var $21=$i;
      var $22=((($20)-($21))|0);
      var $23=(($22)>>>0) > 1;
      if ($23) { __label__ = 6; break; } else { __label__ = 10; break; }
    case 6: 
      var $25=$i;
      var $26=$j;
      var $27=((($25)+($26))|0);
      var $28=Math.floor(((($27)>>>0))/(2));
      $m=$28;
      var $29=$m;
      var $30=((($29)-(1))|0);
      var $31=$2;
      var $32=(($31+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+($30)*(12))|0);
      var $35=(($34+8)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|0)==0;
      if ($37) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $39=$m;
      $j=$39;
      __label__ = 9; break;
    case 8: 
      var $41=$m;
      $i=$41;
      __label__ = 9; break;
    case 9: 
      __label__ = 5; break;
    case 10: 
      var $44=$i;
      $1=$44;
      __label__ = 14; break;
    case 11: 
      var $46=$2;
      var $47=(($46+16)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48)|0)==((_dummynode_)|0);
      if ($49) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $51=$j;
      $1=$51;
      __label__ = 14; break;
    case 13: 
      var $53=$2;
      var $54=$j;
      var $55=_unbound_search($53, $54);
      $1=$55;
      __label__ = 14; break;
    case 14: 
      var $57=$1;
      ;
      return $57;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaH_getn["X"]=1;

function _unbound_search($t, $j) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $m;
      $2=$t;
      $3=$j;
      var $4=$3;
      $i=$4;
      var $5=$3;
      var $6=((($5)+(1))|0);
      $3=$6;
      __label__ = 3; break;
    case 3: 
      var $8=$2;
      var $9=$3;
      var $10=_luaH_getnum($8, $9);
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|0)==0;
      var $14=$13 ^ 1;
      if ($14) { __label__ = 4; break; } else { __label__ = 10; break; }
    case 4: 
      var $16=$3;
      $i=$16;
      var $17=$3;
      var $18=((($17<<1))|0);
      $3=$18;
      var $19=$3;
      var $20=(($19)>>>0) > 2147483645;
      if ($20) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: 
      $i=1;
      __label__ = 6; break;
    case 6: 
      var $23=$2;
      var $24=$i;
      var $25=_luaH_getnum($23, $24);
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|0)==0;
      var $29=$28 ^ 1;
      if ($29) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $31=$i;
      var $32=((($31)+(1))|0);
      $i=$32;
      __label__ = 6; break;
    case 8: 
      var $34=$i;
      var $35=((($34)-(1))|0);
      $1=$35;
      __label__ = 17; break;
    case 9: 
      __label__ = 3; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $39=$3;
      var $40=$i;
      var $41=((($39)-($40))|0);
      var $42=(($41)>>>0) > 1;
      if ($42) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $44=$i;
      var $45=$3;
      var $46=((($44)+($45))|0);
      var $47=Math.floor(((($46)>>>0))/(2));
      $m=$47;
      var $48=$2;
      var $49=$m;
      var $50=_luaH_getnum($48, $49);
      var $51=(($50+8)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52)|0)==0;
      if ($53) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $55=$m;
      $3=$55;
      __label__ = 15; break;
    case 14: 
      var $57=$m;
      $i=$57;
      __label__ = 15; break;
    case 15: 
      __label__ = 11; break;
    case 16: 
      var $60=$i;
      $1=$60;
      __label__ = 17; break;
    case 17: 
      var $62=$1;
      ;
      return $62;
    default: assert(0, "bad label: " + __label__);
  }
}
_unbound_search["X"]=1;

function _rehash($L, $t, $ek) {
  var __stackBase__  = STACKTOP; STACKTOP += 112; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $nasize=__stackBase__;
      var $na;
      var $nums=(__stackBase__)+(4);
      var $i;
      var $totaluse;
      $1=$L;
      $2=$t;
      $3=$ek;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $5=$i;
      var $6=(($5)|0) <= 26;
      if ($6) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $8=$i;
      var $9=(($nums+($8<<2))|0);
      HEAP32[(($9)>>2)]=0;
      __label__ = 5; break;
    case 5: 
      var $11=$i;
      var $12=((($11)+(1))|0);
      $i=$12;
      __label__ = 3; break;
    case 6: 
      var $14=$2;
      var $15=(($nums)|0);
      var $16=_numusearray($14, $15);
      HEAP32[(($nasize)>>2)]=$16;
      var $17=HEAP32[(($nasize)>>2)];
      $totaluse=$17;
      var $18=$2;
      var $19=(($nums)|0);
      var $20=_numusehash($18, $19, $nasize);
      var $21=$totaluse;
      var $22=((($21)+($20))|0);
      $totaluse=$22;
      var $23=$3;
      var $24=(($nums)|0);
      var $25=_countint($23, $24);
      var $26=HEAP32[(($nasize)>>2)];
      var $27=((($26)+($25))|0);
      HEAP32[(($nasize)>>2)]=$27;
      var $28=$totaluse;
      var $29=((($28)+(1))|0);
      $totaluse=$29;
      var $30=(($nums)|0);
      var $31=_computesizes($30, $nasize);
      $na=$31;
      var $32=$1;
      var $33=$2;
      var $34=HEAP32[(($nasize)>>2)];
      var $35=$totaluse;
      var $36=$na;
      var $37=((($35)-($36))|0);
      _resize($32, $33, $34, $37);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_rehash["X"]=1;

function _numusehash($t, $nums, $pnasize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $totaluse;
      var $ause;
      var $i;
      var $n;
      $1=$t;
      $2=$nums;
      $3=$pnasize;
      $totaluse=0;
      $ause=0;
      var $4=$1;
      var $5=(($4+7)|0);
      var $6=HEAPU8[($5)];
      var $7=(($6)&255);
      var $8=1 << $7;
      $i=$8;
      __label__ = 3; break;
    case 3: 
      var $10=$i;
      var $11=((($10)-(1))|0);
      $i=$11;
      var $12=(($10)|0)!=0;
      if ($12) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $14=$i;
      var $15=$1;
      var $16=(($15+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+($14)*(28))|0);
      $n=$18;
      var $19=$n;
      var $20=(($19)|0);
      var $21=(($20+8)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|0)==0;
      if ($23) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $25=$n;
      var $26=(($25+12)|0);
      var $27=$26;
      var $28=$2;
      var $29=_countint($27, $28);
      var $30=$ause;
      var $31=((($30)+($29))|0);
      $ause=$31;
      var $32=$totaluse;
      var $33=((($32)+(1))|0);
      $totaluse=$33;
      __label__ = 6; break;
    case 6: 
      __label__ = 3; break;
    case 7: 
      var $36=$ause;
      var $37=$3;
      var $38=HEAP32[(($37)>>2)];
      var $39=((($38)+($36))|0);
      HEAP32[(($37)>>2)]=$39;
      var $40=$totaluse;
      ;
      return $40;
    default: assert(0, "bad label: " + __label__);
  }
}
_numusehash["X"]=1;

function _countint($key, $nums) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $k;
      $2=$key;
      $3=$nums;
      var $4=$2;
      var $5=_arrayindex($4);
      $k=$5;
      var $6=$k;
      var $7=0 < (($6)|0);
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $9=$k;
      var $10=(($9)|0) <= 67108864;
      if ($10) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $12=$k;
      var $13=((($12)-(1))|0);
      var $14=_luaO_log2($13);
      var $15=((($14)+(1))|0);
      var $16=$3;
      var $17=(($16+($15<<2))|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=((($18)+(1))|0);
      HEAP32[(($17)>>2)]=$19;
      $1=1;
      __label__ = 6; break;
    case 5: 
      $1=0;
      __label__ = 6; break;
    case 6: 
      var $22=$1;
      ;
      return $22;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaopen_table($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  _luaL_register($2, ((STRING_TABLE.__str747)|0), ((_tab_funcs)|0));
  ;
  return 1;
}


function _tconcat($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 1040; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $b=__stackBase__;
      var $lsep=(__stackBase__)+(1036);
      var $i;
      var $last;
      var $sep;
      $1=$L;
      var $2=$1;
      var $3=_luaL_optlstring($2, 2, ((__str10757)|0), $lsep);
      $sep=$3;
      var $4=$1;
      _luaL_checktype($4, 1, 5);
      var $5=$1;
      var $6=_luaL_optinteger($5, 3, 1);
      $i=$6;
      var $7=$1;
      var $8=_lua_type($7, 4);
      var $9=(($8)|0) <= 0;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$1;
      var $12=_lua_objlen($11, 1);
      var $17 = $12;__label__ = 5; break;
    case 4: 
      var $14=$1;
      var $15=_luaL_checkinteger($14, 4);
      var $17 = $15;__label__ = 5; break;
    case 5: 
      var $17;
      $last=$17;
      var $18=$1;
      _luaL_buffinit($18, $b);
      __label__ = 6; break;
    case 6: 
      var $20=$i;
      var $21=$last;
      var $22=(($20)|0) < (($21)|0);
      if ($22) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $24=$1;
      var $25=$i;
      _addfield($24, $b, $25);
      var $26=$sep;
      var $27=HEAP32[(($lsep)>>2)];
      _luaL_addlstring($b, $26, $27);
      __label__ = 8; break;
    case 8: 
      var $29=$i;
      var $30=((($29)+(1))|0);
      $i=$30;
      __label__ = 6; break;
    case 9: 
      var $32=$i;
      var $33=$last;
      var $34=(($32)|0)==(($33)|0);
      if ($34) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $36=$1;
      var $37=$i;
      _addfield($36, $b, $37);
      __label__ = 11; break;
    case 11: 
      _luaL_pushresult($b);
      STACKTOP = __stackBase__;
      return 1;
    default: assert(0, "bad label: " + __label__);
  }
}
_tconcat["X"]=1;

function _foreach($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2;
      _luaL_checktype($3, 1, 5);
      var $4=$2;
      _luaL_checktype($4, 2, 6);
      var $5=$2;
      _lua_pushnil($5);
      __label__ = 3; break;
    case 3: 
      var $7=$2;
      var $8=_lua_next($7, 1);
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $11=$2;
      _lua_pushvalue($11, 2);
      var $12=$2;
      _lua_pushvalue($12, -3);
      var $13=$2;
      _lua_pushvalue($13, -3);
      var $14=$2;
      _lua_call($14, 2, 1);
      var $15=$2;
      var $16=_lua_type($15, -1);
      var $17=(($16)|0)==0;
      if ($17) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      $1=1;
      __label__ = 8; break;
    case 6: 
      var $20=$2;
      _lua_settop($20, -3);
      __label__ = 3; break;
    case 7: 
      $1=0;
      __label__ = 8; break;
    case 8: 
      var $23=$1;
      ;
      return $23;
    default: assert(0, "bad label: " + __label__);
  }
}


function _foreachi($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $n;
      $2=$L;
      var $3=$2;
      _luaL_checktype($3, 1, 5);
      var $4=$2;
      var $5=_lua_objlen($4, 1);
      $n=$5;
      var $6=$2;
      _luaL_checktype($6, 2, 6);
      $i=1;
      __label__ = 3; break;
    case 3: 
      var $8=$i;
      var $9=$n;
      var $10=(($8)|0) <= (($9)|0);
      if ($10) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $12=$2;
      _lua_pushvalue($12, 2);
      var $13=$2;
      var $14=$i;
      _lua_pushinteger($13, $14);
      var $15=$2;
      var $16=$i;
      _lua_rawgeti($15, 1, $16);
      var $17=$2;
      _lua_call($17, 2, 1);
      var $18=$2;
      var $19=_lua_type($18, -1);
      var $20=(($19)|0)==0;
      if ($20) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      $1=1;
      __label__ = 9; break;
    case 6: 
      var $23=$2;
      _lua_settop($23, -2);
      __label__ = 7; break;
    case 7: 
      var $25=$i;
      var $26=((($25)+(1))|0);
      $i=$26;
      __label__ = 3; break;
    case 8: 
      $1=0;
      __label__ = 9; break;
    case 9: 
      var $29=$1;
      ;
      return $29;
    default: assert(0, "bad label: " + __label__);
  }
}


function _getn($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  var $3=$1;
  _luaL_checktype($3, 1, 5);
  var $4=$1;
  var $5=_lua_objlen($4, 1);
  _lua_pushinteger($2, $5);
  ;
  return 1;
}


function _maxn($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $max;
      var $v;
      $1=$L;
      $max=0;
      var $2=$1;
      _luaL_checktype($2, 1, 5);
      var $3=$1;
      _lua_pushnil($3);
      __label__ = 3; break;
    case 3: 
      var $5=$1;
      var $6=_lua_next($5, 1);
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $9=$1;
      _lua_settop($9, -2);
      var $10=$1;
      var $11=_lua_type($10, -1);
      var $12=(($11)|0)==3;
      if ($12) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $14=$1;
      var $15=_lua_tonumber($14, -1);
      $v=$15;
      var $16=$v;
      var $17=$max;
      var $18=$16 > $17;
      if ($18) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $20=$v;
      $max=$20;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      __label__ = 3; break;
    case 9: 
      var $24=$1;
      var $25=$max;
      _lua_pushnumber($24, $25);
      ;
      return 1;
    default: assert(0, "bad label: " + __label__);
  }
}


function _tinsert($L) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $e;
      var $pos;
      var $i;
      $2=$L;
      var $3=$2;
      _luaL_checktype($3, 1, 5);
      var $4=$2;
      var $5=_lua_objlen($4, 1);
      var $6=((($5)+(1))|0);
      $e=$6;
      var $7=$2;
      var $8=_lua_gettop($7);
      if ((($8)|0) == 2) {
        __label__ = 3; break;
      }
      else if ((($8)|0) == 3) {
        __label__ = 4; break;
      }
      else {
      __label__ = 11; break;
      }
      
    case 3: 
      var $10=$e;
      $pos=$10;
      __label__ = 12; break;
    case 4: 
      var $12=$2;
      var $13=_luaL_checkinteger($12, 2);
      $pos=$13;
      var $14=$pos;
      var $15=$e;
      var $16=(($14)|0) > (($15)|0);
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $18=$pos;
      $e=$18;
      __label__ = 6; break;
    case 6: 
      var $20=$e;
      $i=$20;
      __label__ = 7; break;
    case 7: 
      var $22=$i;
      var $23=$pos;
      var $24=(($22)|0) > (($23)|0);
      if ($24) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $26=$2;
      var $27=$i;
      var $28=((($27)-(1))|0);
      _lua_rawgeti($26, 1, $28);
      var $29=$2;
      var $30=$i;
      _lua_rawseti($29, 1, $30);
      __label__ = 9; break;
    case 9: 
      var $32=$i;
      var $33=((($32)-(1))|0);
      $i=$33;
      __label__ = 7; break;
    case 10: 
      __label__ = 12; break;
    case 11: 
      var $36=$2;
      var $37=_luaL_error($36, ((STRING_TABLE.__str13760)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$37;
      __label__ = 13; break;
    case 12: 
      var $39=$2;
      var $40=$pos;
      _lua_rawseti($39, 1, $40);
      $1=0;
      __label__ = 13; break;
    case 13: 
      var $42=$1;
      STACKTOP = __stackBase__;
      return $42;
    default: assert(0, "bad label: " + __label__);
  }
}
_tinsert["X"]=1;

function _tremove($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $e;
      var $pos;
      $2=$L;
      var $3=$2;
      _luaL_checktype($3, 1, 5);
      var $4=$2;
      var $5=_lua_objlen($4, 1);
      $e=$5;
      var $6=$2;
      var $7=$e;
      var $8=_luaL_optinteger($6, 2, $7);
      $pos=$8;
      var $9=$pos;
      var $10=1 <= (($9)|0);
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $12=$pos;
      var $13=$e;
      var $14=(($12)|0) <= (($13)|0);
      if ($14) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      $1=0;
      __label__ = 10; break;
    case 5: 
      var $17=$2;
      var $18=$pos;
      _lua_rawgeti($17, 1, $18);
      __label__ = 6; break;
    case 6: 
      var $20=$pos;
      var $21=$e;
      var $22=(($20)|0) < (($21)|0);
      if ($22) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $24=$2;
      var $25=$pos;
      var $26=((($25)+(1))|0);
      _lua_rawgeti($24, 1, $26);
      var $27=$2;
      var $28=$pos;
      _lua_rawseti($27, 1, $28);
      __label__ = 8; break;
    case 8: 
      var $30=$pos;
      var $31=((($30)+(1))|0);
      $pos=$31;
      __label__ = 6; break;
    case 9: 
      var $33=$2;
      _lua_pushnil($33);
      var $34=$2;
      var $35=$e;
      _lua_rawseti($34, 1, $35);
      $1=1;
      __label__ = 10; break;
    case 10: 
      var $37=$1;
      ;
      return $37;
    default: assert(0, "bad label: " + __label__);
  }
}
_tremove["X"]=1;

function _setn($L) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  $1=$L;
  var $2=$1;
  _luaL_checktype($2, 1, 5);
  var $3=$1;
  var $4=_luaL_error($3, ((STRING_TABLE.__str12759)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $5=$1;
  _lua_pushvalue($5, 1);
  STACKTOP = __stackBase__;
  return 1;
}


function _sort($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $n;
      $1=$L;
      var $2=$1;
      _luaL_checktype($2, 1, 5);
      var $3=$1;
      var $4=_lua_objlen($3, 1);
      $n=$4;
      var $5=$1;
      _luaL_checkstack($5, 40, ((__str10757)|0));
      var $6=$1;
      var $7=_lua_type($6, 2);
      var $8=(($7)|0) <= 0;
      if ($8) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $10=$1;
      _luaL_checktype($10, 2, 6);
      __label__ = 4; break;
    case 4: 
      var $12=$1;
      _lua_settop($12, 2);
      var $13=$1;
      var $14=$n;
      _auxsort($13, 1, $14);
      ;
      return 0;
    default: assert(0, "bad label: " + __label__);
  }
}


function _auxsort($L, $l, $u) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $j;
      $1=$L;
      $2=$l;
      $3=$u;
      __label__ = 3; break;
    case 3: 
      var $5=$2;
      var $6=$3;
      var $7=(($5)|0) < (($6)|0);
      if ($7) { __label__ = 4; break; } else { __label__ = 35; break; }
    case 4: 
      var $9=$1;
      var $10=$2;
      _lua_rawgeti($9, 1, $10);
      var $11=$1;
      var $12=$3;
      _lua_rawgeti($11, 1, $12);
      var $13=$1;
      var $14=_sort_comp($13, -1, -2);
      var $15=(($14)|0)!=0;
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $17=$1;
      var $18=$2;
      var $19=$3;
      _set2($17, $18, $19);
      __label__ = 7; break;
    case 6: 
      var $21=$1;
      _lua_settop($21, -3);
      __label__ = 7; break;
    case 7: 
      var $23=$3;
      var $24=$2;
      var $25=((($23)-($24))|0);
      var $26=(($25)|0)==1;
      if ($26) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      __label__ = 35; break;
    case 9: 
      var $29=$2;
      var $30=$3;
      var $31=((($29)+($30))|0);
      var $32=((((($31)|0))/(2))&-1);
      $i=$32;
      var $33=$1;
      var $34=$i;
      _lua_rawgeti($33, 1, $34);
      var $35=$1;
      var $36=$2;
      _lua_rawgeti($35, 1, $36);
      var $37=$1;
      var $38=_sort_comp($37, -2, -1);
      var $39=(($38)|0)!=0;
      if ($39) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $41=$1;
      var $42=$i;
      var $43=$2;
      _set2($41, $42, $43);
      __label__ = 15; break;
    case 11: 
      var $45=$1;
      _lua_settop($45, -2);
      var $46=$1;
      var $47=$3;
      _lua_rawgeti($46, 1, $47);
      var $48=$1;
      var $49=_sort_comp($48, -1, -2);
      var $50=(($49)|0)!=0;
      if ($50) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $52=$1;
      var $53=$i;
      var $54=$3;
      _set2($52, $53, $54);
      __label__ = 14; break;
    case 13: 
      var $56=$1;
      _lua_settop($56, -3);
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $59=$3;
      var $60=$2;
      var $61=((($59)-($60))|0);
      var $62=(($61)|0)==2;
      if ($62) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      __label__ = 35; break;
    case 17: 
      var $65=$1;
      var $66=$i;
      _lua_rawgeti($65, 1, $66);
      var $67=$1;
      _lua_pushvalue($67, -1);
      var $68=$1;
      var $69=$3;
      var $70=((($69)-(1))|0);
      _lua_rawgeti($68, 1, $70);
      var $71=$1;
      var $72=$i;
      var $73=$3;
      var $74=((($73)-(1))|0);
      _set2($71, $72, $74);
      var $75=$2;
      $i=$75;
      var $76=$3;
      var $77=((($76)-(1))|0);
      $j=$77;
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $80=$1;
      var $81=$i;
      var $82=((($81)+(1))|0);
      $i=$82;
      _lua_rawgeti($80, 1, $82);
      var $83=$1;
      var $84=_sort_comp($83, -1, -2);
      var $85=(($84)|0)!=0;
      if ($85) { __label__ = 20; break; } else { __label__ = 23; break; }
    case 20: 
      var $87=$i;
      var $88=$3;
      var $89=(($87)|0) > (($88)|0);
      if ($89) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $91=$1;
      var $92=_luaL_error($91, ((STRING_TABLE.__str11758)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 22; break;
    case 22: 
      var $94=$1;
      _lua_settop($94, -2);
      __label__ = 19; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $97=$1;
      var $98=$j;
      var $99=((($98)-(1))|0);
      $j=$99;
      _lua_rawgeti($97, 1, $99);
      var $100=$1;
      var $101=_sort_comp($100, -3, -1);
      var $102=(($101)|0)!=0;
      if ($102) { __label__ = 25; break; } else { __label__ = 28; break; }
    case 25: 
      var $104=$j;
      var $105=$2;
      var $106=(($104)|0) < (($105)|0);
      if ($106) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $108=$1;
      var $109=_luaL_error($108, ((STRING_TABLE.__str11758)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 27; break;
    case 27: 
      var $111=$1;
      _lua_settop($111, -2);
      __label__ = 24; break;
    case 28: 
      var $113=$j;
      var $114=$i;
      var $115=(($113)|0) < (($114)|0);
      if ($115) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $117=$1;
      _lua_settop($117, -4);
      __label__ = 31; break;
    case 30: 
      var $119=$1;
      var $120=$i;
      var $121=$j;
      _set2($119, $120, $121);
      __label__ = 18; break;
    case 31: 
      var $123=$1;
      var $124=$3;
      var $125=((($124)-(1))|0);
      _lua_rawgeti($123, 1, $125);
      var $126=$1;
      var $127=$i;
      _lua_rawgeti($126, 1, $127);
      var $128=$1;
      var $129=$3;
      var $130=((($129)-(1))|0);
      var $131=$i;
      _set2($128, $130, $131);
      var $132=$i;
      var $133=$2;
      var $134=((($132)-($133))|0);
      var $135=$3;
      var $136=$i;
      var $137=((($135)-($136))|0);
      var $138=(($134)|0) < (($137)|0);
      if ($138) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $140=$2;
      $j=$140;
      var $141=$i;
      var $142=((($141)-(1))|0);
      $i=$142;
      var $143=$i;
      var $144=((($143)+(2))|0);
      $2=$144;
      __label__ = 34; break;
    case 33: 
      var $146=$i;
      var $147=((($146)+(1))|0);
      $j=$147;
      var $148=$3;
      $i=$148;
      var $149=$j;
      var $150=((($149)-(2))|0);
      $3=$150;
      __label__ = 34; break;
    case 34: 
      var $152=$1;
      var $153=$j;
      var $154=$i;
      _auxsort($152, $153, $154);
      __label__ = 3; break;
    case 35: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_auxsort["X"]=1;

function _sort_comp($L, $a, $b) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $res;
      $2=$L;
      $3=$a;
      $4=$b;
      var $5=$2;
      var $6=_lua_type($5, 2);
      var $7=(($6)|0)==0;
      if ($7) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $9=$2;
      _lua_pushvalue($9, 2);
      var $10=$2;
      var $11=$3;
      var $12=((($11)-(1))|0);
      _lua_pushvalue($10, $12);
      var $13=$2;
      var $14=$4;
      var $15=((($14)-(2))|0);
      _lua_pushvalue($13, $15);
      var $16=$2;
      _lua_call($16, 2, 1);
      var $17=$2;
      var $18=_lua_toboolean($17, -1);
      $res=$18;
      var $19=$2;
      _lua_settop($19, -2);
      var $20=$res;
      $1=$20;
      __label__ = 5; break;
    case 4: 
      var $22=$2;
      var $23=$3;
      var $24=$4;
      var $25=_lua_lessthan($22, $23, $24);
      $1=$25;
      __label__ = 5; break;
    case 5: 
      var $27=$1;
      ;
      return $27;
    default: assert(0, "bad label: " + __label__);
  }
}


function _set2($L, $i, $j) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$L;
  $2=$i;
  $3=$j;
  var $4=$1;
  var $5=$2;
  _lua_rawseti($4, 1, $5);
  var $6=$1;
  var $7=$3;
  _lua_rawseti($6, 1, $7);
  ;
  return;
}


function _addfield($L, $b, $i) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$L;
      $2=$b;
      $3=$i;
      var $4=$1;
      var $5=$3;
      _lua_rawgeti($4, 1, $5);
      var $6=$1;
      var $7=_lua_isstring($6, -1);
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $10=$1;
      var $11=$1;
      var $12=$1;
      var $13=_lua_type($12, -1);
      var $14=_lua_typename($11, $13);
      var $15=$3;
      var $16=_luaL_error($10, ((STRING_TABLE.__str14761)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$15,tempInt));
      __label__ = 4; break;
    case 4: 
      var $18=$2;
      _luaL_addvalue($18);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaT_init($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $i;
      $1=$L;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $3=$i;
      var $4=(($3)|0) < 17;
      if ($4) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $6=$1;
      var $7=$i;
      var $8=((_luaT_init_luaT_eventname+($7<<2))|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$i;
      var $11=((_luaT_init_luaT_eventname+($10<<2))|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=_strlen($12);
      var $14=_luaS_newlstr($6, $9, $13);
      var $15=$i;
      var $16=$1;
      var $17=(($16+16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+168)|0);
      var $20=(($19+($15<<2))|0);
      HEAP32[(($20)>>2)]=$14;
      var $21=$i;
      var $22=$1;
      var $23=(($22+16)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+168)|0);
      var $26=(($25+($21<<2))|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$27;
      var $29=(($28+5)|0);
      var $30=HEAPU8[($29)];
      var $31=(($30)&255);
      var $32=$31 | 32;
      var $33=(($32) & 255);
      HEAP8[($29)]=$33;
      __label__ = 5; break;
    case 5: 
      var $35=$i;
      var $36=((($35)+(1))|0);
      $i=$36;
      __label__ = 3; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaT_gettm($events, $event, $ename) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $tm;
      $2=$events;
      $3=$event;
      $4=$ename;
      var $5=$2;
      var $6=$4;
      var $7=_luaH_getstr($5, $6);
      $tm=$7;
      var $8=$tm;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0)==0;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$3;
      var $14=1 << $13;
      var $15=(($14) & 255);
      var $16=(($15)&255);
      var $17=$2;
      var $18=(($17+6)|0);
      var $19=HEAPU8[($18)];
      var $20=(($19)&255);
      var $21=$20 | $16;
      var $22=(($21) & 255);
      HEAP8[($18)]=$22;
      $1=0;
      __label__ = 5; break;
    case 4: 
      var $24=$tm;
      $1=$24;
      __label__ = 5; break;
    case 5: 
      var $26=$1;
      ;
      return $26;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaT_gettmbyobj($L, $o, $event) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $mt;
      $1=$L;
      $2=$o;
      $3=$event;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      if ((($6)|0) == 5) {
        __label__ = 3; break;
      }
      else if ((($6)|0) == 7) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      var $8=$2;
      var $9=(($8)|0);
      var $10=$9;
      var $11=HEAP32[(($10)>>2)];
      var $12=$11;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      $mt=$14;
      __label__ = 6; break;
    case 4: 
      var $16=$2;
      var $17=(($16)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      var $21=$20;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      $mt=$23;
      __label__ = 6; break;
    case 5: 
      var $25=$2;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+16)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+132)|0);
      var $32=(($31+($27<<2))|0);
      var $33=HEAP32[(($32)>>2)];
      $mt=$33;
      __label__ = 6; break;
    case 6: 
      var $35=$mt;
      var $36=(($35)|0)!=0;
      if ($36) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $38=$mt;
      var $39=$3;
      var $40=$1;
      var $41=(($40+16)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+168)|0);
      var $44=(($43+($39<<2))|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=_luaH_getstr($38, $45);
      var $49 = $46;__label__ = 9; break;
    case 8: 
      var $49 = _luaO_nilobject_;__label__ = 9; break;
    case 9: 
      var $49;
      ;
      return $49;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaT_gettmbyobj["X"]=1;

function _luaU_undump($L, $Z, $buff, $name) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $S=__stackBase__;
      $1=$L;
      $2=$Z;
      $3=$buff;
      $4=$name;
      var $5=$4;
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24);
      var $8=(($7)|0)==64;
      if ($8) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $10=$4;
      var $11=HEAP8[($10)];
      var $12=(($11 << 24) >> 24);
      var $13=(($12)|0)==61;
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $15=$4;
      var $16=(($15+1)|0);
      var $17=(($S+12)|0);
      HEAP32[(($17)>>2)]=$16;
      __label__ = 9; break;
    case 5: 
      var $19=$4;
      var $20=HEAP8[($19)];
      var $21=(($20 << 24) >> 24);
      var $22=HEAP8[(((STRING_TABLE.__str854)|0))];
      var $23=(($22 << 24) >> 24);
      var $24=(($21)|0)==(($23)|0);
      if ($24) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $26=(($S+12)|0);
      HEAP32[(($26)>>2)]=((STRING_TABLE.__str1855)|0);
      __label__ = 8; break;
    case 7: 
      var $28=$4;
      var $29=(($S+12)|0);
      HEAP32[(($29)>>2)]=$28;
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $32=$1;
      var $33=(($S)|0);
      HEAP32[(($33)>>2)]=$32;
      var $34=$2;
      var $35=(($S+4)|0);
      HEAP32[(($35)>>2)]=$34;
      var $36=$3;
      var $37=(($S+8)|0);
      HEAP32[(($37)>>2)]=$36;
      _LoadHeader($S);
      var $38=$1;
      var $39=_luaS_newlstr($38, ((STRING_TABLE.__str2856)|0), 2);
      var $40=_LoadFunction($S, $39);
      STACKTOP = __stackBase__;
      return $40;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaU_undump["X"]=1;

function _LoadHeader($S) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $h=__stackBase__;
      var $s=(__stackBase__)+(12);
      $1=$S;
      var $2=(($h)|0);
      _luaU_header($2);
      var $3=$1;
      var $4=(($s)|0);
      _LoadBlock($3, $4, 12);
      var $5=(($h)|0);
      var $6=(($s)|0);
      var $7=_memcmp($5, $6, 12);
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$1;
      _error($10, ((STRING_TABLE.__str9863)|0));
      __label__ = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _LoadFunction($S, $p) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $f;
      var $i_o;
      $1=$S;
      $2=$p;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+52)|0);
      var $7=HEAP16[(($6)>>1)];
      var $8=((($7)+(1))&65535);
      HEAP16[(($6)>>1)]=$8;
      var $9=(($8)&65535);
      var $10=(($9)|0) > 200;
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $12=$1;
      _error($12, ((STRING_TABLE.__str3857)|0));
      __label__ = 4; break;
    case 4: 
      var $14=$1;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=_luaF_newproto($16);
      $f=$17;
      var $18=$1;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+8)|0);
      var $22=HEAP32[(($21)>>2)];
      $i_o=$22;
      var $23=$f;
      var $24=$23;
      var $25=$i_o;
      var $26=(($25)|0);
      var $27=$26;
      HEAP32[(($27)>>2)]=$24;
      var $28=$i_o;
      var $29=(($28+8)|0);
      HEAP32[(($29)>>2)]=9;
      var $30=$1;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+28)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$34;
      var $36=$1;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+8)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$40;
      var $42=$35;
      var $43=$41;
      var $44=((($42)-($43))|0);
      var $45=(($44)|0) <= 12;
      if ($45) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $47=$1;
      var $48=(($47)|0);
      var $49=HEAP32[(($48)>>2)];
      _luaD_growstack($49, 1);
      __label__ = 7; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $52=$1;
      var $53=(($52)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+8)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+12)|0);
      HEAP32[(($55)>>2)]=$57;
      var $58=$1;
      var $59=_LoadString($58);
      var $60=$f;
      var $61=(($60+32)|0);
      HEAP32[(($61)>>2)]=$59;
      var $62=$f;
      var $63=(($62+32)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64)|0)==0;
      if ($65) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $67=$2;
      var $68=$f;
      var $69=(($68+32)|0);
      HEAP32[(($69)>>2)]=$67;
      __label__ = 9; break;
    case 9: 
      var $71=$1;
      var $72=_LoadInt($71);
      var $73=$f;
      var $74=(($73+60)|0);
      HEAP32[(($74)>>2)]=$72;
      var $75=$1;
      var $76=_LoadInt($75);
      var $77=$f;
      var $78=(($77+64)|0);
      HEAP32[(($78)>>2)]=$76;
      var $79=$1;
      var $80=_LoadChar($79);
      var $81=(($80) & 255);
      var $82=$f;
      var $83=(($82+72)|0);
      HEAP8[($83)]=$81;
      var $84=$1;
      var $85=_LoadChar($84);
      var $86=(($85) & 255);
      var $87=$f;
      var $88=(($87+73)|0);
      HEAP8[($88)]=$86;
      var $89=$1;
      var $90=_LoadChar($89);
      var $91=(($90) & 255);
      var $92=$f;
      var $93=(($92+74)|0);
      HEAP8[($93)]=$91;
      var $94=$1;
      var $95=_LoadChar($94);
      var $96=(($95) & 255);
      var $97=$f;
      var $98=(($97+75)|0);
      HEAP8[($98)]=$96;
      var $99=$1;
      var $100=$f;
      _LoadCode($99, $100);
      var $101=$1;
      var $102=$f;
      _LoadConstants($101, $102);
      var $103=$1;
      var $104=$f;
      _LoadDebug($103, $104);
      var $105=$f;
      var $106=_luaG_checkcode($105);
      var $107=(($106)|0)!=0;
      if ($107) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $109=$1;
      _error($109, ((STRING_TABLE.__str4858)|0));
      __label__ = 11; break;
    case 11: 
      var $111=$1;
      var $112=(($111)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113+8)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=((($115)-(12))|0);
      HEAP32[(($114)>>2)]=$116;
      var $117=$1;
      var $118=(($117)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=(($119+52)|0);
      var $121=HEAP16[(($120)>>1)];
      var $122=((($121)-(1))&65535);
      HEAP16[(($120)>>1)]=$122;
      var $123=$f;
      ;
      return $123;
    default: assert(0, "bad label: " + __label__);
  }
}
_LoadFunction["X"]=1;

function _luaU_header($h) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $x=__stackBase__;
  $1=$h;
  HEAP32[(($x)>>2)]=1;
  var $2=$1;
  assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($2)]=HEAP8[(((STRING_TABLE.__str854)|0))];HEAP8[(($2)+(1))]=HEAP8[((((STRING_TABLE.__str854)|0))+(1))];HEAP8[(($2)+(2))]=HEAP8[((((STRING_TABLE.__str854)|0))+(2))];HEAP8[(($2)+(3))]=HEAP8[((((STRING_TABLE.__str854)|0))+(3))];
  var $3=$1;
  var $4=(($3+4)|0);
  $1=$4;
  var $5=$1;
  var $6=(($5+1)|0);
  $1=$6;
  HEAP8[($5)]=81;
  var $7=$1;
  var $8=(($7+1)|0);
  $1=$8;
  HEAP8[($7)]=0;
  var $9=$x;
  var $10=HEAP8[($9)];
  var $11=$1;
  var $12=(($11+1)|0);
  $1=$12;
  HEAP8[($11)]=$10;
  var $13=$1;
  var $14=(($13+1)|0);
  $1=$14;
  HEAP8[($13)]=4;
  var $15=$1;
  var $16=(($15+1)|0);
  $1=$16;
  HEAP8[($15)]=4;
  var $17=$1;
  var $18=(($17+1)|0);
  $1=$18;
  HEAP8[($17)]=4;
  var $19=$1;
  var $20=(($19+1)|0);
  $1=$20;
  HEAP8[($19)]=8;
  var $21=$1;
  var $22=(($21+1)|0);
  $1=$22;
  HEAP8[($21)]=0;
  STACKTOP = __stackBase__;
  return;
}


function _error($S, $why) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  $1=$S;
  $2=$why;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$1;
  var $7=(($6+12)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=_luaO_pushfstring($5, ((STRING_TABLE.__str8862)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$8,HEAP32[(((tempInt)+(4))>>2)]=$9,tempInt));
  var $11=$1;
  var $12=(($11)|0);
  var $13=HEAP32[(($12)>>2)];
  _luaD_throw($13, 3);
  STACKTOP = __stackBase__;
  return;
}


function _LoadString($S) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $size=__stackBase__;
      var $s;
      $2=$S;
      var $3=$2;
      var $4=$size;
      _LoadBlock($3, $4, 4);
      var $5=HEAP32[(($size)>>2)];
      var $6=(($5)|0)==0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 5; break;
    case 4: 
      var $9=$2;
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=HEAP32[(($size)>>2)];
      var $16=_luaZ_openspace($11, $14, $15);
      $s=$16;
      var $17=$2;
      var $18=$s;
      var $19=HEAP32[(($size)>>2)];
      _LoadBlock($17, $18, $19);
      var $20=$2;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$s;
      var $24=HEAP32[(($size)>>2)];
      var $25=((($24)-(1))|0);
      var $26=_luaS_newlstr($22, $23, $25);
      $1=$26;
      __label__ = 5; break;
    case 5: 
      var $28=$1;
      STACKTOP = __stackBase__;
      return $28;
    default: assert(0, "bad label: " + __label__);
  }
}


function _LoadInt($S) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $x=__stackBase__;
      $1=$S;
      var $2=$1;
      var $3=$x;
      _LoadBlock($2, $3, 4);
      var $4=HEAP32[(($x)>>2)];
      var $5=(($4)|0) < 0;
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $7=$1;
      _error($7, ((STRING_TABLE.__str7861)|0));
      __label__ = 4; break;
    case 4: 
      var $9=HEAP32[(($x)>>2)];
      STACKTOP = __stackBase__;
      return $9;
    default: assert(0, "bad label: " + __label__);
  }
}


function _LoadChar($S) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $x=__stackBase__;
  $1=$S;
  var $2=$1;
  _LoadBlock($2, $x, 1);
  var $3=HEAP8[($x)];
  var $4=(($3 << 24) >> 24);
  STACKTOP = __stackBase__;
  return $4;
}


function _LoadCode($S, $f) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $n;
      $1=$S;
      $2=$f;
      var $3=$1;
      var $4=_LoadInt($3);
      $n=$4;
      var $5=$n;
      var $6=((($5)+(1))|0);
      var $7=(($6)>>>0) <= 1073741823;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$1;
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$n;
      var $13=((($12<<2))|0);
      var $14=_luaM_realloc_($11, 0, 0, $13);
      var $21 = $14;__label__ = 5; break;
    case 4: 
      var $16=$1;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=_luaM_toobig($18);
      var $21 = $19;__label__ = 5; break;
    case 5: 
      var $21;
      var $22=$21;
      var $23=$2;
      var $24=(($23+12)|0);
      HEAP32[(($24)>>2)]=$22;
      var $25=$n;
      var $26=$2;
      var $27=(($26+44)|0);
      HEAP32[(($27)>>2)]=$25;
      var $28=$1;
      var $29=$2;
      var $30=(($29+12)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      var $33=$n;
      var $34=((($33<<2))|0);
      _LoadBlock($28, $32, $34);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _LoadConstants($S, $f) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $n;
      var $o;
      var $t;
      var $i_o;
      var $i_o1;
      var $i_o2;
      $1=$S;
      $2=$f;
      var $3=$1;
      var $4=_LoadInt($3);
      $n=$4;
      var $5=$n;
      var $6=((($5)+(1))|0);
      var $7=(($6)>>>0) <= 357913941;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$1;
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$n;
      var $13=((($12)*(12))|0);
      var $14=_luaM_realloc_($11, 0, 0, $13);
      var $21 = $14;__label__ = 5; break;
    case 4: 
      var $16=$1;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=_luaM_toobig($18);
      var $21 = $19;__label__ = 5; break;
    case 5: 
      var $21;
      var $22=$21;
      var $23=$2;
      var $24=(($23+8)|0);
      HEAP32[(($24)>>2)]=$22;
      var $25=$n;
      var $26=$2;
      var $27=(($26+40)|0);
      HEAP32[(($27)>>2)]=$25;
      $i=0;
      __label__ = 6; break;
    case 6: 
      var $29=$i;
      var $30=$n;
      var $31=(($29)|0) < (($30)|0);
      if ($31) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $33=$i;
      var $34=$2;
      var $35=(($34+8)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+($33)*(12))|0);
      var $38=(($37+8)|0);
      HEAP32[(($38)>>2)]=0;
      __label__ = 8; break;
    case 8: 
      var $40=$i;
      var $41=((($40)+(1))|0);
      $i=$41;
      __label__ = 6; break;
    case 9: 
      $i=0;
      __label__ = 10; break;
    case 10: 
      var $44=$i;
      var $45=$n;
      var $46=(($44)|0) < (($45)|0);
      if ($46) { __label__ = 11; break; } else { __label__ = 19; break; }
    case 11: 
      var $48=$i;
      var $49=$2;
      var $50=(($49+8)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+($48)*(12))|0);
      $o=$52;
      var $53=$1;
      var $54=_LoadChar($53);
      $t=$54;
      var $55=$t;
      if ((($55)|0) == 0) {
        __label__ = 12; break;
      }
      else if ((($55)|0) == 1) {
        __label__ = 13; break;
      }
      else if ((($55)|0) == 3) {
        __label__ = 14; break;
      }
      else if ((($55)|0) == 4) {
        __label__ = 15; break;
      }
      else {
      __label__ = 16; break;
      }
      
    case 12: 
      var $57=$o;
      var $58=(($57+8)|0);
      HEAP32[(($58)>>2)]=0;
      __label__ = 17; break;
    case 13: 
      var $60=$o;
      $i_o=$60;
      var $61=$1;
      var $62=_LoadChar($61);
      var $63=(($62)|0)!=0;
      var $64=(($63)&1);
      var $65=$i_o;
      var $66=(($65)|0);
      var $67=$66;
      HEAP32[(($67)>>2)]=$64;
      var $68=$i_o;
      var $69=(($68+8)|0);
      HEAP32[(($69)>>2)]=1;
      __label__ = 17; break;
    case 14: 
      var $71=$o;
      $i_o1=$71;
      var $72=$1;
      var $73=_LoadNumber($72);
      var $74=$i_o1;
      var $75=(($74)|0);
      var $76=$75;
      (tempDoubleF64[0]=$73,HEAP32[(($76)>>2)]=tempDoubleI32[0],HEAP32[((($76)+(4))>>2)]=tempDoubleI32[1]);
      var $77=$i_o1;
      var $78=(($77+8)|0);
      HEAP32[(($78)>>2)]=3;
      __label__ = 17; break;
    case 15: 
      var $80=$o;
      $i_o2=$80;
      var $81=$1;
      var $82=_LoadString($81);
      var $83=$82;
      var $84=$i_o2;
      var $85=(($84)|0);
      var $86=$85;
      HEAP32[(($86)>>2)]=$83;
      var $87=$i_o2;
      var $88=(($87+8)|0);
      HEAP32[(($88)>>2)]=4;
      __label__ = 17; break;
    case 16: 
      var $90=$1;
      _error($90, ((STRING_TABLE.__str6860)|0));
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $93=$i;
      var $94=((($93)+(1))|0);
      $i=$94;
      __label__ = 10; break;
    case 19: 
      var $96=$1;
      var $97=_LoadInt($96);
      $n=$97;
      var $98=$n;
      var $99=((($98)+(1))|0);
      var $100=(($99)>>>0) <= 1073741823;
      if ($100) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $102=$1;
      var $103=(($102)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$n;
      var $106=((($105<<2))|0);
      var $107=_luaM_realloc_($104, 0, 0, $106);
      var $114 = $107;__label__ = 22; break;
    case 21: 
      var $109=$1;
      var $110=(($109)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=_luaM_toobig($111);
      var $114 = $112;__label__ = 22; break;
    case 22: 
      var $114;
      var $115=$114;
      var $116=$2;
      var $117=(($116+16)|0);
      HEAP32[(($117)>>2)]=$115;
      var $118=$n;
      var $119=$2;
      var $120=(($119+52)|0);
      HEAP32[(($120)>>2)]=$118;
      $i=0;
      __label__ = 23; break;
    case 23: 
      var $122=$i;
      var $123=$n;
      var $124=(($122)|0) < (($123)|0);
      if ($124) { __label__ = 24; break; } else { __label__ = 26; break; }
    case 24: 
      var $126=$i;
      var $127=$2;
      var $128=(($127+16)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129+($126<<2))|0);
      HEAP32[(($130)>>2)]=0;
      __label__ = 25; break;
    case 25: 
      var $132=$i;
      var $133=((($132)+(1))|0);
      $i=$133;
      __label__ = 23; break;
    case 26: 
      $i=0;
      __label__ = 27; break;
    case 27: 
      var $136=$i;
      var $137=$n;
      var $138=(($136)|0) < (($137)|0);
      if ($138) { __label__ = 28; break; } else { __label__ = 30; break; }
    case 28: 
      var $140=$1;
      var $141=$2;
      var $142=(($141+32)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=_LoadFunction($140, $143);
      var $145=$i;
      var $146=$2;
      var $147=(($146+16)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=(($148+($145<<2))|0);
      HEAP32[(($149)>>2)]=$144;
      __label__ = 29; break;
    case 29: 
      var $151=$i;
      var $152=((($151)+(1))|0);
      $i=$152;
      __label__ = 27; break;
    case 30: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_LoadConstants["X"]=1;

function _LoadDebug($S, $f) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $n;
      $1=$S;
      $2=$f;
      var $3=$1;
      var $4=_LoadInt($3);
      $n=$4;
      var $5=$n;
      var $6=((($5)+(1))|0);
      var $7=(($6)>>>0) <= 1073741823;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$1;
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$n;
      var $13=((($12<<2))|0);
      var $14=_luaM_realloc_($11, 0, 0, $13);
      var $21 = $14;__label__ = 5; break;
    case 4: 
      var $16=$1;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=_luaM_toobig($18);
      var $21 = $19;__label__ = 5; break;
    case 5: 
      var $21;
      var $22=$21;
      var $23=$2;
      var $24=(($23+20)|0);
      HEAP32[(($24)>>2)]=$22;
      var $25=$n;
      var $26=$2;
      var $27=(($26+48)|0);
      HEAP32[(($27)>>2)]=$25;
      var $28=$1;
      var $29=$2;
      var $30=(($29+20)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      var $33=$n;
      var $34=((($33<<2))|0);
      _LoadBlock($28, $32, $34);
      var $35=$1;
      var $36=_LoadInt($35);
      $n=$36;
      var $37=$n;
      var $38=((($37)+(1))|0);
      var $39=(($38)>>>0) <= 357913941;
      if ($39) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $41=$1;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$n;
      var $45=((($44)*(12))|0);
      var $46=_luaM_realloc_($43, 0, 0, $45);
      var $53 = $46;__label__ = 8; break;
    case 7: 
      var $48=$1;
      var $49=(($48)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=_luaM_toobig($50);
      var $53 = $51;__label__ = 8; break;
    case 8: 
      var $53;
      var $54=$53;
      var $55=$2;
      var $56=(($55+24)|0);
      HEAP32[(($56)>>2)]=$54;
      var $57=$n;
      var $58=$2;
      var $59=(($58+56)|0);
      HEAP32[(($59)>>2)]=$57;
      $i=0;
      __label__ = 9; break;
    case 9: 
      var $61=$i;
      var $62=$n;
      var $63=(($61)|0) < (($62)|0);
      if ($63) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $65=$i;
      var $66=$2;
      var $67=(($66+24)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+($65)*(12))|0);
      var $70=(($69)|0);
      HEAP32[(($70)>>2)]=0;
      __label__ = 11; break;
    case 11: 
      var $72=$i;
      var $73=((($72)+(1))|0);
      $i=$73;
      __label__ = 9; break;
    case 12: 
      $i=0;
      __label__ = 13; break;
    case 13: 
      var $76=$i;
      var $77=$n;
      var $78=(($76)|0) < (($77)|0);
      if ($78) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $80=$1;
      var $81=_LoadString($80);
      var $82=$i;
      var $83=$2;
      var $84=(($83+24)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+($82)*(12))|0);
      var $87=(($86)|0);
      HEAP32[(($87)>>2)]=$81;
      var $88=$1;
      var $89=_LoadInt($88);
      var $90=$i;
      var $91=$2;
      var $92=(($91+24)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+($90)*(12))|0);
      var $95=(($94+4)|0);
      HEAP32[(($95)>>2)]=$89;
      var $96=$1;
      var $97=_LoadInt($96);
      var $98=$i;
      var $99=$2;
      var $100=(($99+24)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($101+($98)*(12))|0);
      var $103=(($102+8)|0);
      HEAP32[(($103)>>2)]=$97;
      __label__ = 15; break;
    case 15: 
      var $105=$i;
      var $106=((($105)+(1))|0);
      $i=$106;
      __label__ = 13; break;
    case 16: 
      var $108=$1;
      var $109=_LoadInt($108);
      $n=$109;
      var $110=$n;
      var $111=((($110)+(1))|0);
      var $112=(($111)>>>0) <= 1073741823;
      if ($112) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $114=$1;
      var $115=(($114)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$n;
      var $118=((($117<<2))|0);
      var $119=_luaM_realloc_($116, 0, 0, $118);
      var $126 = $119;__label__ = 19; break;
    case 18: 
      var $121=$1;
      var $122=(($121)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=_luaM_toobig($123);
      var $126 = $124;__label__ = 19; break;
    case 19: 
      var $126;
      var $127=$126;
      var $128=$2;
      var $129=(($128+28)|0);
      HEAP32[(($129)>>2)]=$127;
      var $130=$n;
      var $131=$2;
      var $132=(($131+36)|0);
      HEAP32[(($132)>>2)]=$130;
      $i=0;
      __label__ = 20; break;
    case 20: 
      var $134=$i;
      var $135=$n;
      var $136=(($134)|0) < (($135)|0);
      if ($136) { __label__ = 21; break; } else { __label__ = 23; break; }
    case 21: 
      var $138=$i;
      var $139=$2;
      var $140=(($139+28)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=(($141+($138<<2))|0);
      HEAP32[(($142)>>2)]=0;
      __label__ = 22; break;
    case 22: 
      var $144=$i;
      var $145=((($144)+(1))|0);
      $i=$145;
      __label__ = 20; break;
    case 23: 
      $i=0;
      __label__ = 24; break;
    case 24: 
      var $148=$i;
      var $149=$n;
      var $150=(($148)|0) < (($149)|0);
      if ($150) { __label__ = 25; break; } else { __label__ = 27; break; }
    case 25: 
      var $152=$1;
      var $153=_LoadString($152);
      var $154=$i;
      var $155=$2;
      var $156=(($155+28)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=(($157+($154<<2))|0);
      HEAP32[(($158)>>2)]=$153;
      __label__ = 26; break;
    case 26: 
      var $160=$i;
      var $161=((($160)+(1))|0);
      $i=$161;
      __label__ = 24; break;
    case 27: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_LoadDebug["X"]=1;

function _LoadBlock($S, $b, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $r;
      $1=$S;
      $2=$b;
      $3=$size;
      var $4=$1;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$2;
      var $8=$3;
      var $9=_luaZ_read($6, $7, $8);
      $r=$9;
      var $10=$r;
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$1;
      _error($13, ((STRING_TABLE.__str5859)|0));
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _LoadNumber($S) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $x=__stackBase__;
  $1=$S;
  var $2=$1;
  var $3=$x;
  _LoadBlock($2, $3, 8);
  var $4=(tempDoubleI32[0]=HEAP32[(($x)>>2)],tempDoubleI32[1]=HEAP32[((($x)+(4))>>2)],tempDoubleF64[0]);
  STACKTOP = __stackBase__;
  return $4;
}


function _luaV_tonumber($obj, $n) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $num=__stackBase__;
      var $i_o;
      $2=$obj;
      $3=$n;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)==3;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$2;
      $1=$9;
      __label__ = 8; break;
    case 4: 
      var $11=$2;
      var $12=(($11+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0)==4;
      if ($14) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $16=$2;
      var $17=(($16)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      var $21=(($20+16)|0);
      var $22=$21;
      var $23=_luaO_str2d($22, $num);
      var $24=(($23)|0)!=0;
      if ($24) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $26=$3;
      $i_o=$26;
      var $27=(tempDoubleI32[0]=HEAP32[(($num)>>2)],tempDoubleI32[1]=HEAP32[((($num)+(4))>>2)],tempDoubleF64[0]);
      var $28=$i_o;
      var $29=(($28)|0);
      var $30=$29;
      (tempDoubleF64[0]=$27,HEAP32[(($30)>>2)]=tempDoubleI32[0],HEAP32[((($30)+(4))>>2)]=tempDoubleI32[1]);
      var $31=$i_o;
      var $32=(($31+8)|0);
      HEAP32[(($32)>>2)]=3;
      var $33=$3;
      $1=$33;
      __label__ = 8; break;
    case 7: 
      $1=0;
      __label__ = 8; break;
    case 8: 
      var $36=$1;
      STACKTOP = __stackBase__;
      return $36;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaV_tostring($L, $obj) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $s=__stackBase__;
      var $n;
      var $i_o;
      $2=$L;
      $3=$obj;
      var $4=$3;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)==3;
      if ($7) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=0;
      __label__ = 5; break;
    case 4: 
      var $10=$3;
      var $11=(($10)|0);
      var $12=$11;
      var $13=(tempDoubleI32[0]=HEAP32[(($12)>>2)],tempDoubleI32[1]=HEAP32[((($12)+(4))>>2)],tempDoubleF64[0]);
      $n=$13;
      var $14=(($s)|0);
      var $15=$n;
      var $16=_sprintf($14, ((STRING_TABLE.__str868)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$15,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),tempInt));
      var $17=$3;
      $i_o=$17;
      var $18=$2;
      var $19=(($s)|0);
      var $20=(($s)|0);
      var $21=_strlen($20);
      var $22=_luaS_newlstr($18, $19, $21);
      var $23=$22;
      var $24=$i_o;
      var $25=(($24)|0);
      var $26=$25;
      HEAP32[(($26)>>2)]=$23;
      var $27=$i_o;
      var $28=(($27+8)|0);
      HEAP32[(($28)>>2)]=4;
      $1=1;
      __label__ = 5; break;
    case 5: 
      var $30=$1;
      STACKTOP = __stackBase__;
      return $30;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaV_gettable($L, $t, $key, $val) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $loop;
      var $tm;
      var $h;
      var $res;
      var $o2;
      var $o1;
      $1=$L;
      $2=$t;
      $3=$key;
      $4=$val;
      $loop=0;
      __label__ = 3; break;
    case 3: 
      var $6=$loop;
      var $7=(($6)|0) < 100;
      if ($7) { __label__ = 4; break; } else { __label__ = 22; break; }
    case 4: 
      var $9=$2;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|0)==5;
      if ($12) { __label__ = 5; break; } else { __label__ = 15; break; }
    case 5: 
      var $14=$2;
      var $15=(($14)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      $h=$18;
      var $19=$h;
      var $20=$3;
      var $21=_luaH_get($19, $20);
      $res=$21;
      var $22=$res;
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|0)==0;
      if ($25) { __label__ = 6; break; } else { __label__ = 13; break; }
    case 6: 
      var $27=$h;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|0)==0;
      if ($30) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $56 = 0;__label__ = 12; break;
    case 8: 
      var $33=$h;
      var $34=(($33+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+6)|0);
      var $37=HEAPU8[($36)];
      var $38=(($37)&255);
      var $39=$38 & 1;
      var $40=(($39)|0)!=0;
      if ($40) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $54 = 0;__label__ = 11; break;
    case 10: 
      var $43=$h;
      var $44=(($43+8)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$1;
      var $47=(($46+16)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+168)|0);
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=_luaT_gettm($45, 0, $51);
      var $54 = $52;__label__ = 11; break;
    case 11: 
      var $54;
      var $56 = $54;__label__ = 12; break;
    case 12: 
      var $56;
      $tm=$56;
      var $57=(($56)|0)==0;
      if ($57) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $59=$res;
      $o2=$59;
      var $60=$4;
      $o1=$60;
      var $61=$o1;
      var $62=(($61)|0);
      var $63=$o2;
      var $64=(($63)|0);
      var $65=$62;
      var $66=$64;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($65)>>2)]=HEAP32[(($66)>>2)];HEAP32[((($65)+(4))>>2)]=HEAP32[((($66)+(4))>>2)];
      var $67=$o2;
      var $68=(($67+8)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$o1;
      var $71=(($70+8)|0);
      HEAP32[(($71)>>2)]=$69;
      __label__ = 23; break;
    case 14: 
      __label__ = 18; break;
    case 15: 
      var $74=$1;
      var $75=$2;
      var $76=_luaT_gettmbyobj($74, $75, 0);
      $tm=$76;
      var $77=(($76+8)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78)|0)==0;
      if ($79) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $81=$1;
      var $82=$2;
      _luaG_typeerror($81, $82, ((STRING_TABLE.__str1869)|0));
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $85=$tm;
      var $86=(($85+8)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87)|0)==6;
      if ($88) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $90=$1;
      var $91=$4;
      var $92=$tm;
      var $93=$2;
      var $94=$3;
      _callTMres($90, $91, $92, $93, $94);
      __label__ = 23; break;
    case 20: 
      var $96=$tm;
      $2=$96;
      __label__ = 21; break;
    case 21: 
      var $98=$loop;
      var $99=((($98)+(1))|0);
      $loop=$99;
      __label__ = 3; break;
    case 22: 
      var $101=$1;
      _luaG_runerror($101, ((STRING_TABLE.__str2870)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 23; break;
    case 23: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaV_gettable["X"]=1;

function _callTMres($L, $res, $f, $p1, $p2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $result;
      var $o2;
      var $o1;
      var $o21;
      var $o12;
      var $o23;
      var $o14;
      var $o25;
      var $o16;
      $1=$L;
      $2=$res;
      $3=$f;
      $4=$p1;
      $5=$p2;
      var $6=$2;
      var $7=$6;
      var $8=$1;
      var $9=(($8+32)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      var $12=$7;
      var $13=$11;
      var $14=((($12)-($13))|0);
      $result=$14;
      var $15=$3;
      $o2=$15;
      var $16=$1;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      $o1=$18;
      var $19=$o1;
      var $20=(($19)|0);
      var $21=$o2;
      var $22=(($21)|0);
      var $23=$20;
      var $24=$22;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];
      var $25=$o2;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$o1;
      var $29=(($28+8)|0);
      HEAP32[(($29)>>2)]=$27;
      var $30=$4;
      $o21=$30;
      var $31=$1;
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+12)|0);
      $o12=$34;
      var $35=$o12;
      var $36=(($35)|0);
      var $37=$o21;
      var $38=(($37)|0);
      var $39=$36;
      var $40=$38;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];
      var $41=$o21;
      var $42=(($41+8)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$o12;
      var $45=(($44+8)|0);
      HEAP32[(($45)>>2)]=$43;
      var $46=$5;
      $o23=$46;
      var $47=$1;
      var $48=(($47+8)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+24)|0);
      $o14=$50;
      var $51=$o14;
      var $52=(($51)|0);
      var $53=$o23;
      var $54=(($53)|0);
      var $55=$52;
      var $56=$54;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($55)>>2)]=HEAP32[(($56)>>2)];HEAP32[((($55)+(4))>>2)]=HEAP32[((($56)+(4))>>2)];
      var $57=$o23;
      var $58=(($57+8)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$o14;
      var $61=(($60+8)|0);
      HEAP32[(($61)>>2)]=$59;
      var $62=$1;
      var $63=(($62+28)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$64;
      var $66=$1;
      var $67=(($66+8)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$68;
      var $70=$65;
      var $71=$69;
      var $72=((($70)-($71))|0);
      var $73=(($72)|0) <= 36;
      if ($73) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $75=$1;
      _luaD_growstack($75, 3);
      __label__ = 5; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $78=$1;
      var $79=(($78+8)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80+36)|0);
      HEAP32[(($79)>>2)]=$81;
      var $82=$1;
      var $83=$1;
      var $84=(($83+8)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=((($85)-(36))|0);
      _luaD_call($82, $86, 1);
      var $87=$1;
      var $88=(($87+32)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$89;
      var $91=$result;
      var $92=(($90+$91)|0);
      var $93=$92;
      $2=$93;
      var $94=$1;
      var $95=(($94+8)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=((($96)-(12))|0);
      HEAP32[(($95)>>2)]=$97;
      var $98=$1;
      var $99=(($98+8)|0);
      var $100=HEAP32[(($99)>>2)];
      $o25=$100;
      var $101=$2;
      $o16=$101;
      var $102=$o16;
      var $103=(($102)|0);
      var $104=$o25;
      var $105=(($104)|0);
      var $106=$103;
      var $107=$105;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($106)>>2)]=HEAP32[(($107)>>2)];HEAP32[((($106)+(4))>>2)]=HEAP32[((($107)+(4))>>2)];
      var $108=$o25;
      var $109=(($108+8)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=$o16;
      var $112=(($111+8)|0);
      HEAP32[(($112)>>2)]=$110;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_callTMres["X"]=1;

function _luaV_settable($L, $t, $key, $val) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $loop;
      var $temp=__stackBase__;
      var $tm;
      var $h;
      var $oldval;
      var $o2;
      var $o1;
      var $o21;
      var $o12;
      $1=$L;
      $2=$t;
      $3=$key;
      $4=$val;
      $loop=0;
      __label__ = 3; break;
    case 3: 
      var $6=$loop;
      var $7=(($6)|0) < 100;
      if ($7) { __label__ = 4; break; } else { __label__ = 26; break; }
    case 4: 
      var $9=$2;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|0)==5;
      if ($12) { __label__ = 5; break; } else { __label__ = 19; break; }
    case 5: 
      var $14=$2;
      var $15=(($14)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      $h=$18;
      var $19=$1;
      var $20=$h;
      var $21=$3;
      var $22=_luaH_set($19, $20, $21);
      $oldval=$22;
      var $23=$oldval;
      var $24=(($23+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|0)==0;
      if ($26) { __label__ = 6; break; } else { __label__ = 13; break; }
    case 6: 
      var $28=$h;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30)|0)==0;
      if ($31) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $57 = 0;__label__ = 12; break;
    case 8: 
      var $34=$h;
      var $35=(($34+8)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+6)|0);
      var $38=HEAPU8[($37)];
      var $39=(($38)&255);
      var $40=$39 & 2;
      var $41=(($40)|0)!=0;
      if ($41) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $55 = 0;__label__ = 11; break;
    case 10: 
      var $44=$h;
      var $45=(($44+8)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$1;
      var $48=(($47+16)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+168)|0);
      var $51=(($50+4)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=_luaT_gettm($46, 1, $52);
      var $55 = $53;__label__ = 11; break;
    case 11: 
      var $55;
      var $57 = $55;__label__ = 12; break;
    case 12: 
      var $57;
      $tm=$57;
      var $58=(($57)|0)==0;
      if ($58) { __label__ = 13; break; } else { __label__ = 18; break; }
    case 13: 
      var $60=$4;
      $o2=$60;
      var $61=$oldval;
      $o1=$61;
      var $62=$o1;
      var $63=(($62)|0);
      var $64=$o2;
      var $65=(($64)|0);
      var $66=$63;
      var $67=$65;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($67)+(4))>>2)];
      var $68=$o2;
      var $69=(($68+8)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$o1;
      var $72=(($71+8)|0);
      HEAP32[(($72)>>2)]=$70;
      var $73=$h;
      var $74=(($73+6)|0);
      HEAP8[($74)]=0;
      var $75=$4;
      var $76=(($75+8)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77)|0) >= 4;
      if ($78) { __label__ = 14; break; } else { __label__ = 17; break; }
    case 14: 
      var $80=$4;
      var $81=(($80)|0);
      var $82=$81;
      var $83=HEAP32[(($82)>>2)];
      var $84=$83;
      var $85=(($84+5)|0);
      var $86=HEAPU8[($85)];
      var $87=(($86)&255);
      var $88=$87 & 3;
      var $89=(($88)|0)!=0;
      if ($89) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: 
      var $91=$h;
      var $92=$91;
      var $93=$92;
      var $94=(($93+5)|0);
      var $95=HEAPU8[($94)];
      var $96=(($95)&255);
      var $97=$96 & 4;
      var $98=(($97)|0)!=0;
      if ($98) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $100=$1;
      var $101=$h;
      _luaC_barrierback($100, $101);
      __label__ = 17; break;
    case 17: 
      __label__ = 27; break;
    case 18: 
      __label__ = 22; break;
    case 19: 
      var $105=$1;
      var $106=$2;
      var $107=_luaT_gettmbyobj($105, $106, 1);
      $tm=$107;
      var $108=(($107+8)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109)|0)==0;
      if ($110) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $112=$1;
      var $113=$2;
      _luaG_typeerror($112, $113, ((STRING_TABLE.__str1869)|0));
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $116=$tm;
      var $117=(($116+8)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=(($118)|0)==6;
      if ($119) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $121=$1;
      var $122=$tm;
      var $123=$2;
      var $124=$3;
      var $125=$4;
      _callTM($121, $122, $123, $124, $125);
      __label__ = 27; break;
    case 24: 
      var $127=$tm;
      $o21=$127;
      $o12=$temp;
      var $128=$o12;
      var $129=(($128)|0);
      var $130=$o21;
      var $131=(($130)|0);
      var $132=$129;
      var $133=$131;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($132)>>2)]=HEAP32[(($133)>>2)];HEAP32[((($132)+(4))>>2)]=HEAP32[((($133)+(4))>>2)];
      var $134=$o21;
      var $135=(($134+8)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=$o12;
      var $138=(($137+8)|0);
      HEAP32[(($138)>>2)]=$136;
      $2=$temp;
      __label__ = 25; break;
    case 25: 
      var $140=$loop;
      var $141=((($140)+(1))|0);
      $loop=$141;
      __label__ = 3; break;
    case 26: 
      var $143=$1;
      _luaG_runerror($143, ((STRING_TABLE.__str3871)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 27; break;
    case 27: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaV_settable["X"]=1;

function _callTM($L, $f, $p1, $p2, $p3) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $o2;
      var $o1;
      var $o21;
      var $o12;
      var $o23;
      var $o14;
      var $o25;
      var $o16;
      $1=$L;
      $2=$f;
      $3=$p1;
      $4=$p2;
      $5=$p3;
      var $6=$2;
      $o2=$6;
      var $7=$1;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      $o1=$9;
      var $10=$o1;
      var $11=(($10)|0);
      var $12=$o2;
      var $13=(($12)|0);
      var $14=$11;
      var $15=$13;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];
      var $16=$o2;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$o1;
      var $20=(($19+8)|0);
      HEAP32[(($20)>>2)]=$18;
      var $21=$3;
      $o21=$21;
      var $22=$1;
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+12)|0);
      $o12=$25;
      var $26=$o12;
      var $27=(($26)|0);
      var $28=$o21;
      var $29=(($28)|0);
      var $30=$27;
      var $31=$29;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];
      var $32=$o21;
      var $33=(($32+8)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$o12;
      var $36=(($35+8)|0);
      HEAP32[(($36)>>2)]=$34;
      var $37=$4;
      $o23=$37;
      var $38=$1;
      var $39=(($38+8)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+24)|0);
      $o14=$41;
      var $42=$o14;
      var $43=(($42)|0);
      var $44=$o23;
      var $45=(($44)|0);
      var $46=$43;
      var $47=$45;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];
      var $48=$o23;
      var $49=(($48+8)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$o14;
      var $52=(($51+8)|0);
      HEAP32[(($52)>>2)]=$50;
      var $53=$5;
      $o25=$53;
      var $54=$1;
      var $55=(($54+8)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+36)|0);
      $o16=$57;
      var $58=$o16;
      var $59=(($58)|0);
      var $60=$o25;
      var $61=(($60)|0);
      var $62=$59;
      var $63=$61;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($62)>>2)]=HEAP32[(($63)>>2)];HEAP32[((($62)+(4))>>2)]=HEAP32[((($63)+(4))>>2)];
      var $64=$o25;
      var $65=(($64+8)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$o16;
      var $68=(($67+8)|0);
      HEAP32[(($68)>>2)]=$66;
      var $69=$1;
      var $70=(($69+28)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$71;
      var $73=$1;
      var $74=(($73+8)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$75;
      var $77=$72;
      var $78=$76;
      var $79=((($77)-($78))|0);
      var $80=(($79)|0) <= 48;
      if ($80) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $82=$1;
      _luaD_growstack($82, 4);
      __label__ = 5; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $85=$1;
      var $86=(($85+8)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+48)|0);
      HEAP32[(($86)>>2)]=$88;
      var $89=$1;
      var $90=$1;
      var $91=(($90+8)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=((($92)-(48))|0);
      _luaD_call($89, $93, 0);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_callTM["X"]=1;

function _luaV_lessthan($L, $l, $r) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $res;
      $2=$L;
      $3=$l;
      $4=$r;
      var $5=$3;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$4;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($7)|0)!=(($10)|0);
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$2;
      var $14=$3;
      var $15=$4;
      var $16=_luaG_ordererror($13, $14, $15);
      $1=$16;
      __label__ = 14; break;
    case 4: 
      var $18=$3;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|0)==3;
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $23=$3;
      var $24=(($23)|0);
      var $25=$24;
      var $26=(tempDoubleI32[0]=HEAP32[(($25)>>2)],tempDoubleI32[1]=HEAP32[((($25)+(4))>>2)],tempDoubleF64[0]);
      var $27=$4;
      var $28=(($27)|0);
      var $29=$28;
      var $30=(tempDoubleI32[0]=HEAP32[(($29)>>2)],tempDoubleI32[1]=HEAP32[((($29)+(4))>>2)],tempDoubleF64[0]);
      var $31=$26 < $30;
      var $32=(($31)&1);
      $1=$32;
      __label__ = 14; break;
    case 6: 
      var $34=$3;
      var $35=(($34+8)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|0)==4;
      if ($37) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $39=$3;
      var $40=(($39)|0);
      var $41=$40;
      var $42=HEAP32[(($41)>>2)];
      var $43=$42;
      var $44=$4;
      var $45=(($44)|0);
      var $46=$45;
      var $47=HEAP32[(($46)>>2)];
      var $48=$47;
      var $49=_l_strcmp($43, $48);
      var $50=(($49)|0) < 0;
      var $51=(($50)&1);
      $1=$51;
      __label__ = 14; break;
    case 8: 
      var $53=$2;
      var $54=$3;
      var $55=$4;
      var $56=_call_orderTM($53, $54, $55, 13);
      $res=$56;
      var $57=(($56)|0)!=-1;
      if ($57) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $59=$res;
      $1=$59;
      __label__ = 14; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $64=$2;
      var $65=$3;
      var $66=$4;
      var $67=_luaG_ordererror($64, $65, $66);
      $1=$67;
      __label__ = 14; break;
    case 14: 
      var $69=$1;
      ;
      return $69;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaV_lessthan["X"]=1;

function _l_strcmp($ls, $rs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $l;
      var $ll;
      var $r;
      var $lr;
      var $temp;
      var $len;
      $2=$ls;
      $3=$rs;
      var $4=$2;
      var $5=(($4+16)|0);
      var $6=$5;
      $l=$6;
      var $7=$2;
      var $8=$7;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      $ll=$10;
      var $11=$3;
      var $12=(($11+16)|0);
      var $13=$12;
      $r=$13;
      var $14=$3;
      var $15=$14;
      var $16=(($15+12)|0);
      var $17=HEAP32[(($16)>>2)];
      $lr=$17;
      __label__ = 3; break;
    case 3: 
      var $19=$l;
      var $20=$r;
      var $21=_strcoll($19, $20);
      $temp=$21;
      var $22=$temp;
      var $23=(($22)|0)!=0;
      if ($23) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $25=$temp;
      $1=$25;
      __label__ = 12; break;
    case 5: 
      var $27=$l;
      var $28=_strlen($27);
      $len=$28;
      var $29=$len;
      var $30=$lr;
      var $31=(($29)|0)==(($30)|0);
      if ($31) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $33=$len;
      var $34=$ll;
      var $35=(($33)|0)==(($34)|0);
      var $36=$35 ? 0 : 1;
      $1=$36;
      __label__ = 12; break;
    case 7: 
      var $38=$len;
      var $39=$ll;
      var $40=(($38)|0)==(($39)|0);
      if ($40) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $1=-1;
      __label__ = 12; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $44=$len;
      var $45=((($44)+(1))|0);
      $len=$45;
      var $46=$len;
      var $47=$l;
      var $48=(($47+$46)|0);
      $l=$48;
      var $49=$len;
      var $50=$ll;
      var $51=((($50)-($49))|0);
      $ll=$51;
      var $52=$len;
      var $53=$r;
      var $54=(($53+$52)|0);
      $r=$54;
      var $55=$len;
      var $56=$lr;
      var $57=((($56)-($55))|0);
      $lr=$57;
      __label__ = 11; break;
    case 11: 
      __label__ = 3; break;
    case 12: 
      var $60=$1;
      ;
      return $60;
    default: assert(0, "bad label: " + __label__);
  }
}
_l_strcmp["X"]=1;

function _call_orderTM($L, $p1, $p2, $event) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $tm1;
      var $tm2;
      $2=$L;
      $3=$p1;
      $4=$p2;
      $5=$event;
      var $6=$2;
      var $7=$3;
      var $8=$5;
      var $9=_luaT_gettmbyobj($6, $7, $8);
      $tm1=$9;
      var $10=$tm1;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|0)==0;
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=-1;
      __label__ = 11; break;
    case 4: 
      var $16=$2;
      var $17=$4;
      var $18=$5;
      var $19=_luaT_gettmbyobj($16, $17, $18);
      $tm2=$19;
      var $20=$tm1;
      var $21=$tm2;
      var $22=_luaO_rawequalObj($20, $21);
      var $23=(($22)|0)!=0;
      if ($23) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      $1=-1;
      __label__ = 11; break;
    case 6: 
      var $26=$2;
      var $27=$2;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$tm1;
      var $31=$3;
      var $32=$4;
      _callTMres($26, $29, $30, $31, $32);
      var $33=$2;
      var $34=(($33+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+8)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|0)==0;
      if ($38) { var $57 = 1;__label__ = 10; break; } else { __label__ = 7; break; }
    case 7: 
      var $40=$2;
      var $41=(($40+8)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+8)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44)|0)==1;
      if ($45) { __label__ = 8; break; } else { var $55 = 0;__label__ = 9; break; }
    case 8: 
      var $47=$2;
      var $48=(($47+8)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49)|0);
      var $51=$50;
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52)|0)==0;
      var $55 = $53;__label__ = 9; break;
    case 9: 
      var $55;
      var $57 = $55;__label__ = 10; break;
    case 10: 
      var $57;
      var $58=$57 ^ 1;
      var $59=(($58)&1);
      $1=$59;
      __label__ = 11; break;
    case 11: 
      var $61=$1;
      ;
      return $61;
    default: assert(0, "bad label: " + __label__);
  }
}
_call_orderTM["X"]=1;

function _luaV_equalval($L, $t1, $t2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $tm;
      $2=$L;
      $3=$t1;
      $4=$t2;
      var $5=$3;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      if ((($7)|0) == 0) {
        __label__ = 3; break;
      }
      else if ((($7)|0) == 3) {
        __label__ = 4; break;
      }
      else if ((($7)|0) == 1) {
        __label__ = 5; break;
      }
      else if ((($7)|0) == 2) {
        __label__ = 6; break;
      }
      else if ((($7)|0) == 7) {
        __label__ = 7; break;
      }
      else if ((($7)|0) == 5) {
        __label__ = 10; break;
      }
      else {
      __label__ = 13; break;
      }
      
    case 3: 
      $1=1;
      __label__ = 21; break;
    case 4: 
      var $10=$3;
      var $11=(($10)|0);
      var $12=$11;
      var $13=(tempDoubleI32[0]=HEAP32[(($12)>>2)],tempDoubleI32[1]=HEAP32[((($12)+(4))>>2)],tempDoubleF64[0]);
      var $14=$4;
      var $15=(($14)|0);
      var $16=$15;
      var $17=(tempDoubleI32[0]=HEAP32[(($16)>>2)],tempDoubleI32[1]=HEAP32[((($16)+(4))>>2)],tempDoubleF64[0]);
      var $18=$13 == $17;
      var $19=(($18)&1);
      $1=$19;
      __label__ = 21; break;
    case 5: 
      var $21=$3;
      var $22=(($21)|0);
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      var $25=$4;
      var $26=(($25)|0);
      var $27=$26;
      var $28=HEAP32[(($27)>>2)];
      var $29=(($24)|0)==(($28)|0);
      var $30=(($29)&1);
      $1=$30;
      __label__ = 21; break;
    case 6: 
      var $32=$3;
      var $33=(($32)|0);
      var $34=$33;
      var $35=HEAP32[(($34)>>2)];
      var $36=$4;
      var $37=(($36)|0);
      var $38=$37;
      var $39=HEAP32[(($38)>>2)];
      var $40=(($35)|0)==(($39)|0);
      var $41=(($40)&1);
      $1=$41;
      __label__ = 21; break;
    case 7: 
      var $43=$3;
      var $44=(($43)|0);
      var $45=$44;
      var $46=HEAP32[(($45)>>2)];
      var $47=$46;
      var $48=$47;
      var $49=$4;
      var $50=(($49)|0);
      var $51=$50;
      var $52=HEAP32[(($51)>>2)];
      var $53=$52;
      var $54=$53;
      var $55=(($48)|0)==(($54)|0);
      if ($55) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $1=1;
      __label__ = 21; break;
    case 9: 
      var $58=$2;
      var $59=$3;
      var $60=(($59)|0);
      var $61=$60;
      var $62=HEAP32[(($61)>>2)];
      var $63=$62;
      var $64=$63;
      var $65=(($64+8)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$4;
      var $68=(($67)|0);
      var $69=$68;
      var $70=HEAP32[(($69)>>2)];
      var $71=$70;
      var $72=$71;
      var $73=(($72+8)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=_get_compTM($58, $66, $74, 4);
      $tm=$75;
      __label__ = 14; break;
    case 10: 
      var $77=$3;
      var $78=(($77)|0);
      var $79=$78;
      var $80=HEAP32[(($79)>>2)];
      var $81=$80;
      var $82=$4;
      var $83=(($82)|0);
      var $84=$83;
      var $85=HEAP32[(($84)>>2)];
      var $86=$85;
      var $87=(($81)|0)==(($86)|0);
      if ($87) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      $1=1;
      __label__ = 21; break;
    case 12: 
      var $90=$2;
      var $91=$3;
      var $92=(($91)|0);
      var $93=$92;
      var $94=HEAP32[(($93)>>2)];
      var $95=$94;
      var $96=(($95+8)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$4;
      var $99=(($98)|0);
      var $100=$99;
      var $101=HEAP32[(($100)>>2)];
      var $102=$101;
      var $103=(($102+8)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=_get_compTM($90, $97, $104, 4);
      $tm=$105;
      __label__ = 14; break;
    case 13: 
      var $107=$3;
      var $108=(($107)|0);
      var $109=$108;
      var $110=HEAP32[(($109)>>2)];
      var $111=$4;
      var $112=(($111)|0);
      var $113=$112;
      var $114=HEAP32[(($113)>>2)];
      var $115=(($110)|0)==(($114)|0);
      var $116=(($115)&1);
      $1=$116;
      __label__ = 21; break;
    case 14: 
      var $118=$tm;
      var $119=(($118)|0)==0;
      if ($119) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      $1=0;
      __label__ = 21; break;
    case 16: 
      var $122=$2;
      var $123=$2;
      var $124=(($123+8)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=$tm;
      var $127=$3;
      var $128=$4;
      _callTMres($122, $125, $126, $127, $128);
      var $129=$2;
      var $130=(($129+8)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=(($131+8)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=(($133)|0)==0;
      if ($134) { var $153 = 1;__label__ = 20; break; } else { __label__ = 17; break; }
    case 17: 
      var $136=$2;
      var $137=(($136+8)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($138+8)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=(($140)|0)==1;
      if ($141) { __label__ = 18; break; } else { var $151 = 0;__label__ = 19; break; }
    case 18: 
      var $143=$2;
      var $144=(($143+8)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=(($145)|0);
      var $147=$146;
      var $148=HEAP32[(($147)>>2)];
      var $149=(($148)|0)==0;
      var $151 = $149;__label__ = 19; break;
    case 19: 
      var $151;
      var $153 = $151;__label__ = 20; break;
    case 20: 
      var $153;
      var $154=$153 ^ 1;
      var $155=(($154)&1);
      $1=$155;
      __label__ = 21; break;
    case 21: 
      var $157=$1;
      ;
      return $157;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaV_equalval["X"]=1;

function _get_compTM($L, $mt1, $mt2, $event) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $tm1;
      var $tm2;
      $2=$L;
      $3=$mt1;
      $4=$mt2;
      $5=$event;
      var $6=$3;
      var $7=(($6)|0)==0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $33 = 0;__label__ = 8; break;
    case 4: 
      var $10=$3;
      var $11=(($10+6)|0);
      var $12=HEAPU8[($11)];
      var $13=(($12)&255);
      var $14=$5;
      var $15=1 << $14;
      var $16=$13 & $15;
      var $17=(($16)|0)!=0;
      if ($17) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $31 = 0;__label__ = 7; break;
    case 6: 
      var $20=$3;
      var $21=$5;
      var $22=$5;
      var $23=$2;
      var $24=(($23+16)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+168)|0);
      var $27=(($26+($22<<2))|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=_luaT_gettm($20, $21, $28);
      var $31 = $29;__label__ = 7; break;
    case 7: 
      var $31;
      var $33 = $31;__label__ = 8; break;
    case 8: 
      var $33;
      $tm1=$33;
      var $34=$tm1;
      var $35=(($34)|0)==0;
      if ($35) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $1=0;
      __label__ = 23; break;
    case 10: 
      var $38=$3;
      var $39=$4;
      var $40=(($38)|0)==(($39)|0);
      if ($40) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $42=$tm1;
      $1=$42;
      __label__ = 23; break;
    case 12: 
      var $44=$4;
      var $45=(($44)|0)==0;
      if ($45) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $71 = 0;__label__ = 18; break;
    case 14: 
      var $48=$4;
      var $49=(($48+6)|0);
      var $50=HEAPU8[($49)];
      var $51=(($50)&255);
      var $52=$5;
      var $53=1 << $52;
      var $54=$51 & $53;
      var $55=(($54)|0)!=0;
      if ($55) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $69 = 0;__label__ = 17; break;
    case 16: 
      var $58=$4;
      var $59=$5;
      var $60=$5;
      var $61=$2;
      var $62=(($61+16)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+168)|0);
      var $65=(($64+($60<<2))|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=_luaT_gettm($58, $59, $66);
      var $69 = $67;__label__ = 17; break;
    case 17: 
      var $69;
      var $71 = $69;__label__ = 18; break;
    case 18: 
      var $71;
      $tm2=$71;
      var $72=$tm2;
      var $73=(($72)|0)==0;
      if ($73) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      $1=0;
      __label__ = 23; break;
    case 20: 
      var $76=$tm1;
      var $77=$tm2;
      var $78=_luaO_rawequalObj($76, $77);
      var $79=(($78)|0)!=0;
      if ($79) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $81=$tm1;
      $1=$81;
      __label__ = 23; break;
    case 22: 
      $1=0;
      __label__ = 23; break;
    case 23: 
      var $84=$1;
      ;
      return $84;
    default: assert(0, "bad label: " + __label__);
  }
}
_get_compTM["X"]=1;

function _luaV_concat($L, $total, $last) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $top;
      var $n;
      var $tl;
      var $buffer;
      var $i;
      var $l;
      var $l1;
      var $i_o;
      $1=$L;
      $2=$total;
      $3=$last;
      __label__ = 3; break;
    case 3: 
      var $5=$1;
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$3;
      var $9=(($7+($8)*(12))|0);
      var $10=(($9+12)|0);
      $top=$10;
      $n=2;
      var $11=$top;
      var $12=((($11)-(24))|0);
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0)==4;
      if ($15) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $17=$top;
      var $18=((($17)-(24))|0);
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|0)==3;
      if ($21) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $23=$top;
      var $24=((($23)-(12))|0);
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|0)==4;
      if ($27) { __label__ = 10; break; } else { __label__ = 6; break; }
    case 6: 
      var $29=$1;
      var $30=$top;
      var $31=((($30)-(12))|0);
      var $32=_luaV_tostring($29, $31);
      var $33=(($32)|0)!=0;
      if ($33) { __label__ = 10; break; } else { __label__ = 7; break; }
    case 7: 
      var $35=$1;
      var $36=$top;
      var $37=((($36)-(24))|0);
      var $38=$top;
      var $39=((($38)-(12))|0);
      var $40=$top;
      var $41=((($40)-(24))|0);
      var $42=_call_binTM($35, $37, $39, $41, 15);
      var $43=(($42)|0)!=0;
      if ($43) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $45=$1;
      var $46=$top;
      var $47=((($46)-(24))|0);
      var $48=$top;
      var $49=((($48)-(12))|0);
      _luaG_concaterror($45, $47, $49);
      __label__ = 9; break;
    case 9: 
      __label__ = 30; break;
    case 10: 
      var $52=$top;
      var $53=((($52)-(12))|0);
      var $54=(($53)|0);
      var $55=$54;
      var $56=HEAP32[(($55)>>2)];
      var $57=$56;
      var $58=$57;
      var $59=(($58+12)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60)|0)==0;
      if ($61) { __label__ = 11; break; } else { __label__ = 14; break; }
    case 11: 
      var $63=$top;
      var $64=((($63)-(24))|0);
      var $65=(($64+8)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66)|0)==4;
      if ($67) { var $75 = 1;__label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $69=$1;
      var $70=$top;
      var $71=((($70)-(24))|0);
      var $72=_luaV_tostring($69, $71);
      var $73=(($72)|0)!=0;
      var $75 = $73;__label__ = 13; break;
    case 13: 
      var $75;
      var $76=(($75)&1);
      __label__ = 29; break;
    case 14: 
      var $78=$top;
      var $79=((($78)-(12))|0);
      var $80=(($79)|0);
      var $81=$80;
      var $82=HEAP32[(($81)>>2)];
      var $83=$82;
      var $84=$83;
      var $85=(($84+12)|0);
      var $86=HEAP32[(($85)>>2)];
      $tl=$86;
      $n=1;
      __label__ = 15; break;
    case 15: 
      var $88=$n;
      var $89=$2;
      var $90=(($88)|0) < (($89)|0);
      if ($90) { __label__ = 16; break; } else { var $112 = 0;__label__ = 19; break; }
    case 16: 
      var $92=$top;
      var $93=$n;
      var $94=(((-$93))|0);
      var $95=(($92+($94)*(12))|0);
      var $96=((($95)-(12))|0);
      var $97=(($96+8)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($98)|0)==4;
      if ($99) { var $110 = 1;__label__ = 18; break; } else { __label__ = 17; break; }
    case 17: 
      var $101=$1;
      var $102=$top;
      var $103=$n;
      var $104=(((-$103))|0);
      var $105=(($102+($104)*(12))|0);
      var $106=((($105)-(12))|0);
      var $107=_luaV_tostring($101, $106);
      var $108=(($107)|0)!=0;
      var $110 = $108;__label__ = 18; break;
    case 18: 
      var $110;
      var $112 = $110;__label__ = 19; break;
    case 19: 
      var $112;
      if ($112) { __label__ = 20; break; } else { __label__ = 24; break; }
    case 20: 
      var $114=$top;
      var $115=$n;
      var $116=(((-$115))|0);
      var $117=(($114+($116)*(12))|0);
      var $118=((($117)-(12))|0);
      var $119=(($118)|0);
      var $120=$119;
      var $121=HEAP32[(($120)>>2)];
      var $122=$121;
      var $123=$122;
      var $124=(($123+12)|0);
      var $125=HEAP32[(($124)>>2)];
      $l=$125;
      var $126=$l;
      var $127=$tl;
      var $128=(((-3)-($127))|0);
      var $129=(($126)>>>0) >= (($128)>>>0);
      if ($129) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $131=$1;
      _luaG_runerror($131, ((STRING_TABLE.__str4872)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 22; break;
    case 22: 
      var $133=$l;
      var $134=$tl;
      var $135=((($134)+($133))|0);
      $tl=$135;
      __label__ = 23; break;
    case 23: 
      var $137=$n;
      var $138=((($137)+(1))|0);
      $n=$138;
      __label__ = 15; break;
    case 24: 
      var $140=$1;
      var $141=$1;
      var $142=(($141+16)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=(($143+52)|0);
      var $145=$tl;
      var $146=_luaZ_openspace($140, $144, $145);
      $buffer=$146;
      $tl=0;
      var $147=$n;
      $i=$147;
      __label__ = 25; break;
    case 25: 
      var $149=$i;
      var $150=(($149)|0) > 0;
      if ($150) { __label__ = 26; break; } else { __label__ = 28; break; }
    case 26: 
      var $152=$top;
      var $153=$i;
      var $154=(((-$153))|0);
      var $155=(($152+($154)*(12))|0);
      var $156=(($155)|0);
      var $157=$156;
      var $158=HEAP32[(($157)>>2)];
      var $159=$158;
      var $160=$159;
      var $161=(($160+12)|0);
      var $162=HEAP32[(($161)>>2)];
      $l1=$162;
      var $163=$buffer;
      var $164=$tl;
      var $165=(($163+$164)|0);
      var $166=$top;
      var $167=$i;
      var $168=(((-$167))|0);
      var $169=(($166+($168)*(12))|0);
      var $170=(($169)|0);
      var $171=$170;
      var $172=HEAP32[(($171)>>2)];
      var $173=$172;
      var $174=(($173+16)|0);
      var $175=$174;
      var $176=$l1;
      assert($176 % 1 === 0, 'memcpy given ' + $176 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($165, $175, $176, 1);
      var $177=$l1;
      var $178=$tl;
      var $179=((($178)+($177))|0);
      $tl=$179;
      __label__ = 27; break;
    case 27: 
      var $181=$i;
      var $182=((($181)-(1))|0);
      $i=$182;
      __label__ = 25; break;
    case 28: 
      var $184=$top;
      var $185=$n;
      var $186=(((-$185))|0);
      var $187=(($184+($186)*(12))|0);
      $i_o=$187;
      var $188=$1;
      var $189=$buffer;
      var $190=$tl;
      var $191=_luaS_newlstr($188, $189, $190);
      var $192=$191;
      var $193=$i_o;
      var $194=(($193)|0);
      var $195=$194;
      HEAP32[(($195)>>2)]=$192;
      var $196=$i_o;
      var $197=(($196+8)|0);
      HEAP32[(($197)>>2)]=4;
      __label__ = 29; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      var $200=$n;
      var $201=((($200)-(1))|0);
      var $202=$2;
      var $203=((($202)-($201))|0);
      $2=$203;
      var $204=$n;
      var $205=((($204)-(1))|0);
      var $206=$3;
      var $207=((($206)-($205))|0);
      $3=$207;
      __label__ = 31; break;
    case 31: 
      var $209=$2;
      var $210=(($209)|0) > 1;
      if ($210) { __label__ = 3; break; } else { __label__ = 32; break; }
    case 32: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaV_concat["X"]=1;

function _call_binTM($L, $p1, $p2, $res, $event) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $tm;
      $2=$L;
      $3=$p1;
      $4=$p2;
      $5=$res;
      $6=$event;
      var $7=$2;
      var $8=$3;
      var $9=$6;
      var $10=_luaT_gettmbyobj($7, $8, $9);
      $tm=$10;
      var $11=$tm;
      var $12=(($11+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0)==0;
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $16=$2;
      var $17=$4;
      var $18=$6;
      var $19=_luaT_gettmbyobj($16, $17, $18);
      $tm=$19;
      __label__ = 4; break;
    case 4: 
      var $21=$tm;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|0)==0;
      if ($24) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=0;
      __label__ = 7; break;
    case 6: 
      var $27=$2;
      var $28=$5;
      var $29=$tm;
      var $30=$3;
      var $31=$4;
      _callTMres($27, $28, $29, $30, $31);
      $1=1;
      __label__ = 7; break;
    case 7: 
      var $33=$1;
      ;
      return $33;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaV_execute($L, $nexeccalls) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $cl;
      var $base;
      var $k;
      var $pc;
      var $i;
      var $ra;
      var $o2;
      var $o1;
      var $o21;
      var $o12;
      var $i_o;
      var $rb;
      var $b;
      var $o23;
      var $o14;
      var $g=__stackBase__;
      var $rb5;
      var $i_o6;
      var $g7=(__stackBase__)+(12);
      var $i_o8;
      var $uv;
      var $o29;
      var $o110;
      var $b11;
      var $c;
      var $i_o12;
      var $rb13;
      var $o214;
      var $o115;
      var $rb16;
      var $rc;
      var $nb;
      var $nc;
      var $i_o17;
      var $rb18;
      var $rc19;
      var $nb20;
      var $nc21;
      var $i_o22;
      var $rb23;
      var $rc24;
      var $nb25;
      var $nc26;
      var $i_o27;
      var $rb28;
      var $rc29;
      var $nb30;
      var $nc31;
      var $i_o32;
      var $rb33;
      var $rc34;
      var $nb35;
      var $nc36;
      var $i_o37;
      var $rb38;
      var $rc39;
      var $nb40;
      var $nc41;
      var $i_o42;
      var $rb43;
      var $nb44;
      var $i_o45;
      var $res;
      var $i_o46;
      var $rb47;
      var $i_o48;
      var $i_o49;
      var $b50;
      var $c51;
      var $o252;
      var $o153;
      var $rb54;
      var $rc55;
      var $rb56;
      var $o257;
      var $o158;
      var $b59;
      var $nresults;
      var $b60;
      var $ci;
      var $aux;
      var $func;
      var $pfunc;
      var $o261;
      var $o162;
      var $b63;
      var $step;
      var $idx;
      var $limit;
      var $i_o64;
      var $i_o65;
      var $init;
      var $plimit;
      var $pstep;
      var $i_o66;
      var $cb;
      var $o267;
      var $o168;
      var $o269;
      var $o170;
      var $o271;
      var $o172;
      var $o273;
      var $o174;
      var $n;
      var $c75;
      var $last;
      var $h;
      var $val;
      var $o276;
      var $o177;
      var $p;
      var $ncl;
      var $nup;
      var $j;
      var $i_o78;
      var $b79;
      var $j80;
      var $ci81;
      var $n82;
      var $o283;
      var $o184;
      $1=$L;
      $2=$nexeccalls;
      __label__ = 3; break;
    case 3: 
      var $4=$1;
      var $5=(($4+24)|0);
      var $6=HEAP32[(($5)>>2)];
      $pc=$6;
      var $7=$1;
      var $8=(($7+20)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      var $16=$15;
      $cl=$16;
      var $17=$1;
      var $18=(($17+12)|0);
      var $19=HEAP32[(($18)>>2)];
      $base=$19;
      var $20=$cl;
      var $21=(($20+16)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      $k=$24;
      __label__ = 4; break;
    case 4: 
      var $26=$pc;
      var $27=(($26+4)|0);
      $pc=$27;
      var $28=HEAP32[(($26)>>2)];
      $i=$28;
      var $29=$1;
      var $30=(($29+56)|0);
      var $31=HEAPU8[($30)];
      var $32=(($31)&255);
      var $33=$32 & 12;
      var $34=(($33)|0)!=0;
      if ($34) { __label__ = 5; break; } else { __label__ = 10; break; }
    case 5: 
      var $36=$1;
      var $37=(($36+64)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=((($38)-(1))|0);
      HEAP32[(($37)>>2)]=$39;
      var $40=(($39)|0)==0;
      if ($40) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $42=$1;
      var $43=(($42+56)|0);
      var $44=HEAPU8[($43)];
      var $45=(($44)&255);
      var $46=$45 & 4;
      var $47=(($46)|0)!=0;
      if ($47) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $49=$1;
      var $50=$pc;
      _traceexec($49, $50);
      var $51=$1;
      var $52=(($51+6)|0);
      var $53=HEAPU8[($52)];
      var $54=(($53)&255);
      var $55=(($54)|0)==1;
      if ($55) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $57=$pc;
      var $58=((($57)-(4))|0);
      var $59=$1;
      var $60=(($59+24)|0);
      HEAP32[(($60)>>2)]=$58;
      __label__ = 266; break;
    case 9: 
      var $62=$1;
      var $63=(($62+12)|0);
      var $64=HEAP32[(($63)>>2)];
      $base=$64;
      __label__ = 10; break;
    case 10: 
      var $66=$base;
      var $67=$i;
      var $68=$67 >>> 6;
      var $69=$68 & 255;
      var $70=(($66+($69)*(12))|0);
      $ra=$70;
      var $71=$i;
      var $72=$71 >>> 0;
      var $73=$72 & 63;
      if ((($73)|0) == 0) {
        __label__ = 11; break;
      }
      else if ((($73)|0) == 1) {
        __label__ = 12; break;
      }
      else if ((($73)|0) == 2) {
        __label__ = 13; break;
      }
      else if ((($73)|0) == 3) {
        __label__ = 16; break;
      }
      else if ((($73)|0) == 4) {
        __label__ = 20; break;
      }
      else if ((($73)|0) == 5) {
        __label__ = 21; break;
      }
      else if ((($73)|0) == 6) {
        __label__ = 22; break;
      }
      else if ((($73)|0) == 7) {
        __label__ = 26; break;
      }
      else if ((($73)|0) == 8) {
        __label__ = 27; break;
      }
      else if ((($73)|0) == 9) {
        __label__ = 32; break;
      }
      else if ((($73)|0) == 10) {
        __label__ = 39; break;
      }
      else if ((($73)|0) == 11) {
        __label__ = 42; break;
      }
      else if ((($73)|0) == 12) {
        __label__ = 46; break;
      }
      else if ((($73)|0) == 13) {
        __label__ = 57; break;
      }
      else if ((($73)|0) == 14) {
        __label__ = 68; break;
      }
      else if ((($73)|0) == 15) {
        __label__ = 79; break;
      }
      else if ((($73)|0) == 16) {
        __label__ = 90; break;
      }
      else if ((($73)|0) == 17) {
        __label__ = 101; break;
      }
      else if ((($73)|0) == 18) {
        __label__ = 112; break;
      }
      else if ((($73)|0) == 19) {
        __label__ = 116; break;
      }
      else if ((($73)|0) == 20) {
        __label__ = 121; break;
      }
      else if ((($73)|0) == 21) {
        __label__ = 128; break;
      }
      else if ((($73)|0) == 22) {
        __label__ = 131; break;
      }
      else if ((($73)|0) == 23) {
        __label__ = 132; break;
      }
      else if ((($73)|0) == 24) {
        __label__ = 143; break;
      }
      else if ((($73)|0) == 25) {
        __label__ = 152; break;
      }
      else if ((($73)|0) == 26) {
        __label__ = 161; break;
      }
      else if ((($73)|0) == 27) {
        __label__ = 168; break;
      }
      else if ((($73)|0) == 28) {
        __label__ = 175; break;
      }
      else if ((($73)|0) == 29) {
        __label__ = 183; break;
      }
      else if ((($73)|0) == 30) {
        __label__ = 195; break;
      }
      else if ((($73)|0) == 31) {
        __label__ = 204; break;
      }
      else if ((($73)|0) == 32) {
        __label__ = 209; break;
      }
      else if ((($73)|0) == 33) {
        __label__ = 221; break;
      }
      else if ((($73)|0) == 34) {
        __label__ = 224; break;
      }
      else if ((($73)|0) == 35) {
        __label__ = 241; break;
      }
      else if ((($73)|0) == 36) {
        __label__ = 242; break;
      }
      else if ((($73)|0) == 37) {
        __label__ = 252; break;
      }
      else {
      __label__ = 265; break;
      }
      
    case 11: 
      var $75=$base;
      var $76=$i;
      var $77=$76 >>> 23;
      var $78=$77 & 511;
      var $79=(($75+($78)*(12))|0);
      $o2=$79;
      var $80=$ra;
      $o1=$80;
      var $81=$o1;
      var $82=(($81)|0);
      var $83=$o2;
      var $84=(($83)|0);
      var $85=$82;
      var $86=$84;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($85)>>2)]=HEAP32[(($86)>>2)];HEAP32[((($85)+(4))>>2)]=HEAP32[((($86)+(4))>>2)];
      var $87=$o2;
      var $88=(($87+8)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$o1;
      var $91=(($90+8)|0);
      HEAP32[(($91)>>2)]=$89;
      __label__ = 4; break;
    case 12: 
      var $93=$k;
      var $94=$i;
      var $95=$94 >>> 14;
      var $96=$95 & 262143;
      var $97=(($93+($96)*(12))|0);
      $o21=$97;
      var $98=$ra;
      $o12=$98;
      var $99=$o12;
      var $100=(($99)|0);
      var $101=$o21;
      var $102=(($101)|0);
      var $103=$100;
      var $104=$102;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[((($103)+(4))>>2)]=HEAP32[((($104)+(4))>>2)];
      var $105=$o21;
      var $106=(($105+8)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=$o12;
      var $109=(($108+8)|0);
      HEAP32[(($109)>>2)]=$107;
      __label__ = 4; break;
    case 13: 
      var $111=$ra;
      $i_o=$111;
      var $112=$i;
      var $113=$112 >>> 23;
      var $114=$113 & 511;
      var $115=$i_o;
      var $116=(($115)|0);
      var $117=$116;
      HEAP32[(($117)>>2)]=$114;
      var $118=$i_o;
      var $119=(($118+8)|0);
      HEAP32[(($119)>>2)]=1;
      var $120=$i;
      var $121=$120 >>> 14;
      var $122=$121 & 511;
      var $123=(($122)|0)!=0;
      if ($123) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $125=$pc;
      var $126=(($125+4)|0);
      $pc=$126;
      __label__ = 15; break;
    case 15: 
      __label__ = 4; break;
    case 16: 
      var $129=$base;
      var $130=$i;
      var $131=$130 >>> 23;
      var $132=$131 & 511;
      var $133=(($129+($132)*(12))|0);
      $rb=$133;
      __label__ = 17; break;
    case 17: 
      var $135=$rb;
      var $136=((($135)-(12))|0);
      $rb=$136;
      var $137=(($135+8)|0);
      HEAP32[(($137)>>2)]=0;
      __label__ = 18; break;
    case 18: 
      var $139=$rb;
      var $140=$ra;
      var $141=(($139)>>>0) >= (($140)>>>0);
      if ($141) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 19: 
      __label__ = 4; break;
    case 20: 
      var $144=$i;
      var $145=$144 >>> 23;
      var $146=$145 & 511;
      $b=$146;
      var $147=$b;
      var $148=$cl;
      var $149=(($148+20)|0);
      var $150=(($149+($147<<2))|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=(($151+8)|0);
      var $153=HEAP32[(($152)>>2)];
      $o23=$153;
      var $154=$ra;
      $o14=$154;
      var $155=$o14;
      var $156=(($155)|0);
      var $157=$o23;
      var $158=(($157)|0);
      var $159=$156;
      var $160=$158;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($159)>>2)]=HEAP32[(($160)>>2)];HEAP32[((($159)+(4))>>2)]=HEAP32[((($160)+(4))>>2)];
      var $161=$o23;
      var $162=(($161+8)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=$o14;
      var $165=(($164+8)|0);
      HEAP32[(($165)>>2)]=$163;
      __label__ = 4; break;
    case 21: 
      var $167=$k;
      var $168=$i;
      var $169=$168 >>> 14;
      var $170=$169 & 262143;
      var $171=(($167+($170)*(12))|0);
      $rb5=$171;
      $i_o6=$g;
      var $172=$cl;
      var $173=(($172+12)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=$174;
      var $176=$i_o6;
      var $177=(($176)|0);
      var $178=$177;
      HEAP32[(($178)>>2)]=$175;
      var $179=$i_o6;
      var $180=(($179+8)|0);
      HEAP32[(($180)>>2)]=5;
      var $181=$pc;
      var $182=$1;
      var $183=(($182+24)|0);
      HEAP32[(($183)>>2)]=$181;
      var $184=$1;
      var $185=$rb5;
      var $186=$ra;
      _luaV_gettable($184, $g, $185, $186);
      var $187=$1;
      var $188=(($187+12)|0);
      var $189=HEAP32[(($188)>>2)];
      $base=$189;
      __label__ = 4; break;
    case 22: 
      var $191=$pc;
      var $192=$1;
      var $193=(($192+24)|0);
      HEAP32[(($193)>>2)]=$191;
      var $194=$1;
      var $195=$base;
      var $196=$i;
      var $197=$196 >>> 23;
      var $198=$197 & 511;
      var $199=(($195+($198)*(12))|0);
      var $200=$i;
      var $201=$200 >>> 14;
      var $202=$201 & 511;
      var $203=$202 & 256;
      var $204=(($203)|0)!=0;
      if ($204) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $206=$k;
      var $207=$i;
      var $208=$207 >>> 14;
      var $209=$208 & 511;
      var $210=$209 & -257;
      var $211=(($206+($210)*(12))|0);
      var $219 = $211;__label__ = 25; break;
    case 24: 
      var $213=$base;
      var $214=$i;
      var $215=$214 >>> 14;
      var $216=$215 & 511;
      var $217=(($213+($216)*(12))|0);
      var $219 = $217;__label__ = 25; break;
    case 25: 
      var $219;
      var $220=$ra;
      _luaV_gettable($194, $199, $219, $220);
      var $221=$1;
      var $222=(($221+12)|0);
      var $223=HEAP32[(($222)>>2)];
      $base=$223;
      __label__ = 4; break;
    case 26: 
      $i_o8=$g7;
      var $225=$cl;
      var $226=(($225+12)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=$227;
      var $229=$i_o8;
      var $230=(($229)|0);
      var $231=$230;
      HEAP32[(($231)>>2)]=$228;
      var $232=$i_o8;
      var $233=(($232+8)|0);
      HEAP32[(($233)>>2)]=5;
      var $234=$pc;
      var $235=$1;
      var $236=(($235+24)|0);
      HEAP32[(($236)>>2)]=$234;
      var $237=$1;
      var $238=$k;
      var $239=$i;
      var $240=$239 >>> 14;
      var $241=$240 & 262143;
      var $242=(($238+($241)*(12))|0);
      var $243=$ra;
      _luaV_settable($237, $g7, $242, $243);
      var $244=$1;
      var $245=(($244+12)|0);
      var $246=HEAP32[(($245)>>2)];
      $base=$246;
      __label__ = 4; break;
    case 27: 
      var $248=$i;
      var $249=$248 >>> 23;
      var $250=$249 & 511;
      var $251=$cl;
      var $252=(($251+20)|0);
      var $253=(($252+($250<<2))|0);
      var $254=HEAP32[(($253)>>2)];
      $uv=$254;
      var $255=$ra;
      $o29=$255;
      var $256=$uv;
      var $257=(($256+8)|0);
      var $258=HEAP32[(($257)>>2)];
      $o110=$258;
      var $259=$o110;
      var $260=(($259)|0);
      var $261=$o29;
      var $262=(($261)|0);
      var $263=$260;
      var $264=$262;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($263)>>2)]=HEAP32[(($264)>>2)];HEAP32[((($263)+(4))>>2)]=HEAP32[((($264)+(4))>>2)];
      var $265=$o29;
      var $266=(($265+8)|0);
      var $267=HEAP32[(($266)>>2)];
      var $268=$o110;
      var $269=(($268+8)|0);
      HEAP32[(($269)>>2)]=$267;
      var $270=$ra;
      var $271=(($270+8)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=(($272)|0) >= 4;
      if ($273) { __label__ = 28; break; } else { __label__ = 31; break; }
    case 28: 
      var $275=$ra;
      var $276=(($275)|0);
      var $277=$276;
      var $278=HEAP32[(($277)>>2)];
      var $279=$278;
      var $280=(($279+5)|0);
      var $281=HEAPU8[($280)];
      var $282=(($281)&255);
      var $283=$282 & 3;
      var $284=(($283)|0)!=0;
      if ($284) { __label__ = 29; break; } else { __label__ = 31; break; }
    case 29: 
      var $286=$uv;
      var $287=$286;
      var $288=$287;
      var $289=(($288+5)|0);
      var $290=HEAPU8[($289)];
      var $291=(($290)&255);
      var $292=$291 & 4;
      var $293=(($292)|0)!=0;
      if ($293) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $295=$1;
      var $296=$uv;
      var $297=$296;
      var $298=$ra;
      var $299=(($298)|0);
      var $300=$299;
      var $301=HEAP32[(($300)>>2)];
      _luaC_barrierf($295, $297, $301);
      __label__ = 31; break;
    case 31: 
      __label__ = 4; break;
    case 32: 
      var $304=$pc;
      var $305=$1;
      var $306=(($305+24)|0);
      HEAP32[(($306)>>2)]=$304;
      var $307=$1;
      var $308=$ra;
      var $309=$i;
      var $310=$309 >>> 23;
      var $311=$310 & 511;
      var $312=$311 & 256;
      var $313=(($312)|0)!=0;
      if ($313) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      var $315=$k;
      var $316=$i;
      var $317=$316 >>> 23;
      var $318=$317 & 511;
      var $319=$318 & -257;
      var $320=(($315+($319)*(12))|0);
      var $328 = $320;__label__ = 35; break;
    case 34: 
      var $322=$base;
      var $323=$i;
      var $324=$323 >>> 23;
      var $325=$324 & 511;
      var $326=(($322+($325)*(12))|0);
      var $328 = $326;__label__ = 35; break;
    case 35: 
      var $328;
      var $329=$i;
      var $330=$329 >>> 14;
      var $331=$330 & 511;
      var $332=$331 & 256;
      var $333=(($332)|0)!=0;
      if ($333) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $335=$k;
      var $336=$i;
      var $337=$336 >>> 14;
      var $338=$337 & 511;
      var $339=$338 & -257;
      var $340=(($335+($339)*(12))|0);
      var $348 = $340;__label__ = 38; break;
    case 37: 
      var $342=$base;
      var $343=$i;
      var $344=$343 >>> 14;
      var $345=$344 & 511;
      var $346=(($342+($345)*(12))|0);
      var $348 = $346;__label__ = 38; break;
    case 38: 
      var $348;
      _luaV_settable($307, $308, $328, $348);
      var $349=$1;
      var $350=(($349+12)|0);
      var $351=HEAP32[(($350)>>2)];
      $base=$351;
      __label__ = 4; break;
    case 39: 
      var $353=$i;
      var $354=$353 >>> 23;
      var $355=$354 & 511;
      $b11=$355;
      var $356=$i;
      var $357=$356 >>> 14;
      var $358=$357 & 511;
      $c=$358;
      var $359=$ra;
      $i_o12=$359;
      var $360=$1;
      var $361=$b11;
      var $362=_luaO_fb2int($361);
      var $363=$c;
      var $364=_luaO_fb2int($363);
      var $365=_luaH_new($360, $362, $364);
      var $366=$365;
      var $367=$i_o12;
      var $368=(($367)|0);
      var $369=$368;
      HEAP32[(($369)>>2)]=$366;
      var $370=$i_o12;
      var $371=(($370+8)|0);
      HEAP32[(($371)>>2)]=5;
      var $372=$pc;
      var $373=$1;
      var $374=(($373+24)|0);
      HEAP32[(($374)>>2)]=$372;
      var $375=$1;
      var $376=(($375+16)|0);
      var $377=HEAP32[(($376)>>2)];
      var $378=(($377+68)|0);
      var $379=HEAPU32[(($378)>>2)];
      var $380=$1;
      var $381=(($380+16)|0);
      var $382=HEAP32[(($381)>>2)];
      var $383=(($382+64)|0);
      var $384=HEAPU32[(($383)>>2)];
      var $385=(($379)>>>0) >= (($384)>>>0);
      if ($385) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      var $387=$1;
      _luaC_step($387);
      __label__ = 41; break;
    case 41: 
      var $389=$1;
      var $390=(($389+12)|0);
      var $391=HEAP32[(($390)>>2)];
      $base=$391;
      __label__ = 4; break;
    case 42: 
      var $393=$base;
      var $394=$i;
      var $395=$394 >>> 23;
      var $396=$395 & 511;
      var $397=(($393+($396)*(12))|0);
      $rb13=$397;
      var $398=$rb13;
      $o214=$398;
      var $399=$ra;
      var $400=(($399+12)|0);
      $o115=$400;
      var $401=$o115;
      var $402=(($401)|0);
      var $403=$o214;
      var $404=(($403)|0);
      var $405=$402;
      var $406=$404;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($405)>>2)]=HEAP32[(($406)>>2)];HEAP32[((($405)+(4))>>2)]=HEAP32[((($406)+(4))>>2)];
      var $407=$o214;
      var $408=(($407+8)|0);
      var $409=HEAP32[(($408)>>2)];
      var $410=$o115;
      var $411=(($410+8)|0);
      HEAP32[(($411)>>2)]=$409;
      var $412=$pc;
      var $413=$1;
      var $414=(($413+24)|0);
      HEAP32[(($414)>>2)]=$412;
      var $415=$1;
      var $416=$rb13;
      var $417=$i;
      var $418=$417 >>> 14;
      var $419=$418 & 511;
      var $420=$419 & 256;
      var $421=(($420)|0)!=0;
      if ($421) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $423=$k;
      var $424=$i;
      var $425=$424 >>> 14;
      var $426=$425 & 511;
      var $427=$426 & -257;
      var $428=(($423+($427)*(12))|0);
      var $436 = $428;__label__ = 45; break;
    case 44: 
      var $430=$base;
      var $431=$i;
      var $432=$431 >>> 14;
      var $433=$432 & 511;
      var $434=(($430+($433)*(12))|0);
      var $436 = $434;__label__ = 45; break;
    case 45: 
      var $436;
      var $437=$ra;
      _luaV_gettable($415, $416, $436, $437);
      var $438=$1;
      var $439=(($438+12)|0);
      var $440=HEAP32[(($439)>>2)];
      $base=$440;
      __label__ = 4; break;
    case 46: 
      var $442=$i;
      var $443=$442 >>> 23;
      var $444=$443 & 511;
      var $445=$444 & 256;
      var $446=(($445)|0)!=0;
      if ($446) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $448=$k;
      var $449=$i;
      var $450=$449 >>> 23;
      var $451=$450 & 511;
      var $452=$451 & -257;
      var $453=(($448+($452)*(12))|0);
      var $461 = $453;__label__ = 49; break;
    case 48: 
      var $455=$base;
      var $456=$i;
      var $457=$456 >>> 23;
      var $458=$457 & 511;
      var $459=(($455+($458)*(12))|0);
      var $461 = $459;__label__ = 49; break;
    case 49: 
      var $461;
      $rb16=$461;
      var $462=$i;
      var $463=$462 >>> 14;
      var $464=$463 & 511;
      var $465=$464 & 256;
      var $466=(($465)|0)!=0;
      if ($466) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $468=$k;
      var $469=$i;
      var $470=$469 >>> 14;
      var $471=$470 & 511;
      var $472=$471 & -257;
      var $473=(($468+($472)*(12))|0);
      var $481 = $473;__label__ = 52; break;
    case 51: 
      var $475=$base;
      var $476=$i;
      var $477=$476 >>> 14;
      var $478=$477 & 511;
      var $479=(($475+($478)*(12))|0);
      var $481 = $479;__label__ = 52; break;
    case 52: 
      var $481;
      $rc=$481;
      var $482=$rb16;
      var $483=(($482+8)|0);
      var $484=HEAP32[(($483)>>2)];
      var $485=(($484)|0)==3;
      if ($485) { __label__ = 53; break; } else { __label__ = 55; break; }
    case 53: 
      var $487=$rc;
      var $488=(($487+8)|0);
      var $489=HEAP32[(($488)>>2)];
      var $490=(($489)|0)==3;
      if ($490) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      var $492=$rb16;
      var $493=(($492)|0);
      var $494=$493;
      var $495=(tempDoubleI32[0]=HEAP32[(($494)>>2)],tempDoubleI32[1]=HEAP32[((($494)+(4))>>2)],tempDoubleF64[0]);
      $nb=$495;
      var $496=$rc;
      var $497=(($496)|0);
      var $498=$497;
      var $499=(tempDoubleI32[0]=HEAP32[(($498)>>2)],tempDoubleI32[1]=HEAP32[((($498)+(4))>>2)],tempDoubleF64[0]);
      $nc=$499;
      var $500=$ra;
      $i_o17=$500;
      var $501=$nb;
      var $502=$nc;
      var $503=($501)+($502);
      var $504=$i_o17;
      var $505=(($504)|0);
      var $506=$505;
      (tempDoubleF64[0]=$503,HEAP32[(($506)>>2)]=tempDoubleI32[0],HEAP32[((($506)+(4))>>2)]=tempDoubleI32[1]);
      var $507=$i_o17;
      var $508=(($507+8)|0);
      HEAP32[(($508)>>2)]=3;
      __label__ = 56; break;
    case 55: 
      var $510=$pc;
      var $511=$1;
      var $512=(($511+24)|0);
      HEAP32[(($512)>>2)]=$510;
      var $513=$1;
      var $514=$ra;
      var $515=$rb16;
      var $516=$rc;
      _Arith($513, $514, $515, $516, 5);
      var $517=$1;
      var $518=(($517+12)|0);
      var $519=HEAP32[(($518)>>2)];
      $base=$519;
      __label__ = 56; break;
    case 56: 
      __label__ = 4; break;
    case 57: 
      var $522=$i;
      var $523=$522 >>> 23;
      var $524=$523 & 511;
      var $525=$524 & 256;
      var $526=(($525)|0)!=0;
      if ($526) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: 
      var $528=$k;
      var $529=$i;
      var $530=$529 >>> 23;
      var $531=$530 & 511;
      var $532=$531 & -257;
      var $533=(($528+($532)*(12))|0);
      var $541 = $533;__label__ = 60; break;
    case 59: 
      var $535=$base;
      var $536=$i;
      var $537=$536 >>> 23;
      var $538=$537 & 511;
      var $539=(($535+($538)*(12))|0);
      var $541 = $539;__label__ = 60; break;
    case 60: 
      var $541;
      $rb18=$541;
      var $542=$i;
      var $543=$542 >>> 14;
      var $544=$543 & 511;
      var $545=$544 & 256;
      var $546=(($545)|0)!=0;
      if ($546) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      var $548=$k;
      var $549=$i;
      var $550=$549 >>> 14;
      var $551=$550 & 511;
      var $552=$551 & -257;
      var $553=(($548+($552)*(12))|0);
      var $561 = $553;__label__ = 63; break;
    case 62: 
      var $555=$base;
      var $556=$i;
      var $557=$556 >>> 14;
      var $558=$557 & 511;
      var $559=(($555+($558)*(12))|0);
      var $561 = $559;__label__ = 63; break;
    case 63: 
      var $561;
      $rc19=$561;
      var $562=$rb18;
      var $563=(($562+8)|0);
      var $564=HEAP32[(($563)>>2)];
      var $565=(($564)|0)==3;
      if ($565) { __label__ = 64; break; } else { __label__ = 66; break; }
    case 64: 
      var $567=$rc19;
      var $568=(($567+8)|0);
      var $569=HEAP32[(($568)>>2)];
      var $570=(($569)|0)==3;
      if ($570) { __label__ = 65; break; } else { __label__ = 66; break; }
    case 65: 
      var $572=$rb18;
      var $573=(($572)|0);
      var $574=$573;
      var $575=(tempDoubleI32[0]=HEAP32[(($574)>>2)],tempDoubleI32[1]=HEAP32[((($574)+(4))>>2)],tempDoubleF64[0]);
      $nb20=$575;
      var $576=$rc19;
      var $577=(($576)|0);
      var $578=$577;
      var $579=(tempDoubleI32[0]=HEAP32[(($578)>>2)],tempDoubleI32[1]=HEAP32[((($578)+(4))>>2)],tempDoubleF64[0]);
      $nc21=$579;
      var $580=$ra;
      $i_o22=$580;
      var $581=$nb20;
      var $582=$nc21;
      var $583=($581)-($582);
      var $584=$i_o22;
      var $585=(($584)|0);
      var $586=$585;
      (tempDoubleF64[0]=$583,HEAP32[(($586)>>2)]=tempDoubleI32[0],HEAP32[((($586)+(4))>>2)]=tempDoubleI32[1]);
      var $587=$i_o22;
      var $588=(($587+8)|0);
      HEAP32[(($588)>>2)]=3;
      __label__ = 67; break;
    case 66: 
      var $590=$pc;
      var $591=$1;
      var $592=(($591+24)|0);
      HEAP32[(($592)>>2)]=$590;
      var $593=$1;
      var $594=$ra;
      var $595=$rb18;
      var $596=$rc19;
      _Arith($593, $594, $595, $596, 6);
      var $597=$1;
      var $598=(($597+12)|0);
      var $599=HEAP32[(($598)>>2)];
      $base=$599;
      __label__ = 67; break;
    case 67: 
      __label__ = 4; break;
    case 68: 
      var $602=$i;
      var $603=$602 >>> 23;
      var $604=$603 & 511;
      var $605=$604 & 256;
      var $606=(($605)|0)!=0;
      if ($606) { __label__ = 69; break; } else { __label__ = 70; break; }
    case 69: 
      var $608=$k;
      var $609=$i;
      var $610=$609 >>> 23;
      var $611=$610 & 511;
      var $612=$611 & -257;
      var $613=(($608+($612)*(12))|0);
      var $621 = $613;__label__ = 71; break;
    case 70: 
      var $615=$base;
      var $616=$i;
      var $617=$616 >>> 23;
      var $618=$617 & 511;
      var $619=(($615+($618)*(12))|0);
      var $621 = $619;__label__ = 71; break;
    case 71: 
      var $621;
      $rb23=$621;
      var $622=$i;
      var $623=$622 >>> 14;
      var $624=$623 & 511;
      var $625=$624 & 256;
      var $626=(($625)|0)!=0;
      if ($626) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: 
      var $628=$k;
      var $629=$i;
      var $630=$629 >>> 14;
      var $631=$630 & 511;
      var $632=$631 & -257;
      var $633=(($628+($632)*(12))|0);
      var $641 = $633;__label__ = 74; break;
    case 73: 
      var $635=$base;
      var $636=$i;
      var $637=$636 >>> 14;
      var $638=$637 & 511;
      var $639=(($635+($638)*(12))|0);
      var $641 = $639;__label__ = 74; break;
    case 74: 
      var $641;
      $rc24=$641;
      var $642=$rb23;
      var $643=(($642+8)|0);
      var $644=HEAP32[(($643)>>2)];
      var $645=(($644)|0)==3;
      if ($645) { __label__ = 75; break; } else { __label__ = 77; break; }
    case 75: 
      var $647=$rc24;
      var $648=(($647+8)|0);
      var $649=HEAP32[(($648)>>2)];
      var $650=(($649)|0)==3;
      if ($650) { __label__ = 76; break; } else { __label__ = 77; break; }
    case 76: 
      var $652=$rb23;
      var $653=(($652)|0);
      var $654=$653;
      var $655=(tempDoubleI32[0]=HEAP32[(($654)>>2)],tempDoubleI32[1]=HEAP32[((($654)+(4))>>2)],tempDoubleF64[0]);
      $nb25=$655;
      var $656=$rc24;
      var $657=(($656)|0);
      var $658=$657;
      var $659=(tempDoubleI32[0]=HEAP32[(($658)>>2)],tempDoubleI32[1]=HEAP32[((($658)+(4))>>2)],tempDoubleF64[0]);
      $nc26=$659;
      var $660=$ra;
      $i_o27=$660;
      var $661=$nb25;
      var $662=$nc26;
      var $663=($661)*($662);
      var $664=$i_o27;
      var $665=(($664)|0);
      var $666=$665;
      (tempDoubleF64[0]=$663,HEAP32[(($666)>>2)]=tempDoubleI32[0],HEAP32[((($666)+(4))>>2)]=tempDoubleI32[1]);
      var $667=$i_o27;
      var $668=(($667+8)|0);
      HEAP32[(($668)>>2)]=3;
      __label__ = 78; break;
    case 77: 
      var $670=$pc;
      var $671=$1;
      var $672=(($671+24)|0);
      HEAP32[(($672)>>2)]=$670;
      var $673=$1;
      var $674=$ra;
      var $675=$rb23;
      var $676=$rc24;
      _Arith($673, $674, $675, $676, 7);
      var $677=$1;
      var $678=(($677+12)|0);
      var $679=HEAP32[(($678)>>2)];
      $base=$679;
      __label__ = 78; break;
    case 78: 
      __label__ = 4; break;
    case 79: 
      var $682=$i;
      var $683=$682 >>> 23;
      var $684=$683 & 511;
      var $685=$684 & 256;
      var $686=(($685)|0)!=0;
      if ($686) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: 
      var $688=$k;
      var $689=$i;
      var $690=$689 >>> 23;
      var $691=$690 & 511;
      var $692=$691 & -257;
      var $693=(($688+($692)*(12))|0);
      var $701 = $693;__label__ = 82; break;
    case 81: 
      var $695=$base;
      var $696=$i;
      var $697=$696 >>> 23;
      var $698=$697 & 511;
      var $699=(($695+($698)*(12))|0);
      var $701 = $699;__label__ = 82; break;
    case 82: 
      var $701;
      $rb28=$701;
      var $702=$i;
      var $703=$702 >>> 14;
      var $704=$703 & 511;
      var $705=$704 & 256;
      var $706=(($705)|0)!=0;
      if ($706) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      var $708=$k;
      var $709=$i;
      var $710=$709 >>> 14;
      var $711=$710 & 511;
      var $712=$711 & -257;
      var $713=(($708+($712)*(12))|0);
      var $721 = $713;__label__ = 85; break;
    case 84: 
      var $715=$base;
      var $716=$i;
      var $717=$716 >>> 14;
      var $718=$717 & 511;
      var $719=(($715+($718)*(12))|0);
      var $721 = $719;__label__ = 85; break;
    case 85: 
      var $721;
      $rc29=$721;
      var $722=$rb28;
      var $723=(($722+8)|0);
      var $724=HEAP32[(($723)>>2)];
      var $725=(($724)|0)==3;
      if ($725) { __label__ = 86; break; } else { __label__ = 88; break; }
    case 86: 
      var $727=$rc29;
      var $728=(($727+8)|0);
      var $729=HEAP32[(($728)>>2)];
      var $730=(($729)|0)==3;
      if ($730) { __label__ = 87; break; } else { __label__ = 88; break; }
    case 87: 
      var $732=$rb28;
      var $733=(($732)|0);
      var $734=$733;
      var $735=(tempDoubleI32[0]=HEAP32[(($734)>>2)],tempDoubleI32[1]=HEAP32[((($734)+(4))>>2)],tempDoubleF64[0]);
      $nb30=$735;
      var $736=$rc29;
      var $737=(($736)|0);
      var $738=$737;
      var $739=(tempDoubleI32[0]=HEAP32[(($738)>>2)],tempDoubleI32[1]=HEAP32[((($738)+(4))>>2)],tempDoubleF64[0]);
      $nc31=$739;
      var $740=$ra;
      $i_o32=$740;
      var $741=$nb30;
      var $742=$nc31;
      var $743=($741)/($742);
      var $744=$i_o32;
      var $745=(($744)|0);
      var $746=$745;
      (tempDoubleF64[0]=$743,HEAP32[(($746)>>2)]=tempDoubleI32[0],HEAP32[((($746)+(4))>>2)]=tempDoubleI32[1]);
      var $747=$i_o32;
      var $748=(($747+8)|0);
      HEAP32[(($748)>>2)]=3;
      __label__ = 89; break;
    case 88: 
      var $750=$pc;
      var $751=$1;
      var $752=(($751+24)|0);
      HEAP32[(($752)>>2)]=$750;
      var $753=$1;
      var $754=$ra;
      var $755=$rb28;
      var $756=$rc29;
      _Arith($753, $754, $755, $756, 8);
      var $757=$1;
      var $758=(($757+12)|0);
      var $759=HEAP32[(($758)>>2)];
      $base=$759;
      __label__ = 89; break;
    case 89: 
      __label__ = 4; break;
    case 90: 
      var $762=$i;
      var $763=$762 >>> 23;
      var $764=$763 & 511;
      var $765=$764 & 256;
      var $766=(($765)|0)!=0;
      if ($766) { __label__ = 91; break; } else { __label__ = 92; break; }
    case 91: 
      var $768=$k;
      var $769=$i;
      var $770=$769 >>> 23;
      var $771=$770 & 511;
      var $772=$771 & -257;
      var $773=(($768+($772)*(12))|0);
      var $781 = $773;__label__ = 93; break;
    case 92: 
      var $775=$base;
      var $776=$i;
      var $777=$776 >>> 23;
      var $778=$777 & 511;
      var $779=(($775+($778)*(12))|0);
      var $781 = $779;__label__ = 93; break;
    case 93: 
      var $781;
      $rb33=$781;
      var $782=$i;
      var $783=$782 >>> 14;
      var $784=$783 & 511;
      var $785=$784 & 256;
      var $786=(($785)|0)!=0;
      if ($786) { __label__ = 94; break; } else { __label__ = 95; break; }
    case 94: 
      var $788=$k;
      var $789=$i;
      var $790=$789 >>> 14;
      var $791=$790 & 511;
      var $792=$791 & -257;
      var $793=(($788+($792)*(12))|0);
      var $801 = $793;__label__ = 96; break;
    case 95: 
      var $795=$base;
      var $796=$i;
      var $797=$796 >>> 14;
      var $798=$797 & 511;
      var $799=(($795+($798)*(12))|0);
      var $801 = $799;__label__ = 96; break;
    case 96: 
      var $801;
      $rc34=$801;
      var $802=$rb33;
      var $803=(($802+8)|0);
      var $804=HEAP32[(($803)>>2)];
      var $805=(($804)|0)==3;
      if ($805) { __label__ = 97; break; } else { __label__ = 99; break; }
    case 97: 
      var $807=$rc34;
      var $808=(($807+8)|0);
      var $809=HEAP32[(($808)>>2)];
      var $810=(($809)|0)==3;
      if ($810) { __label__ = 98; break; } else { __label__ = 99; break; }
    case 98: 
      var $812=$rb33;
      var $813=(($812)|0);
      var $814=$813;
      var $815=(tempDoubleI32[0]=HEAP32[(($814)>>2)],tempDoubleI32[1]=HEAP32[((($814)+(4))>>2)],tempDoubleF64[0]);
      $nb35=$815;
      var $816=$rc34;
      var $817=(($816)|0);
      var $818=$817;
      var $819=(tempDoubleI32[0]=HEAP32[(($818)>>2)],tempDoubleI32[1]=HEAP32[((($818)+(4))>>2)],tempDoubleF64[0]);
      $nc36=$819;
      var $820=$ra;
      $i_o37=$820;
      var $821=$nb35;
      var $822=$nb35;
      var $823=$nc36;
      var $824=($822)/($823);
      var $825=_floor($824);
      var $826=$nc36;
      var $827=($825)*($826);
      var $828=($821)-($827);
      var $829=$i_o37;
      var $830=(($829)|0);
      var $831=$830;
      (tempDoubleF64[0]=$828,HEAP32[(($831)>>2)]=tempDoubleI32[0],HEAP32[((($831)+(4))>>2)]=tempDoubleI32[1]);
      var $832=$i_o37;
      var $833=(($832+8)|0);
      HEAP32[(($833)>>2)]=3;
      __label__ = 100; break;
    case 99: 
      var $835=$pc;
      var $836=$1;
      var $837=(($836+24)|0);
      HEAP32[(($837)>>2)]=$835;
      var $838=$1;
      var $839=$ra;
      var $840=$rb33;
      var $841=$rc34;
      _Arith($838, $839, $840, $841, 9);
      var $842=$1;
      var $843=(($842+12)|0);
      var $844=HEAP32[(($843)>>2)];
      $base=$844;
      __label__ = 100; break;
    case 100: 
      __label__ = 4; break;
    case 101: 
      var $847=$i;
      var $848=$847 >>> 23;
      var $849=$848 & 511;
      var $850=$849 & 256;
      var $851=(($850)|0)!=0;
      if ($851) { __label__ = 102; break; } else { __label__ = 103; break; }
    case 102: 
      var $853=$k;
      var $854=$i;
      var $855=$854 >>> 23;
      var $856=$855 & 511;
      var $857=$856 & -257;
      var $858=(($853+($857)*(12))|0);
      var $866 = $858;__label__ = 104; break;
    case 103: 
      var $860=$base;
      var $861=$i;
      var $862=$861 >>> 23;
      var $863=$862 & 511;
      var $864=(($860+($863)*(12))|0);
      var $866 = $864;__label__ = 104; break;
    case 104: 
      var $866;
      $rb38=$866;
      var $867=$i;
      var $868=$867 >>> 14;
      var $869=$868 & 511;
      var $870=$869 & 256;
      var $871=(($870)|0)!=0;
      if ($871) { __label__ = 105; break; } else { __label__ = 106; break; }
    case 105: 
      var $873=$k;
      var $874=$i;
      var $875=$874 >>> 14;
      var $876=$875 & 511;
      var $877=$876 & -257;
      var $878=(($873+($877)*(12))|0);
      var $886 = $878;__label__ = 107; break;
    case 106: 
      var $880=$base;
      var $881=$i;
      var $882=$881 >>> 14;
      var $883=$882 & 511;
      var $884=(($880+($883)*(12))|0);
      var $886 = $884;__label__ = 107; break;
    case 107: 
      var $886;
      $rc39=$886;
      var $887=$rb38;
      var $888=(($887+8)|0);
      var $889=HEAP32[(($888)>>2)];
      var $890=(($889)|0)==3;
      if ($890) { __label__ = 108; break; } else { __label__ = 110; break; }
    case 108: 
      var $892=$rc39;
      var $893=(($892+8)|0);
      var $894=HEAP32[(($893)>>2)];
      var $895=(($894)|0)==3;
      if ($895) { __label__ = 109; break; } else { __label__ = 110; break; }
    case 109: 
      var $897=$rb38;
      var $898=(($897)|0);
      var $899=$898;
      var $900=(tempDoubleI32[0]=HEAP32[(($899)>>2)],tempDoubleI32[1]=HEAP32[((($899)+(4))>>2)],tempDoubleF64[0]);
      $nb40=$900;
      var $901=$rc39;
      var $902=(($901)|0);
      var $903=$902;
      var $904=(tempDoubleI32[0]=HEAP32[(($903)>>2)],tempDoubleI32[1]=HEAP32[((($903)+(4))>>2)],tempDoubleF64[0]);
      $nc41=$904;
      var $905=$ra;
      $i_o42=$905;
      var $906=$nb40;
      var $907=$nc41;
      var $908=_llvm_pow_f64($906, $907);
      var $909=$i_o42;
      var $910=(($909)|0);
      var $911=$910;
      (tempDoubleF64[0]=$908,HEAP32[(($911)>>2)]=tempDoubleI32[0],HEAP32[((($911)+(4))>>2)]=tempDoubleI32[1]);
      var $912=$i_o42;
      var $913=(($912+8)|0);
      HEAP32[(($913)>>2)]=3;
      __label__ = 111; break;
    case 110: 
      var $915=$pc;
      var $916=$1;
      var $917=(($916+24)|0);
      HEAP32[(($917)>>2)]=$915;
      var $918=$1;
      var $919=$ra;
      var $920=$rb38;
      var $921=$rc39;
      _Arith($918, $919, $920, $921, 10);
      var $922=$1;
      var $923=(($922+12)|0);
      var $924=HEAP32[(($923)>>2)];
      $base=$924;
      __label__ = 111; break;
    case 111: 
      __label__ = 4; break;
    case 112: 
      var $927=$base;
      var $928=$i;
      var $929=$928 >>> 23;
      var $930=$929 & 511;
      var $931=(($927+($930)*(12))|0);
      $rb43=$931;
      var $932=$rb43;
      var $933=(($932+8)|0);
      var $934=HEAP32[(($933)>>2)];
      var $935=(($934)|0)==3;
      if ($935) { __label__ = 113; break; } else { __label__ = 114; break; }
    case 113: 
      var $937=$rb43;
      var $938=(($937)|0);
      var $939=$938;
      var $940=(tempDoubleI32[0]=HEAP32[(($939)>>2)],tempDoubleI32[1]=HEAP32[((($939)+(4))>>2)],tempDoubleF64[0]);
      $nb44=$940;
      var $941=$ra;
      $i_o45=$941;
      var $942=$nb44;
      var $943=(-$942);
      var $944=$i_o45;
      var $945=(($944)|0);
      var $946=$945;
      (tempDoubleF64[0]=$943,HEAP32[(($946)>>2)]=tempDoubleI32[0],HEAP32[((($946)+(4))>>2)]=tempDoubleI32[1]);
      var $947=$i_o45;
      var $948=(($947+8)|0);
      HEAP32[(($948)>>2)]=3;
      __label__ = 115; break;
    case 114: 
      var $950=$pc;
      var $951=$1;
      var $952=(($951+24)|0);
      HEAP32[(($952)>>2)]=$950;
      var $953=$1;
      var $954=$ra;
      var $955=$rb43;
      var $956=$rb43;
      _Arith($953, $954, $955, $956, 11);
      var $957=$1;
      var $958=(($957+12)|0);
      var $959=HEAP32[(($958)>>2)];
      $base=$959;
      __label__ = 115; break;
    case 115: 
      __label__ = 4; break;
    case 116: 
      var $962=$base;
      var $963=$i;
      var $964=$963 >>> 23;
      var $965=$964 & 511;
      var $966=(($962+($965)*(12))|0);
      var $967=(($966+8)|0);
      var $968=HEAP32[(($967)>>2)];
      var $969=(($968)|0)==0;
      if ($969) { var $992 = 1;__label__ = 120; break; } else { __label__ = 117; break; }
    case 117: 
      var $971=$base;
      var $972=$i;
      var $973=$972 >>> 23;
      var $974=$973 & 511;
      var $975=(($971+($974)*(12))|0);
      var $976=(($975+8)|0);
      var $977=HEAP32[(($976)>>2)];
      var $978=(($977)|0)==1;
      if ($978) { __label__ = 118; break; } else { var $990 = 0;__label__ = 119; break; }
    case 118: 
      var $980=$base;
      var $981=$i;
      var $982=$981 >>> 23;
      var $983=$982 & 511;
      var $984=(($980+($983)*(12))|0);
      var $985=(($984)|0);
      var $986=$985;
      var $987=HEAP32[(($986)>>2)];
      var $988=(($987)|0)==0;
      var $990 = $988;__label__ = 119; break;
    case 119: 
      var $990;
      var $992 = $990;__label__ = 120; break;
    case 120: 
      var $992;
      var $993=(($992)&1);
      $res=$993;
      var $994=$ra;
      $i_o46=$994;
      var $995=$res;
      var $996=$i_o46;
      var $997=(($996)|0);
      var $998=$997;
      HEAP32[(($998)>>2)]=$995;
      var $999=$i_o46;
      var $1000=(($999+8)|0);
      HEAP32[(($1000)>>2)]=1;
      __label__ = 4; break;
    case 121: 
      var $1002=$base;
      var $1003=$i;
      var $1004=$1003 >>> 23;
      var $1005=$1004 & 511;
      var $1006=(($1002+($1005)*(12))|0);
      $rb47=$1006;
      var $1007=$rb47;
      var $1008=(($1007+8)|0);
      var $1009=HEAP32[(($1008)>>2)];
      if ((($1009)|0) == 5) {
        __label__ = 122; break;
      }
      else if ((($1009)|0) == 4) {
        __label__ = 123; break;
      }
      else {
      __label__ = 124; break;
      }
      
    case 122: 
      var $1011=$ra;
      $i_o48=$1011;
      var $1012=$rb47;
      var $1013=(($1012)|0);
      var $1014=$1013;
      var $1015=HEAP32[(($1014)>>2)];
      var $1016=$1015;
      var $1017=_luaH_getn($1016);
      var $1018=(($1017)|0);
      var $1019=$i_o48;
      var $1020=(($1019)|0);
      var $1021=$1020;
      (tempDoubleF64[0]=$1018,HEAP32[(($1021)>>2)]=tempDoubleI32[0],HEAP32[((($1021)+(4))>>2)]=tempDoubleI32[1]);
      var $1022=$i_o48;
      var $1023=(($1022+8)|0);
      HEAP32[(($1023)>>2)]=3;
      __label__ = 127; break;
    case 123: 
      var $1025=$ra;
      $i_o49=$1025;
      var $1026=$rb47;
      var $1027=(($1026)|0);
      var $1028=$1027;
      var $1029=HEAP32[(($1028)>>2)];
      var $1030=$1029;
      var $1031=$1030;
      var $1032=(($1031+12)|0);
      var $1033=HEAPU32[(($1032)>>2)];
      var $1034=(($1033)>>>0);
      var $1035=$i_o49;
      var $1036=(($1035)|0);
      var $1037=$1036;
      (tempDoubleF64[0]=$1034,HEAP32[(($1037)>>2)]=tempDoubleI32[0],HEAP32[((($1037)+(4))>>2)]=tempDoubleI32[1]);
      var $1038=$i_o49;
      var $1039=(($1038+8)|0);
      HEAP32[(($1039)>>2)]=3;
      __label__ = 127; break;
    case 124: 
      var $1041=$pc;
      var $1042=$1;
      var $1043=(($1042+24)|0);
      HEAP32[(($1043)>>2)]=$1041;
      var $1044=$1;
      var $1045=$rb47;
      var $1046=$ra;
      var $1047=_call_binTM($1044, $1045, _luaO_nilobject_, $1046, 12);
      var $1048=(($1047)|0)!=0;
      if ($1048) { __label__ = 126; break; } else { __label__ = 125; break; }
    case 125: 
      var $1050=$1;
      var $1051=$rb47;
      _luaG_typeerror($1050, $1051, ((STRING_TABLE.__str5873)|0));
      __label__ = 126; break;
    case 126: 
      var $1053=$1;
      var $1054=(($1053+12)|0);
      var $1055=HEAP32[(($1054)>>2)];
      $base=$1055;
      __label__ = 127; break;
    case 127: 
      __label__ = 4; break;
    case 128: 
      var $1058=$i;
      var $1059=$1058 >>> 23;
      var $1060=$1059 & 511;
      $b50=$1060;
      var $1061=$i;
      var $1062=$1061 >>> 14;
      var $1063=$1062 & 511;
      $c51=$1063;
      var $1064=$pc;
      var $1065=$1;
      var $1066=(($1065+24)|0);
      HEAP32[(($1066)>>2)]=$1064;
      var $1067=$1;
      var $1068=$c51;
      var $1069=$b50;
      var $1070=((($1068)-($1069))|0);
      var $1071=((($1070)+(1))|0);
      var $1072=$c51;
      _luaV_concat($1067, $1071, $1072);
      var $1073=$1;
      var $1074=(($1073+16)|0);
      var $1075=HEAP32[(($1074)>>2)];
      var $1076=(($1075+68)|0);
      var $1077=HEAPU32[(($1076)>>2)];
      var $1078=$1;
      var $1079=(($1078+16)|0);
      var $1080=HEAP32[(($1079)>>2)];
      var $1081=(($1080+64)|0);
      var $1082=HEAPU32[(($1081)>>2)];
      var $1083=(($1077)>>>0) >= (($1082)>>>0);
      if ($1083) { __label__ = 129; break; } else { __label__ = 130; break; }
    case 129: 
      var $1085=$1;
      _luaC_step($1085);
      __label__ = 130; break;
    case 130: 
      var $1087=$1;
      var $1088=(($1087+12)|0);
      var $1089=HEAP32[(($1088)>>2)];
      $base=$1089;
      var $1090=$base;
      var $1091=$b50;
      var $1092=(($1090+($1091)*(12))|0);
      $o252=$1092;
      var $1093=$base;
      var $1094=$i;
      var $1095=$1094 >>> 6;
      var $1096=$1095 & 255;
      var $1097=(($1093+($1096)*(12))|0);
      $o153=$1097;
      var $1098=$o153;
      var $1099=(($1098)|0);
      var $1100=$o252;
      var $1101=(($1100)|0);
      var $1102=$1099;
      var $1103=$1101;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($1102)>>2)]=HEAP32[(($1103)>>2)];HEAP32[((($1102)+(4))>>2)]=HEAP32[((($1103)+(4))>>2)];
      var $1104=$o252;
      var $1105=(($1104+8)|0);
      var $1106=HEAP32[(($1105)>>2)];
      var $1107=$o153;
      var $1108=(($1107+8)|0);
      HEAP32[(($1108)>>2)]=$1106;
      __label__ = 4; break;
    case 131: 
      var $1110=$i;
      var $1111=$1110 >>> 14;
      var $1112=$1111 & 262143;
      var $1113=((($1112)-(131071))|0);
      var $1114=$pc;
      var $1115=(($1114+($1113<<2))|0);
      $pc=$1115;
      __label__ = 4; break;
    case 132: 
      var $1117=$i;
      var $1118=$1117 >>> 23;
      var $1119=$1118 & 511;
      var $1120=$1119 & 256;
      var $1121=(($1120)|0)!=0;
      if ($1121) { __label__ = 133; break; } else { __label__ = 134; break; }
    case 133: 
      var $1123=$k;
      var $1124=$i;
      var $1125=$1124 >>> 23;
      var $1126=$1125 & 511;
      var $1127=$1126 & -257;
      var $1128=(($1123+($1127)*(12))|0);
      var $1136 = $1128;__label__ = 135; break;
    case 134: 
      var $1130=$base;
      var $1131=$i;
      var $1132=$1131 >>> 23;
      var $1133=$1132 & 511;
      var $1134=(($1130+($1133)*(12))|0);
      var $1136 = $1134;__label__ = 135; break;
    case 135: 
      var $1136;
      $rb54=$1136;
      var $1137=$i;
      var $1138=$1137 >>> 14;
      var $1139=$1138 & 511;
      var $1140=$1139 & 256;
      var $1141=(($1140)|0)!=0;
      if ($1141) { __label__ = 136; break; } else { __label__ = 137; break; }
    case 136: 
      var $1143=$k;
      var $1144=$i;
      var $1145=$1144 >>> 14;
      var $1146=$1145 & 511;
      var $1147=$1146 & -257;
      var $1148=(($1143+($1147)*(12))|0);
      var $1156 = $1148;__label__ = 138; break;
    case 137: 
      var $1150=$base;
      var $1151=$i;
      var $1152=$1151 >>> 14;
      var $1153=$1152 & 511;
      var $1154=(($1150+($1153)*(12))|0);
      var $1156 = $1154;__label__ = 138; break;
    case 138: 
      var $1156;
      $rc55=$1156;
      var $1157=$pc;
      var $1158=$1;
      var $1159=(($1158+24)|0);
      HEAP32[(($1159)>>2)]=$1157;
      var $1160=$rb54;
      var $1161=(($1160+8)|0);
      var $1162=HEAP32[(($1161)>>2)];
      var $1163=$rc55;
      var $1164=(($1163+8)|0);
      var $1165=HEAP32[(($1164)>>2)];
      var $1166=(($1162)|0)==(($1165)|0);
      if ($1166) { __label__ = 139; break; } else { var $1174 = 0;__label__ = 140; break; }
    case 139: 
      var $1168=$1;
      var $1169=$rb54;
      var $1170=$rc55;
      var $1171=_luaV_equalval($1168, $1169, $1170);
      var $1172=(($1171)|0)!=0;
      var $1174 = $1172;__label__ = 140; break;
    case 140: 
      var $1174;
      var $1175=(($1174)&1);
      var $1176=$i;
      var $1177=$1176 >>> 6;
      var $1178=$1177 & 255;
      var $1179=(($1175)|0)==(($1178)|0);
      if ($1179) { __label__ = 141; break; } else { __label__ = 142; break; }
    case 141: 
      var $1181=$pc;
      var $1182=HEAPU32[(($1181)>>2)];
      var $1183=$1182 >>> 14;
      var $1184=$1183 & 262143;
      var $1185=((($1184)-(131071))|0);
      var $1186=$pc;
      var $1187=(($1186+($1185<<2))|0);
      $pc=$1187;
      __label__ = 142; break;
    case 142: 
      var $1189=$1;
      var $1190=(($1189+12)|0);
      var $1191=HEAP32[(($1190)>>2)];
      $base=$1191;
      var $1192=$pc;
      var $1193=(($1192+4)|0);
      $pc=$1193;
      __label__ = 4; break;
    case 143: 
      var $1195=$pc;
      var $1196=$1;
      var $1197=(($1196+24)|0);
      HEAP32[(($1197)>>2)]=$1195;
      var $1198=$1;
      var $1199=$i;
      var $1200=$1199 >>> 23;
      var $1201=$1200 & 511;
      var $1202=$1201 & 256;
      var $1203=(($1202)|0)!=0;
      if ($1203) { __label__ = 144; break; } else { __label__ = 145; break; }
    case 144: 
      var $1205=$k;
      var $1206=$i;
      var $1207=$1206 >>> 23;
      var $1208=$1207 & 511;
      var $1209=$1208 & -257;
      var $1210=(($1205+($1209)*(12))|0);
      var $1218 = $1210;__label__ = 146; break;
    case 145: 
      var $1212=$base;
      var $1213=$i;
      var $1214=$1213 >>> 23;
      var $1215=$1214 & 511;
      var $1216=(($1212+($1215)*(12))|0);
      var $1218 = $1216;__label__ = 146; break;
    case 146: 
      var $1218;
      var $1219=$i;
      var $1220=$1219 >>> 14;
      var $1221=$1220 & 511;
      var $1222=$1221 & 256;
      var $1223=(($1222)|0)!=0;
      if ($1223) { __label__ = 147; break; } else { __label__ = 148; break; }
    case 147: 
      var $1225=$k;
      var $1226=$i;
      var $1227=$1226 >>> 14;
      var $1228=$1227 & 511;
      var $1229=$1228 & -257;
      var $1230=(($1225+($1229)*(12))|0);
      var $1238 = $1230;__label__ = 149; break;
    case 148: 
      var $1232=$base;
      var $1233=$i;
      var $1234=$1233 >>> 14;
      var $1235=$1234 & 511;
      var $1236=(($1232+($1235)*(12))|0);
      var $1238 = $1236;__label__ = 149; break;
    case 149: 
      var $1238;
      var $1239=_luaV_lessthan($1198, $1218, $1238);
      var $1240=$i;
      var $1241=$1240 >>> 6;
      var $1242=$1241 & 255;
      var $1243=(($1239)|0)==(($1242)|0);
      if ($1243) { __label__ = 150; break; } else { __label__ = 151; break; }
    case 150: 
      var $1245=$pc;
      var $1246=HEAPU32[(($1245)>>2)];
      var $1247=$1246 >>> 14;
      var $1248=$1247 & 262143;
      var $1249=((($1248)-(131071))|0);
      var $1250=$pc;
      var $1251=(($1250+($1249<<2))|0);
      $pc=$1251;
      __label__ = 151; break;
    case 151: 
      var $1253=$1;
      var $1254=(($1253+12)|0);
      var $1255=HEAP32[(($1254)>>2)];
      $base=$1255;
      var $1256=$pc;
      var $1257=(($1256+4)|0);
      $pc=$1257;
      __label__ = 4; break;
    case 152: 
      var $1259=$pc;
      var $1260=$1;
      var $1261=(($1260+24)|0);
      HEAP32[(($1261)>>2)]=$1259;
      var $1262=$1;
      var $1263=$i;
      var $1264=$1263 >>> 23;
      var $1265=$1264 & 511;
      var $1266=$1265 & 256;
      var $1267=(($1266)|0)!=0;
      if ($1267) { __label__ = 153; break; } else { __label__ = 154; break; }
    case 153: 
      var $1269=$k;
      var $1270=$i;
      var $1271=$1270 >>> 23;
      var $1272=$1271 & 511;
      var $1273=$1272 & -257;
      var $1274=(($1269+($1273)*(12))|0);
      var $1282 = $1274;__label__ = 155; break;
    case 154: 
      var $1276=$base;
      var $1277=$i;
      var $1278=$1277 >>> 23;
      var $1279=$1278 & 511;
      var $1280=(($1276+($1279)*(12))|0);
      var $1282 = $1280;__label__ = 155; break;
    case 155: 
      var $1282;
      var $1283=$i;
      var $1284=$1283 >>> 14;
      var $1285=$1284 & 511;
      var $1286=$1285 & 256;
      var $1287=(($1286)|0)!=0;
      if ($1287) { __label__ = 156; break; } else { __label__ = 157; break; }
    case 156: 
      var $1289=$k;
      var $1290=$i;
      var $1291=$1290 >>> 14;
      var $1292=$1291 & 511;
      var $1293=$1292 & -257;
      var $1294=(($1289+($1293)*(12))|0);
      var $1302 = $1294;__label__ = 158; break;
    case 157: 
      var $1296=$base;
      var $1297=$i;
      var $1298=$1297 >>> 14;
      var $1299=$1298 & 511;
      var $1300=(($1296+($1299)*(12))|0);
      var $1302 = $1300;__label__ = 158; break;
    case 158: 
      var $1302;
      var $1303=_lessequal($1262, $1282, $1302);
      var $1304=$i;
      var $1305=$1304 >>> 6;
      var $1306=$1305 & 255;
      var $1307=(($1303)|0)==(($1306)|0);
      if ($1307) { __label__ = 159; break; } else { __label__ = 160; break; }
    case 159: 
      var $1309=$pc;
      var $1310=HEAPU32[(($1309)>>2)];
      var $1311=$1310 >>> 14;
      var $1312=$1311 & 262143;
      var $1313=((($1312)-(131071))|0);
      var $1314=$pc;
      var $1315=(($1314+($1313<<2))|0);
      $pc=$1315;
      __label__ = 160; break;
    case 160: 
      var $1317=$1;
      var $1318=(($1317+12)|0);
      var $1319=HEAP32[(($1318)>>2)];
      $base=$1319;
      var $1320=$pc;
      var $1321=(($1320+4)|0);
      $pc=$1321;
      __label__ = 4; break;
    case 161: 
      var $1323=$ra;
      var $1324=(($1323+8)|0);
      var $1325=HEAP32[(($1324)>>2)];
      var $1326=(($1325)|0)==0;
      if ($1326) { var $1341 = 1;__label__ = 165; break; } else { __label__ = 162; break; }
    case 162: 
      var $1328=$ra;
      var $1329=(($1328+8)|0);
      var $1330=HEAP32[(($1329)>>2)];
      var $1331=(($1330)|0)==1;
      if ($1331) { __label__ = 163; break; } else { var $1339 = 0;__label__ = 164; break; }
    case 163: 
      var $1333=$ra;
      var $1334=(($1333)|0);
      var $1335=$1334;
      var $1336=HEAP32[(($1335)>>2)];
      var $1337=(($1336)|0)==0;
      var $1339 = $1337;__label__ = 164; break;
    case 164: 
      var $1339;
      var $1341 = $1339;__label__ = 165; break;
    case 165: 
      var $1341;
      var $1342=(($1341)&1);
      var $1343=$i;
      var $1344=$1343 >>> 14;
      var $1345=$1344 & 511;
      var $1346=(($1342)|0)!=(($1345)|0);
      if ($1346) { __label__ = 166; break; } else { __label__ = 167; break; }
    case 166: 
      var $1348=$pc;
      var $1349=HEAPU32[(($1348)>>2)];
      var $1350=$1349 >>> 14;
      var $1351=$1350 & 262143;
      var $1352=((($1351)-(131071))|0);
      var $1353=$pc;
      var $1354=(($1353+($1352<<2))|0);
      $pc=$1354;
      __label__ = 167; break;
    case 167: 
      var $1356=$pc;
      var $1357=(($1356+4)|0);
      $pc=$1357;
      __label__ = 4; break;
    case 168: 
      var $1359=$base;
      var $1360=$i;
      var $1361=$1360 >>> 23;
      var $1362=$1361 & 511;
      var $1363=(($1359+($1362)*(12))|0);
      $rb56=$1363;
      var $1364=$rb56;
      var $1365=(($1364+8)|0);
      var $1366=HEAP32[(($1365)>>2)];
      var $1367=(($1366)|0)==0;
      if ($1367) { var $1382 = 1;__label__ = 172; break; } else { __label__ = 169; break; }
    case 169: 
      var $1369=$rb56;
      var $1370=(($1369+8)|0);
      var $1371=HEAP32[(($1370)>>2)];
      var $1372=(($1371)|0)==1;
      if ($1372) { __label__ = 170; break; } else { var $1380 = 0;__label__ = 171; break; }
    case 170: 
      var $1374=$rb56;
      var $1375=(($1374)|0);
      var $1376=$1375;
      var $1377=HEAP32[(($1376)>>2)];
      var $1378=(($1377)|0)==0;
      var $1380 = $1378;__label__ = 171; break;
    case 171: 
      var $1380;
      var $1382 = $1380;__label__ = 172; break;
    case 172: 
      var $1382;
      var $1383=(($1382)&1);
      var $1384=$i;
      var $1385=$1384 >>> 14;
      var $1386=$1385 & 511;
      var $1387=(($1383)|0)!=(($1386)|0);
      if ($1387) { __label__ = 173; break; } else { __label__ = 174; break; }
    case 173: 
      var $1389=$rb56;
      $o257=$1389;
      var $1390=$ra;
      $o158=$1390;
      var $1391=$o158;
      var $1392=(($1391)|0);
      var $1393=$o257;
      var $1394=(($1393)|0);
      var $1395=$1392;
      var $1396=$1394;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($1395)>>2)]=HEAP32[(($1396)>>2)];HEAP32[((($1395)+(4))>>2)]=HEAP32[((($1396)+(4))>>2)];
      var $1397=$o257;
      var $1398=(($1397+8)|0);
      var $1399=HEAP32[(($1398)>>2)];
      var $1400=$o158;
      var $1401=(($1400+8)|0);
      HEAP32[(($1401)>>2)]=$1399;
      var $1402=$pc;
      var $1403=HEAPU32[(($1402)>>2)];
      var $1404=$1403 >>> 14;
      var $1405=$1404 & 262143;
      var $1406=((($1405)-(131071))|0);
      var $1407=$pc;
      var $1408=(($1407+($1406<<2))|0);
      $pc=$1408;
      __label__ = 174; break;
    case 174: 
      var $1410=$pc;
      var $1411=(($1410+4)|0);
      $pc=$1411;
      __label__ = 4; break;
    case 175: 
      var $1413=$i;
      var $1414=$1413 >>> 23;
      var $1415=$1414 & 511;
      $b59=$1415;
      var $1416=$i;
      var $1417=$1416 >>> 14;
      var $1418=$1417 & 511;
      var $1419=((($1418)-(1))|0);
      $nresults=$1419;
      var $1420=$b59;
      var $1421=(($1420)|0)!=0;
      if ($1421) { __label__ = 176; break; } else { __label__ = 177; break; }
    case 176: 
      var $1423=$ra;
      var $1424=$b59;
      var $1425=(($1423+($1424)*(12))|0);
      var $1426=$1;
      var $1427=(($1426+8)|0);
      HEAP32[(($1427)>>2)]=$1425;
      __label__ = 177; break;
    case 177: 
      var $1429=$pc;
      var $1430=$1;
      var $1431=(($1430+24)|0);
      HEAP32[(($1431)>>2)]=$1429;
      var $1432=$1;
      var $1433=$ra;
      var $1434=$nresults;
      var $1435=_luaD_precall($1432, $1433, $1434);
      if ((($1435)|0) == 0) {
        __label__ = 178; break;
      }
      else if ((($1435)|0) == 1) {
        __label__ = 179; break;
      }
      else {
      __label__ = 182; break;
      }
      
    case 178: 
      var $1437=$2;
      var $1438=((($1437)+(1))|0);
      $2=$1438;
      __label__ = 3; break;
    case 179: 
      var $1440=$nresults;
      var $1441=(($1440)|0) >= 0;
      if ($1441) { __label__ = 180; break; } else { __label__ = 181; break; }
    case 180: 
      var $1443=$1;
      var $1444=(($1443+20)|0);
      var $1445=HEAP32[(($1444)>>2)];
      var $1446=(($1445+8)|0);
      var $1447=HEAP32[(($1446)>>2)];
      var $1448=$1;
      var $1449=(($1448+8)|0);
      HEAP32[(($1449)>>2)]=$1447;
      __label__ = 181; break;
    case 181: 
      var $1451=$1;
      var $1452=(($1451+12)|0);
      var $1453=HEAP32[(($1452)>>2)];
      $base=$1453;
      __label__ = 4; break;
    case 182: 
      __label__ = 266; break;
    case 183: 
      var $1456=$i;
      var $1457=$1456 >>> 23;
      var $1458=$1457 & 511;
      $b60=$1458;
      var $1459=$b60;
      var $1460=(($1459)|0)!=0;
      if ($1460) { __label__ = 184; break; } else { __label__ = 185; break; }
    case 184: 
      var $1462=$ra;
      var $1463=$b60;
      var $1464=(($1462+($1463)*(12))|0);
      var $1465=$1;
      var $1466=(($1465+8)|0);
      HEAP32[(($1466)>>2)]=$1464;
      __label__ = 185; break;
    case 185: 
      var $1468=$pc;
      var $1469=$1;
      var $1470=(($1469+24)|0);
      HEAP32[(($1470)>>2)]=$1468;
      var $1471=$1;
      var $1472=$ra;
      var $1473=_luaD_precall($1471, $1472, -1);
      if ((($1473)|0) == 0) {
        __label__ = 186; break;
      }
      else if ((($1473)|0) == 1) {
        __label__ = 193; break;
      }
      else {
      __label__ = 194; break;
      }
      
    case 186: 
      var $1475=$1;
      var $1476=(($1475+20)|0);
      var $1477=HEAP32[(($1476)>>2)];
      var $1478=((($1477)-(24))|0);
      $ci=$1478;
      var $1479=$ci;
      var $1480=(($1479+4)|0);
      var $1481=HEAP32[(($1480)>>2)];
      $func=$1481;
      var $1482=$ci;
      var $1483=(($1482+24)|0);
      var $1484=(($1483+4)|0);
      var $1485=HEAP32[(($1484)>>2)];
      $pfunc=$1485;
      var $1486=$1;
      var $1487=(($1486+96)|0);
      var $1488=HEAP32[(($1487)>>2)];
      var $1489=(($1488)|0)!=0;
      if ($1489) { __label__ = 187; break; } else { __label__ = 188; break; }
    case 187: 
      var $1491=$1;
      var $1492=$ci;
      var $1493=(($1492)|0);
      var $1494=HEAP32[(($1493)>>2)];
      _luaF_close($1491, $1494);
      __label__ = 188; break;
    case 188: 
      var $1496=$ci;
      var $1497=(($1496+4)|0);
      var $1498=HEAP32[(($1497)>>2)];
      var $1499=$ci;
      var $1500=(($1499+24)|0);
      var $1501=(($1500)|0);
      var $1502=HEAP32[(($1501)>>2)];
      var $1503=$pfunc;
      var $1504=$1502;
      var $1505=$1503;
      var $1506=((($1504)-($1505))|0);
      var $1507=((((($1506)|0))/(12))&-1);
      var $1508=(($1498+($1507)*(12))|0);
      var $1509=$ci;
      var $1510=(($1509)|0);
      HEAP32[(($1510)>>2)]=$1508;
      var $1511=$1;
      var $1512=(($1511+12)|0);
      HEAP32[(($1512)>>2)]=$1508;
      $aux=0;
      __label__ = 189; break;
    case 189: 
      var $1514=$pfunc;
      var $1515=$aux;
      var $1516=(($1514+($1515)*(12))|0);
      var $1517=$1;
      var $1518=(($1517+8)|0);
      var $1519=HEAPU32[(($1518)>>2)];
      var $1520=(($1516)>>>0) < (($1519)>>>0);
      if ($1520) { __label__ = 190; break; } else { __label__ = 192; break; }
    case 190: 
      var $1522=$pfunc;
      var $1523=$aux;
      var $1524=(($1522+($1523)*(12))|0);
      $o261=$1524;
      var $1525=$func;
      var $1526=$aux;
      var $1527=(($1525+($1526)*(12))|0);
      $o162=$1527;
      var $1528=$o162;
      var $1529=(($1528)|0);
      var $1530=$o261;
      var $1531=(($1530)|0);
      var $1532=$1529;
      var $1533=$1531;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($1532)>>2)]=HEAP32[(($1533)>>2)];HEAP32[((($1532)+(4))>>2)]=HEAP32[((($1533)+(4))>>2)];
      var $1534=$o261;
      var $1535=(($1534+8)|0);
      var $1536=HEAP32[(($1535)>>2)];
      var $1537=$o162;
      var $1538=(($1537+8)|0);
      HEAP32[(($1538)>>2)]=$1536;
      __label__ = 191; break;
    case 191: 
      var $1540=$aux;
      var $1541=((($1540)+(1))|0);
      $aux=$1541;
      __label__ = 189; break;
    case 192: 
      var $1543=$func;
      var $1544=$aux;
      var $1545=(($1543+($1544)*(12))|0);
      var $1546=$1;
      var $1547=(($1546+8)|0);
      HEAP32[(($1547)>>2)]=$1545;
      var $1548=$ci;
      var $1549=(($1548+8)|0);
      HEAP32[(($1549)>>2)]=$1545;
      var $1550=$1;
      var $1551=(($1550+24)|0);
      var $1552=HEAP32[(($1551)>>2)];
      var $1553=$ci;
      var $1554=(($1553+12)|0);
      HEAP32[(($1554)>>2)]=$1552;
      var $1555=$ci;
      var $1556=(($1555+20)|0);
      var $1557=HEAP32[(($1556)>>2)];
      var $1558=((($1557)+(1))|0);
      HEAP32[(($1556)>>2)]=$1558;
      var $1559=$1;
      var $1560=(($1559+20)|0);
      var $1561=HEAP32[(($1560)>>2)];
      var $1562=((($1561)-(24))|0);
      HEAP32[(($1560)>>2)]=$1562;
      __label__ = 3; break;
    case 193: 
      var $1564=$1;
      var $1565=(($1564+12)|0);
      var $1566=HEAP32[(($1565)>>2)];
      $base=$1566;
      __label__ = 4; break;
    case 194: 
      __label__ = 266; break;
    case 195: 
      var $1569=$i;
      var $1570=$1569 >>> 23;
      var $1571=$1570 & 511;
      $b63=$1571;
      var $1572=$b63;
      var $1573=(($1572)|0)!=0;
      if ($1573) { __label__ = 196; break; } else { __label__ = 197; break; }
    case 196: 
      var $1575=$ra;
      var $1576=$b63;
      var $1577=(($1575+($1576)*(12))|0);
      var $1578=((($1577)-(12))|0);
      var $1579=$1;
      var $1580=(($1579+8)|0);
      HEAP32[(($1580)>>2)]=$1578;
      __label__ = 197; break;
    case 197: 
      var $1582=$1;
      var $1583=(($1582+96)|0);
      var $1584=HEAP32[(($1583)>>2)];
      var $1585=(($1584)|0)!=0;
      if ($1585) { __label__ = 198; break; } else { __label__ = 199; break; }
    case 198: 
      var $1587=$1;
      var $1588=$base;
      _luaF_close($1587, $1588);
      __label__ = 199; break;
    case 199: 
      var $1590=$pc;
      var $1591=$1;
      var $1592=(($1591+24)|0);
      HEAP32[(($1592)>>2)]=$1590;
      var $1593=$1;
      var $1594=$ra;
      var $1595=_luaD_poscall($1593, $1594);
      $b63=$1595;
      var $1596=$2;
      var $1597=((($1596)-(1))|0);
      $2=$1597;
      var $1598=(($1597)|0)==0;
      if ($1598) { __label__ = 200; break; } else { __label__ = 201; break; }
    case 200: 
      __label__ = 266; break;
    case 201: 
      var $1601=$b63;
      var $1602=(($1601)|0)!=0;
      if ($1602) { __label__ = 202; break; } else { __label__ = 203; break; }
    case 202: 
      var $1604=$1;
      var $1605=(($1604+20)|0);
      var $1606=HEAP32[(($1605)>>2)];
      var $1607=(($1606+8)|0);
      var $1608=HEAP32[(($1607)>>2)];
      var $1609=$1;
      var $1610=(($1609+8)|0);
      HEAP32[(($1610)>>2)]=$1608;
      __label__ = 203; break;
    case 203: 
      __label__ = 3; break;
    case 204: 
      var $1613=$ra;
      var $1614=(($1613+24)|0);
      var $1615=(($1614)|0);
      var $1616=$1615;
      var $1617=(tempDoubleI32[0]=HEAP32[(($1616)>>2)],tempDoubleI32[1]=HEAP32[((($1616)+(4))>>2)],tempDoubleF64[0]);
      $step=$1617;
      var $1618=$ra;
      var $1619=(($1618)|0);
      var $1620=$1619;
      var $1621=(tempDoubleI32[0]=HEAP32[(($1620)>>2)],tempDoubleI32[1]=HEAP32[((($1620)+(4))>>2)],tempDoubleF64[0]);
      var $1622=$step;
      var $1623=($1621)+($1622);
      $idx=$1623;
      var $1624=$ra;
      var $1625=(($1624+12)|0);
      var $1626=(($1625)|0);
      var $1627=$1626;
      var $1628=(tempDoubleI32[0]=HEAP32[(($1627)>>2)],tempDoubleI32[1]=HEAP32[((($1627)+(4))>>2)],tempDoubleF64[0]);
      $limit=$1628;
      var $1629=$step;
      var $1630=0 < $1629;
      if ($1630) { __label__ = 205; break; } else { __label__ = 206; break; }
    case 205: 
      var $1632=$idx;
      var $1633=$limit;
      var $1634=$1632 <= $1633;
      if ($1634) { __label__ = 207; break; } else { __label__ = 208; break; }
    case 206: 
      var $1636=$limit;
      var $1637=$idx;
      var $1638=$1636 <= $1637;
      if ($1638) { __label__ = 207; break; } else { __label__ = 208; break; }
    case 207: 
      var $1640=$i;
      var $1641=$1640 >>> 14;
      var $1642=$1641 & 262143;
      var $1643=((($1642)-(131071))|0);
      var $1644=$pc;
      var $1645=(($1644+($1643<<2))|0);
      $pc=$1645;
      var $1646=$ra;
      $i_o64=$1646;
      var $1647=$idx;
      var $1648=$i_o64;
      var $1649=(($1648)|0);
      var $1650=$1649;
      (tempDoubleF64[0]=$1647,HEAP32[(($1650)>>2)]=tempDoubleI32[0],HEAP32[((($1650)+(4))>>2)]=tempDoubleI32[1]);
      var $1651=$i_o64;
      var $1652=(($1651+8)|0);
      HEAP32[(($1652)>>2)]=3;
      var $1653=$ra;
      var $1654=(($1653+36)|0);
      $i_o65=$1654;
      var $1655=$idx;
      var $1656=$i_o65;
      var $1657=(($1656)|0);
      var $1658=$1657;
      (tempDoubleF64[0]=$1655,HEAP32[(($1658)>>2)]=tempDoubleI32[0],HEAP32[((($1658)+(4))>>2)]=tempDoubleI32[1]);
      var $1659=$i_o65;
      var $1660=(($1659+8)|0);
      HEAP32[(($1660)>>2)]=3;
      __label__ = 208; break;
    case 208: 
      __label__ = 4; break;
    case 209: 
      var $1663=$ra;
      $init=$1663;
      var $1664=$ra;
      var $1665=(($1664+12)|0);
      $plimit=$1665;
      var $1666=$ra;
      var $1667=(($1666+24)|0);
      $pstep=$1667;
      var $1668=$pc;
      var $1669=$1;
      var $1670=(($1669+24)|0);
      HEAP32[(($1670)>>2)]=$1668;
      var $1671=$init;
      var $1672=(($1671+8)|0);
      var $1673=HEAP32[(($1672)>>2)];
      var $1674=(($1673)|0)==3;
      if ($1674) { __label__ = 212; break; } else { __label__ = 210; break; }
    case 210: 
      var $1676=$init;
      var $1677=$ra;
      var $1678=_luaV_tonumber($1676, $1677);
      $init=$1678;
      var $1679=(($1678)|0)!=0;
      if ($1679) { __label__ = 212; break; } else { __label__ = 211; break; }
    case 211: 
      var $1681=$1;
      _luaG_runerror($1681, ((STRING_TABLE.__str6874)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 220; break;
    case 212: 
      var $1683=$plimit;
      var $1684=(($1683+8)|0);
      var $1685=HEAP32[(($1684)>>2)];
      var $1686=(($1685)|0)==3;
      if ($1686) { __label__ = 215; break; } else { __label__ = 213; break; }
    case 213: 
      var $1688=$plimit;
      var $1689=$ra;
      var $1690=(($1689+12)|0);
      var $1691=_luaV_tonumber($1688, $1690);
      $plimit=$1691;
      var $1692=(($1691)|0)!=0;
      if ($1692) { __label__ = 215; break; } else { __label__ = 214; break; }
    case 214: 
      var $1694=$1;
      _luaG_runerror($1694, ((STRING_TABLE.__str7875)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 219; break;
    case 215: 
      var $1696=$pstep;
      var $1697=(($1696+8)|0);
      var $1698=HEAP32[(($1697)>>2)];
      var $1699=(($1698)|0)==3;
      if ($1699) { __label__ = 218; break; } else { __label__ = 216; break; }
    case 216: 
      var $1701=$pstep;
      var $1702=$ra;
      var $1703=(($1702+24)|0);
      var $1704=_luaV_tonumber($1701, $1703);
      $pstep=$1704;
      var $1705=(($1704)|0)!=0;
      if ($1705) { __label__ = 218; break; } else { __label__ = 217; break; }
    case 217: 
      var $1707=$1;
      _luaG_runerror($1707, ((STRING_TABLE.__str8876)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 218; break;
    case 218: 
      __label__ = 219; break;
    case 219: 
      __label__ = 220; break;
    case 220: 
      var $1711=$ra;
      $i_o66=$1711;
      var $1712=$ra;
      var $1713=(($1712)|0);
      var $1714=$1713;
      var $1715=(tempDoubleI32[0]=HEAP32[(($1714)>>2)],tempDoubleI32[1]=HEAP32[((($1714)+(4))>>2)],tempDoubleF64[0]);
      var $1716=$pstep;
      var $1717=(($1716)|0);
      var $1718=$1717;
      var $1719=(tempDoubleI32[0]=HEAP32[(($1718)>>2)],tempDoubleI32[1]=HEAP32[((($1718)+(4))>>2)],tempDoubleF64[0]);
      var $1720=($1715)-($1719);
      var $1721=$i_o66;
      var $1722=(($1721)|0);
      var $1723=$1722;
      (tempDoubleF64[0]=$1720,HEAP32[(($1723)>>2)]=tempDoubleI32[0],HEAP32[((($1723)+(4))>>2)]=tempDoubleI32[1]);
      var $1724=$i_o66;
      var $1725=(($1724+8)|0);
      HEAP32[(($1725)>>2)]=3;
      var $1726=$i;
      var $1727=$1726 >>> 14;
      var $1728=$1727 & 262143;
      var $1729=((($1728)-(131071))|0);
      var $1730=$pc;
      var $1731=(($1730+($1729<<2))|0);
      $pc=$1731;
      __label__ = 4; break;
    case 221: 
      var $1733=$ra;
      var $1734=(($1733+36)|0);
      $cb=$1734;
      var $1735=$ra;
      var $1736=(($1735+24)|0);
      $o267=$1736;
      var $1737=$cb;
      var $1738=(($1737+24)|0);
      $o168=$1738;
      var $1739=$o168;
      var $1740=(($1739)|0);
      var $1741=$o267;
      var $1742=(($1741)|0);
      var $1743=$1740;
      var $1744=$1742;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($1743)>>2)]=HEAP32[(($1744)>>2)];HEAP32[((($1743)+(4))>>2)]=HEAP32[((($1744)+(4))>>2)];
      var $1745=$o267;
      var $1746=(($1745+8)|0);
      var $1747=HEAP32[(($1746)>>2)];
      var $1748=$o168;
      var $1749=(($1748+8)|0);
      HEAP32[(($1749)>>2)]=$1747;
      var $1750=$ra;
      var $1751=(($1750+12)|0);
      $o269=$1751;
      var $1752=$cb;
      var $1753=(($1752+12)|0);
      $o170=$1753;
      var $1754=$o170;
      var $1755=(($1754)|0);
      var $1756=$o269;
      var $1757=(($1756)|0);
      var $1758=$1755;
      var $1759=$1757;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($1758)>>2)]=HEAP32[(($1759)>>2)];HEAP32[((($1758)+(4))>>2)]=HEAP32[((($1759)+(4))>>2)];
      var $1760=$o269;
      var $1761=(($1760+8)|0);
      var $1762=HEAP32[(($1761)>>2)];
      var $1763=$o170;
      var $1764=(($1763+8)|0);
      HEAP32[(($1764)>>2)]=$1762;
      var $1765=$ra;
      $o271=$1765;
      var $1766=$cb;
      $o172=$1766;
      var $1767=$o172;
      var $1768=(($1767)|0);
      var $1769=$o271;
      var $1770=(($1769)|0);
      var $1771=$1768;
      var $1772=$1770;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($1771)>>2)]=HEAP32[(($1772)>>2)];HEAP32[((($1771)+(4))>>2)]=HEAP32[((($1772)+(4))>>2)];
      var $1773=$o271;
      var $1774=(($1773+8)|0);
      var $1775=HEAP32[(($1774)>>2)];
      var $1776=$o172;
      var $1777=(($1776+8)|0);
      HEAP32[(($1777)>>2)]=$1775;
      var $1778=$cb;
      var $1779=(($1778+36)|0);
      var $1780=$1;
      var $1781=(($1780+8)|0);
      HEAP32[(($1781)>>2)]=$1779;
      var $1782=$pc;
      var $1783=$1;
      var $1784=(($1783+24)|0);
      HEAP32[(($1784)>>2)]=$1782;
      var $1785=$1;
      var $1786=$cb;
      var $1787=$i;
      var $1788=$1787 >>> 14;
      var $1789=$1788 & 511;
      _luaD_call($1785, $1786, $1789);
      var $1790=$1;
      var $1791=(($1790+12)|0);
      var $1792=HEAP32[(($1791)>>2)];
      $base=$1792;
      var $1793=$1;
      var $1794=(($1793+20)|0);
      var $1795=HEAP32[(($1794)>>2)];
      var $1796=(($1795+8)|0);
      var $1797=HEAP32[(($1796)>>2)];
      var $1798=$1;
      var $1799=(($1798+8)|0);
      HEAP32[(($1799)>>2)]=$1797;
      var $1800=$base;
      var $1801=$i;
      var $1802=$1801 >>> 6;
      var $1803=$1802 & 255;
      var $1804=(($1800+($1803)*(12))|0);
      var $1805=(($1804+36)|0);
      $cb=$1805;
      var $1806=$cb;
      var $1807=(($1806+8)|0);
      var $1808=HEAP32[(($1807)>>2)];
      var $1809=(($1808)|0)==0;
      if ($1809) { __label__ = 223; break; } else { __label__ = 222; break; }
    case 222: 
      var $1811=$cb;
      $o273=$1811;
      var $1812=$cb;
      var $1813=((($1812)-(12))|0);
      $o174=$1813;
      var $1814=$o174;
      var $1815=(($1814)|0);
      var $1816=$o273;
      var $1817=(($1816)|0);
      var $1818=$1815;
      var $1819=$1817;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($1818)>>2)]=HEAP32[(($1819)>>2)];HEAP32[((($1818)+(4))>>2)]=HEAP32[((($1819)+(4))>>2)];
      var $1820=$o273;
      var $1821=(($1820+8)|0);
      var $1822=HEAP32[(($1821)>>2)];
      var $1823=$o174;
      var $1824=(($1823+8)|0);
      HEAP32[(($1824)>>2)]=$1822;
      var $1825=$pc;
      var $1826=HEAPU32[(($1825)>>2)];
      var $1827=$1826 >>> 14;
      var $1828=$1827 & 262143;
      var $1829=((($1828)-(131071))|0);
      var $1830=$pc;
      var $1831=(($1830+($1829<<2))|0);
      $pc=$1831;
      __label__ = 223; break;
    case 223: 
      var $1833=$pc;
      var $1834=(($1833+4)|0);
      $pc=$1834;
      __label__ = 4; break;
    case 224: 
      var $1836=$i;
      var $1837=$1836 >>> 23;
      var $1838=$1837 & 511;
      $n=$1838;
      var $1839=$i;
      var $1840=$1839 >>> 14;
      var $1841=$1840 & 511;
      $c75=$1841;
      var $1842=$n;
      var $1843=(($1842)|0)==0;
      if ($1843) { __label__ = 225; break; } else { __label__ = 226; break; }
    case 225: 
      var $1845=$1;
      var $1846=(($1845+8)|0);
      var $1847=HEAP32[(($1846)>>2)];
      var $1848=$ra;
      var $1849=$1847;
      var $1850=$1848;
      var $1851=((($1849)-($1850))|0);
      var $1852=((((($1851)|0))/(12))&-1);
      var $1853=((($1852)-(1))|0);
      $n=$1853;
      var $1854=$1;
      var $1855=(($1854+20)|0);
      var $1856=HEAP32[(($1855)>>2)];
      var $1857=(($1856+8)|0);
      var $1858=HEAP32[(($1857)>>2)];
      var $1859=$1;
      var $1860=(($1859+8)|0);
      HEAP32[(($1860)>>2)]=$1858;
      __label__ = 226; break;
    case 226: 
      var $1862=$c75;
      var $1863=(($1862)|0)==0;
      if ($1863) { __label__ = 227; break; } else { __label__ = 228; break; }
    case 227: 
      var $1865=$pc;
      var $1866=(($1865+4)|0);
      $pc=$1866;
      var $1867=HEAP32[(($1865)>>2)];
      $c75=$1867;
      __label__ = 228; break;
    case 228: 
      var $1869=$ra;
      var $1870=(($1869+8)|0);
      var $1871=HEAP32[(($1870)>>2)];
      var $1872=(($1871)|0)==5;
      if ($1872) { __label__ = 230; break; } else { __label__ = 229; break; }
    case 229: 
      __label__ = 265; break;
    case 230: 
      var $1875=$ra;
      var $1876=(($1875)|0);
      var $1877=$1876;
      var $1878=HEAP32[(($1877)>>2)];
      var $1879=$1878;
      $h=$1879;
      var $1880=$c75;
      var $1881=((($1880)-(1))|0);
      var $1882=((($1881)*(50))|0);
      var $1883=$n;
      var $1884=((($1882)+($1883))|0);
      $last=$1884;
      var $1885=$last;
      var $1886=$h;
      var $1887=(($1886+28)|0);
      var $1888=HEAP32[(($1887)>>2)];
      var $1889=(($1885)|0) > (($1888)|0);
      if ($1889) { __label__ = 231; break; } else { __label__ = 232; break; }
    case 231: 
      var $1891=$1;
      var $1892=$h;
      var $1893=$last;
      _luaH_resizearray($1891, $1892, $1893);
      __label__ = 232; break;
    case 232: 
      __label__ = 233; break;
    case 233: 
      var $1896=$n;
      var $1897=(($1896)|0) > 0;
      if ($1897) { __label__ = 234; break; } else { __label__ = 240; break; }
    case 234: 
      var $1899=$ra;
      var $1900=$n;
      var $1901=(($1899+($1900)*(12))|0);
      $val=$1901;
      var $1902=$val;
      $o276=$1902;
      var $1903=$1;
      var $1904=$h;
      var $1905=$last;
      var $1906=((($1905)-(1))|0);
      $last=$1906;
      var $1907=_luaH_setnum($1903, $1904, $1905);
      $o177=$1907;
      var $1908=$o177;
      var $1909=(($1908)|0);
      var $1910=$o276;
      var $1911=(($1910)|0);
      var $1912=$1909;
      var $1913=$1911;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($1912)>>2)]=HEAP32[(($1913)>>2)];HEAP32[((($1912)+(4))>>2)]=HEAP32[((($1913)+(4))>>2)];
      var $1914=$o276;
      var $1915=(($1914+8)|0);
      var $1916=HEAP32[(($1915)>>2)];
      var $1917=$o177;
      var $1918=(($1917+8)|0);
      HEAP32[(($1918)>>2)]=$1916;
      var $1919=$val;
      var $1920=(($1919+8)|0);
      var $1921=HEAP32[(($1920)>>2)];
      var $1922=(($1921)|0) >= 4;
      if ($1922) { __label__ = 235; break; } else { __label__ = 238; break; }
    case 235: 
      var $1924=$val;
      var $1925=(($1924)|0);
      var $1926=$1925;
      var $1927=HEAP32[(($1926)>>2)];
      var $1928=$1927;
      var $1929=(($1928+5)|0);
      var $1930=HEAPU8[($1929)];
      var $1931=(($1930)&255);
      var $1932=$1931 & 3;
      var $1933=(($1932)|0)!=0;
      if ($1933) { __label__ = 236; break; } else { __label__ = 238; break; }
    case 236: 
      var $1935=$h;
      var $1936=$1935;
      var $1937=$1936;
      var $1938=(($1937+5)|0);
      var $1939=HEAPU8[($1938)];
      var $1940=(($1939)&255);
      var $1941=$1940 & 4;
      var $1942=(($1941)|0)!=0;
      if ($1942) { __label__ = 237; break; } else { __label__ = 238; break; }
    case 237: 
      var $1944=$1;
      var $1945=$h;
      _luaC_barrierback($1944, $1945);
      __label__ = 238; break;
    case 238: 
      __label__ = 239; break;
    case 239: 
      var $1948=$n;
      var $1949=((($1948)-(1))|0);
      $n=$1949;
      __label__ = 233; break;
    case 240: 
      __label__ = 4; break;
    case 241: 
      var $1952=$1;
      var $1953=$ra;
      _luaF_close($1952, $1953);
      __label__ = 4; break;
    case 242: 
      var $1955=$i;
      var $1956=$1955 >>> 14;
      var $1957=$1956 & 262143;
      var $1958=$cl;
      var $1959=(($1958+16)|0);
      var $1960=HEAP32[(($1959)>>2)];
      var $1961=(($1960+16)|0);
      var $1962=HEAP32[(($1961)>>2)];
      var $1963=(($1962+($1957<<2))|0);
      var $1964=HEAP32[(($1963)>>2)];
      $p=$1964;
      var $1965=$p;
      var $1966=(($1965+72)|0);
      var $1967=HEAPU8[($1966)];
      var $1968=(($1967)&255);
      $nup=$1968;
      var $1969=$1;
      var $1970=$nup;
      var $1971=$cl;
      var $1972=(($1971+12)|0);
      var $1973=HEAP32[(($1972)>>2)];
      var $1974=_luaF_newLclosure($1969, $1970, $1973);
      $ncl=$1974;
      var $1975=$p;
      var $1976=$ncl;
      var $1977=$1976;
      var $1978=(($1977+16)|0);
      HEAP32[(($1978)>>2)]=$1975;
      $j=0;
      __label__ = 243; break;
    case 243: 
      var $1980=$j;
      var $1981=$nup;
      var $1982=(($1980)|0) < (($1981)|0);
      if ($1982) { __label__ = 244; break; } else { __label__ = 249; break; }
    case 244: 
      var $1984=$pc;
      var $1985=HEAPU32[(($1984)>>2)];
      var $1986=$1985 >>> 0;
      var $1987=$1986 & 63;
      var $1988=(($1987)|0)==4;
      if ($1988) { __label__ = 245; break; } else { __label__ = 246; break; }
    case 245: 
      var $1990=$pc;
      var $1991=HEAPU32[(($1990)>>2)];
      var $1992=$1991 >>> 23;
      var $1993=$1992 & 511;
      var $1994=$cl;
      var $1995=(($1994+20)|0);
      var $1996=(($1995+($1993<<2))|0);
      var $1997=HEAP32[(($1996)>>2)];
      var $1998=$j;
      var $1999=$ncl;
      var $2000=$1999;
      var $2001=(($2000+20)|0);
      var $2002=(($2001+($1998<<2))|0);
      HEAP32[(($2002)>>2)]=$1997;
      __label__ = 247; break;
    case 246: 
      var $2004=$1;
      var $2005=$base;
      var $2006=$pc;
      var $2007=HEAPU32[(($2006)>>2)];
      var $2008=$2007 >>> 23;
      var $2009=$2008 & 511;
      var $2010=(($2005+($2009)*(12))|0);
      var $2011=_luaF_findupval($2004, $2010);
      var $2012=$j;
      var $2013=$ncl;
      var $2014=$2013;
      var $2015=(($2014+20)|0);
      var $2016=(($2015+($2012<<2))|0);
      HEAP32[(($2016)>>2)]=$2011;
      __label__ = 247; break;
    case 247: 
      __label__ = 248; break;
    case 248: 
      var $2019=$j;
      var $2020=((($2019)+(1))|0);
      $j=$2020;
      var $2021=$pc;
      var $2022=(($2021+4)|0);
      $pc=$2022;
      __label__ = 243; break;
    case 249: 
      var $2024=$ra;
      $i_o78=$2024;
      var $2025=$ncl;
      var $2026=$2025;
      var $2027=$i_o78;
      var $2028=(($2027)|0);
      var $2029=$2028;
      HEAP32[(($2029)>>2)]=$2026;
      var $2030=$i_o78;
      var $2031=(($2030+8)|0);
      HEAP32[(($2031)>>2)]=6;
      var $2032=$pc;
      var $2033=$1;
      var $2034=(($2033+24)|0);
      HEAP32[(($2034)>>2)]=$2032;
      var $2035=$1;
      var $2036=(($2035+16)|0);
      var $2037=HEAP32[(($2036)>>2)];
      var $2038=(($2037+68)|0);
      var $2039=HEAPU32[(($2038)>>2)];
      var $2040=$1;
      var $2041=(($2040+16)|0);
      var $2042=HEAP32[(($2041)>>2)];
      var $2043=(($2042+64)|0);
      var $2044=HEAPU32[(($2043)>>2)];
      var $2045=(($2039)>>>0) >= (($2044)>>>0);
      if ($2045) { __label__ = 250; break; } else { __label__ = 251; break; }
    case 250: 
      var $2047=$1;
      _luaC_step($2047);
      __label__ = 251; break;
    case 251: 
      var $2049=$1;
      var $2050=(($2049+12)|0);
      var $2051=HEAP32[(($2050)>>2)];
      $base=$2051;
      __label__ = 4; break;
    case 252: 
      var $2053=$i;
      var $2054=$2053 >>> 23;
      var $2055=$2054 & 511;
      var $2056=((($2055)-(1))|0);
      $b79=$2056;
      var $2057=$1;
      var $2058=(($2057+20)|0);
      var $2059=HEAP32[(($2058)>>2)];
      $ci81=$2059;
      var $2060=$ci81;
      var $2061=(($2060)|0);
      var $2062=HEAP32[(($2061)>>2)];
      var $2063=$ci81;
      var $2064=(($2063+4)|0);
      var $2065=HEAP32[(($2064)>>2)];
      var $2066=$2062;
      var $2067=$2065;
      var $2068=((($2066)-($2067))|0);
      var $2069=((((($2068)|0))/(12))&-1);
      var $2070=$cl;
      var $2071=(($2070+16)|0);
      var $2072=HEAP32[(($2071)>>2)];
      var $2073=(($2072+73)|0);
      var $2074=HEAPU8[($2073)];
      var $2075=(($2074)&255);
      var $2076=((($2069)-($2075))|0);
      var $2077=((($2076)-(1))|0);
      $n82=$2077;
      var $2078=$b79;
      var $2079=(($2078)|0)==-1;
      if ($2079) { __label__ = 253; break; } else { __label__ = 257; break; }
    case 253: 
      var $2081=$pc;
      var $2082=$1;
      var $2083=(($2082+24)|0);
      HEAP32[(($2083)>>2)]=$2081;
      var $2084=$1;
      var $2085=(($2084+28)|0);
      var $2086=HEAP32[(($2085)>>2)];
      var $2087=$2086;
      var $2088=$1;
      var $2089=(($2088+8)|0);
      var $2090=HEAP32[(($2089)>>2)];
      var $2091=$2090;
      var $2092=$2087;
      var $2093=$2091;
      var $2094=((($2092)-($2093))|0);
      var $2095=$n82;
      var $2096=((($2095)*(12))|0);
      var $2097=(($2094)|0) <= (($2096)|0);
      if ($2097) { __label__ = 254; break; } else { __label__ = 255; break; }
    case 254: 
      var $2099=$1;
      var $2100=$n82;
      _luaD_growstack($2099, $2100);
      __label__ = 256; break;
    case 255: 
      __label__ = 256; break;
    case 256: 
      var $2103=$1;
      var $2104=(($2103+12)|0);
      var $2105=HEAP32[(($2104)>>2)];
      $base=$2105;
      var $2106=$base;
      var $2107=$i;
      var $2108=$2107 >>> 6;
      var $2109=$2108 & 255;
      var $2110=(($2106+($2109)*(12))|0);
      $ra=$2110;
      var $2111=$n82;
      $b79=$2111;
      var $2112=$ra;
      var $2113=$n82;
      var $2114=(($2112+($2113)*(12))|0);
      var $2115=$1;
      var $2116=(($2115+8)|0);
      HEAP32[(($2116)>>2)]=$2114;
      __label__ = 257; break;
    case 257: 
      $j80=0;
      __label__ = 258; break;
    case 258: 
      var $2119=$j80;
      var $2120=$b79;
      var $2121=(($2119)|0) < (($2120)|0);
      if ($2121) { __label__ = 259; break; } else { __label__ = 264; break; }
    case 259: 
      var $2123=$j80;
      var $2124=$n82;
      var $2125=(($2123)|0) < (($2124)|0);
      if ($2125) { __label__ = 260; break; } else { __label__ = 261; break; }
    case 260: 
      var $2127=$ci81;
      var $2128=(($2127)|0);
      var $2129=HEAP32[(($2128)>>2)];
      var $2130=$n82;
      var $2131=(((-$2130))|0);
      var $2132=(($2129+($2131)*(12))|0);
      var $2133=$j80;
      var $2134=(($2132+($2133)*(12))|0);
      $o283=$2134;
      var $2135=$ra;
      var $2136=$j80;
      var $2137=(($2135+($2136)*(12))|0);
      $o184=$2137;
      var $2138=$o184;
      var $2139=(($2138)|0);
      var $2140=$o283;
      var $2141=(($2140)|0);
      var $2142=$2139;
      var $2143=$2141;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($2142)>>2)]=HEAP32[(($2143)>>2)];HEAP32[((($2142)+(4))>>2)]=HEAP32[((($2143)+(4))>>2)];
      var $2144=$o283;
      var $2145=(($2144+8)|0);
      var $2146=HEAP32[(($2145)>>2)];
      var $2147=$o184;
      var $2148=(($2147+8)|0);
      HEAP32[(($2148)>>2)]=$2146;
      __label__ = 262; break;
    case 261: 
      var $2150=$ra;
      var $2151=$j80;
      var $2152=(($2150+($2151)*(12))|0);
      var $2153=(($2152+8)|0);
      HEAP32[(($2153)>>2)]=0;
      __label__ = 262; break;
    case 262: 
      __label__ = 263; break;
    case 263: 
      var $2156=$j80;
      var $2157=((($2156)+(1))|0);
      $j80=$2157;
      __label__ = 258; break;
    case 264: 
      __label__ = 4; break;
    case 265: 
      __label__ = 4; break;
    case 266: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaV_execute["X"]=1;

function _luaZ_init($L, $z, $reader, $data) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$L;
  $2=$z;
  $3=$reader;
  $4=$data;
  var $5=$1;
  var $6=$2;
  var $7=(($6+16)|0);
  HEAP32[(($7)>>2)]=$5;
  var $8=$3;
  var $9=$2;
  var $10=(($9+8)|0);
  HEAP32[(($10)>>2)]=$8;
  var $11=$4;
  var $12=$2;
  var $13=(($12+12)|0);
  HEAP32[(($13)>>2)]=$11;
  var $14=$2;
  var $15=(($14)|0);
  HEAP32[(($15)>>2)]=0;
  var $16=$2;
  var $17=(($16+4)|0);
  HEAP32[(($17)>>2)]=0;
  ;
  return;
}


function _traceexec($L, $pc) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $mask;
      var $oldpc;
      var $p;
      var $npc;
      var $newline;
      $1=$L;
      $2=$pc;
      var $3=$1;
      var $4=(($3+56)|0);
      var $5=HEAP8[($4)];
      $mask=$5;
      var $6=$1;
      var $7=(($6+24)|0);
      var $8=HEAP32[(($7)>>2)];
      $oldpc=$8;
      var $9=$2;
      var $10=$1;
      var $11=(($10+24)|0);
      HEAP32[(($11)>>2)]=$9;
      var $12=$mask;
      var $13=(($12)&255);
      var $14=$13 & 8;
      var $15=(($14)|0)!=0;
      if ($15) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $17=$1;
      var $18=(($17+64)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|0)==0;
      if ($20) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $22=$1;
      var $23=(($22+60)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$1;
      var $26=(($25+64)|0);
      HEAP32[(($26)>>2)]=$24;
      var $27=$1;
      _luaD_callhook($27, 3, -1);
      __label__ = 5; break;
    case 5: 
      var $29=$mask;
      var $30=(($29)&255);
      var $31=$30 & 4;
      var $32=(($31)|0)!=0;
      if ($32) { __label__ = 6; break; } else { __label__ = 17; break; }
    case 6: 
      var $34=$1;
      var $35=(($34+20)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|0);
      var $40=$39;
      var $41=HEAP32[(($40)>>2)];
      var $42=$41;
      var $43=$42;
      var $44=(($43+16)|0);
      var $45=HEAP32[(($44)>>2)];
      $p=$45;
      var $46=$2;
      var $47=$p;
      var $48=(($47+12)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$46;
      var $51=$49;
      var $52=((($50)-($51))|0);
      var $53=((((($52)|0))/(4))&-1);
      var $54=((($53)-(1))|0);
      $npc=$54;
      var $55=$p;
      var $56=(($55+20)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57)|0)!=0;
      if ($58) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $60=$npc;
      var $61=$p;
      var $62=(($61+20)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+($60<<2))|0);
      var $65=HEAP32[(($64)>>2)];
      var $68 = $65;__label__ = 9; break;
    case 8: 
      var $68 = 0;__label__ = 9; break;
    case 9: 
      var $68;
      $newline=$68;
      var $69=$npc;
      var $70=(($69)|0)==0;
      if ($70) { __label__ = 15; break; } else { __label__ = 10; break; }
    case 10: 
      var $72=$2;
      var $73=$oldpc;
      var $74=(($72)>>>0) <= (($73)>>>0);
      if ($74) { __label__ = 15; break; } else { __label__ = 11; break; }
    case 11: 
      var $76=$newline;
      var $77=$p;
      var $78=(($77+20)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79)|0)!=0;
      if ($80) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $82=$oldpc;
      var $83=$p;
      var $84=(($83+12)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$82;
      var $87=$85;
      var $88=((($86)-($87))|0);
      var $89=((((($88)|0))/(4))&-1);
      var $90=((($89)-(1))|0);
      var $91=$p;
      var $92=(($91+20)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+($90<<2))|0);
      var $95=HEAP32[(($94)>>2)];
      var $98 = $95;__label__ = 14; break;
    case 13: 
      var $98 = 0;__label__ = 14; break;
    case 14: 
      var $98;
      var $99=(($76)|0)!=(($98)|0);
      if ($99) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $101=$1;
      var $102=$newline;
      _luaD_callhook($101, 2, $102);
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_traceexec["X"]=1;

function _Arith($L, $ra, $rb, $rc, $op) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $tempb=__stackBase__;
      var $tempc=(__stackBase__)+(12);
      var $b;
      var $c;
      var $nb;
      var $nc;
      var $i_o;
      var $i_o1;
      var $i_o2;
      var $i_o3;
      var $i_o4;
      var $i_o5;
      var $i_o6;
      $1=$L;
      $2=$ra;
      $3=$rb;
      $4=$rc;
      $5=$op;
      var $6=$3;
      var $7=_luaV_tonumber($6, $tempb);
      $b=$7;
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 14; break; }
    case 3: 
      var $10=$4;
      var $11=_luaV_tonumber($10, $tempc);
      $c=$11;
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 4; break; } else { __label__ = 14; break; }
    case 4: 
      var $14=$b;
      var $15=(($14)|0);
      var $16=$15;
      var $17=(tempDoubleI32[0]=HEAP32[(($16)>>2)],tempDoubleI32[1]=HEAP32[((($16)+(4))>>2)],tempDoubleF64[0]);
      $nb=$17;
      var $18=$c;
      var $19=(($18)|0);
      var $20=$19;
      var $21=(tempDoubleI32[0]=HEAP32[(($20)>>2)],tempDoubleI32[1]=HEAP32[((($20)+(4))>>2)],tempDoubleF64[0]);
      $nc=$21;
      var $22=$5;
      if ((($22)|0) == 5) {
        __label__ = 5; break;
      }
      else if ((($22)|0) == 6) {
        __label__ = 6; break;
      }
      else if ((($22)|0) == 7) {
        __label__ = 7; break;
      }
      else if ((($22)|0) == 8) {
        __label__ = 8; break;
      }
      else if ((($22)|0) == 9) {
        __label__ = 9; break;
      }
      else if ((($22)|0) == 10) {
        __label__ = 10; break;
      }
      else if ((($22)|0) == 11) {
        __label__ = 11; break;
      }
      else {
      __label__ = 12; break;
      }
      
    case 5: 
      var $24=$2;
      $i_o=$24;
      var $25=$nb;
      var $26=$nc;
      var $27=($25)+($26);
      var $28=$i_o;
      var $29=(($28)|0);
      var $30=$29;
      (tempDoubleF64[0]=$27,HEAP32[(($30)>>2)]=tempDoubleI32[0],HEAP32[((($30)+(4))>>2)]=tempDoubleI32[1]);
      var $31=$i_o;
      var $32=(($31+8)|0);
      HEAP32[(($32)>>2)]=3;
      __label__ = 13; break;
    case 6: 
      var $34=$2;
      $i_o1=$34;
      var $35=$nb;
      var $36=$nc;
      var $37=($35)-($36);
      var $38=$i_o1;
      var $39=(($38)|0);
      var $40=$39;
      (tempDoubleF64[0]=$37,HEAP32[(($40)>>2)]=tempDoubleI32[0],HEAP32[((($40)+(4))>>2)]=tempDoubleI32[1]);
      var $41=$i_o1;
      var $42=(($41+8)|0);
      HEAP32[(($42)>>2)]=3;
      __label__ = 13; break;
    case 7: 
      var $44=$2;
      $i_o2=$44;
      var $45=$nb;
      var $46=$nc;
      var $47=($45)*($46);
      var $48=$i_o2;
      var $49=(($48)|0);
      var $50=$49;
      (tempDoubleF64[0]=$47,HEAP32[(($50)>>2)]=tempDoubleI32[0],HEAP32[((($50)+(4))>>2)]=tempDoubleI32[1]);
      var $51=$i_o2;
      var $52=(($51+8)|0);
      HEAP32[(($52)>>2)]=3;
      __label__ = 13; break;
    case 8: 
      var $54=$2;
      $i_o3=$54;
      var $55=$nb;
      var $56=$nc;
      var $57=($55)/($56);
      var $58=$i_o3;
      var $59=(($58)|0);
      var $60=$59;
      (tempDoubleF64[0]=$57,HEAP32[(($60)>>2)]=tempDoubleI32[0],HEAP32[((($60)+(4))>>2)]=tempDoubleI32[1]);
      var $61=$i_o3;
      var $62=(($61+8)|0);
      HEAP32[(($62)>>2)]=3;
      __label__ = 13; break;
    case 9: 
      var $64=$2;
      $i_o4=$64;
      var $65=$nb;
      var $66=$nb;
      var $67=$nc;
      var $68=($66)/($67);
      var $69=_floor($68);
      var $70=$nc;
      var $71=($69)*($70);
      var $72=($65)-($71);
      var $73=$i_o4;
      var $74=(($73)|0);
      var $75=$74;
      (tempDoubleF64[0]=$72,HEAP32[(($75)>>2)]=tempDoubleI32[0],HEAP32[((($75)+(4))>>2)]=tempDoubleI32[1]);
      var $76=$i_o4;
      var $77=(($76+8)|0);
      HEAP32[(($77)>>2)]=3;
      __label__ = 13; break;
    case 10: 
      var $79=$2;
      $i_o5=$79;
      var $80=$nb;
      var $81=$nc;
      var $82=_llvm_pow_f64($80, $81);
      var $83=$i_o5;
      var $84=(($83)|0);
      var $85=$84;
      (tempDoubleF64[0]=$82,HEAP32[(($85)>>2)]=tempDoubleI32[0],HEAP32[((($85)+(4))>>2)]=tempDoubleI32[1]);
      var $86=$i_o5;
      var $87=(($86+8)|0);
      HEAP32[(($87)>>2)]=3;
      __label__ = 13; break;
    case 11: 
      var $89=$2;
      $i_o6=$89;
      var $90=$nb;
      var $91=(-$90);
      var $92=$i_o6;
      var $93=(($92)|0);
      var $94=$93;
      (tempDoubleF64[0]=$91,HEAP32[(($94)>>2)]=tempDoubleI32[0],HEAP32[((($94)+(4))>>2)]=tempDoubleI32[1]);
      var $95=$i_o6;
      var $96=(($95+8)|0);
      HEAP32[(($96)>>2)]=3;
      __label__ = 13; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      __label__ = 17; break;
    case 14: 
      var $100=$1;
      var $101=$3;
      var $102=$4;
      var $103=$2;
      var $104=$5;
      var $105=_call_binTM($100, $101, $102, $103, $104);
      var $106=(($105)|0)!=0;
      if ($106) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $108=$1;
      var $109=$3;
      var $110=$4;
      _luaG_aritherror($108, $109, $110);
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_Arith["X"]=1;

function _lessequal($L, $l, $r) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $res;
      $2=$L;
      $3=$l;
      $4=$r;
      var $5=$3;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$4;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($7)|0)!=(($10)|0);
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$2;
      var $14=$3;
      var $15=$4;
      var $16=_luaG_ordererror($13, $14, $15);
      $1=$16;
      __label__ = 17; break;
    case 4: 
      var $18=$3;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|0)==3;
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $23=$3;
      var $24=(($23)|0);
      var $25=$24;
      var $26=(tempDoubleI32[0]=HEAP32[(($25)>>2)],tempDoubleI32[1]=HEAP32[((($25)+(4))>>2)],tempDoubleF64[0]);
      var $27=$4;
      var $28=(($27)|0);
      var $29=$28;
      var $30=(tempDoubleI32[0]=HEAP32[(($29)>>2)],tempDoubleI32[1]=HEAP32[((($29)+(4))>>2)],tempDoubleF64[0]);
      var $31=$26 <= $30;
      var $32=(($31)&1);
      $1=$32;
      __label__ = 17; break;
    case 6: 
      var $34=$3;
      var $35=(($34+8)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|0)==4;
      if ($37) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $39=$3;
      var $40=(($39)|0);
      var $41=$40;
      var $42=HEAP32[(($41)>>2)];
      var $43=$42;
      var $44=$4;
      var $45=(($44)|0);
      var $46=$45;
      var $47=HEAP32[(($46)>>2)];
      var $48=$47;
      var $49=_l_strcmp($43, $48);
      var $50=(($49)|0) <= 0;
      var $51=(($50)&1);
      $1=$51;
      __label__ = 17; break;
    case 8: 
      var $53=$2;
      var $54=$3;
      var $55=$4;
      var $56=_call_orderTM($53, $54, $55, 14);
      $res=$56;
      var $57=(($56)|0)!=-1;
      if ($57) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $59=$res;
      $1=$59;
      __label__ = 17; break;
    case 10: 
      var $61=$2;
      var $62=$4;
      var $63=$3;
      var $64=_call_orderTM($61, $62, $63, 13);
      $res=$64;
      var $65=(($64)|0)!=-1;
      if ($65) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $67=$res;
      var $68=(($67)|0)!=0;
      var $69=$68 ^ 1;
      var $70=(($69)&1);
      $1=$70;
      __label__ = 17; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $76=$2;
      var $77=$3;
      var $78=$4;
      var $79=_luaG_ordererror($76, $77, $78);
      $1=$79;
      __label__ = 17; break;
    case 17: 
      var $81=$1;
      ;
      return $81;
    default: assert(0, "bad label: " + __label__);
  }
}
_lessequal["X"]=1;

function _luaZ_fill($z) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $size=__stackBase__;
      var $L;
      var $buff;
      $2=$z;
      var $3=$2;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      $L=$5;
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$L;
      var $10=$2;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=FUNCTION_TABLE[$8]($9, $12, $size);
      $buff=$13;
      var $14=$buff;
      var $15=(($14)|0)==0;
      if ($15) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $17=HEAP32[(($size)>>2)];
      var $18=(($17)|0)==0;
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $1=-1;
      __label__ = 6; break;
    case 5: 
      var $21=HEAP32[(($size)>>2)];
      var $22=((($21)-(1))|0);
      var $23=$2;
      var $24=(($23)|0);
      HEAP32[(($24)>>2)]=$22;
      var $25=$buff;
      var $26=$2;
      var $27=(($26+4)|0);
      HEAP32[(($27)>>2)]=$25;
      var $28=$2;
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+1)|0);
      HEAP32[(($29)>>2)]=$31;
      var $32=HEAPU8[($30)];
      var $33=(($32)&255);
      $1=$33;
      __label__ = 6; break;
    case 6: 
      var $35=$1;
      STACKTOP = __stackBase__;
      return $35;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaZ_lookahead($z) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$z;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)==0;
      if ($6) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $8=$2;
      var $9=_luaZ_fill($8);
      var $10=(($9)|0)==-1;
      if ($10) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $1=-1;
      __label__ = 8; break;
    case 5: 
      var $13=$2;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=((($15)+(1))|0);
      HEAP32[(($14)>>2)]=$16;
      var $17=$2;
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=((($19)-(1))|0);
      HEAP32[(($18)>>2)]=$20;
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $23=$2;
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=HEAPU8[($25)];
      var $27=(($26)&255);
      $1=$27;
      __label__ = 8; break;
    case 8: 
      var $29=$1;
      ;
      return $29;
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaZ_read($z, $b, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $m;
      $2=$z;
      $3=$b;
      $4=$n;
      __label__ = 3; break;
    case 3: 
      var $6=$4;
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 4; break; } else { __label__ = 10; break; }
    case 4: 
      var $9=$2;
      var $10=_luaZ_lookahead($9);
      var $11=(($10)|0)==-1;
      if ($11) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $13=$4;
      $1=$13;
      __label__ = 11; break;
    case 6: 
      var $15=$4;
      var $16=$2;
      var $17=(($16)|0);
      var $18=HEAPU32[(($17)>>2)];
      var $19=(($15)>>>0) <= (($18)>>>0);
      if ($19) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $21=$4;
      var $27 = $21;__label__ = 9; break;
    case 8: 
      var $23=$2;
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $27 = $25;__label__ = 9; break;
    case 9: 
      var $27;
      $m=$27;
      var $28=$3;
      var $29=$2;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$m;
      assert($32 % 1 === 0, 'memcpy given ' + $32 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($28, $31, $32, 1);
      var $33=$m;
      var $34=$2;
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36)-($33))|0);
      HEAP32[(($35)>>2)]=$37;
      var $38=$m;
      var $39=$2;
      var $40=(($39+4)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+$38)|0);
      HEAP32[(($40)>>2)]=$42;
      var $43=$3;
      var $44=$m;
      var $45=(($43+$44)|0);
      $3=$45;
      var $46=$m;
      var $47=$4;
      var $48=((($47)-($46))|0);
      $4=$48;
      __label__ = 3; break;
    case 10: 
      $1=0;
      __label__ = 11; break;
    case 11: 
      var $51=$1;
      ;
      return $51;
    default: assert(0, "bad label: " + __label__);
  }
}
_luaZ_read["X"]=1;

function _luaZ_openspace($L, $buff, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$L;
      $2=$buff;
      $3=$n;
      var $4=$3;
      var $5=$2;
      var $6=(($5+8)|0);
      var $7=HEAPU32[(($6)>>2)];
      var $8=(($4)>>>0) > (($7)>>>0);
      if ($8) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $10=$3;
      var $11=(($10)>>>0) < 32;
      if ($11) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $3=32;
      __label__ = 5; break;
    case 5: 
      var $14=$3;
      var $15=((($14)+(1))|0);
      var $16=(($15)>>>0) <= 4294967293;
      if ($16) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $18=$1;
      var $19=$2;
      var $20=(($19)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$2;
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|0);
      var $26=$3;
      var $27=(($26)|0);
      var $28=_luaM_realloc_($18, $21, $25, $27);
      var $33 = $28;__label__ = 8; break;
    case 7: 
      var $30=$1;
      var $31=_luaM_toobig($30);
      var $33 = $31;__label__ = 8; break;
    case 8: 
      var $33;
      var $34=$2;
      var $35=(($34)|0);
      HEAP32[(($35)>>2)]=$33;
      var $36=$3;
      var $37=$2;
      var $38=(($37+8)|0);
      HEAP32[(($38)>>2)]=$36;
      __label__ = 9; break;
    case 9: 
      var $40=$2;
      var $41=(($40)|0);
      var $42=HEAP32[(($41)>>2)];
      ;
      return $42;
    default: assert(0, "bad label: " + __label__);
  }
}


function _malloc($bytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $mem;
      var $nb;
      var $idx;
      var $smallbits;
      var $b;
      var $p;
      var $F;
      var $b1;
      var $p2;
      var $r;
      var $rsize;
      var $i;
      var $leftbits;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $F3;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F4;
      var $rsize5;
      var $p6;
      var $r7;
      var $dvs;
      var $rsize8;
      var $p9;
      var $r10;
      $1=$bytes;
      var $2=$1; //@line 4628 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $3=(($2)>>>0) <= 244; //@line 4628 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($3) { __label__ = 3; break; } else { __label__ = 38; break; } //@line 4628 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $5=$1; //@line 4631 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $6=(($5)>>>0) < 11; //@line 4631 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($6) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4631 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $14 = 16;__label__ = 6; break; //@line 4631 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $9=$1; //@line 4631 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $10=((($9)+(4))|0); //@line 4631 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $11=((($10)+(7))|0); //@line 4631 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $12=$11 & -8; //@line 4631 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $14 = $12;__label__ = 6; break; //@line 4631 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $14; //@line 4631 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $nb=$14; //@line 4631 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $15=$nb; //@line 4632 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $16=$15 >>> 3; //@line 4632 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $idx=$16; //@line 4632 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $17=HEAPU32[((((__gm_)|0))>>2)]; //@line 4633 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $18=$idx; //@line 4633 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $19=$17 >>> (($18)>>>0); //@line 4633 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $smallbits=$19; //@line 4633 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $20=$smallbits; //@line 4635 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $21=$20 & 3; //@line 4635 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $22=(($21)|0)!=0; //@line 4635 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($22) { __label__ = 7; break; } else { __label__ = 14; break; } //@line 4635 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $24=$smallbits; //@line 4637 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $25=$24 ^ -1; //@line 4637 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $26=$25 & 1; //@line 4637 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $27=$idx; //@line 4637 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $28=((($27)+($26))|0); //@line 4637 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $idx=$28; //@line 4637 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $29=$idx; //@line 4638 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $30=$29 << 1; //@line 4638 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $31=((((__gm_+40)|0)+($30<<2))|0); //@line 4638 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $32=$31; //@line 4638 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $33=$32; //@line 4638 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $b=$33; //@line 4638 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $34=$b; //@line 4639 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $35=(($34+8)|0); //@line 4639 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $36=HEAP32[(($35)>>2)]; //@line 4639 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $p=$36; //@line 4639 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $37=$p; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $38=(($37+8)|0); //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $39=HEAP32[(($38)>>2)]; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F=$39; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $40=$b; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $41=$F; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $42=(($40)|0)==(($41)|0); //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($42) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $44=$idx; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $45=1 << $44; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $46=$45 ^ -1; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $47=HEAP32[((((__gm_)|0))>>2)]; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $48=$47 & $46; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$48; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 13; break; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $50=$F; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $51=$50; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $52=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $53=(($51)>>>0) >= (($52)>>>0); //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $54=(($53)&1); //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $55=(($54)==(1)); //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $56=(($55)|0)!=0; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($56) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $58=$F; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $59=$b; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $60=(($59+8)|0); //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($60)>>2)]=$58; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $61=$b; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $62=$F; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $63=(($62+12)|0); //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($63)>>2)]=$61; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 11: 
      _abort(); //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4641 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $67=$idx; //@line 4642 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $68=$67 << 3; //@line 4642 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $69=$68 | 1; //@line 4642 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $70=$69 | 2; //@line 4642 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $71=$p; //@line 4642 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $72=(($71+4)|0); //@line 4642 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($72)>>2)]=$70; //@line 4642 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $73=$p; //@line 4642 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $74=$73; //@line 4642 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $75=$idx; //@line 4642 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $76=$75 << 3; //@line 4642 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $77=(($74+$76)|0); //@line 4642 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $78=$77; //@line 4642 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $79=(($78+4)|0); //@line 4642 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $80=HEAP32[(($79)>>2)]; //@line 4642 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $81=$80 | 1; //@line 4642 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($79)>>2)]=$81; //@line 4642 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $82=$p; //@line 4643 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $83=$82; //@line 4643 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $84=(($83+8)|0); //@line 4643 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $mem=$84; //@line 4643 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4645 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $86=$nb; //@line 4648 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $87=HEAPU32[((((__gm_+8)|0))>>2)]; //@line 4648 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $88=(($86)>>>0) > (($87)>>>0); //@line 4648 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($88) { __label__ = 15; break; } else { __label__ = 36; break; } //@line 4648 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $90=$smallbits; //@line 4649 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $91=(($90)|0)!=0; //@line 4649 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($91) { __label__ = 16; break; } else { __label__ = 31; break; } //@line 4649 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $93=$smallbits; //@line 4653 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $94=$idx; //@line 4653 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $95=$93 << $94; //@line 4653 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $96=$idx; //@line 4653 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $97=1 << $96; //@line 4653 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $98=$97 << 1; //@line 4653 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $99=$idx; //@line 4653 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $100=1 << $99; //@line 4653 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $101=$100 << 1; //@line 4653 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $102=(((-$101))|0); //@line 4653 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $103=$98 | $102; //@line 4653 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $104=$95 & $103; //@line 4653 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $leftbits=$104; //@line 4653 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $105=$leftbits; //@line 4654 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $106=$leftbits; //@line 4654 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $107=(((-$106))|0); //@line 4654 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $108=$105 & $107; //@line 4654 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $leastbit=$108; //@line 4654 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $109=$leastbit; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $110=((($109)-(1))|0); //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$110; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $111=$Y; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $112=$111 >>> 12; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $113=$112 & 16; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$113; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $114=$K; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$114; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $115=$K; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $116=$Y; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $117=$116 >>> (($115)>>>0); //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$117; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $118=$Y; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $119=$118 >>> 5; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $120=$119 & 8; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$120; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $121=$N; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $122=((($121)+($120))|0); //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$122; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $123=$K; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $124=$Y; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $125=$124 >>> (($123)>>>0); //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$125; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $126=$Y; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $127=$126 >>> 2; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $128=$127 & 4; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$128; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $129=$N; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $130=((($129)+($128))|0); //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$130; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $131=$K; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $132=$Y; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $133=$132 >>> (($131)>>>0); //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$133; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $134=$Y; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $135=$134 >>> 1; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $136=$135 & 2; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$136; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $137=$N; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $138=((($137)+($136))|0); //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$138; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $139=$K; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $140=$Y; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $141=$140 >>> (($139)>>>0); //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$141; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $142=$Y; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $143=$142 >>> 1; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $144=$143 & 1; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$144; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $145=$N; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $146=((($145)+($144))|0); //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$146; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $147=$K; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $148=$Y; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $149=$148 >>> (($147)>>>0); //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$149; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $150=$N; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $151=$Y; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $152=((($150)+($151))|0); //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $i=$152; //@line 4655 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $153=$i; //@line 4656 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $154=$153 << 1; //@line 4656 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $155=((((__gm_+40)|0)+($154<<2))|0); //@line 4656 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $156=$155; //@line 4656 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $157=$156; //@line 4656 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $b1=$157; //@line 4656 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $158=$b1; //@line 4657 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $159=(($158+8)|0); //@line 4657 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $160=HEAP32[(($159)>>2)]; //@line 4657 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $p2=$160; //@line 4657 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $161=$p2; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $162=(($161+8)|0); //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $163=HEAP32[(($162)>>2)]; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F3=$163; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $164=$b1; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $165=$F3; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $166=(($164)|0)==(($165)|0); //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($166) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $168=$i; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $169=1 << $168; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $170=$169 ^ -1; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $171=HEAP32[((((__gm_)|0))>>2)]; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $172=$171 & $170; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$172; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 22; break; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $174=$F3; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $175=$174; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $176=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $177=(($175)>>>0) >= (($176)>>>0); //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $178=(($177)&1); //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $179=(($178)==(1)); //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $180=(($179)|0)!=0; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($180) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $182=$F3; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $183=$b1; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $184=(($183+8)|0); //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($184)>>2)]=$182; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $185=$b1; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $186=$F3; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $187=(($186+12)|0); //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($187)>>2)]=$185; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 20: 
      _abort(); //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4659 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $191=$i; //@line 4660 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $192=$191 << 3; //@line 4660 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $193=$nb; //@line 4660 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $194=((($192)-($193))|0); //@line 4660 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $rsize=$194; //@line 4660 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $195=$nb; //@line 4665 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $196=$195 | 1; //@line 4665 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $197=$196 | 2; //@line 4665 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $198=$p2; //@line 4665 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $199=(($198+4)|0); //@line 4665 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($199)>>2)]=$197; //@line 4665 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $200=$p2; //@line 4666 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $201=$200; //@line 4666 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $202=$nb; //@line 4666 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $203=(($201+$202)|0); //@line 4666 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $204=$203; //@line 4666 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $r=$204; //@line 4666 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $205=$rsize; //@line 4667 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $206=$205 | 1; //@line 4667 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $207=$r; //@line 4667 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $208=(($207+4)|0); //@line 4667 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($208)>>2)]=$206; //@line 4667 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $209=$rsize; //@line 4667 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $210=$r; //@line 4667 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $211=$210; //@line 4667 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $212=$rsize; //@line 4667 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $213=(($211+$212)|0); //@line 4667 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $214=$213; //@line 4667 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $215=(($214)|0); //@line 4667 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($215)>>2)]=$209; //@line 4667 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $216=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $DVS=$216; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $217=$DVS; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $218=(($217)|0)!=0; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($218) { __label__ = 23; break; } else { __label__ = 30; break; } //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $220=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $DV=$220; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $221=$DVS; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $222=$221 >>> 3; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $I=$222; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $223=$I; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $224=$223 << 1; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $225=((((__gm_+40)|0)+($224<<2))|0); //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $226=$225; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $227=$226; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $B=$227; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $228=$B; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F4=$228; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $229=HEAP32[((((__gm_)|0))>>2)]; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $230=$I; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $231=1 << $230; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $232=$229 & $231; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $233=(($232)|0)!=0; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($233) { __label__ = 25; break; } else { __label__ = 24; break; } //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $235=$I; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $236=1 << $235; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $237=HEAP32[((((__gm_)|0))>>2)]; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $238=$237 | $236; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$238; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 29; break; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $240=$B; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $241=(($240+8)|0); //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $242=HEAP32[(($241)>>2)]; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $243=$242; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $244=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $245=(($243)>>>0) >= (($244)>>>0); //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $246=(($245)&1); //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $247=(($246)==(1)); //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $248=(($247)|0)!=0; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($248) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $250=$B; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $251=(($250+8)|0); //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $252=HEAP32[(($251)>>2)]; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F4=$252; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 27: 
      _abort(); //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $256=$DV; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $257=$B; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $258=(($257+8)|0); //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($258)>>2)]=$256; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $259=$DV; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $260=$F4; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $261=(($260+12)|0); //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($261)>>2)]=$259; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $262=$F4; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $263=$DV; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $264=(($263+8)|0); //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($264)>>2)]=$262; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $265=$B; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $266=$DV; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $267=(($266+12)|0); //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($267)>>2)]=$265; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 30; break; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $269=$rsize; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$269; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $270=$r; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$270; //@line 4668 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $271=$p2; //@line 4670 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $272=$271; //@line 4670 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $273=(($272+8)|0); //@line 4670 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $mem=$273; //@line 4670 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4672 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $275=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4675 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $276=(($275)|0)!=0; //@line 4675 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($276) { __label__ = 32; break; } else { __label__ = 34; break; } //@line 4675 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $278=$nb; //@line 4675 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $279=_tmalloc_small(__gm_, $278); //@line 4675 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $mem=$279; //@line 4675 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $280=(($279)|0)!=0; //@line 4675 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($280) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 4675 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 33: 
      __label__ = 54; break; //@line 4677 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 34: 
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break; //@line 4679 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 45; break; //@line 4680 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $287=$1; //@line 4681 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $288=(($287)>>>0) >= 4294967232; //@line 4681 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($288) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 4681 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 39: 
      $nb=-1; //@line 4682 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 44; break; //@line 4682 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $291=$1; //@line 4684 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $292=((($291)+(4))|0); //@line 4684 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $293=((($292)+(7))|0); //@line 4684 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $294=$293 & -8; //@line 4684 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $nb=$294; //@line 4684 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $295=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4685 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $296=(($295)|0)!=0; //@line 4685 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($296) { __label__ = 41; break; } else { __label__ = 43; break; } //@line 4685 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $298=$nb; //@line 4685 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $299=_tmalloc_large(__gm_, $298); //@line 4685 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $mem=$299; //@line 4685 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $300=(($299)|0)!=0; //@line 4685 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($300) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 4685 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 42: 
      __label__ = 54; break; //@line 4687 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 43: 
      __label__ = 44; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      var $305=$nb; //@line 4691 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $306=HEAPU32[((((__gm_+8)|0))>>2)]; //@line 4691 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $307=(($305)>>>0) <= (($306)>>>0); //@line 4691 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($307) { __label__ = 46; break; } else { __label__ = 50; break; } //@line 4691 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $309=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4692 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $310=$nb; //@line 4692 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $311=((($309)-($310))|0); //@line 4692 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $rsize5=$311; //@line 4692 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $312=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4693 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $p6=$312; //@line 4693 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $313=$rsize5; //@line 4694 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $314=(($313)>>>0) >= 16; //@line 4694 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($314) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 4694 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $316=$p6; //@line 4695 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $317=$316; //@line 4695 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $318=$nb; //@line 4695 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $319=(($317+$318)|0); //@line 4695 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $320=$319; //@line 4695 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$320; //@line 4695 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $r7=$320; //@line 4695 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $321=$rsize5; //@line 4696 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$321; //@line 4696 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $322=$rsize5; //@line 4697 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $323=$322 | 1; //@line 4697 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $324=$r7; //@line 4697 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $325=(($324+4)|0); //@line 4697 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($325)>>2)]=$323; //@line 4697 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $326=$rsize5; //@line 4697 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $327=$r7; //@line 4697 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $328=$327; //@line 4697 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $329=$rsize5; //@line 4697 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $330=(($328+$329)|0); //@line 4697 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $331=$330; //@line 4697 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $332=(($331)|0); //@line 4697 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($332)>>2)]=$326; //@line 4697 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $333=$nb; //@line 4698 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $334=$333 | 1; //@line 4698 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $335=$334 | 2; //@line 4698 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $336=$p6; //@line 4698 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $337=(($336+4)|0); //@line 4698 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($337)>>2)]=$335; //@line 4698 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break; //@line 4699 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $339=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4701 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $dvs=$339; //@line 4701 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=0; //@line 4702 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=0; //@line 4703 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $340=$dvs; //@line 4704 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $341=$340 | 1; //@line 4704 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $342=$341 | 2; //@line 4704 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $343=$p6; //@line 4704 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $344=(($343+4)|0); //@line 4704 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($344)>>2)]=$342; //@line 4704 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $345=$p6; //@line 4704 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $346=$345; //@line 4704 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $347=$dvs; //@line 4704 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $348=(($346+$347)|0); //@line 4704 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $349=$348; //@line 4704 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $350=(($349+4)|0); //@line 4704 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $351=HEAP32[(($350)>>2)]; //@line 4704 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $352=$351 | 1; //@line 4704 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($350)>>2)]=$352; //@line 4704 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break;
    case 49: 
      var $354=$p6; //@line 4706 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $355=$354; //@line 4706 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $356=(($355+8)|0); //@line 4706 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $mem=$356; //@line 4706 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4708 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $358=$nb; //@line 4711 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $359=HEAPU32[((((__gm_+12)|0))>>2)]; //@line 4711 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $360=(($358)>>>0) < (($359)>>>0); //@line 4711 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($360) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 4711 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 51: 
      var $362=$nb; //@line 4712 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $363=HEAP32[((((__gm_+12)|0))>>2)]; //@line 4712 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $364=((($363)-($362))|0); //@line 4712 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+12)|0))>>2)]=$364; //@line 4712 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $rsize8=$364; //@line 4712 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $365=HEAP32[((((__gm_+24)|0))>>2)]; //@line 4713 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $p9=$365; //@line 4713 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $366=$p9; //@line 4714 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $367=$366; //@line 4714 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $368=$nb; //@line 4714 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $369=(($367+$368)|0); //@line 4714 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $370=$369; //@line 4714 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+24)|0))>>2)]=$370; //@line 4714 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $r10=$370; //@line 4714 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $371=$rsize8; //@line 4715 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $372=$371 | 1; //@line 4715 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $373=$r10; //@line 4715 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $374=(($373+4)|0); //@line 4715 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($374)>>2)]=$372; //@line 4715 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $375=$nb; //@line 4716 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $376=$375 | 1; //@line 4716 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $377=$376 | 2; //@line 4716 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $378=$p9; //@line 4716 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $379=(($378+4)|0); //@line 4716 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($379)>>2)]=$377; //@line 4716 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $380=$p9; //@line 4717 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $381=$380; //@line 4717 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $382=(($381+8)|0); //@line 4717 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $mem=$382; //@line 4717 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4720 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $385=$nb; //@line 4723 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $386=_sys_alloc(__gm_, $385); //@line 4723 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $mem=$386; //@line 4723 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4723 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $388=$mem; //@line 4727 "/home/janus/emscripten/system/lib/dlmalloc.c"
      ;
      return $388; //@line 4727 "/home/janus/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
Module["_malloc"] = _malloc;_malloc["X"]=1;

function _tmalloc_small($m, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $t;
      var $v;
      var $rsize;
      var $i;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $trem;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F1;
      $1=$m;
      $2=$nb;
      var $3=$1; //@line 4268 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $4=(($3+4)|0); //@line 4268 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $5=HEAP32[(($4)>>2)]; //@line 4268 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $6=$1; //@line 4268 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $7=(($6+4)|0); //@line 4268 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $8=HEAP32[(($7)>>2)]; //@line 4268 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $9=(((-$8))|0); //@line 4268 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $10=$5 & $9; //@line 4268 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $leastbit=$10; //@line 4268 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $11=$leastbit; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $12=((($11)-(1))|0); //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$12; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $13=$Y; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $14=$13 >>> 12; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $15=$14 & 16; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$15; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $16=$K; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$16; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $17=$K; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $18=$Y; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $19=$18 >>> (($17)>>>0); //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$19; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $20=$Y; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $21=$20 >>> 5; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $22=$21 & 8; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$22; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $23=$N; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $24=((($23)+($22))|0); //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$24; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $25=$K; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $26=$Y; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $27=$26 >>> (($25)>>>0); //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$27; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $28=$Y; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $29=$28 >>> 2; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $30=$29 & 4; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$30; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $31=$N; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $32=((($31)+($30))|0); //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$32; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $33=$K; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $34=$Y; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $35=$34 >>> (($33)>>>0); //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$35; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $36=$Y; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $37=$36 >>> 1; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $38=$37 & 2; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$38; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $39=$N; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $40=((($39)+($38))|0); //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$40; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $41=$K; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $42=$Y; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $43=$42 >>> (($41)>>>0); //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$43; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $44=$Y; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $45=$44 >>> 1; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $46=$45 & 1; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$46; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $47=$N; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $48=((($47)+($46))|0); //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$48; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $49=$K; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $50=$Y; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $51=$50 >>> (($49)>>>0); //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$51; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $52=$N; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $53=$Y; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $54=((($52)+($53))|0); //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $i=$54; //@line 4269 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $55=$i; //@line 4270 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $56=$1; //@line 4270 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $57=(($56+304)|0); //@line 4270 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $58=(($57+($55<<2))|0); //@line 4270 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $59=HEAP32[(($58)>>2)]; //@line 4270 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $t=$59; //@line 4270 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $v=$59; //@line 4270 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $60=$t; //@line 4271 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $61=(($60+4)|0); //@line 4271 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $62=HEAP32[(($61)>>2)]; //@line 4271 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $63=$62 & -8; //@line 4271 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $64=$2; //@line 4271 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $65=((($63)-($64))|0); //@line 4271 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $rsize=$65; //@line 4271 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $67=$t; //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $68=(($67+16)|0); //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $69=(($68)|0); //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $70=HEAP32[(($69)>>2)]; //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $71=(($70)|0)!=0; //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($71) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $73=$t; //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $74=(($73+16)|0); //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $75=(($74)|0); //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $76=HEAP32[(($75)>>2)]; //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $83 = $76;__label__ = 6; break; //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $78=$t; //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $79=(($78+16)|0); //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $80=(($79+4)|0); //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $81=HEAP32[(($80)>>2)]; //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $83 = $81;__label__ = 6; break; //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $83; //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $t=$83; //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $84=(($83)|0)!=0; //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($84) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 4273 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $86=$t; //@line 4274 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $87=(($86+4)|0); //@line 4274 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $88=HEAP32[(($87)>>2)]; //@line 4274 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $89=$88 & -8; //@line 4274 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $90=$2; //@line 4274 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $91=((($89)-($90))|0); //@line 4274 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $trem=$91; //@line 4274 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $92=$trem; //@line 4275 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $93=$rsize; //@line 4275 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $94=(($92)>>>0) < (($93)>>>0); //@line 4275 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($94) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4275 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $96=$trem; //@line 4276 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $rsize=$96; //@line 4276 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $97=$t; //@line 4277 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $v=$97; //@line 4277 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 4278 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 9: 
      __label__ = 3; break; //@line 4279 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $100=$v; //@line 4281 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $101=$100; //@line 4281 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $102=$1; //@line 4281 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $103=(($102+16)|0); //@line 4281 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $104=HEAPU32[(($103)>>2)]; //@line 4281 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $105=(($101)>>>0) >= (($104)>>>0); //@line 4281 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $106=(($105)&1); //@line 4281 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $107=(($106)==(1)); //@line 4281 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $108=(($107)|0)!=0; //@line 4281 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($108) { __label__ = 11; break; } else { __label__ = 70; break; } //@line 4281 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $110=$v; //@line 4282 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $111=$110; //@line 4282 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $112=$2; //@line 4282 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $113=(($111+$112)|0); //@line 4282 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $114=$113; //@line 4282 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $r=$114; //@line 4282 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $115=$v; //@line 4284 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $116=$115; //@line 4284 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $117=$r; //@line 4284 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $118=$117; //@line 4284 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $119=(($116)>>>0) < (($118)>>>0); //@line 4284 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $120=(($119)&1); //@line 4284 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $121=(($120)==(1)); //@line 4284 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $122=(($121)|0)!=0; //@line 4284 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($122) { __label__ = 12; break; } else { __label__ = 69; break; } //@line 4284 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $124=$v; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $125=(($124+24)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $126=HEAP32[(($125)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $XP=$126; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $127=$v; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $128=(($127+12)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $129=HEAP32[(($128)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $130=$v; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $131=(($129)|0)!=(($130)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($131) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $133=$v; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $134=(($133+8)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $135=HEAP32[(($134)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F=$135; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $136=$v; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $137=(($136+12)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $138=HEAP32[(($137)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$138; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $139=$F; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $140=$139; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $141=$1; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $142=(($141+16)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $143=HEAPU32[(($142)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $144=(($140)>>>0) >= (($143)>>>0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $145=(($144)&1); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $146=(($145)==(1)); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $147=(($146)|0)!=0; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($147) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $149=$R; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $150=$F; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $151=(($150+12)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($151)>>2)]=$149; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $152=$F; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $153=$R; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $154=(($153+8)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($154)>>2)]=$152; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 16; break; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 15: 
      _abort(); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 16: 
      __label__ = 29; break; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $158=$v; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $159=(($158+16)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $160=(($159+4)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $RP=$160; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $161=HEAP32[(($160)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$161; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $162=(($161)|0)!=0; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($162) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $164=$v; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $165=(($164+16)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $166=(($165)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $RP=$166; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $167=HEAP32[(($166)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$167; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $168=(($167)|0)!=0; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($168) { __label__ = 19; break; } else { __label__ = 28; break; } //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 19: 
      __label__ = 20; break; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $171=$R; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $172=(($171+16)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $173=(($172+4)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $CP=$173; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $174=HEAP32[(($173)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $175=(($174)|0)!=0; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($175) { var $183 = 1;__label__ = 22; break; } else { __label__ = 21; break; } //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $177=$R; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $178=(($177+16)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $179=(($178)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $CP=$179; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $180=HEAP32[(($179)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $181=(($180)|0)!=0; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $183 = $181;__label__ = 22; break; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $183;
      if ($183) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $185=$CP; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $RP=$185; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $186=HEAP32[(($185)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$186; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $188=$RP; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $189=$188; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $190=$1; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $191=(($190+16)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $192=HEAPU32[(($191)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $193=(($189)>>>0) >= (($192)>>>0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $194=(($193)&1); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $195=(($194)==(1)); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $196=(($195)|0)!=0; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($196) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $198=$RP; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($198)>>2)]=0; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 26: 
      _abort(); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 27: 
      __label__ = 28; break; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $203=$XP; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $204=(($203)|0)!=0; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($204) { __label__ = 30; break; } else { __label__ = 57; break; } //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $206=$v; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $207=(($206+28)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $208=HEAP32[(($207)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $209=$1; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $210=(($209+304)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $211=(($210+($208<<2))|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $H=$211; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $212=$v; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $213=$H; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $214=HEAP32[(($213)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $215=(($212)|0)==(($214)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($215) { __label__ = 31; break; } else { __label__ = 34; break; } //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $217=$R; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $218=$H; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($218)>>2)]=$217; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $219=(($217)|0)==0; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($219) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $221=$v; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $222=(($221+28)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $223=HEAP32[(($222)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $224=1 << $223; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $225=$224 ^ -1; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $226=$1; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $227=(($226+4)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $228=HEAP32[(($227)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $229=$228 & $225; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($227)>>2)]=$229; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 33; break; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 33: 
      __label__ = 41; break; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $232=$XP; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $233=$232; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $234=$1; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $235=(($234+16)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $236=HEAPU32[(($235)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $237=(($233)>>>0) >= (($236)>>>0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $238=(($237)&1); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $239=(($238)==(1)); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $240=(($239)|0)!=0; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($240) { __label__ = 35; break; } else { __label__ = 39; break; } //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $242=$XP; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $243=(($242+16)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $244=(($243)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $245=HEAP32[(($244)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $246=$v; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $247=(($245)|0)==(($246)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($247) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $249=$R; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $250=$XP; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $251=(($250+16)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $252=(($251)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($252)>>2)]=$249; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $254=$R; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $255=$XP; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $256=(($255+16)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $257=(($256+4)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($257)>>2)]=$254; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break;
    case 38: 
      __label__ = 40; break; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 39: 
      _abort(); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 40: 
      __label__ = 41; break;
    case 41: 
      var $262=$R; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $263=(($262)|0)!=0; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($263) { __label__ = 42; break; } else { __label__ = 56; break; } //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $265=$R; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $266=$265; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $267=$1; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $268=(($267+16)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $269=HEAPU32[(($268)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $270=(($266)>>>0) >= (($269)>>>0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $271=(($270)&1); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $272=(($271)==(1)); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $273=(($272)|0)!=0; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($273) { __label__ = 43; break; } else { __label__ = 54; break; } //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $275=$XP; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $276=$R; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $277=(($276+24)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($277)>>2)]=$275; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $278=$v; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $279=(($278+16)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $280=(($279)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $281=HEAP32[(($280)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $C0=$281; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $282=(($281)|0)!=0; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($282) { __label__ = 44; break; } else { __label__ = 48; break; } //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $284=$C0; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $285=$284; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $286=$1; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $287=(($286+16)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $288=HEAPU32[(($287)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $289=(($285)>>>0) >= (($288)>>>0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $290=(($289)&1); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $291=(($290)==(1)); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $292=(($291)|0)!=0; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($292) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $294=$C0; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $295=$R; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $296=(($295+16)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $297=(($296)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($297)>>2)]=$294; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $298=$R; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $299=$C0; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $300=(($299+24)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($300)>>2)]=$298; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 46: 
      _abort(); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 47: 
      __label__ = 48; break; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $304=$v; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $305=(($304+16)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $306=(($305+4)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $307=HEAP32[(($306)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $C1=$307; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $308=(($307)|0)!=0; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($308) { __label__ = 49; break; } else { __label__ = 53; break; } //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $310=$C1; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $311=$310; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $312=$1; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $313=(($312+16)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $314=HEAPU32[(($313)>>2)]; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $315=(($311)>>>0) >= (($314)>>>0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $316=(($315)&1); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $317=(($316)==(1)); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $318=(($317)|0)!=0; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($318) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $320=$C1; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $321=$R; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $322=(($321+16)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $323=(($322+4)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($323)>>2)]=$320; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $324=$R; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $325=$C1; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $326=(($325+24)|0); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($326)>>2)]=$324; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 52; break; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 51: 
      _abort(); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 53; break; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 53: 
      __label__ = 55; break; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 54: 
      _abort(); //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 55: 
      __label__ = 56; break; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 56: 
      __label__ = 57; break; //@line 4285 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $334=$rsize; //@line 4286 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $335=(($334)>>>0) < 16; //@line 4286 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($335) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 4286 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $337=$rsize; //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $338=$2; //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $339=((($337)+($338))|0); //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $340=$339 | 1; //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $341=$340 | 2; //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $342=$v; //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $343=(($342+4)|0); //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($343)>>2)]=$341; //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $344=$v; //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $345=$344; //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $346=$rsize; //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $347=$2; //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $348=((($346)+($347))|0); //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $349=(($345+$348)|0); //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $350=$349; //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $351=(($350+4)|0); //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $352=HEAP32[(($351)>>2)]; //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $353=$352 | 1; //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($351)>>2)]=$353; //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 68; break; //@line 4287 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $355=$2; //@line 4289 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $356=$355 | 1; //@line 4289 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $357=$356 | 2; //@line 4289 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $358=$v; //@line 4289 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $359=(($358+4)|0); //@line 4289 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($359)>>2)]=$357; //@line 4289 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $360=$rsize; //@line 4290 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $361=$360 | 1; //@line 4290 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $362=$r; //@line 4290 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $363=(($362+4)|0); //@line 4290 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($363)>>2)]=$361; //@line 4290 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $364=$rsize; //@line 4290 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $365=$r; //@line 4290 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $366=$365; //@line 4290 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $367=$rsize; //@line 4290 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $368=(($366+$367)|0); //@line 4290 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $369=$368; //@line 4290 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $370=(($369)|0); //@line 4290 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($370)>>2)]=$364; //@line 4290 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $371=$1; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $372=(($371+8)|0); //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $373=HEAP32[(($372)>>2)]; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $DVS=$373; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $374=$DVS; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $375=(($374)|0)!=0; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($375) { __label__ = 60; break; } else { __label__ = 67; break; } //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $377=$1; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $378=(($377+20)|0); //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $379=HEAP32[(($378)>>2)]; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $DV=$379; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $380=$DVS; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $381=$380 >>> 3; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $I=$381; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $382=$I; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $383=$382 << 1; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $384=$1; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $385=(($384+40)|0); //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $386=(($385+($383<<2))|0); //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $387=$386; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $388=$387; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $B=$388; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $389=$B; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F1=$389; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $390=$1; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $391=(($390)|0); //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $392=HEAP32[(($391)>>2)]; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $393=$I; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $394=1 << $393; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $395=$392 & $394; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $396=(($395)|0)!=0; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($396) { __label__ = 62; break; } else { __label__ = 61; break; } //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $398=$I; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $399=1 << $398; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $400=$1; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $401=(($400)|0); //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $402=HEAP32[(($401)>>2)]; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $403=$402 | $399; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($401)>>2)]=$403; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 66; break; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $405=$B; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $406=(($405+8)|0); //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $407=HEAP32[(($406)>>2)]; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $408=$407; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $409=$1; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $410=(($409+16)|0); //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $411=HEAPU32[(($410)>>2)]; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $412=(($408)>>>0) >= (($411)>>>0); //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $413=(($412)&1); //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $414=(($413)==(1)); //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $415=(($414)|0)!=0; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($415) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $417=$B; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $418=(($417+8)|0); //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $419=HEAP32[(($418)>>2)]; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F1=$419; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 64: 
      _abort(); //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 65: 
      __label__ = 66; break;
    case 66: 
      var $423=$DV; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $424=$B; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $425=(($424+8)|0); //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($425)>>2)]=$423; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $426=$DV; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $427=$F1; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $428=(($427+12)|0); //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($428)>>2)]=$426; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $429=$F1; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $430=$DV; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $431=(($430+8)|0); //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($431)>>2)]=$429; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $432=$B; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $433=$DV; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $434=(($433+12)|0); //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($434)>>2)]=$432; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 67; break; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 67: 
      var $436=$rsize; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $437=$1; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $438=(($437+8)|0); //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($438)>>2)]=$436; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $439=$r; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $440=$1; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $441=(($440+20)|0); //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($441)>>2)]=$439; //@line 4291 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 68; break;
    case 68: 
      var $443=$v; //@line 4293 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $444=$443; //@line 4293 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $445=(($444+8)|0); //@line 4293 "/home/janus/emscripten/system/lib/dlmalloc.c"
      ;
      return $445; //@line 4293 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 69: 
      __label__ = 70; break; //@line 4295 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 70: 
      _abort(); //@line 4297 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4297 "/home/janus/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_tmalloc_small["X"]=1;

function _tmalloc_large($m, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $v;
      var $rsize;
      var $t;
      var $idx;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $sizebits;
      var $rst;
      var $rt;
      var $trem;
      var $leftbits;
      var $i;
      var $leastbit;
      var $Y1;
      var $K2;
      var $N3;
      var $trem4;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I;
      var $B;
      var $F5;
      var $TP;
      var $H6;
      var $I7;
      var $X8;
      var $Y9;
      var $N10;
      var $K11;
      var $T;
      var $K12;
      var $C;
      var $F13;
      $2=$m;
      $3=$nb;
      $v=0; //@line 4194 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $4=$3; //@line 4195 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $5=(((-$4))|0); //@line 4195 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $rsize=$5; //@line 4195 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $6=$3; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $7=$6 >>> 8; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $X=$7; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $8=$X; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $9=(($8)|0)==0; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 3: 
      $idx=0; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 8; break; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $12=$X; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $13=(($12)>>>0) > 65535; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 5: 
      $idx=31; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $16=$X; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$16; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $17=$Y; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $18=((($17)-(256))|0); //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $19=$18 >>> 16; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $20=$19 & 8; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$20; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $21=$N; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $22=$Y; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $23=$22 << $21; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$23; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $24=((($23)-(4096))|0); //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $25=$24 >>> 16; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $26=$25 & 4; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$26; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $27=$K; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $28=$N; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $29=((($28)+($27))|0); //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$29; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $30=$K; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $31=$Y; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $32=$31 << $30; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$32; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $33=((($32)-(16384))|0); //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $34=$33 >>> 16; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $35=$34 & 2; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$35; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $36=$N; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $37=((($36)+($35))|0); //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$37; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $38=$N; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $39=(((14)-($38))|0); //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $40=$K; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $41=$Y; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $42=$41 << $40; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$42; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $43=$42 >>> 15; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $44=((($39)+($43))|0); //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$44; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $45=$K; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $46=$45 << 1; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $47=$3; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $48=$K; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $49=((($48)+(7))|0); //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $50=$47 >>> (($49)>>>0); //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $51=$50 & 1; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $52=((($46)+($51))|0); //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $idx=$52; //@line 4198 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $55=$idx; //@line 4199 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $56=$2; //@line 4199 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $57=(($56+304)|0); //@line 4199 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $58=(($57+($55<<2))|0); //@line 4199 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $59=HEAP32[(($58)>>2)]; //@line 4199 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $t=$59; //@line 4199 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $60=(($59)|0)!=0; //@line 4199 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($60) { __label__ = 9; break; } else { __label__ = 24; break; } //@line 4199 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $62=$3; //@line 4201 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $63=$idx; //@line 4201 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $64=(($63)|0)==31; //@line 4201 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($64) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4201 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $73 = 0;__label__ = 12; break; //@line 4201 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $67=$idx; //@line 4201 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $68=$67 >>> 1; //@line 4201 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $69=((($68)+(8))|0); //@line 4201 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $70=((($69)-(2))|0); //@line 4201 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $71=(((31)-($70))|0); //@line 4201 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $73 = $71;__label__ = 12; break; //@line 4201 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $73; //@line 4201 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $74=$62 << $73; //@line 4201 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $sizebits=$74; //@line 4201 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $rst=0; //@line 4202 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 13; break; //@line 4203 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $76=$t; //@line 4205 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $77=(($76+4)|0); //@line 4205 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $78=HEAP32[(($77)>>2)]; //@line 4205 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $79=$78 & -8; //@line 4205 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $80=$3; //@line 4205 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $81=((($79)-($80))|0); //@line 4205 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $trem=$81; //@line 4205 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $82=$trem; //@line 4206 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $83=$rsize; //@line 4206 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $84=(($82)>>>0) < (($83)>>>0); //@line 4206 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($84) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 4206 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $86=$t; //@line 4207 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $v=$86; //@line 4207 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $87=$trem; //@line 4208 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $rsize=$87; //@line 4208 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $88=(($87)|0)==0; //@line 4208 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($88) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4208 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 15: 
      __label__ = 23; break; //@line 4209 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 16: 
      __label__ = 17; break; //@line 4210 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $92=$t; //@line 4211 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $93=(($92+16)|0); //@line 4211 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $94=(($93+4)|0); //@line 4211 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $95=HEAP32[(($94)>>2)]; //@line 4211 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $rt=$95; //@line 4211 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $96=$sizebits; //@line 4212 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $97=$96 >>> 31; //@line 4212 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $98=$97 & 1; //@line 4212 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $99=$t; //@line 4212 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $100=(($99+16)|0); //@line 4212 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $101=(($100+($98<<2))|0); //@line 4212 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $102=HEAP32[(($101)>>2)]; //@line 4212 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $t=$102; //@line 4212 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $103=$rt; //@line 4213 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $104=(($103)|0)!=0; //@line 4213 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($104) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 4213 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $106=$rt; //@line 4213 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $107=$t; //@line 4213 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $108=(($106)|0)!=(($107)|0); //@line 4213 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($108) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4213 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $110=$rt; //@line 4214 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $rst=$110; //@line 4214 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 4214 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $112=$t; //@line 4215 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $113=(($112)|0)==0; //@line 4215 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($113) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 4215 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $115=$rst; //@line 4216 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $t=$115; //@line 4216 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 23; break; //@line 4217 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $117=$sizebits; //@line 4219 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $118=$117 << 1; //@line 4219 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $sizebits=$118; //@line 4219 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 13; break; //@line 4220 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 23: 
      __label__ = 24; break; //@line 4221 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $121=$t; //@line 4222 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $122=(($121)|0)==0; //@line 4222 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($122) { __label__ = 25; break; } else { __label__ = 29; break; } //@line 4222 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $124=$v; //@line 4222 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $125=(($124)|0)==0; //@line 4222 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($125) { __label__ = 26; break; } else { __label__ = 29; break; } //@line 4222 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $127=$idx; //@line 4223 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $128=1 << $127; //@line 4223 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $129=$128 << 1; //@line 4223 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $130=$idx; //@line 4223 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $131=1 << $130; //@line 4223 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $132=$131 << 1; //@line 4223 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $133=(((-$132))|0); //@line 4223 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $134=$129 | $133; //@line 4223 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $135=$2; //@line 4223 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $136=(($135+4)|0); //@line 4223 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $137=HEAP32[(($136)>>2)]; //@line 4223 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $138=$134 & $137; //@line 4223 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $leftbits=$138; //@line 4223 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $139=$leftbits; //@line 4224 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $140=(($139)|0)!=0; //@line 4224 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($140) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 4224 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $142=$leftbits; //@line 4226 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $143=$leftbits; //@line 4226 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $144=(((-$143))|0); //@line 4226 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $145=$142 & $144; //@line 4226 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $leastbit=$145; //@line 4226 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $146=$leastbit; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $147=((($146)-(1))|0); //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y1=$147; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $148=$Y1; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $149=$148 >>> 12; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $150=$149 & 16; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K2=$150; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $151=$K2; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N3=$151; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $152=$K2; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $153=$Y1; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $154=$153 >>> (($152)>>>0); //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y1=$154; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $155=$Y1; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $156=$155 >>> 5; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $157=$156 & 8; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K2=$157; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $158=$N3; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $159=((($158)+($157))|0); //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N3=$159; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $160=$K2; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $161=$Y1; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $162=$161 >>> (($160)>>>0); //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y1=$162; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $163=$Y1; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $164=$163 >>> 2; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $165=$164 & 4; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K2=$165; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $166=$N3; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $167=((($166)+($165))|0); //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N3=$167; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $168=$K2; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $169=$Y1; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $170=$169 >>> (($168)>>>0); //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y1=$170; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $171=$Y1; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $172=$171 >>> 1; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $173=$172 & 2; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K2=$173; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $174=$N3; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $175=((($174)+($173))|0); //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N3=$175; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $176=$K2; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $177=$Y1; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $178=$177 >>> (($176)>>>0); //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y1=$178; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $179=$Y1; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $180=$179 >>> 1; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $181=$180 & 1; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K2=$181; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $182=$N3; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $183=((($182)+($181))|0); //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N3=$183; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $184=$K2; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $185=$Y1; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $186=$185 >>> (($184)>>>0); //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y1=$186; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $187=$N3; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $188=$Y1; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $189=((($187)+($188))|0); //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $i=$189; //@line 4227 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $190=$i; //@line 4228 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $191=$2; //@line 4228 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $192=(($191+304)|0); //@line 4228 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $193=(($192+($190<<2))|0); //@line 4228 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $194=HEAP32[(($193)>>2)]; //@line 4228 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $t=$194; //@line 4228 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4229 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break; //@line 4230 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 29: 
      __label__ = 30; break; //@line 4232 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $198=$t; //@line 4232 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $199=(($198)|0)!=0; //@line 4232 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($199) { __label__ = 31; break; } else { __label__ = 37; break; } //@line 4232 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $201=$t; //@line 4233 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $202=(($201+4)|0); //@line 4233 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $203=HEAP32[(($202)>>2)]; //@line 4233 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $204=$203 & -8; //@line 4233 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $205=$3; //@line 4233 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $206=((($204)-($205))|0); //@line 4233 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $trem4=$206; //@line 4233 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $207=$trem4; //@line 4234 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $208=$rsize; //@line 4234 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $209=(($207)>>>0) < (($208)>>>0); //@line 4234 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($209) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4234 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $211=$trem4; //@line 4235 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $rsize=$211; //@line 4235 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $212=$t; //@line 4236 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $v=$212; //@line 4236 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 33; break; //@line 4237 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $214=$t; //@line 4238 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $215=(($214+16)|0); //@line 4238 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $216=(($215)|0); //@line 4238 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $217=HEAP32[(($216)>>2)]; //@line 4238 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $218=(($217)|0)!=0; //@line 4238 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($218) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 4238 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $220=$t; //@line 4238 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $221=(($220+16)|0); //@line 4238 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $222=(($221)|0); //@line 4238 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $223=HEAP32[(($222)>>2)]; //@line 4238 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $230 = $223;__label__ = 36; break; //@line 4238 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $225=$t; //@line 4238 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $226=(($225+16)|0); //@line 4238 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $227=(($226+4)|0); //@line 4238 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $228=HEAP32[(($227)>>2)]; //@line 4238 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $230 = $228;__label__ = 36; break; //@line 4238 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $230; //@line 4238 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $t=$230; //@line 4238 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 30; break; //@line 4239 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $232=$v; //@line 4242 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $233=(($232)|0)!=0; //@line 4242 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($233) { __label__ = 38; break; } else { __label__ = 127; break; } //@line 4242 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $235=$rsize; //@line 4242 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $236=$2; //@line 4242 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $237=(($236+8)|0); //@line 4242 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $238=HEAP32[(($237)>>2)]; //@line 4242 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $239=$3; //@line 4242 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $240=((($238)-($239))|0); //@line 4242 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $241=(($235)>>>0) < (($240)>>>0); //@line 4242 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($241) { __label__ = 39; break; } else { __label__ = 127; break; } //@line 4242 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $243=$v; //@line 4243 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $244=$243; //@line 4243 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $245=$2; //@line 4243 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $246=(($245+16)|0); //@line 4243 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $247=HEAPU32[(($246)>>2)]; //@line 4243 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $248=(($244)>>>0) >= (($247)>>>0); //@line 4243 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $249=(($248)&1); //@line 4243 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $250=(($249)==(1)); //@line 4243 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $251=(($250)|0)!=0; //@line 4243 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($251) { __label__ = 40; break; } else { __label__ = 126; break; } //@line 4243 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $253=$v; //@line 4244 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $254=$253; //@line 4244 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $255=$3; //@line 4244 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $256=(($254+$255)|0); //@line 4244 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $257=$256; //@line 4244 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $r=$257; //@line 4244 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $258=$v; //@line 4246 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $259=$258; //@line 4246 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $260=$r; //@line 4246 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $261=$260; //@line 4246 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $262=(($259)>>>0) < (($261)>>>0); //@line 4246 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $263=(($262)&1); //@line 4246 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $264=(($263)==(1)); //@line 4246 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $265=(($264)|0)!=0; //@line 4246 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($265) { __label__ = 41; break; } else { __label__ = 125; break; } //@line 4246 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $267=$v; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $268=(($267+24)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $269=HEAP32[(($268)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $XP=$269; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $270=$v; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $271=(($270+12)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $272=HEAP32[(($271)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $273=$v; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $274=(($272)|0)!=(($273)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($274) { __label__ = 42; break; } else { __label__ = 46; break; } //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $276=$v; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $277=(($276+8)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $278=HEAP32[(($277)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F=$278; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $279=$v; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $280=(($279+12)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $281=HEAP32[(($280)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$281; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $282=$F; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $283=$282; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $284=$2; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $285=(($284+16)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $286=HEAPU32[(($285)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $287=(($283)>>>0) >= (($286)>>>0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $288=(($287)&1); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $289=(($288)==(1)); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $290=(($289)|0)!=0; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($290) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $292=$R; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $293=$F; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $294=(($293+12)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($294)>>2)]=$292; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $295=$F; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $296=$R; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $297=(($296+8)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($297)>>2)]=$295; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 45; break; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 44: 
      _abort(); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 45: 
      __label__ = 58; break; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $301=$v; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $302=(($301+16)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $303=(($302+4)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $RP=$303; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $304=HEAP32[(($303)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$304; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $305=(($304)|0)!=0; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($305) { __label__ = 48; break; } else { __label__ = 47; break; } //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $307=$v; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $308=(($307+16)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $309=(($308)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $RP=$309; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $310=HEAP32[(($309)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$310; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $311=(($310)|0)!=0; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($311) { __label__ = 48; break; } else { __label__ = 57; break; } //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 48: 
      __label__ = 49; break; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $314=$R; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $315=(($314+16)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $316=(($315+4)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $CP=$316; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $317=HEAP32[(($316)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $318=(($317)|0)!=0; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($318) { var $326 = 1;__label__ = 51; break; } else { __label__ = 50; break; } //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $320=$R; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $321=(($320+16)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $322=(($321)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $CP=$322; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $323=HEAP32[(($322)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $324=(($323)|0)!=0; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $326 = $324;__label__ = 51; break; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 51: 
      var $326;
      if ($326) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 52: 
      var $328=$CP; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $RP=$328; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $329=HEAP32[(($328)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$329; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 53: 
      var $331=$RP; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $332=$331; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $333=$2; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $334=(($333+16)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $335=HEAPU32[(($334)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $336=(($332)>>>0) >= (($335)>>>0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $337=(($336)&1); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $338=(($337)==(1)); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $339=(($338)|0)!=0; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($339) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $341=$RP; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($341)>>2)]=0; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 56; break; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 55: 
      _abort(); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 56: 
      __label__ = 57; break; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 57: 
      __label__ = 58; break;
    case 58: 
      var $346=$XP; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $347=(($346)|0)!=0; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($347) { __label__ = 59; break; } else { __label__ = 86; break; } //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $349=$v; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $350=(($349+28)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $351=HEAP32[(($350)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $352=$2; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $353=(($352+304)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $354=(($353+($351<<2))|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $H=$354; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $355=$v; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $356=$H; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $357=HEAP32[(($356)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $358=(($355)|0)==(($357)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($358) { __label__ = 60; break; } else { __label__ = 63; break; } //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $360=$R; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $361=$H; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($361)>>2)]=$360; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $362=(($360)|0)==0; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($362) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $364=$v; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $365=(($364+28)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $366=HEAP32[(($365)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $367=1 << $366; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $368=$367 ^ -1; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $369=$2; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $370=(($369+4)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $371=HEAP32[(($370)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $372=$371 & $368; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($370)>>2)]=$372; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 62; break; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 62: 
      __label__ = 70; break; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $375=$XP; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $376=$375; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $377=$2; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $378=(($377+16)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $379=HEAPU32[(($378)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $380=(($376)>>>0) >= (($379)>>>0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $381=(($380)&1); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $382=(($381)==(1)); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $383=(($382)|0)!=0; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($383) { __label__ = 64; break; } else { __label__ = 68; break; } //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 64: 
      var $385=$XP; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $386=(($385+16)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $387=(($386)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $388=HEAP32[(($387)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $389=$v; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $390=(($388)|0)==(($389)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($390) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 65: 
      var $392=$R; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $393=$XP; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $394=(($393+16)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $395=(($394)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($395)>>2)]=$392; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 67; break; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 66: 
      var $397=$R; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $398=$XP; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $399=(($398+16)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $400=(($399+4)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($400)>>2)]=$397; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 67; break;
    case 67: 
      __label__ = 69; break; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 68: 
      _abort(); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 69: 
      __label__ = 70; break;
    case 70: 
      var $405=$R; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $406=(($405)|0)!=0; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($406) { __label__ = 71; break; } else { __label__ = 85; break; } //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $408=$R; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $409=$408; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $410=$2; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $411=(($410+16)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $412=HEAPU32[(($411)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $413=(($409)>>>0) >= (($412)>>>0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $414=(($413)&1); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $415=(($414)==(1)); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $416=(($415)|0)!=0; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($416) { __label__ = 72; break; } else { __label__ = 83; break; } //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $418=$XP; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $419=$R; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $420=(($419+24)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($420)>>2)]=$418; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $421=$v; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $422=(($421+16)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $423=(($422)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $424=HEAP32[(($423)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $C0=$424; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $425=(($424)|0)!=0; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($425) { __label__ = 73; break; } else { __label__ = 77; break; } //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $427=$C0; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $428=$427; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $429=$2; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $430=(($429+16)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $431=HEAPU32[(($430)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $432=(($428)>>>0) >= (($431)>>>0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $433=(($432)&1); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $434=(($433)==(1)); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $435=(($434)|0)!=0; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($435) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $437=$C0; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $438=$R; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $439=(($438+16)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $440=(($439)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($440)>>2)]=$437; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $441=$R; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $442=$C0; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $443=(($442+24)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($443)>>2)]=$441; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 76; break; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 75: 
      _abort(); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 76: 
      __label__ = 77; break; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $447=$v; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $448=(($447+16)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $449=(($448+4)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $450=HEAP32[(($449)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $C1=$450; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $451=(($450)|0)!=0; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($451) { __label__ = 78; break; } else { __label__ = 82; break; } //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $453=$C1; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $454=$453; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $455=$2; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $456=(($455+16)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $457=HEAPU32[(($456)>>2)]; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $458=(($454)>>>0) >= (($457)>>>0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $459=(($458)&1); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $460=(($459)==(1)); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $461=(($460)|0)!=0; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($461) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 79: 
      var $463=$C1; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $464=$R; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $465=(($464+16)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $466=(($465+4)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($466)>>2)]=$463; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $467=$R; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $468=$C1; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $469=(($468+24)|0); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($469)>>2)]=$467; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 81; break; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 80: 
      _abort(); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 81: 
      __label__ = 82; break; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 82: 
      __label__ = 84; break; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 83: 
      _abort(); //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 84: 
      __label__ = 85; break; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 85: 
      __label__ = 86; break; //@line 4247 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 86: 
      var $477=$rsize; //@line 4248 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $478=(($477)>>>0) < 16; //@line 4248 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($478) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 4248 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 87: 
      var $480=$rsize; //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $481=$3; //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $482=((($480)+($481))|0); //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $483=$482 | 1; //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $484=$483 | 2; //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $485=$v; //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $486=(($485+4)|0); //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($486)>>2)]=$484; //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $487=$v; //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $488=$487; //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $489=$rsize; //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $490=$3; //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $491=((($489)+($490))|0); //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $492=(($488+$491)|0); //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $493=$492; //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $494=(($493+4)|0); //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $495=HEAP32[(($494)>>2)]; //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $496=$495 | 1; //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($494)>>2)]=$496; //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 124; break; //@line 4249 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $498=$3; //@line 4251 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $499=$498 | 1; //@line 4251 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $500=$499 | 2; //@line 4251 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $501=$v; //@line 4251 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $502=(($501+4)|0); //@line 4251 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($502)>>2)]=$500; //@line 4251 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $503=$rsize; //@line 4252 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $504=$503 | 1; //@line 4252 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $505=$r; //@line 4252 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $506=(($505+4)|0); //@line 4252 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($506)>>2)]=$504; //@line 4252 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $507=$rsize; //@line 4252 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $508=$r; //@line 4252 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $509=$508; //@line 4252 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $510=$rsize; //@line 4252 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $511=(($509+$510)|0); //@line 4252 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $512=$511; //@line 4252 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $513=(($512)|0); //@line 4252 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($513)>>2)]=$507; //@line 4252 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $514=$rsize; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $515=$514 >>> 3; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $516=(($515)>>>0) < 32; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($516) { __label__ = 89; break; } else { __label__ = 96; break; } //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $518=$rsize; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $519=$518 >>> 3; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $I=$519; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $520=$I; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $521=$520 << 1; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $522=$2; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $523=(($522+40)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $524=(($523+($521<<2))|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $525=$524; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $526=$525; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $B=$526; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $527=$B; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F5=$527; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $528=$2; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $529=(($528)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $530=HEAP32[(($529)>>2)]; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $531=$I; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $532=1 << $531; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $533=$530 & $532; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $534=(($533)|0)!=0; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($534) { __label__ = 91; break; } else { __label__ = 90; break; } //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $536=$I; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $537=1 << $536; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $538=$2; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $539=(($538)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $540=HEAP32[(($539)>>2)]; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $541=$540 | $537; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($539)>>2)]=$541; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 95; break; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $543=$B; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $544=(($543+8)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $545=HEAP32[(($544)>>2)]; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $546=$545; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $547=$2; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $548=(($547+16)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $549=HEAPU32[(($548)>>2)]; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $550=(($546)>>>0) >= (($549)>>>0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $551=(($550)&1); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $552=(($551)==(1)); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $553=(($552)|0)!=0; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($553) { __label__ = 92; break; } else { __label__ = 93; break; } //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $555=$B; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $556=(($555+8)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $557=HEAP32[(($556)>>2)]; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F5=$557; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 94; break; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 93: 
      _abort(); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 94: 
      __label__ = 95; break;
    case 95: 
      var $561=$r; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $562=$B; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $563=(($562+8)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($563)>>2)]=$561; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $564=$r; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $565=$F5; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $566=(($565+12)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($566)>>2)]=$564; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $567=$F5; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $568=$r; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $569=(($568+8)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($569)>>2)]=$567; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $570=$B; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $571=$r; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $572=(($571+12)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($572)>>2)]=$570; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 123; break; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 96: 
      var $574=$r; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $575=$574; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $TP=$575; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $576=$rsize; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $577=$576 >>> 8; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $X8=$577; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $578=$X8; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $579=(($578)|0)==0; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($579) { __label__ = 97; break; } else { __label__ = 98; break; } //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 97: 
      $I7=0; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 102; break; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 98: 
      var $582=$X8; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $583=(($582)>>>0) > 65535; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($583) { __label__ = 99; break; } else { __label__ = 100; break; } //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 99: 
      $I7=31; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 101; break; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 100: 
      var $586=$X8; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y9=$586; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $587=$Y9; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $588=((($587)-(256))|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $589=$588 >>> 16; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $590=$589 & 8; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N10=$590; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $591=$N10; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $592=$Y9; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $593=$592 << $591; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y9=$593; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $594=((($593)-(4096))|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $595=$594 >>> 16; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $596=$595 & 4; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K11=$596; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $597=$K11; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $598=$N10; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $599=((($598)+($597))|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N10=$599; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $600=$K11; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $601=$Y9; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $602=$601 << $600; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y9=$602; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $603=((($602)-(16384))|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $604=$603 >>> 16; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $605=$604 & 2; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K11=$605; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $606=$N10; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $607=((($606)+($605))|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N10=$607; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $608=$N10; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $609=(((14)-($608))|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $610=$K11; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $611=$Y9; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $612=$611 << $610; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y9=$612; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $613=$612 >>> 15; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $614=((($609)+($613))|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K11=$614; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $615=$K11; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $616=$615 << 1; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $617=$rsize; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $618=$K11; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $619=((($618)+(7))|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $620=$617 >>> (($619)>>>0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $621=$620 & 1; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $622=((($616)+($621))|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $I7=$622; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 101; break;
    case 101: 
      __label__ = 102; break;
    case 102: 
      var $625=$I7; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $626=$2; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $627=(($626+304)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $628=(($627+($625<<2))|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $H6=$628; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $629=$I7; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $630=$TP; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $631=(($630+28)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($631)>>2)]=$629; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $632=$TP; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $633=(($632+16)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $634=(($633+4)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($634)>>2)]=0; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $635=$TP; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $636=(($635+16)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $637=(($636)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($637)>>2)]=0; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $638=$2; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $639=(($638+4)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $640=HEAP32[(($639)>>2)]; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $641=$I7; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $642=1 << $641; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $643=$640 & $642; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $644=(($643)|0)!=0; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($644) { __label__ = 104; break; } else { __label__ = 103; break; } //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 103: 
      var $646=$I7; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $647=1 << $646; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $648=$2; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $649=(($648+4)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $650=HEAP32[(($649)>>2)]; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $651=$650 | $647; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($649)>>2)]=$651; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $652=$TP; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $653=$H6; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($653)>>2)]=$652; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $654=$H6; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $655=$654; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $656=$TP; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $657=(($656+24)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($657)>>2)]=$655; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $658=$TP; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $659=$TP; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $660=(($659+12)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($660)>>2)]=$658; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $661=$TP; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $662=(($661+8)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($662)>>2)]=$658; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 122; break; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 104: 
      var $664=$H6; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $665=HEAP32[(($664)>>2)]; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $T=$665; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $666=$rsize; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $667=$I7; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $668=(($667)|0)==31; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($668) { __label__ = 105; break; } else { __label__ = 106; break; } //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 105: 
      var $677 = 0;__label__ = 107; break; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 106: 
      var $671=$I7; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $672=$671 >>> 1; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $673=((($672)+(8))|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $674=((($673)-(2))|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $675=(((31)-($674))|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $677 = $675;__label__ = 107; break; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 107: 
      var $677; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $678=$666 << $677; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K12=$678; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 108; break; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 108: 
      var $680=$T; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $681=(($680+4)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $682=HEAP32[(($681)>>2)]; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $683=$682 & -8; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $684=$rsize; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $685=(($683)|0)!=(($684)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($685) { __label__ = 109; break; } else { __label__ = 115; break; } //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 109: 
      var $687=$K12; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $688=$687 >>> 31; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $689=$688 & 1; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $690=$T; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $691=(($690+16)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $692=(($691+($689<<2))|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $C=$692; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $693=$K12; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $694=$693 << 1; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K12=$694; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $695=$C; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $696=HEAP32[(($695)>>2)]; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $697=(($696)|0)!=0; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($697) { __label__ = 110; break; } else { __label__ = 111; break; } //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 110: 
      var $699=$C; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $700=HEAP32[(($699)>>2)]; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $T=$700; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 114; break; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 111: 
      var $702=$C; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $703=$702; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $704=$2; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $705=(($704+16)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $706=HEAPU32[(($705)>>2)]; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $707=(($703)>>>0) >= (($706)>>>0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $708=(($707)&1); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $709=(($708)==(1)); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $710=(($709)|0)!=0; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($710) { __label__ = 112; break; } else { __label__ = 113; break; } //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 112: 
      var $712=$TP; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $713=$C; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($713)>>2)]=$712; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $714=$T; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $715=$TP; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $716=(($715+24)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($716)>>2)]=$714; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $717=$TP; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $718=$TP; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $719=(($718+12)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($719)>>2)]=$717; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $720=$TP; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $721=(($720+8)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($721)>>2)]=$717; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 121; break; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 113: 
      _abort(); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 114: 
      __label__ = 120; break; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 115: 
      var $725=$T; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $726=(($725+8)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $727=HEAP32[(($726)>>2)]; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F13=$727; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $728=$T; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $729=$728; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $730=$2; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $731=(($730+16)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $732=HEAPU32[(($731)>>2)]; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $733=(($729)>>>0) >= (($732)>>>0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($733) { __label__ = 116; break; } else { var $742 = 0;__label__ = 117; break; } //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 116: 
      var $735=$F13; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $736=$735; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $737=$2; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $738=(($737+16)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $739=HEAPU32[(($738)>>2)]; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $740=(($736)>>>0) >= (($739)>>>0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $742 = $740;__label__ = 117; break;
    case 117: 
      var $742;
      var $743=(($742)&1);
      var $744=(($743)==(1));
      var $745=(($744)|0)!=0;
      if ($745) { __label__ = 118; break; } else { __label__ = 119; break; }
    case 118: 
      var $747=$TP; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $748=$F13; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $749=(($748+12)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($749)>>2)]=$747; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $750=$T; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $751=(($750+8)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($751)>>2)]=$747; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $752=$F13; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $753=$TP; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $754=(($753+8)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($754)>>2)]=$752; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $755=$T; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $756=$TP; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $757=(($756+12)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($757)>>2)]=$755; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $758=$TP; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $759=(($758+24)|0); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($759)>>2)]=0; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 121; break; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 119: 
      _abort(); //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 120: 
      __label__ = 108; break; //@line 4253 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 121: 
      __label__ = 122; break;
    case 122: 
      __label__ = 123; break;
    case 123: 
      __label__ = 124; break;
    case 124: 
      var $766=$v; //@line 4255 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $767=$766; //@line 4255 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $768=(($767+8)|0); //@line 4255 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $1=$768; //@line 4255 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 128; break; //@line 4255 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 125: 
      __label__ = 126; break; //@line 4257 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 126: 
      _abort(); //@line 4258 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4258 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 127: 
      $1=0; //@line 4260 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 128; break; //@line 4260 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 128: 
      var $773=$1; //@line 4261 "/home/janus/emscripten/system/lib/dlmalloc.c"
      ;
      return $773; //@line 4261 "/home/janus/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_tmalloc_large["X"]=1;

function _sys_alloc($m, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $tbase;
      var $tsize;
      var $mmap_flag;
      var $mem;
      var $br;
      var $ss;
      var $asize;
      var $base;
      var $esize;
      var $end;
      var $asize1;
      var $br2;
      var $end3;
      var $ssize;
      var $mn;
      var $sp;
      var $oldbase;
      var $rsize;
      var $p;
      var $r;
      $2=$m;
      $3=$nb;
      $tbase=-1; //@line 3876 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $tsize=0; //@line 3877 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $mmap_flag=0; //@line 3878 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $4=HEAP32[((((_mparams)|0))>>2)]; //@line 3880 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $5=(($4)|0)!=0; //@line 3880 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($5) { var $10 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 3880 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $7=_init_mparams(); //@line 3880 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $8=(($7)|0)!=0; //@line 3880 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $10 = $8;__label__ = 4; break; //@line 3880 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $10;
      var $11=(($10)&1); //@line 3880 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $12=$2; //@line 3883 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $13=(($12+440)|0); //@line 3883 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $14=HEAP32[(($13)>>2)]; //@line 3883 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $15=$14 & 0; //@line 3883 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $16=(($15)|0)!=0; //@line 3883 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($16) { __label__ = 5; break; } else { __label__ = 10; break; } //@line 3883 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $18=$3; //@line 3883 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $19=HEAPU32[((((_mparams+12)|0))>>2)]; //@line 3883 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $20=(($18)>>>0) >= (($19)>>>0); //@line 3883 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($20) { __label__ = 6; break; } else { __label__ = 10; break; } //@line 3883 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $22=$2; //@line 3883 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $23=(($22+12)|0); //@line 3883 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $24=HEAP32[(($23)>>2)]; //@line 3883 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $25=(($24)|0)!=0; //@line 3883 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($25) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 3883 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $27=$2; //@line 3884 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $28=$3; //@line 3884 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $29=_mmap_alloc($27, $28); //@line 3884 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $mem=$29; //@line 3884 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $30=$mem; //@line 3885 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $31=(($30)|0)!=0; //@line 3885 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($31) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3885 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $33=$mem; //@line 3886 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $1=$33; //@line 3886 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 3886 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 9: 
      __label__ = 10; break; //@line 3887 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $36=$2; //@line 3911 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $37=(($36+440)|0); //@line 3911 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $38=HEAP32[(($37)>>2)]; //@line 3911 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $39=$38 & 4; //@line 3911 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $40=(($39)|0)!=0; //@line 3911 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($40) { __label__ = 43; break; } else { __label__ = 11; break; } //@line 3911 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 11: 
      $br=-1; //@line 3912 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $42=$2; //@line 3913 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $43=(($42+24)|0); //@line 3913 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $44=HEAP32[(($43)>>2)]; //@line 3913 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $45=(($44)|0)==0; //@line 3913 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($45) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 3913 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $55 = 0;__label__ = 14; break; //@line 3913 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $48=$2; //@line 3913 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $49=$2; //@line 3913 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $50=(($49+24)|0); //@line 3913 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $51=HEAP32[(($50)>>2)]; //@line 3913 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $52=$51; //@line 3913 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $53=_segment_holding($48, $52); //@line 3913 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $55 = $53;__label__ = 14; break; //@line 3913 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $55; //@line 3913 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $ss=$55; //@line 3913 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $asize=0; //@line 3914 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $56=$ss; //@line 3917 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $57=(($56)|0)==0; //@line 3917 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($57) { __label__ = 15; break; } else { __label__ = 23; break; } //@line 3917 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $59=_sbrk(0); //@line 3918 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $base=$59; //@line 3918 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $60=$base; //@line 3919 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $61=(($60)|0)!=-1; //@line 3919 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($61) { __label__ = 16; break; } else { __label__ = 22; break; } //@line 3919 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $63=$3; //@line 3920 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $64=((($63)+(48))|0); //@line 3920 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $65=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3920 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $66=((($65)-(1))|0); //@line 3920 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $67=((($64)+($66))|0); //@line 3920 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $68=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3920 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $69=((($68)-(1))|0); //@line 3920 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $70=$69 ^ -1; //@line 3920 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $71=$67 & $70; //@line 3920 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $asize=$71; //@line 3920 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $72=$base; //@line 3922 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $73=$72; //@line 3922 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $74=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3922 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $75=((($74)-(1))|0); //@line 3922 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $76=$73 & $75; //@line 3922 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $77=(($76)|0)==0; //@line 3922 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($77) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 3922 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $79=$base; //@line 3923 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $80=$79; //@line 3923 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $81=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3923 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $82=((($81)-(1))|0); //@line 3923 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $83=((($80)+($82))|0); //@line 3923 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $84=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3923 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $85=((($84)-(1))|0); //@line 3923 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $86=$85 ^ -1; //@line 3923 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $87=$83 & $86; //@line 3923 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $88=$base; //@line 3923 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $89=$88; //@line 3923 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $90=((($87)-($89))|0); //@line 3923 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $91=$asize; //@line 3923 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $92=((($91)+($90))|0); //@line 3923 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $asize=$92; //@line 3923 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 18; break; //@line 3923 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $94=$asize; //@line 3925 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $95=(($94)>>>0) < 2147483647; //@line 3925 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($95) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 3925 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $97=$asize; //@line 3926 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $98=_sbrk($97); //@line 3926 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $br=$98; //@line 3926 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $99=$base; //@line 3926 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $100=(($98)|0)==(($99)|0); //@line 3926 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($100) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 3926 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $102=$base; //@line 3927 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $tbase=$102; //@line 3927 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $103=$asize; //@line 3928 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $tsize=$103; //@line 3928 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 3929 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 22; break; //@line 3930 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 22: 
      __label__ = 27; break; //@line 3931 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $107=$3; //@line 3934 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $108=$2; //@line 3934 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $109=(($108+12)|0); //@line 3934 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $110=HEAP32[(($109)>>2)]; //@line 3934 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $111=((($107)-($110))|0); //@line 3934 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $112=((($111)+(48))|0); //@line 3934 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $113=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3934 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $114=((($113)-(1))|0); //@line 3934 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $115=((($112)+($114))|0); //@line 3934 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $116=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3934 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $117=((($116)-(1))|0); //@line 3934 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $118=$117 ^ -1; //@line 3934 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $119=$115 & $118; //@line 3934 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $asize=$119; //@line 3934 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $120=$asize; //@line 3936 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $121=(($120)>>>0) < 2147483647; //@line 3936 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($121) { __label__ = 24; break; } else { __label__ = 26; break; } //@line 3936 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $123=$asize; //@line 3937 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $124=_sbrk($123); //@line 3937 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $br=$124; //@line 3937 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $125=$ss; //@line 3937 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $126=(($125)|0); //@line 3937 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $127=HEAP32[(($126)>>2)]; //@line 3937 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $128=$ss; //@line 3937 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $129=(($128+4)|0); //@line 3937 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $130=HEAP32[(($129)>>2)]; //@line 3937 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $131=(($127+$130)|0); //@line 3937 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $132=(($124)|0)==(($131)|0); //@line 3937 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($132) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 3937 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $134=$br; //@line 3938 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $tbase=$134; //@line 3938 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $135=$asize; //@line 3939 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $tsize=$135; //@line 3939 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 26; break; //@line 3940 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $138=$tbase; //@line 3943 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $139=(($138)|0)==-1; //@line 3943 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($139) { __label__ = 28; break; } else { __label__ = 42; break; } //@line 3943 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $141=$br; //@line 3944 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $142=(($141)|0)!=-1; //@line 3944 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($142) { __label__ = 29; break; } else { __label__ = 38; break; } //@line 3944 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $144=$asize; //@line 3945 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $145=(($144)>>>0) < 2147483647; //@line 3945 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($145) { __label__ = 30; break; } else { __label__ = 37; break; } //@line 3945 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $147=$asize; //@line 3945 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $148=$3; //@line 3945 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $149=((($148)+(48))|0); //@line 3945 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $150=(($147)>>>0) < (($149)>>>0); //@line 3945 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($150) { __label__ = 31; break; } else { __label__ = 37; break; } //@line 3945 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $152=$3; //@line 3947 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $153=((($152)+(48))|0); //@line 3947 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $154=$asize; //@line 3947 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $155=((($153)-($154))|0); //@line 3947 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $156=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3947 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $157=((($156)-(1))|0); //@line 3947 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $158=((($155)+($157))|0); //@line 3947 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $159=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3947 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $160=((($159)-(1))|0); //@line 3947 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $161=$160 ^ -1; //@line 3947 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $162=$158 & $161; //@line 3947 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $esize=$162; //@line 3947 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $163=$esize; //@line 3948 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $164=(($163)>>>0) < 2147483647; //@line 3948 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($164) { __label__ = 32; break; } else { __label__ = 36; break; } //@line 3948 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $166=$esize; //@line 3949 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $167=_sbrk($166); //@line 3949 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $end=$167; //@line 3949 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $168=$end; //@line 3950 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $169=(($168)|0)!=-1; //@line 3950 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($169) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 3950 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $171=$esize; //@line 3951 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $172=$asize; //@line 3951 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $173=((($172)+($171))|0); //@line 3951 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $asize=$173; //@line 3951 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 3951 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $175=$asize; //@line 3953 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $176=(((-$175))|0); //@line 3953 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $177=_sbrk($176); //@line 3953 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $br=-1; //@line 3954 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break; //@line 3956 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 36: 
      __label__ = 37; break; //@line 3957 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 37: 
      __label__ = 38; break; //@line 3958 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $182=$br; //@line 3959 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $183=(($182)|0)!=-1; //@line 3959 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($183) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 3959 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $185=$br; //@line 3960 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $tbase=$185; //@line 3960 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $186=$asize; //@line 3961 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $tsize=$186; //@line 3961 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 41; break; //@line 3962 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $188=$2; //@line 3964 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $189=(($188+440)|0); //@line 3964 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $190=HEAP32[(($189)>>2)]; //@line 3964 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $191=$190 | 4; //@line 3964 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($189)>>2)]=$191; //@line 3964 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break; //@line 3965 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 42: 
      __label__ = 43; break; //@line 3968 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $195=$tbase; //@line 3982 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $196=(($195)|0)==-1; //@line 3982 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($196) { __label__ = 44; break; } else { __label__ = 53; break; } //@line 3982 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $198=$3; //@line 3983 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $199=((($198)+(48))|0); //@line 3983 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $200=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3983 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $201=((($200)-(1))|0); //@line 3983 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $202=((($199)+($201))|0); //@line 3983 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $203=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3983 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $204=((($203)-(1))|0); //@line 3983 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $205=$204 ^ -1; //@line 3983 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $206=$202 & $205; //@line 3983 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $asize1=$206; //@line 3983 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $207=$asize1; //@line 3984 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $208=(($207)>>>0) < 2147483647; //@line 3984 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($208) { __label__ = 45; break; } else { __label__ = 52; break; } //@line 3984 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 45: 
      $br2=-1; //@line 3985 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $end3=-1; //@line 3986 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $210=$asize1; //@line 3988 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $211=_sbrk($210); //@line 3988 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $br2=$211; //@line 3988 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $212=_sbrk(0); //@line 3989 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $end3=$212; //@line 3989 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $213=$br2; //@line 3991 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $214=(($213)|0)!=-1; //@line 3991 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($214) { __label__ = 46; break; } else { __label__ = 51; break; } //@line 3991 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $216=$end3; //@line 3991 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $217=(($216)|0)!=-1; //@line 3991 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($217) { __label__ = 47; break; } else { __label__ = 51; break; } //@line 3991 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $219=$br2; //@line 3991 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $220=$end3; //@line 3991 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $221=(($219)>>>0) < (($220)>>>0); //@line 3991 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($221) { __label__ = 48; break; } else { __label__ = 51; break; } //@line 3991 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $223=$end3; //@line 3992 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $224=$br2; //@line 3992 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $225=$223; //@line 3992 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $226=$224; //@line 3992 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $227=((($225)-($226))|0); //@line 3992 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $ssize=$227; //@line 3992 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $228=$ssize; //@line 3993 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $229=$3; //@line 3993 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $230=((($229)+(40))|0); //@line 3993 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $231=(($228)>>>0) > (($230)>>>0); //@line 3993 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($231) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 3993 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $233=$br2; //@line 3994 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $tbase=$233; //@line 3994 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $234=$ssize; //@line 3995 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $tsize=$234; //@line 3995 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 50; break; //@line 3996 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 50: 
      __label__ = 51; break; //@line 3997 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 51: 
      __label__ = 52; break; //@line 3998 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 53; break; //@line 3999 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 53: 
      var $239=$tbase; //@line 4001 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $240=(($239)|0)!=-1; //@line 4001 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($240) { __label__ = 54; break; } else { __label__ = 92; break; } //@line 4001 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $242=$tsize; //@line 4003 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $243=$2; //@line 4003 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $244=(($243+432)|0); //@line 4003 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $245=HEAP32[(($244)>>2)]; //@line 4003 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $246=((($245)+($242))|0); //@line 4003 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($244)>>2)]=$246; //@line 4003 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $247=$2; //@line 4003 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $248=(($247+436)|0); //@line 4003 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $249=HEAPU32[(($248)>>2)]; //@line 4003 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $250=(($246)>>>0) > (($249)>>>0); //@line 4003 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($250) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 4003 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 55: 
      var $252=$2; //@line 4004 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $253=(($252+432)|0); //@line 4004 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $254=HEAP32[(($253)>>2)]; //@line 4004 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $255=$2; //@line 4004 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $256=(($255+436)|0); //@line 4004 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($256)>>2)]=$254; //@line 4004 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 56; break; //@line 4004 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $258=$2; //@line 4006 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $259=(($258+24)|0); //@line 4006 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $260=HEAP32[(($259)>>2)]; //@line 4006 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $261=(($260)|0)!=0; //@line 4006 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($261) { __label__ = 64; break; } else { __label__ = 57; break; } //@line 4006 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $263=$2; //@line 4007 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $264=(($263+16)|0); //@line 4007 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $265=HEAP32[(($264)>>2)]; //@line 4007 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $266=(($265)|0)==0; //@line 4007 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($266) { __label__ = 59; break; } else { __label__ = 58; break; } //@line 4007 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $268=$tbase; //@line 4007 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $269=$2; //@line 4007 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $270=(($269+16)|0); //@line 4007 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $271=HEAPU32[(($270)>>2)]; //@line 4007 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $272=(($268)>>>0) < (($271)>>>0); //@line 4007 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($272) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 4007 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $274=$tbase; //@line 4008 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $275=$2; //@line 4008 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $276=(($275+16)|0); //@line 4008 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($276)>>2)]=$274; //@line 4008 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 60; break; //@line 4008 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $278=$tbase; //@line 4009 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $279=$2; //@line 4009 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $280=(($279+444)|0); //@line 4009 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $281=(($280)|0); //@line 4009 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($281)>>2)]=$278; //@line 4009 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $282=$tsize; //@line 4010 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $283=$2; //@line 4010 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $284=(($283+444)|0); //@line 4010 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $285=(($284+4)|0); //@line 4010 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($285)>>2)]=$282; //@line 4010 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $286=$mmap_flag; //@line 4011 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $287=$2; //@line 4011 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $288=(($287+444)|0); //@line 4011 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $289=(($288+12)|0); //@line 4011 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($289)>>2)]=$286; //@line 4011 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $290=HEAP32[((((_mparams)|0))>>2)]; //@line 4012 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $291=$2; //@line 4012 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $292=(($291+36)|0); //@line 4012 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($292)>>2)]=$290; //@line 4012 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $293=$2; //@line 4013 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $294=(($293+32)|0); //@line 4013 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($294)>>2)]=-1; //@line 4013 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $295=$2; //@line 4014 "/home/janus/emscripten/system/lib/dlmalloc.c"
      _init_bins($295); //@line 4014 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $296=$2; //@line 4016 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $297=(($296)|0)==((__gm_)|0); //@line 4016 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($297) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 4016 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $299=$2; //@line 4017 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $300=$tbase; //@line 4017 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $301=$300; //@line 4017 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $302=$tsize; //@line 4017 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $303=((($302)-(40))|0); //@line 4017 "/home/janus/emscripten/system/lib/dlmalloc.c"
      _init_top($299, $301, $303); //@line 4017 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 63; break; //@line 4017 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $305=$2; //@line 4022 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $306=$305; //@line 4022 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $307=((($306)-(8))|0); //@line 4022 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $308=$307; //@line 4022 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $309=$308; //@line 4022 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $310=$2; //@line 4022 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $311=$310; //@line 4022 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $312=((($311)-(8))|0); //@line 4022 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $313=$312; //@line 4022 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $314=(($313+4)|0); //@line 4022 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $315=HEAP32[(($314)>>2)]; //@line 4022 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $316=$315 & -8; //@line 4022 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $317=(($309+$316)|0); //@line 4022 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $318=$317; //@line 4022 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $mn=$318; //@line 4022 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $319=$2; //@line 4023 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $320=$mn; //@line 4023 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $321=$tbase; //@line 4023 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $322=$tsize; //@line 4023 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $323=(($321+$322)|0); //@line 4023 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $324=$mn; //@line 4023 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $325=$324; //@line 4023 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $326=$323; //@line 4023 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $327=$325; //@line 4023 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $328=((($326)-($327))|0); //@line 4023 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $329=((($328)-(40))|0); //@line 4023 "/home/janus/emscripten/system/lib/dlmalloc.c"
      _init_top($319, $320, $329); //@line 4023 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 63; break;
    case 63: 
      __label__ = 89; break; //@line 4025 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 64: 
      var $332=$2; //@line 4029 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $333=(($332+444)|0); //@line 4029 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $sp=$333; //@line 4029 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 4031 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 65: 
      var $335=$sp; //@line 4031 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $336=(($335)|0)!=0; //@line 4031 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($336) { __label__ = 66; break; } else { var $348 = 0;__label__ = 67; break; } //@line 4031 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 66: 
      var $338=$tbase; //@line 4031 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $339=$sp; //@line 4031 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $340=(($339)|0); //@line 4031 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $341=HEAP32[(($340)>>2)]; //@line 4031 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $342=$sp; //@line 4031 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $343=(($342+4)|0); //@line 4031 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $344=HEAP32[(($343)>>2)]; //@line 4031 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $345=(($341+$344)|0); //@line 4031 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $346=(($338)|0)!=(($345)|0); //@line 4031 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $348 = $346;__label__ = 67; break;
    case 67: 
      var $348;
      if ($348) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $350=$sp; //@line 4032 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $351=(($350+8)|0); //@line 4032 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $352=HEAP32[(($351)>>2)]; //@line 4032 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $sp=$352; //@line 4032 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 4032 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 69: 
      var $354=$sp; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $355=(($354)|0)!=0; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($355) { __label__ = 70; break; } else { __label__ = 75; break; } //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 70: 
      var $357=$sp; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $358=(($357+12)|0); //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $359=HEAP32[(($358)>>2)]; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $360=$359 & 8; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $361=(($360)|0)!=0; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($361) { __label__ = 75; break; } else { __label__ = 71; break; } //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $363=$sp; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $364=(($363+12)|0); //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $365=HEAP32[(($364)>>2)]; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $366=$365 & 0; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $367=$mmap_flag; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $368=(($366)|0)==(($367)|0); //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($368) { __label__ = 72; break; } else { __label__ = 75; break; } //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $370=$2; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $371=(($370+24)|0); //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $372=HEAP32[(($371)>>2)]; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $373=$372; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $374=$sp; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $375=(($374)|0); //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $376=HEAPU32[(($375)>>2)]; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $377=(($373)>>>0) >= (($376)>>>0); //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($377) { __label__ = 73; break; } else { __label__ = 75; break; } //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $379=$2; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $380=(($379+24)|0); //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $381=HEAP32[(($380)>>2)]; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $382=$381; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $383=$sp; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $384=(($383)|0); //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $385=HEAP32[(($384)>>2)]; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $386=$sp; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $387=(($386+4)|0); //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $388=HEAP32[(($387)>>2)]; //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $389=(($385+$388)|0); //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $390=(($382)>>>0) < (($389)>>>0); //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($390) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 4033 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $392=$tsize; //@line 4037 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $393=$sp; //@line 4037 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $394=(($393+4)|0); //@line 4037 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $395=HEAP32[(($394)>>2)]; //@line 4037 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $396=((($395)+($392))|0); //@line 4037 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($394)>>2)]=$396; //@line 4037 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $397=$2; //@line 4038 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $398=$2; //@line 4038 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $399=(($398+24)|0); //@line 4038 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $400=HEAP32[(($399)>>2)]; //@line 4038 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $401=$2; //@line 4038 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $402=(($401+12)|0); //@line 4038 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $403=HEAP32[(($402)>>2)]; //@line 4038 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $404=$tsize; //@line 4038 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $405=((($403)+($404))|0); //@line 4038 "/home/janus/emscripten/system/lib/dlmalloc.c"
      _init_top($397, $400, $405); //@line 4038 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 88; break; //@line 4039 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 75: 
      var $407=$tbase; //@line 4041 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $408=$2; //@line 4041 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $409=(($408+16)|0); //@line 4041 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $410=HEAPU32[(($409)>>2)]; //@line 4041 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $411=(($407)>>>0) < (($410)>>>0); //@line 4041 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($411) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 4041 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 76: 
      var $413=$tbase; //@line 4042 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $414=$2; //@line 4042 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $415=(($414+16)|0); //@line 4042 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($415)>>2)]=$413; //@line 4042 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 77; break; //@line 4042 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $417=$2; //@line 4043 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $418=(($417+444)|0); //@line 4043 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $sp=$418; //@line 4043 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 78; break; //@line 4044 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $420=$sp; //@line 4044 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $421=(($420)|0)!=0; //@line 4044 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($421) { __label__ = 79; break; } else { var $431 = 0;__label__ = 80; break; } //@line 4044 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 79: 
      var $423=$sp; //@line 4044 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $424=(($423)|0); //@line 4044 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $425=HEAP32[(($424)>>2)]; //@line 4044 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $426=$tbase; //@line 4044 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $427=$tsize; //@line 4044 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $428=(($426+$427)|0); //@line 4044 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $429=(($425)|0)!=(($428)|0); //@line 4044 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $431 = $429;__label__ = 80; break;
    case 80: 
      var $431;
      if ($431) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: 
      var $433=$sp; //@line 4045 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $434=(($433+8)|0); //@line 4045 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $435=HEAP32[(($434)>>2)]; //@line 4045 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $sp=$435; //@line 4045 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 78; break; //@line 4045 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 82: 
      var $437=$sp; //@line 4046 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $438=(($437)|0)!=0; //@line 4046 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($438) { __label__ = 83; break; } else { __label__ = 86; break; } //@line 4046 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 83: 
      var $440=$sp; //@line 4046 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $441=(($440+12)|0); //@line 4046 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $442=HEAP32[(($441)>>2)]; //@line 4046 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $443=$442 & 8; //@line 4046 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $444=(($443)|0)!=0; //@line 4046 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($444) { __label__ = 86; break; } else { __label__ = 84; break; } //@line 4046 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 84: 
      var $446=$sp; //@line 4046 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $447=(($446+12)|0); //@line 4046 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $448=HEAP32[(($447)>>2)]; //@line 4046 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $449=$448 & 0; //@line 4046 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $450=$mmap_flag; //@line 4046 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $451=(($449)|0)==(($450)|0); //@line 4046 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($451) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 4046 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 85: 
      var $453=$sp; //@line 4049 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $454=(($453)|0); //@line 4049 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $455=HEAP32[(($454)>>2)]; //@line 4049 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $oldbase=$455; //@line 4049 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $456=$tbase; //@line 4050 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $457=$sp; //@line 4050 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $458=(($457)|0); //@line 4050 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($458)>>2)]=$456; //@line 4050 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $459=$tsize; //@line 4051 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $460=$sp; //@line 4051 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $461=(($460+4)|0); //@line 4051 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $462=HEAP32[(($461)>>2)]; //@line 4051 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $463=((($462)+($459))|0); //@line 4051 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($461)>>2)]=$463; //@line 4051 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $464=$2; //@line 4052 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $465=$tbase; //@line 4052 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $466=$oldbase; //@line 4052 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $467=$3; //@line 4052 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $468=_prepend_alloc($464, $465, $466, $467); //@line 4052 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $1=$468; //@line 4052 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 4052 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 86: 
      var $470=$2; //@line 4055 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $471=$tbase; //@line 4055 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $472=$tsize; //@line 4055 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $473=$mmap_flag; //@line 4055 "/home/janus/emscripten/system/lib/dlmalloc.c"
      _add_segment($470, $471, $472, $473); //@line 4055 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 87; break;
    case 87: 
      __label__ = 88; break;
    case 88: 
      __label__ = 89; break;
    case 89: 
      var $477=$3; //@line 4059 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $478=$2; //@line 4059 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $479=(($478+12)|0); //@line 4059 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $480=HEAPU32[(($479)>>2)]; //@line 4059 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $481=(($477)>>>0) < (($480)>>>0); //@line 4059 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($481) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 4059 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $483=$3; //@line 4060 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $484=$2; //@line 4060 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $485=(($484+12)|0); //@line 4060 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $486=HEAP32[(($485)>>2)]; //@line 4060 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $487=((($486)-($483))|0); //@line 4060 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($485)>>2)]=$487; //@line 4060 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $rsize=$487; //@line 4060 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $488=$2; //@line 4061 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $489=(($488+24)|0); //@line 4061 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $490=HEAP32[(($489)>>2)]; //@line 4061 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $p=$490; //@line 4061 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $491=$p; //@line 4062 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $492=$491; //@line 4062 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $493=$3; //@line 4062 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $494=(($492+$493)|0); //@line 4062 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $495=$494; //@line 4062 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $496=$2; //@line 4062 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $497=(($496+24)|0); //@line 4062 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($497)>>2)]=$495; //@line 4062 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $r=$495; //@line 4062 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $498=$rsize; //@line 4063 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $499=$498 | 1; //@line 4063 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $500=$r; //@line 4063 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $501=(($500+4)|0); //@line 4063 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($501)>>2)]=$499; //@line 4063 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $502=$3; //@line 4064 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $503=$502 | 1; //@line 4064 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $504=$503 | 2; //@line 4064 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $505=$p; //@line 4064 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $506=(($505+4)|0); //@line 4064 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($506)>>2)]=$504; //@line 4064 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $507=$p; //@line 4067 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $508=$507; //@line 4067 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $509=(($508+8)|0); //@line 4067 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $1=$509; //@line 4067 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 4067 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 91: 
      __label__ = 92; break; //@line 4069 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $512=___errno(); //@line 4071 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($512)>>2)]=12; //@line 4071 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $1=0; //@line 4072 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 4072 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 93: 
      var $514=$1; //@line 4073 "/home/janus/emscripten/system/lib/dlmalloc.c"
      ;
      return $514; //@line 4073 "/home/janus/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_sys_alloc["X"]=1;

function _free($mem) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $p;
      var $psize;
      var $next;
      var $prevsize;
      var $prev;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F1;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F2;
      var $B3;
      var $I4;
      var $TP5;
      var $XP6;
      var $R7;
      var $F8;
      var $RP9;
      var $CP10;
      var $H11;
      var $C012;
      var $C113;
      var $I14;
      var $B15;
      var $F16;
      var $tp;
      var $H17;
      var $I18;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K19;
      var $C;
      var $F20;
      $1=$mem;
      var $2=$1; //@line 4740 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $3=(($2)|0)!=0; //@line 4740 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($3) { __label__ = 3; break; } else { __label__ = 197; break; } //@line 4740 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $5=$1; //@line 4741 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $6=((($5)-(8))|0); //@line 4741 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $7=$6; //@line 4741 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $p=$7; //@line 4741 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $8=$p; //@line 4753 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $9=$8; //@line 4753 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $10=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4753 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $11=(($9)>>>0) >= (($10)>>>0); //@line 4753 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($11) { __label__ = 4; break; } else { var $19 = 0;__label__ = 5; break; } //@line 4753 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $13=$p; //@line 4753 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $14=(($13+4)|0); //@line 4753 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $15=HEAP32[(($14)>>2)]; //@line 4753 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $16=$15 & 3; //@line 4753 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $17=(($16)|0)!=1; //@line 4753 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $19 = $17;__label__ = 5; break;
    case 5: 
      var $19;
      var $20=(($19)&1);
      var $21=(($20)==(1));
      var $22=(($21)|0)!=0;
      if ($22) { __label__ = 6; break; } else { __label__ = 194; break; }
    case 6: 
      var $24=$p; //@line 4754 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $25=(($24+4)|0); //@line 4754 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $26=HEAP32[(($25)>>2)]; //@line 4754 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $27=$26 & -8; //@line 4754 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $psize=$27; //@line 4754 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $28=$p; //@line 4755 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $29=$28; //@line 4755 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $30=$psize; //@line 4755 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $31=(($29+$30)|0); //@line 4755 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $32=$31; //@line 4755 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $next=$32; //@line 4755 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $33=$p; //@line 4756 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $34=(($33+4)|0); //@line 4756 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $35=HEAP32[(($34)>>2)]; //@line 4756 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $36=$35 & 1; //@line 4756 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $37=(($36)|0)!=0; //@line 4756 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($37) { __label__ = 78; break; } else { __label__ = 7; break; } //@line 4756 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $39=$p; //@line 4757 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $40=(($39)|0); //@line 4757 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $41=HEAP32[(($40)>>2)]; //@line 4757 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $prevsize=$41; //@line 4757 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $42=$p; //@line 4758 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $43=(($42+4)|0); //@line 4758 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $44=HEAP32[(($43)>>2)]; //@line 4758 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $45=$44 & 3; //@line 4758 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $46=(($45)|0)==0; //@line 4758 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($46) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4758 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $48=$prevsize; //@line 4759 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $49=((($48)+(16))|0); //@line 4759 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $50=$psize; //@line 4759 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $51=((($50)+($49))|0); //@line 4759 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $psize=$51; //@line 4759 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 196; break; //@line 4762 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $53=$p; //@line 4765 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $54=$53; //@line 4765 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $55=$prevsize; //@line 4765 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $56=(((-$55))|0); //@line 4765 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $57=(($54+$56)|0); //@line 4765 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $58=$57; //@line 4765 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $prev=$58; //@line 4765 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $59=$prevsize; //@line 4766 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $60=$psize; //@line 4766 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $61=((($60)+($59))|0); //@line 4766 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $psize=$61; //@line 4766 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $62=$prev; //@line 4767 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $p=$62; //@line 4767 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $63=$prev; //@line 4768 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $64=$63; //@line 4768 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $65=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4768 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $66=(($64)>>>0) >= (($65)>>>0); //@line 4768 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $67=(($66)&1); //@line 4768 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $68=(($67)==(1)); //@line 4768 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $69=(($68)|0)!=0; //@line 4768 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($69) { __label__ = 10; break; } else { __label__ = 75; break; } //@line 4768 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $71=$p; //@line 4769 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $72=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4769 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $73=(($71)|0)!=(($72)|0); //@line 4769 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($73) { __label__ = 11; break; } else { __label__ = 71; break; } //@line 4769 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $75=$prevsize; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $76=$75 >>> 3; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $77=(($76)>>>0) < 32; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($77) { __label__ = 12; break; } else { __label__ = 24; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $79=$p; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $80=(($79+8)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $81=HEAP32[(($80)>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F=$81; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $82=$p; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $83=(($82+12)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $84=HEAP32[(($83)>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $B=$84; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $85=$prevsize; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $86=$85 >>> 3; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $I=$86; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $87=$F; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $88=$B; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $89=(($87)|0)==(($88)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($89) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $91=$I; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $92=1 << $91; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $93=$92 ^ -1; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $94=HEAP32[((((__gm_)|0))>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $95=$94 & $93; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$95; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 23; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $97=$F; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $98=$I; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $99=$98 << 1; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $100=((((__gm_+40)|0)+($99<<2))|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $101=$100; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $102=$101; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $103=(($97)|0)==(($102)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($103) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $105=$F; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $106=$105; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $107=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $108=(($106)>>>0) >= (($107)>>>0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($108) { __label__ = 16; break; } else { var $125 = 0;__label__ = 19; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $110=$B; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $111=$I; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $112=$111 << 1; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $113=((((__gm_+40)|0)+($112<<2))|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $114=$113; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $115=$114; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $116=(($110)|0)==(($115)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($116) { var $123 = 1;__label__ = 18; break; } else { __label__ = 17; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $118=$B; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $119=$118; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $120=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $121=(($119)>>>0) >= (($120)>>>0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $123 = $121;__label__ = 18; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $123;
      var $125 = $123;__label__ = 19; break;
    case 19: 
      var $125;
      var $126=(($125)&1);
      var $127=(($126)==(1));
      var $128=(($127)|0)!=0;
      if ($128) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $130=$B; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $131=$F; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $132=(($131+12)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($132)>>2)]=$130; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $133=$F; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $134=$B; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $135=(($134+8)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($135)>>2)]=$133; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 22; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 21: 
      _abort(); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 70; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $140=$p; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $141=$140; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $TP=$141; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $142=$TP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $143=(($142+24)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $144=HEAP32[(($143)>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $XP=$144; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $145=$TP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $146=(($145+12)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $147=HEAP32[(($146)>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $148=$TP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $149=(($147)|0)!=(($148)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($149) { __label__ = 25; break; } else { __label__ = 29; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $151=$TP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $152=(($151+8)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $153=HEAP32[(($152)>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F1=$153; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $154=$TP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $155=(($154+12)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $156=HEAP32[(($155)>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$156; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $157=$F1; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $158=$157; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $159=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $160=(($158)>>>0) >= (($159)>>>0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $161=(($160)&1); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $162=(($161)==(1)); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $163=(($162)|0)!=0; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($163) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $165=$R; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $166=$F1; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $167=(($166+12)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($167)>>2)]=$165; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $168=$F1; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $169=$R; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $170=(($169+8)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($170)>>2)]=$168; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 27: 
      _abort(); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 41; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $174=$TP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $175=(($174+16)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $176=(($175+4)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $RP=$176; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $177=HEAP32[(($176)>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$177; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $178=(($177)|0)!=0; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($178) { __label__ = 31; break; } else { __label__ = 30; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $180=$TP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $181=(($180+16)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $182=(($181)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $RP=$182; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $183=HEAP32[(($182)>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$183; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $184=(($183)|0)!=0; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($184) { __label__ = 31; break; } else { __label__ = 40; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 31: 
      __label__ = 32; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $187=$R; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $188=(($187+16)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $189=(($188+4)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $CP=$189; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $190=HEAP32[(($189)>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $191=(($190)|0)!=0; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($191) { var $199 = 1;__label__ = 34; break; } else { __label__ = 33; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $193=$R; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $194=(($193+16)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $195=(($194)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $CP=$195; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $196=HEAP32[(($195)>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $197=(($196)|0)!=0; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $199 = $197;__label__ = 34; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $199;
      if ($199) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $201=$CP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $RP=$201; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $202=HEAP32[(($201)>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$202; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 32; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $204=$RP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $205=$204; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $206=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $207=(($205)>>>0) >= (($206)>>>0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $208=(($207)&1); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $209=(($208)==(1)); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $210=(($209)|0)!=0; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($210) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $212=$RP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($212)>>2)]=0; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 39; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 38: 
      _abort(); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 39: 
      __label__ = 40; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 40: 
      __label__ = 41; break;
    case 41: 
      var $217=$XP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $218=(($217)|0)!=0; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($218) { __label__ = 42; break; } else { __label__ = 69; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $220=$TP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $221=(($220+28)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $222=HEAP32[(($221)>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $223=((((__gm_+304)|0)+($222<<2))|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $H=$223; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $224=$TP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $225=$H; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $226=HEAP32[(($225)>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $227=(($224)|0)==(($226)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($227) { __label__ = 43; break; } else { __label__ = 46; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $229=$R; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $230=$H; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($230)>>2)]=$229; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $231=(($229)|0)==0; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($231) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $233=$TP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $234=(($233+28)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $235=HEAP32[(($234)>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $236=1 << $235; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $237=$236 ^ -1; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $238=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $239=$238 & $237; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$239; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 45; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 45: 
      __label__ = 53; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $242=$XP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $243=$242; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $244=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $245=(($243)>>>0) >= (($244)>>>0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $246=(($245)&1); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $247=(($246)==(1)); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $248=(($247)|0)!=0; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($248) { __label__ = 47; break; } else { __label__ = 51; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $250=$XP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $251=(($250+16)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $252=(($251)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $253=HEAP32[(($252)>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $254=$TP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $255=(($253)|0)==(($254)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($255) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $257=$R; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $258=$XP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $259=(($258+16)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $260=(($259)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($260)>>2)]=$257; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 50; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $262=$R; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $263=$XP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $264=(($263+16)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $265=(($264+4)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($265)>>2)]=$262; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 50; break;
    case 50: 
      __label__ = 52; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 51: 
      _abort(); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $270=$R; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $271=(($270)|0)!=0; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($271) { __label__ = 54; break; } else { __label__ = 68; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $273=$R; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $274=$273; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $275=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $276=(($274)>>>0) >= (($275)>>>0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $277=(($276)&1); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $278=(($277)==(1)); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $279=(($278)|0)!=0; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($279) { __label__ = 55; break; } else { __label__ = 66; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 55: 
      var $281=$XP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $282=$R; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $283=(($282+24)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($283)>>2)]=$281; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $284=$TP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $285=(($284+16)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $286=(($285)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $287=HEAP32[(($286)>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $C0=$287; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $288=(($287)|0)!=0; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($288) { __label__ = 56; break; } else { __label__ = 60; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $290=$C0; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $291=$290; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $292=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $293=(($291)>>>0) >= (($292)>>>0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $294=(($293)&1); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $295=(($294)==(1)); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $296=(($295)|0)!=0; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($296) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $298=$C0; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $299=$R; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $300=(($299+16)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $301=(($300)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($301)>>2)]=$298; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $302=$R; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $303=$C0; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $304=(($303+24)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($304)>>2)]=$302; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 59; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 58: 
      _abort(); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 59: 
      __label__ = 60; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $308=$TP; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $309=(($308+16)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $310=(($309+4)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $311=HEAP32[(($310)>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $C1=$311; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $312=(($311)|0)!=0; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($312) { __label__ = 61; break; } else { __label__ = 65; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $314=$C1; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $315=$314; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $316=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $317=(($315)>>>0) >= (($316)>>>0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $318=(($317)&1); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $319=(($318)==(1)); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $320=(($319)|0)!=0; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($320) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $322=$C1; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $323=$R; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $324=(($323+16)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $325=(($324+4)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($325)>>2)]=$322; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $326=$R; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $327=$C1; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $328=(($327+24)|0); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($328)>>2)]=$326; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 63: 
      _abort(); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 64: 
      __label__ = 65; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 65: 
      __label__ = 67; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 66: 
      _abort(); //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 67: 
      __label__ = 68; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 68: 
      __label__ = 69; break; //@line 4770 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 69: 
      __label__ = 70; break;
    case 70: 
      __label__ = 74; break; //@line 4771 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $338=$next; //@line 4772 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $339=(($338+4)|0); //@line 4772 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $340=HEAP32[(($339)>>2)]; //@line 4772 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $341=$340 & 3; //@line 4772 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $342=(($341)|0)==3; //@line 4772 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($342) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 4772 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $344=$psize; //@line 4773 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$344; //@line 4773 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $345=$next; //@line 4774 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $346=(($345+4)|0); //@line 4774 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $347=HEAP32[(($346)>>2)]; //@line 4774 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $348=$347 & -2; //@line 4774 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($346)>>2)]=$348; //@line 4774 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $349=$psize; //@line 4774 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $350=$349 | 1; //@line 4774 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $351=$p; //@line 4774 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $352=(($351+4)|0); //@line 4774 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($352)>>2)]=$350; //@line 4774 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $353=$psize; //@line 4774 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $354=$p; //@line 4774 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $355=$354; //@line 4774 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $356=$psize; //@line 4774 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $357=(($355+$356)|0); //@line 4774 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $358=$357; //@line 4774 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $359=(($358)|0); //@line 4774 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($359)>>2)]=$353; //@line 4774 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 196; break; //@line 4775 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 73: 
      __label__ = 74; break;
    case 74: 
      __label__ = 76; break; //@line 4777 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 75: 
      __label__ = 195; break; //@line 4779 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 76: 
      __label__ = 77; break;
    case 77: 
      __label__ = 78; break; //@line 4781 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $366=$p; //@line 4783 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $367=$366; //@line 4783 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $368=$next; //@line 4783 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $369=$368; //@line 4783 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $370=(($367)>>>0) < (($369)>>>0); //@line 4783 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($370) { __label__ = 79; break; } else { var $378 = 0;__label__ = 80; break; } //@line 4783 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 79: 
      var $372=$next; //@line 4783 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $373=(($372+4)|0); //@line 4783 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $374=HEAP32[(($373)>>2)]; //@line 4783 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $375=$374 & 1; //@line 4783 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $376=(($375)|0)!=0; //@line 4783 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $378 = $376;__label__ = 80; break;
    case 80: 
      var $378;
      var $379=(($378)&1);
      var $380=(($379)==(1));
      var $381=(($380)|0)!=0;
      if ($381) { __label__ = 81; break; } else { __label__ = 193; break; }
    case 81: 
      var $383=$next; //@line 4784 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $384=(($383+4)|0); //@line 4784 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $385=HEAP32[(($384)>>2)]; //@line 4784 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $386=$385 & 2; //@line 4784 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $387=(($386)|0)!=0; //@line 4784 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($387) { __label__ = 154; break; } else { __label__ = 82; break; } //@line 4784 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 82: 
      var $389=$next; //@line 4785 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $390=HEAP32[((((__gm_+24)|0))>>2)]; //@line 4785 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $391=(($389)|0)==(($390)|0); //@line 4785 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($391) { __label__ = 83; break; } else { __label__ = 88; break; } //@line 4785 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 83: 
      var $393=$psize; //@line 4786 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $394=HEAP32[((((__gm_+12)|0))>>2)]; //@line 4786 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $395=((($394)+($393))|0); //@line 4786 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+12)|0))>>2)]=$395; //@line 4786 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $tsize=$395; //@line 4786 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $396=$p; //@line 4787 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+24)|0))>>2)]=$396; //@line 4787 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $397=$tsize; //@line 4788 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $398=$397 | 1; //@line 4788 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $399=$p; //@line 4788 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $400=(($399+4)|0); //@line 4788 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($400)>>2)]=$398; //@line 4788 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $401=$p; //@line 4789 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $402=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4789 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $403=(($401)|0)==(($402)|0); //@line 4789 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($403) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 4789 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 84: 
      HEAP32[((((__gm_+20)|0))>>2)]=0; //@line 4790 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=0; //@line 4791 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 85; break; //@line 4792 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 85: 
      var $406=$tsize; //@line 4793 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $407=HEAPU32[((((__gm_+28)|0))>>2)]; //@line 4793 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $408=(($406)>>>0) > (($407)>>>0); //@line 4793 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($408) { __label__ = 86; break; } else { __label__ = 87; break; } //@line 4793 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 86: 
      var $410=_sys_trim(__gm_, 0); //@line 4794 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 87; break; //@line 4794 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 87: 
      __label__ = 196; break; //@line 4795 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $413=$next; //@line 4797 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $414=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4797 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $415=(($413)|0)==(($414)|0); //@line 4797 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($415) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 4797 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $417=$psize; //@line 4798 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $418=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4798 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $419=((($418)+($417))|0); //@line 4798 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$419; //@line 4798 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $dsize=$419; //@line 4798 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $420=$p; //@line 4799 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$420; //@line 4799 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $421=$dsize; //@line 4800 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $422=$421 | 1; //@line 4800 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $423=$p; //@line 4800 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $424=(($423+4)|0); //@line 4800 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($424)>>2)]=$422; //@line 4800 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $425=$dsize; //@line 4800 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $426=$p; //@line 4800 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $427=$426; //@line 4800 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $428=$dsize; //@line 4800 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $429=(($427+$428)|0); //@line 4800 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $430=$429; //@line 4800 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $431=(($430)|0); //@line 4800 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($431)>>2)]=$425; //@line 4800 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 196; break; //@line 4801 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $433=$next; //@line 4804 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $434=(($433+4)|0); //@line 4804 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $435=HEAP32[(($434)>>2)]; //@line 4804 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $436=$435 & -8; //@line 4804 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $nsize=$436; //@line 4804 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $437=$nsize; //@line 4805 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $438=$psize; //@line 4805 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $439=((($438)+($437))|0); //@line 4805 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $psize=$439; //@line 4805 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $440=$nsize; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $441=$440 >>> 3; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $442=(($441)>>>0) < 32; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($442) { __label__ = 91; break; } else { __label__ = 103; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $444=$next; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $445=(($444+8)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $446=HEAP32[(($445)>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F2=$446; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $447=$next; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $448=(($447+12)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $449=HEAP32[(($448)>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $B3=$449; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $450=$nsize; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $451=$450 >>> 3; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $I4=$451; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $452=$F2; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $453=$B3; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $454=(($452)|0)==(($453)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($454) { __label__ = 92; break; } else { __label__ = 93; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $456=$I4; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $457=1 << $456; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $458=$457 ^ -1; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $459=HEAP32[((((__gm_)|0))>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $460=$459 & $458; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$460; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 102; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 93: 
      var $462=$F2; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $463=$I4; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $464=$463 << 1; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $465=((((__gm_+40)|0)+($464<<2))|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $466=$465; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $467=$466; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $468=(($462)|0)==(($467)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($468) { __label__ = 95; break; } else { __label__ = 94; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 94: 
      var $470=$F2; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $471=$470; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $472=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $473=(($471)>>>0) >= (($472)>>>0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($473) { __label__ = 95; break; } else { var $490 = 0;__label__ = 98; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 95: 
      var $475=$B3; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $476=$I4; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $477=$476 << 1; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $478=((((__gm_+40)|0)+($477<<2))|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $479=$478; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $480=$479; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $481=(($475)|0)==(($480)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($481) { var $488 = 1;__label__ = 97; break; } else { __label__ = 96; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 96: 
      var $483=$B3; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $484=$483; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $485=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $486=(($484)>>>0) >= (($485)>>>0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $488 = $486;__label__ = 97; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 97: 
      var $488;
      var $490 = $488;__label__ = 98; break;
    case 98: 
      var $490;
      var $491=(($490)&1);
      var $492=(($491)==(1));
      var $493=(($492)|0)!=0;
      if ($493) { __label__ = 99; break; } else { __label__ = 100; break; }
    case 99: 
      var $495=$B3; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $496=$F2; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $497=(($496+12)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($497)>>2)]=$495; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $498=$F2; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $499=$B3; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $500=(($499+8)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($500)>>2)]=$498; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 101; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 100: 
      _abort(); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 101: 
      __label__ = 102; break;
    case 102: 
      __label__ = 149; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 103: 
      var $505=$next; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $506=$505; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $TP5=$506; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $507=$TP5; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $508=(($507+24)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $509=HEAP32[(($508)>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $XP6=$509; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $510=$TP5; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $511=(($510+12)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $512=HEAP32[(($511)>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $513=$TP5; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $514=(($512)|0)!=(($513)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($514) { __label__ = 104; break; } else { __label__ = 108; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 104: 
      var $516=$TP5; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $517=(($516+8)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $518=HEAP32[(($517)>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F8=$518; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $519=$TP5; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $520=(($519+12)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $521=HEAP32[(($520)>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R7=$521; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $522=$F8; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $523=$522; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $524=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $525=(($523)>>>0) >= (($524)>>>0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $526=(($525)&1); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $527=(($526)==(1)); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $528=(($527)|0)!=0; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($528) { __label__ = 105; break; } else { __label__ = 106; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 105: 
      var $530=$R7; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $531=$F8; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $532=(($531+12)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($532)>>2)]=$530; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $533=$F8; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $534=$R7; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $535=(($534+8)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($535)>>2)]=$533; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 107; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 106: 
      _abort(); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 107: 
      __label__ = 120; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 108: 
      var $539=$TP5; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $540=(($539+16)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $541=(($540+4)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $RP9=$541; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $542=HEAP32[(($541)>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R7=$542; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $543=(($542)|0)!=0; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($543) { __label__ = 110; break; } else { __label__ = 109; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 109: 
      var $545=$TP5; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $546=(($545+16)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $547=(($546)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $RP9=$547; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $548=HEAP32[(($547)>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R7=$548; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $549=(($548)|0)!=0; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($549) { __label__ = 110; break; } else { __label__ = 119; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 110: 
      __label__ = 111; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 111: 
      var $552=$R7; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $553=(($552+16)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $554=(($553+4)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $CP10=$554; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $555=HEAP32[(($554)>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $556=(($555)|0)!=0; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($556) { var $564 = 1;__label__ = 113; break; } else { __label__ = 112; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 112: 
      var $558=$R7; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $559=(($558+16)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $560=(($559)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $CP10=$560; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $561=HEAP32[(($560)>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $562=(($561)|0)!=0; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $564 = $562;__label__ = 113; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 113: 
      var $564;
      if ($564) { __label__ = 114; break; } else { __label__ = 115; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 114: 
      var $566=$CP10; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $RP9=$566; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $567=HEAP32[(($566)>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R7=$567; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 111; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 115: 
      var $569=$RP9; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $570=$569; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $571=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $572=(($570)>>>0) >= (($571)>>>0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $573=(($572)&1); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $574=(($573)==(1)); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $575=(($574)|0)!=0; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($575) { __label__ = 116; break; } else { __label__ = 117; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 116: 
      var $577=$RP9; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($577)>>2)]=0; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 118; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 117: 
      _abort(); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 118: 
      __label__ = 119; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 119: 
      __label__ = 120; break;
    case 120: 
      var $582=$XP6; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $583=(($582)|0)!=0; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($583) { __label__ = 121; break; } else { __label__ = 148; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 121: 
      var $585=$TP5; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $586=(($585+28)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $587=HEAP32[(($586)>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $588=((((__gm_+304)|0)+($587<<2))|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $H11=$588; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $589=$TP5; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $590=$H11; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $591=HEAP32[(($590)>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $592=(($589)|0)==(($591)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($592) { __label__ = 122; break; } else { __label__ = 125; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 122: 
      var $594=$R7; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $595=$H11; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($595)>>2)]=$594; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $596=(($594)|0)==0; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($596) { __label__ = 123; break; } else { __label__ = 124; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 123: 
      var $598=$TP5; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $599=(($598+28)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $600=HEAP32[(($599)>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $601=1 << $600; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $602=$601 ^ -1; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $603=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $604=$603 & $602; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$604; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 124; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 124: 
      __label__ = 132; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 125: 
      var $607=$XP6; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $608=$607; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $609=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $610=(($608)>>>0) >= (($609)>>>0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $611=(($610)&1); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $612=(($611)==(1)); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $613=(($612)|0)!=0; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($613) { __label__ = 126; break; } else { __label__ = 130; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 126: 
      var $615=$XP6; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $616=(($615+16)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $617=(($616)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $618=HEAP32[(($617)>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $619=$TP5; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $620=(($618)|0)==(($619)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($620) { __label__ = 127; break; } else { __label__ = 128; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 127: 
      var $622=$R7; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $623=$XP6; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $624=(($623+16)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $625=(($624)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($625)>>2)]=$622; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 129; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 128: 
      var $627=$R7; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $628=$XP6; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $629=(($628+16)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $630=(($629+4)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($630)>>2)]=$627; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 129; break;
    case 129: 
      __label__ = 131; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 130: 
      _abort(); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 131: 
      __label__ = 132; break;
    case 132: 
      var $635=$R7; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $636=(($635)|0)!=0; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($636) { __label__ = 133; break; } else { __label__ = 147; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 133: 
      var $638=$R7; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $639=$638; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $640=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $641=(($639)>>>0) >= (($640)>>>0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $642=(($641)&1); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $643=(($642)==(1)); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $644=(($643)|0)!=0; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($644) { __label__ = 134; break; } else { __label__ = 145; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 134: 
      var $646=$XP6; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $647=$R7; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $648=(($647+24)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($648)>>2)]=$646; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $649=$TP5; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $650=(($649+16)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $651=(($650)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $652=HEAP32[(($651)>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $C012=$652; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $653=(($652)|0)!=0; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($653) { __label__ = 135; break; } else { __label__ = 139; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 135: 
      var $655=$C012; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $656=$655; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $657=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $658=(($656)>>>0) >= (($657)>>>0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $659=(($658)&1); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $660=(($659)==(1)); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $661=(($660)|0)!=0; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($661) { __label__ = 136; break; } else { __label__ = 137; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 136: 
      var $663=$C012; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $664=$R7; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $665=(($664+16)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $666=(($665)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($666)>>2)]=$663; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $667=$R7; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $668=$C012; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $669=(($668+24)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($669)>>2)]=$667; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 138; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 137: 
      _abort(); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 138: 
      __label__ = 139; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 139: 
      var $673=$TP5; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $674=(($673+16)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $675=(($674+4)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $676=HEAP32[(($675)>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $C113=$676; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $677=(($676)|0)!=0; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($677) { __label__ = 140; break; } else { __label__ = 144; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 140: 
      var $679=$C113; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $680=$679; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $681=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $682=(($680)>>>0) >= (($681)>>>0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $683=(($682)&1); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $684=(($683)==(1)); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $685=(($684)|0)!=0; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($685) { __label__ = 141; break; } else { __label__ = 142; break; } //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 141: 
      var $687=$C113; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $688=$R7; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $689=(($688+16)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $690=(($689+4)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($690)>>2)]=$687; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $691=$R7; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $692=$C113; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $693=(($692+24)|0); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($693)>>2)]=$691; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 143; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 142: 
      _abort(); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 143: 
      __label__ = 144; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 144: 
      __label__ = 146; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 145: 
      _abort(); //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 146: 
      __label__ = 147; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 147: 
      __label__ = 148; break; //@line 4806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 148: 
      __label__ = 149; break;
    case 149: 
      var $702=$psize; //@line 4807 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $703=$702 | 1; //@line 4807 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $704=$p; //@line 4807 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $705=(($704+4)|0); //@line 4807 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($705)>>2)]=$703; //@line 4807 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $706=$psize; //@line 4807 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $707=$p; //@line 4807 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $708=$707; //@line 4807 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $709=$psize; //@line 4807 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $710=(($708+$709)|0); //@line 4807 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $711=$710; //@line 4807 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $712=(($711)|0); //@line 4807 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($712)>>2)]=$706; //@line 4807 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $713=$p; //@line 4808 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $714=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4808 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $715=(($713)|0)==(($714)|0); //@line 4808 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($715) { __label__ = 150; break; } else { __label__ = 151; break; } //@line 4808 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 150: 
      var $717=$psize; //@line 4809 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$717; //@line 4809 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 196; break; //@line 4810 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 151: 
      __label__ = 152; break;
    case 152: 
      __label__ = 153; break;
    case 153: 
      __label__ = 155; break; //@line 4813 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 154: 
      var $722=$next; //@line 4815 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $723=(($722+4)|0); //@line 4815 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $724=HEAP32[(($723)>>2)]; //@line 4815 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $725=$724 & -2; //@line 4815 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($723)>>2)]=$725; //@line 4815 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $726=$psize; //@line 4815 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $727=$726 | 1; //@line 4815 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $728=$p; //@line 4815 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $729=(($728+4)|0); //@line 4815 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($729)>>2)]=$727; //@line 4815 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $730=$psize; //@line 4815 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $731=$p; //@line 4815 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $732=$731; //@line 4815 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $733=$psize; //@line 4815 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $734=(($732+$733)|0); //@line 4815 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $735=$734; //@line 4815 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $736=(($735)|0); //@line 4815 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($736)>>2)]=$730; //@line 4815 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 155; break;
    case 155: 
      var $738=$psize; //@line 4817 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $739=$738 >>> 3; //@line 4817 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $740=(($739)>>>0) < 32; //@line 4817 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($740) { __label__ = 156; break; } else { __label__ = 163; break; } //@line 4817 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 156: 
      var $742=$psize; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $743=$742 >>> 3; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $I14=$743; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $744=$I14; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $745=$744 << 1; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $746=((((__gm_+40)|0)+($745<<2))|0); //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $747=$746; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $748=$747; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $B15=$748; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $749=$B15; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F16=$749; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $750=HEAP32[((((__gm_)|0))>>2)]; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $751=$I14; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $752=1 << $751; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $753=$750 & $752; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $754=(($753)|0)!=0; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($754) { __label__ = 158; break; } else { __label__ = 157; break; } //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 157: 
      var $756=$I14; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $757=1 << $756; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $758=HEAP32[((((__gm_)|0))>>2)]; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $759=$758 | $757; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$759; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 162; break; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 158: 
      var $761=$B15; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $762=(($761+8)|0); //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $763=HEAP32[(($762)>>2)]; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $764=$763; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $765=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $766=(($764)>>>0) >= (($765)>>>0); //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $767=(($766)&1); //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $768=(($767)==(1)); //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $769=(($768)|0)!=0; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($769) { __label__ = 159; break; } else { __label__ = 160; break; } //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 159: 
      var $771=$B15; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $772=(($771+8)|0); //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $773=HEAP32[(($772)>>2)]; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F16=$773; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 161; break; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 160: 
      _abort(); //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 161: 
      __label__ = 162; break;
    case 162: 
      var $777=$p; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $778=$B15; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $779=(($778+8)|0); //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($779)>>2)]=$777; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $780=$p; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $781=$F16; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $782=(($781+12)|0); //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($782)>>2)]=$780; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $783=$F16; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $784=$p; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $785=(($784+8)|0); //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($785)>>2)]=$783; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $786=$B15; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $787=$p; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $788=(($787+12)|0); //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($788)>>2)]=$786; //@line 4818 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 192; break; //@line 4820 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 163: 
      var $790=$p; //@line 4822 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $791=$790; //@line 4822 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $tp=$791; //@line 4822 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $792=$psize; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $793=$792 >>> 8; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $X=$793; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $794=$X; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $795=(($794)|0)==0; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($795) { __label__ = 164; break; } else { __label__ = 165; break; } //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 164: 
      $I18=0; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 169; break; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 165: 
      var $798=$X; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $799=(($798)>>>0) > 65535; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($799) { __label__ = 166; break; } else { __label__ = 167; break; } //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 166: 
      $I18=31; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 168; break; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 167: 
      var $802=$X; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$802; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $803=$Y; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $804=((($803)-(256))|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $805=$804 >>> 16; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $806=$805 & 8; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$806; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $807=$N; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $808=$Y; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $809=$808 << $807; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$809; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $810=((($809)-(4096))|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $811=$810 >>> 16; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $812=$811 & 4; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$812; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $813=$K; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $814=$N; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $815=((($814)+($813))|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$815; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $816=$K; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $817=$Y; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $818=$817 << $816; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$818; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $819=((($818)-(16384))|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $820=$819 >>> 16; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $821=$820 & 2; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$821; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $822=$N; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $823=((($822)+($821))|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$823; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $824=$N; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $825=(((14)-($824))|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $826=$K; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $827=$Y; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $828=$827 << $826; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$828; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $829=$828 >>> 15; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $830=((($825)+($829))|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$830; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $831=$K; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $832=$831 << 1; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $833=$psize; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $834=$K; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $835=((($834)+(7))|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $836=$833 >>> (($835)>>>0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $837=$836 & 1; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $838=((($832)+($837))|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $I18=$838; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 168; break;
    case 168: 
      __label__ = 169; break;
    case 169: 
      var $841=$I18; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $842=((((__gm_+304)|0)+($841<<2))|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $H17=$842; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $843=$I18; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $844=$tp; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $845=(($844+28)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($845)>>2)]=$843; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $846=$tp; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $847=(($846+16)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $848=(($847+4)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($848)>>2)]=0; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $849=$tp; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $850=(($849+16)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $851=(($850)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($851)>>2)]=0; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $852=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $853=$I18; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $854=1 << $853; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $855=$852 & $854; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $856=(($855)|0)!=0; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($856) { __label__ = 171; break; } else { __label__ = 170; break; } //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 170: 
      var $858=$I18; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $859=1 << $858; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $860=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $861=$860 | $859; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$861; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $862=$tp; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $863=$H17; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($863)>>2)]=$862; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $864=$H17; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $865=$864; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $866=$tp; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $867=(($866+24)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($867)>>2)]=$865; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $868=$tp; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $869=$tp; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $870=(($869+12)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($870)>>2)]=$868; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $871=$tp; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $872=(($871+8)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($872)>>2)]=$868; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 189; break; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 171: 
      var $874=$H17; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $875=HEAP32[(($874)>>2)]; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $T=$875; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $876=$psize; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $877=$I18; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $878=(($877)|0)==31; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($878) { __label__ = 172; break; } else { __label__ = 173; break; } //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 172: 
      var $887 = 0;__label__ = 174; break; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 173: 
      var $881=$I18; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $882=$881 >>> 1; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $883=((($882)+(8))|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $884=((($883)-(2))|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $885=(((31)-($884))|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $887 = $885;__label__ = 174; break; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 174: 
      var $887; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $888=$876 << $887; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K19=$888; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 175; break; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 175: 
      var $890=$T; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $891=(($890+4)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $892=HEAP32[(($891)>>2)]; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $893=$892 & -8; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $894=$psize; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $895=(($893)|0)!=(($894)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($895) { __label__ = 176; break; } else { __label__ = 182; break; } //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 176: 
      var $897=$K19; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $898=$897 >>> 31; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $899=$898 & 1; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $900=$T; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $901=(($900+16)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $902=(($901+($899<<2))|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $C=$902; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $903=$K19; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $904=$903 << 1; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K19=$904; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $905=$C; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $906=HEAP32[(($905)>>2)]; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $907=(($906)|0)!=0; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($907) { __label__ = 177; break; } else { __label__ = 178; break; } //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 177: 
      var $909=$C; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $910=HEAP32[(($909)>>2)]; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $T=$910; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 181; break; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 178: 
      var $912=$C; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $913=$912; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $914=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $915=(($913)>>>0) >= (($914)>>>0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $916=(($915)&1); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $917=(($916)==(1)); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $918=(($917)|0)!=0; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($918) { __label__ = 179; break; } else { __label__ = 180; break; } //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 179: 
      var $920=$tp; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $921=$C; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($921)>>2)]=$920; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $922=$T; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $923=$tp; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $924=(($923+24)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($924)>>2)]=$922; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $925=$tp; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $926=$tp; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $927=(($926+12)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($927)>>2)]=$925; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $928=$tp; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $929=(($928+8)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($929)>>2)]=$925; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 188; break; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 180: 
      _abort(); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 181: 
      __label__ = 187; break; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 182: 
      var $933=$T; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $934=(($933+8)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $935=HEAP32[(($934)>>2)]; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F20=$935; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $936=$T; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $937=$936; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $938=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $939=(($937)>>>0) >= (($938)>>>0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($939) { __label__ = 183; break; } else { var $946 = 0;__label__ = 184; break; } //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 183: 
      var $941=$F20; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $942=$941; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $943=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $944=(($942)>>>0) >= (($943)>>>0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $946 = $944;__label__ = 184; break;
    case 184: 
      var $946;
      var $947=(($946)&1);
      var $948=(($947)==(1));
      var $949=(($948)|0)!=0;
      if ($949) { __label__ = 185; break; } else { __label__ = 186; break; }
    case 185: 
      var $951=$tp; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $952=$F20; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $953=(($952+12)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($953)>>2)]=$951; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $954=$T; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $955=(($954+8)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($955)>>2)]=$951; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $956=$F20; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $957=$tp; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $958=(($957+8)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($958)>>2)]=$956; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $959=$T; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $960=$tp; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $961=(($960+12)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($961)>>2)]=$959; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $962=$tp; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $963=(($962+24)|0); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($963)>>2)]=0; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 188; break; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 186: 
      _abort(); //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 187: 
      __label__ = 175; break; //@line 4823 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 188: 
      __label__ = 189; break;
    case 189: 
      var $968=HEAP32[((((__gm_+32)|0))>>2)]; //@line 4825 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $969=((($968)-(1))|0); //@line 4825 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+32)|0))>>2)]=$969; //@line 4825 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $970=(($969)|0)==0; //@line 4825 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($970) { __label__ = 190; break; } else { __label__ = 191; break; } //@line 4825 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 190: 
      var $972=_release_unused_segments(__gm_); //@line 4826 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 191; break; //@line 4826 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 191: 
      __label__ = 192; break;
    case 192: 
      __label__ = 196; break; //@line 4828 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 193: 
      __label__ = 194; break; //@line 4830 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 194: 
      __label__ = 195; break; //@line 4830 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 195: 
      _abort(); //@line 4832 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4832 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 196: 
      __label__ = 197; break; //@line 4836 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 197: 
      ;
      return; //@line 4840 "/home/janus/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
Module["_free"] = _free;_free["X"]=1;

function _sys_trim($m, $pad) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $released;
      var $unit;
      var $extra;
      var $sp;
      var $old_br;
      var $rel_br;
      var $new_br;
      $1=$m;
      $2=$pad;
      $released=0; //@line 4126 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $3=HEAP32[((((_mparams)|0))>>2)]; //@line 4127 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $4=(($3)|0)!=0; //@line 4127 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($4) { var $9 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 4127 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $6=_init_mparams(); //@line 4127 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $7=(($6)|0)!=0; //@line 4127 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $9 = $7;__label__ = 4; break; //@line 4127 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $9;
      var $10=(($9)&1); //@line 4127 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $11=$2; //@line 4128 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $12=(($11)>>>0) < 4294967232; //@line 4128 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($12) { __label__ = 5; break; } else { __label__ = 26; break; } //@line 4128 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $14=$1; //@line 4128 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $15=(($14+24)|0); //@line 4128 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $16=HEAP32[(($15)>>2)]; //@line 4128 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $17=(($16)|0)!=0; //@line 4128 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($17) { __label__ = 6; break; } else { __label__ = 26; break; } //@line 4128 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $19=$2; //@line 4129 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $20=((($19)+(40))|0); //@line 4129 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $2=$20; //@line 4129 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $21=$1; //@line 4131 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $22=(($21+12)|0); //@line 4131 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $23=HEAPU32[(($22)>>2)]; //@line 4131 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $24=$2; //@line 4131 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $25=(($23)>>>0) > (($24)>>>0); //@line 4131 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($25) { __label__ = 7; break; } else { __label__ = 22; break; } //@line 4131 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $27=HEAP32[((((_mparams+8)|0))>>2)]; //@line 4133 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $unit=$27; //@line 4133 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $28=$1; //@line 4135 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $29=(($28+12)|0); //@line 4135 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $30=HEAP32[(($29)>>2)]; //@line 4135 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $31=$2; //@line 4135 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $32=((($30)-($31))|0); //@line 4135 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $33=$unit; //@line 4135 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $34=((($33)-(1))|0); //@line 4135 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $35=((($32)+($34))|0); //@line 4135 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $36=$unit; //@line 4135 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $37=Math.floor(((($35)>>>0))/((($36)>>>0))); //@line 4135 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $38=((($37)-(1))|0); //@line 4135 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $39=$unit; //@line 4135 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $40=((($38)*($39))|0); //@line 4135 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $extra=$40; //@line 4135 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $41=$1; //@line 4136 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $42=$1; //@line 4136 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $43=(($42+24)|0); //@line 4136 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $44=HEAP32[(($43)>>2)]; //@line 4136 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $45=$44; //@line 4136 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $46=_segment_holding($41, $45); //@line 4136 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $sp=$46; //@line 4136 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $47=$sp; //@line 4138 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $48=(($47+12)|0); //@line 4138 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $49=HEAP32[(($48)>>2)]; //@line 4138 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $50=$49 & 8; //@line 4138 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $51=(($50)|0)!=0; //@line 4138 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($51) { __label__ = 19; break; } else { __label__ = 8; break; } //@line 4138 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $53=$sp; //@line 4139 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $54=(($53+12)|0); //@line 4139 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $55=HEAP32[(($54)>>2)]; //@line 4139 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $56=$55 & 0; //@line 4139 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $57=(($56)|0)!=0; //@line 4139 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($57) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4139 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 9: 
      __label__ = 18; break; //@line 4150 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $60=$extra; //@line 4152 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $61=(($60)>>>0) >= 2147483647; //@line 4152 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($61) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4152 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $63=$unit; //@line 4153 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $64=(((-2147483648)-($63))|0); //@line 4153 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $extra=$64; //@line 4153 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 4153 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $66=_sbrk(0); //@line 4157 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $old_br=$66; //@line 4157 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $67=$old_br; //@line 4158 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $68=$sp; //@line 4158 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $69=(($68)|0); //@line 4158 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $70=HEAP32[(($69)>>2)]; //@line 4158 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $71=$sp; //@line 4158 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $72=(($71+4)|0); //@line 4158 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $73=HEAP32[(($72)>>2)]; //@line 4158 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $74=(($70+$73)|0); //@line 4158 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $75=(($67)|0)==(($74)|0); //@line 4158 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($75) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 4158 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $77=$extra; //@line 4159 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $78=(((-$77))|0); //@line 4159 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $79=_sbrk($78); //@line 4159 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $rel_br=$79; //@line 4159 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $80=_sbrk(0); //@line 4160 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $new_br=$80; //@line 4160 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $81=$rel_br; //@line 4161 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $82=(($81)|0)!=-1; //@line 4161 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($82) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 4161 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $84=$new_br; //@line 4161 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $85=$old_br; //@line 4161 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $86=(($84)>>>0) < (($85)>>>0); //@line 4161 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($86) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4161 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $88=$old_br; //@line 4162 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $89=$new_br; //@line 4162 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $90=$88; //@line 4162 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $91=$89; //@line 4162 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $92=((($90)-($91))|0); //@line 4162 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $released=$92; //@line 4162 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 16; break; //@line 4162 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 16: 
      __label__ = 17; break; //@line 4163 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break; //@line 4167 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $97=$released; //@line 4169 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $98=(($97)|0)!=0; //@line 4169 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($98) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 4169 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $100=$released; //@line 4170 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $101=$sp; //@line 4170 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $102=(($101+4)|0); //@line 4170 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $103=HEAP32[(($102)>>2)]; //@line 4170 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $104=((($103)-($100))|0); //@line 4170 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($102)>>2)]=$104; //@line 4170 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $105=$released; //@line 4171 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $106=$1; //@line 4171 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $107=(($106+432)|0); //@line 4171 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $108=HEAP32[(($107)>>2)]; //@line 4171 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $109=((($108)-($105))|0); //@line 4171 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($107)>>2)]=$109; //@line 4171 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $110=$1; //@line 4172 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $111=$1; //@line 4172 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $112=(($111+24)|0); //@line 4172 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $113=HEAP32[(($112)>>2)]; //@line 4172 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $114=$1; //@line 4172 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $115=(($114+12)|0); //@line 4172 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $116=HEAP32[(($115)>>2)]; //@line 4172 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $117=$released; //@line 4172 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $118=((($116)-($117))|0); //@line 4172 "/home/janus/emscripten/system/lib/dlmalloc.c"
      _init_top($110, $113, $118); //@line 4172 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4174 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 22; break; //@line 4175 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $121=$released; //@line 4182 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $122=(($121)|0)==0; //@line 4182 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($122) { __label__ = 23; break; } else { __label__ = 25; break; } //@line 4182 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $124=$1; //@line 4182 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $125=(($124+12)|0); //@line 4182 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $126=HEAPU32[(($125)>>2)]; //@line 4182 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $127=$1; //@line 4182 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $128=(($127+28)|0); //@line 4182 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $129=HEAPU32[(($128)>>2)]; //@line 4182 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $130=(($126)>>>0) > (($129)>>>0); //@line 4182 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($130) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4182 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $132=$1; //@line 4183 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $133=(($132+28)|0); //@line 4183 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($133)>>2)]=-1; //@line 4183 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 25; break; //@line 4183 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 25: 
      __label__ = 26; break; //@line 4184 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $136=$released; //@line 4186 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $137=(($136)|0)!=0; //@line 4186 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $138=$137 ? 1 : 0; //@line 4186 "/home/janus/emscripten/system/lib/dlmalloc.c"
      ;
      return $138; //@line 4186 "/home/janus/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_sys_trim["X"]=1;

function _realloc($oldmem, $bytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $m;
      $2=$oldmem;
      $3=$bytes;
      var $4=$2; //@line 4858 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $5=(($4)|0)==0; //@line 4858 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4858 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $7=$3; //@line 4859 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $8=_malloc($7); //@line 4859 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $1=$8; //@line 4859 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 5; break; //@line 4859 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 4: 
      $m=__gm_; //@line 4868 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $10=$m; //@line 4876 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $11=$2; //@line 4876 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $12=$3; //@line 4876 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $13=_internal_realloc($10, $11, $12); //@line 4876 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $1=$13; //@line 4876 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 5; break; //@line 4876 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $15=$1; //@line 4878 "/home/janus/emscripten/system/lib/dlmalloc.c"
      ;
      return $15; //@line 4878 "/home/janus/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _release_unused_segments($m) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $released;
      var $nsegs;
      var $pred;
      var $sp;
      var $base;
      var $size;
      var $next;
      var $p;
      var $psize;
      var $tp;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $H1;
      var $I;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K2;
      var $C;
      var $F3;
      $1=$m;
      $released=0; //@line 4079 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $nsegs=0; //@line 4080 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $2=$1; //@line 4081 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $3=(($2+444)|0); //@line 4081 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $pred=$3; //@line 4081 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $4=$pred; //@line 4082 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $5=(($4+8)|0); //@line 4082 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $6=HEAP32[(($5)>>2)]; //@line 4082 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $sp=$6; //@line 4082 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 4083 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $8=$sp; //@line 4083 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $9=(($8)|0)!=0; //@line 4083 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($9) { __label__ = 4; break; } else { __label__ = 88; break; } //@line 4083 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $11=$sp; //@line 4084 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $12=(($11)|0); //@line 4084 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $13=HEAP32[(($12)>>2)]; //@line 4084 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $base=$13; //@line 4084 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $14=$sp; //@line 4085 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $15=(($14+4)|0); //@line 4085 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $16=HEAP32[(($15)>>2)]; //@line 4085 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $size=$16; //@line 4085 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $17=$sp; //@line 4086 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $18=(($17+8)|0); //@line 4086 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $19=HEAP32[(($18)>>2)]; //@line 4086 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $next=$19; //@line 4086 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $20=$nsegs; //@line 4087 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $21=((($20)+(1))|0); //@line 4087 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $nsegs=$21; //@line 4087 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $22=$sp; //@line 4088 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $23=(($22+12)|0); //@line 4088 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $24=HEAP32[(($23)>>2)]; //@line 4088 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $25=$24 & 0; //@line 4088 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $26=(($25)|0)!=0; //@line 4088 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($26) { __label__ = 5; break; } else { __label__ = 87; break; } //@line 4088 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $28=$sp; //@line 4088 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $29=(($28+12)|0); //@line 4088 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $30=HEAP32[(($29)>>2)]; //@line 4088 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $31=$30 & 8; //@line 4088 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $32=(($31)|0)!=0; //@line 4088 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($32) { __label__ = 87; break; } else { __label__ = 6; break; } //@line 4088 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $34=$base; //@line 4089 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $35=$base; //@line 4089 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $36=(($35+8)|0); //@line 4089 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $37=$36; //@line 4089 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $38=$37 & 7; //@line 4089 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $39=(($38)|0)==0; //@line 4089 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($39) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4089 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $49 = 0;__label__ = 9; break; //@line 4089 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $42=$base; //@line 4089 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $43=(($42+8)|0); //@line 4089 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $44=$43; //@line 4089 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $45=$44 & 7; //@line 4089 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $46=(((8)-($45))|0); //@line 4089 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $47=$46 & 7; //@line 4089 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $49 = $47;__label__ = 9; break; //@line 4089 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $49; //@line 4089 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $50=(($34+$49)|0); //@line 4089 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $51=$50; //@line 4089 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $p=$51; //@line 4089 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $52=$p; //@line 4090 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $53=(($52+4)|0); //@line 4090 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $54=HEAP32[(($53)>>2)]; //@line 4090 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $55=$54 & -8; //@line 4090 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $psize=$55; //@line 4090 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $56=$p; //@line 4092 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $57=(($56+4)|0); //@line 4092 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $58=HEAP32[(($57)>>2)]; //@line 4092 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $59=$58 & 3; //@line 4092 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $60=(($59)|0)!=1; //@line 4092 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($60) { __label__ = 86; break; } else { __label__ = 10; break; } //@line 4092 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $62=$p; //@line 4092 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $63=$62; //@line 4092 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $64=$psize; //@line 4092 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $65=(($63+$64)|0); //@line 4092 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $66=$base; //@line 4092 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $67=$size; //@line 4092 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $68=(($66+$67)|0); //@line 4092 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $69=((($68)-(40))|0); //@line 4092 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $70=(($65)>>>0) >= (($69)>>>0); //@line 4092 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($70) { __label__ = 11; break; } else { __label__ = 86; break; } //@line 4092 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $72=$p; //@line 4093 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $73=$72; //@line 4093 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $tp=$73; //@line 4093 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $74=$p; //@line 4095 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $75=$1; //@line 4095 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $76=(($75+20)|0); //@line 4095 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $77=HEAP32[(($76)>>2)]; //@line 4095 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $78=(($74)|0)==(($77)|0); //@line 4095 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($78) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 4095 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $80=$1; //@line 4096 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $81=(($80+20)|0); //@line 4096 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($81)>>2)]=0; //@line 4096 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $82=$1; //@line 4097 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $83=(($82+8)|0); //@line 4097 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($83)>>2)]=0; //@line 4097 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 59; break; //@line 4098 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $85=$tp; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $86=(($85+24)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $87=HEAP32[(($86)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $XP=$87; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $88=$tp; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $89=(($88+12)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $90=HEAP32[(($89)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $91=$tp; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $92=(($90)|0)!=(($91)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($92) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $94=$tp; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $95=(($94+8)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $96=HEAP32[(($95)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F=$96; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $97=$tp; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $98=(($97+12)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $99=HEAP32[(($98)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$99; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $100=$F; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $101=$100; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $102=$1; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $103=(($102+16)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $104=HEAPU32[(($103)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $105=(($101)>>>0) >= (($104)>>>0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $106=(($105)&1); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $107=(($106)==(1)); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $108=(($107)|0)!=0; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($108) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $110=$R; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $111=$F; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $112=(($111+12)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($112)>>2)]=$110; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $113=$F; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $114=$R; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $115=(($114+8)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($115)>>2)]=$113; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 17; break; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 16: 
      _abort(); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 17: 
      __label__ = 30; break; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $119=$tp; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $120=(($119+16)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $121=(($120+4)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $RP=$121; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $122=HEAP32[(($121)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$122; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $123=(($122)|0)!=0; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($123) { __label__ = 20; break; } else { __label__ = 19; break; } //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $125=$tp; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $126=(($125+16)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $127=(($126)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $RP=$127; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $128=HEAP32[(($127)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$128; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $129=(($128)|0)!=0; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($129) { __label__ = 20; break; } else { __label__ = 29; break; } //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 20: 
      __label__ = 21; break; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $132=$R; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $133=(($132+16)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $134=(($133+4)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $CP=$134; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $135=HEAP32[(($134)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $136=(($135)|0)!=0; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($136) { var $144 = 1;__label__ = 23; break; } else { __label__ = 22; break; } //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $138=$R; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $139=(($138+16)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $140=(($139)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $CP=$140; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $141=HEAP32[(($140)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $142=(($141)|0)!=0; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $144 = $142;__label__ = 23; break; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $144;
      if ($144) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $146=$CP; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $RP=$146; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $147=HEAP32[(($146)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$147; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $149=$RP; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $150=$149; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $151=$1; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $152=(($151+16)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $153=HEAPU32[(($152)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $154=(($150)>>>0) >= (($153)>>>0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $155=(($154)&1); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $156=(($155)==(1)); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $157=(($156)|0)!=0; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($157) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $159=$RP; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($159)>>2)]=0; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 27: 
      _abort(); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 29: 
      __label__ = 30; break;
    case 30: 
      var $164=$XP; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $165=(($164)|0)!=0; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($165) { __label__ = 31; break; } else { __label__ = 58; break; } //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $167=$tp; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $168=(($167+28)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $169=HEAP32[(($168)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $170=$1; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $171=(($170+304)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $172=(($171+($169<<2))|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $H=$172; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $173=$tp; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $174=$H; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $175=HEAP32[(($174)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $176=(($173)|0)==(($175)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($176) { __label__ = 32; break; } else { __label__ = 35; break; } //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $178=$R; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $179=$H; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($179)>>2)]=$178; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $180=(($178)|0)==0; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($180) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $182=$tp; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $183=(($182+28)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $184=HEAP32[(($183)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $185=1 << $184; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $186=$185 ^ -1; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $187=$1; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $188=(($187+4)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $189=HEAP32[(($188)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $190=$189 & $186; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($188)>>2)]=$190; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 34: 
      __label__ = 42; break; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $193=$XP; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $194=$193; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $195=$1; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $196=(($195+16)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $197=HEAPU32[(($196)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $198=(($194)>>>0) >= (($197)>>>0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $199=(($198)&1); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $200=(($199)==(1)); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $201=(($200)|0)!=0; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($201) { __label__ = 36; break; } else { __label__ = 40; break; } //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $203=$XP; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $204=(($203+16)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $205=(($204)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $206=HEAP32[(($205)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $207=$tp; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $208=(($206)|0)==(($207)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($208) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $210=$R; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $211=$XP; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $212=(($211+16)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $213=(($212)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($213)>>2)]=$210; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 39; break; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $215=$R; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $216=$XP; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $217=(($216+16)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $218=(($217+4)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($218)>>2)]=$215; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 39; break;
    case 39: 
      __label__ = 41; break; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 40: 
      _abort(); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 41: 
      __label__ = 42; break;
    case 42: 
      var $223=$R; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $224=(($223)|0)!=0; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($224) { __label__ = 43; break; } else { __label__ = 57; break; } //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $226=$R; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $227=$226; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $228=$1; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $229=(($228+16)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $230=HEAPU32[(($229)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $231=(($227)>>>0) >= (($230)>>>0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $232=(($231)&1); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $233=(($232)==(1)); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $234=(($233)|0)!=0; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($234) { __label__ = 44; break; } else { __label__ = 55; break; } //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $236=$XP; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $237=$R; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $238=(($237+24)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($238)>>2)]=$236; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $239=$tp; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $240=(($239+16)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $241=(($240)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $242=HEAP32[(($241)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $C0=$242; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $243=(($242)|0)!=0; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($243) { __label__ = 45; break; } else { __label__ = 49; break; } //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $245=$C0; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $246=$245; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $247=$1; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $248=(($247+16)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $249=HEAPU32[(($248)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $250=(($246)>>>0) >= (($249)>>>0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $251=(($250)&1); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $252=(($251)==(1)); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $253=(($252)|0)!=0; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($253) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $255=$C0; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $256=$R; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $257=(($256+16)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $258=(($257)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($258)>>2)]=$255; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $259=$R; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $260=$C0; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $261=(($260+24)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($261)>>2)]=$259; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 47: 
      _abort(); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 48: 
      __label__ = 49; break; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $265=$tp; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $266=(($265+16)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $267=(($266+4)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $268=HEAP32[(($267)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $C1=$268; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $269=(($268)|0)!=0; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($269) { __label__ = 50; break; } else { __label__ = 54; break; } //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $271=$C1; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $272=$271; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $273=$1; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $274=(($273+16)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $275=HEAPU32[(($274)>>2)]; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $276=(($272)>>>0) >= (($275)>>>0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $277=(($276)&1); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $278=(($277)==(1)); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $279=(($278)|0)!=0; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($279) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 51: 
      var $281=$C1; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $282=$R; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $283=(($282+16)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $284=(($283+4)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($284)>>2)]=$281; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $285=$R; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $286=$C1; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $287=(($286+24)|0); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($287)>>2)]=$285; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 53; break; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 52: 
      _abort(); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 53: 
      __label__ = 54; break; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 54: 
      __label__ = 56; break; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 55: 
      _abort(); //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 56: 
      __label__ = 57; break; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 57: 
      __label__ = 58; break; //@line 4100 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 58: 
      __label__ = 59; break;
    case 59: 
      var $296=$psize; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $297=$296 >>> 8; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $X=$297; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $298=$X; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $299=(($298)|0)==0; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($299) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 60: 
      $I=0; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $302=$X; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $303=(($302)>>>0) > 65535; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($303) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 62: 
      $I=31; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $306=$X; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$306; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $307=$Y; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $308=((($307)-(256))|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $309=$308 >>> 16; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $310=$309 & 8; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$310; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $311=$N; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $312=$Y; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $313=$312 << $311; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$313; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $314=((($313)-(4096))|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $315=$314 >>> 16; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $316=$315 & 4; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$316; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $317=$K; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $318=$N; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $319=((($318)+($317))|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$319; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $320=$K; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $321=$Y; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $322=$321 << $320; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$322; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $323=((($322)-(16384))|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $324=$323 >>> 16; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $325=$324 & 2; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$325; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $326=$N; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $327=((($326)+($325))|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$327; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $328=$N; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $329=(((14)-($328))|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $330=$K; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $331=$Y; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $332=$331 << $330; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$332; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $333=$332 >>> 15; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $334=((($329)+($333))|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$334; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $335=$K; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $336=$335 << 1; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $337=$psize; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $338=$K; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $339=((($338)+(7))|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $340=$337 >>> (($339)>>>0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $341=$340 & 1; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $342=((($336)+($341))|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $I=$342; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break;
    case 64: 
      __label__ = 65; break;
    case 65: 
      var $345=$I; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $346=$1; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $347=(($346+304)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $348=(($347+($345<<2))|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $H1=$348; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $349=$I; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $350=$tp; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $351=(($350+28)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($351)>>2)]=$349; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $352=$tp; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $353=(($352+16)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $354=(($353+4)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($354)>>2)]=0; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $355=$tp; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $356=(($355+16)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $357=(($356)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($357)>>2)]=0; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $358=$1; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $359=(($358+4)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $360=HEAP32[(($359)>>2)]; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $361=$I; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $362=1 << $361; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $363=$360 & $362; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $364=(($363)|0)!=0; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($364) { __label__ = 67; break; } else { __label__ = 66; break; } //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 66: 
      var $366=$I; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $367=1 << $366; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $368=$1; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $369=(($368+4)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $370=HEAP32[(($369)>>2)]; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $371=$370 | $367; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($369)>>2)]=$371; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $372=$tp; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $373=$H1; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($373)>>2)]=$372; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $374=$H1; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $375=$374; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $376=$tp; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $377=(($376+24)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($377)>>2)]=$375; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $378=$tp; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $379=$tp; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $380=(($379+12)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($380)>>2)]=$378; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $381=$tp; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $382=(($381+8)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($382)>>2)]=$378; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 85; break; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 67: 
      var $384=$H1; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $385=HEAP32[(($384)>>2)]; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $T=$385; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $386=$psize; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $387=$I; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $388=(($387)|0)==31; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($388) { __label__ = 68; break; } else { __label__ = 69; break; } //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 68: 
      var $397 = 0;__label__ = 70; break; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 69: 
      var $391=$I; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $392=$391 >>> 1; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $393=((($392)+(8))|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $394=((($393)-(2))|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $395=(((31)-($394))|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $397 = $395;__label__ = 70; break; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 70: 
      var $397; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $398=$386 << $397; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K2=$398; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 71; break; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $400=$T; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $401=(($400+4)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $402=HEAP32[(($401)>>2)]; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $403=$402 & -8; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $404=$psize; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $405=(($403)|0)!=(($404)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($405) { __label__ = 72; break; } else { __label__ = 78; break; } //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $407=$K2; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $408=$407 >>> 31; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $409=$408 & 1; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $410=$T; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $411=(($410+16)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $412=(($411+($409<<2))|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $C=$412; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $413=$K2; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $414=$413 << 1; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K2=$414; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $415=$C; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $416=HEAP32[(($415)>>2)]; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $417=(($416)|0)!=0; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($417) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $419=$C; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $420=HEAP32[(($419)>>2)]; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $T=$420; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 77; break; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $422=$C; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $423=$422; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $424=$1; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $425=(($424+16)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $426=HEAPU32[(($425)>>2)]; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $427=(($423)>>>0) >= (($426)>>>0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $428=(($427)&1); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $429=(($428)==(1)); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $430=(($429)|0)!=0; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($430) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 75: 
      var $432=$tp; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $433=$C; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($433)>>2)]=$432; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $434=$T; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $435=$tp; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $436=(($435+24)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($436)>>2)]=$434; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $437=$tp; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $438=$tp; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $439=(($438+12)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($439)>>2)]=$437; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $440=$tp; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $441=(($440+8)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($441)>>2)]=$437; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 84; break; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 76: 
      _abort(); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 77: 
      __label__ = 83; break; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $445=$T; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $446=(($445+8)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $447=HEAP32[(($446)>>2)]; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F3=$447; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $448=$T; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $449=$448; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $450=$1; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $451=(($450+16)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $452=HEAPU32[(($451)>>2)]; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $453=(($449)>>>0) >= (($452)>>>0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($453) { __label__ = 79; break; } else { var $462 = 0;__label__ = 80; break; } //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 79: 
      var $455=$F3; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $456=$455; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $457=$1; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $458=(($457+16)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $459=HEAPU32[(($458)>>2)]; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $460=(($456)>>>0) >= (($459)>>>0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $462 = $460;__label__ = 80; break;
    case 80: 
      var $462;
      var $463=(($462)&1);
      var $464=(($463)==(1));
      var $465=(($464)|0)!=0;
      if ($465) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: 
      var $467=$tp; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $468=$F3; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $469=(($468+12)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($469)>>2)]=$467; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $470=$T; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $471=(($470+8)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($471)>>2)]=$467; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $472=$F3; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $473=$tp; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $474=(($473+8)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($474)>>2)]=$472; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $475=$T; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $476=$tp; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $477=(($476+12)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($477)>>2)]=$475; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $478=$tp; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $479=(($478+24)|0); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($479)>>2)]=0; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 84; break; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 82: 
      _abort(); //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 83: 
      __label__ = 71; break; //@line 4110 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 84: 
      __label__ = 85; break;
    case 85: 
      __label__ = 86; break; //@line 4112 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 86: 
      __label__ = 87; break; //@line 4113 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 87: 
      var $486=$sp; //@line 4116 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $pred=$486; //@line 4116 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $487=$next; //@line 4117 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $sp=$487; //@line 4117 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 4118 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $489=$nsegs; //@line 4120 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $490=(($489)>>>0) > 4294967295; //@line 4120 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($490) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 4120 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $492=$nsegs; //@line 4120 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $495 = $492;__label__ = 91; break; //@line 4120 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $495 = -1;__label__ = 91; break; //@line 4120 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $495; //@line 4120 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $496=$1; //@line 4120 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $497=(($496+32)|0); //@line 4120 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($497)>>2)]=$495; //@line 4120 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $498=$released; //@line 4122 "/home/janus/emscripten/system/lib/dlmalloc.c"
      ;
      return $498; //@line 4122 "/home/janus/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_release_unused_segments["X"]=1;

function _mmap_resize($m, $oldp, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $oldsize;
      var $offset;
      var $oldmmsize;
      var $newmmsize;
      var $cp;
      var $newp;
      var $psize;
      $2=$m;
      $3=$oldp;
      $4=$nb;
      var $5=$3; //@line 3699 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $6=(($5+4)|0); //@line 3699 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[(($6)>>2)]; //@line 3699 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $8=$7 & -8; //@line 3699 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $oldsize=$8; //@line 3699 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $9=$4; //@line 3700 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $10=$9 >>> 3; //@line 3700 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $11=(($10)>>>0) < 32; //@line 3700 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3700 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 3: 
      $1=0; //@line 3701 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3701 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $14=$oldsize; //@line 3703 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $15=$4; //@line 3703 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $16=((($15)+(4))|0); //@line 3703 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $17=(($14)>>>0) >= (($16)>>>0); //@line 3703 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($17) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 3703 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $19=$oldsize; //@line 3703 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $20=$4; //@line 3703 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $21=((($19)-($20))|0); //@line 3703 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $22=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3703 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $23=$22 << 1; //@line 3703 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $24=(($21)>>>0) <= (($23)>>>0); //@line 3703 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($24) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3703 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $26=$3; //@line 3705 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $1=$26; //@line 3705 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3705 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $28=$3; //@line 3707 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $29=(($28)|0); //@line 3707 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $30=HEAP32[(($29)>>2)]; //@line 3707 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $offset=$30; //@line 3707 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $31=$oldsize; //@line 3708 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $32=$offset; //@line 3708 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $33=((($31)+($32))|0); //@line 3708 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $34=((($33)+(16))|0); //@line 3708 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $oldmmsize=$34; //@line 3708 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $35=$4; //@line 3709 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $36=((($35)+(24))|0); //@line 3709 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $37=((($36)+(7))|0); //@line 3709 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $38=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3709 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $39=((($38)-(1))|0); //@line 3709 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $40=((($37)+($39))|0); //@line 3709 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $41=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3709 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $42=((($41)-(1))|0); //@line 3709 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $43=$42 ^ -1; //@line 3709 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $44=$40 & $43; //@line 3709 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $newmmsize=$44; //@line 3709 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $cp=-1; //@line 3711 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $45=$cp; //@line 3712 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $46=(($45)|0)!=-1; //@line 3712 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($46) { __label__ = 8; break; } else { __label__ = 13; break; } //@line 3712 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $48=$cp; //@line 3713 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $49=$offset; //@line 3713 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $50=(($48+$49)|0); //@line 3713 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $51=$50; //@line 3713 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $newp=$51; //@line 3713 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $52=$newmmsize; //@line 3714 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $53=$offset; //@line 3714 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $54=((($52)-($53))|0); //@line 3714 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $55=((($54)-(16))|0); //@line 3714 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $psize=$55; //@line 3714 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $56=$psize; //@line 3715 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $57=$newp; //@line 3715 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $58=(($57+4)|0); //@line 3715 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($58)>>2)]=$56; //@line 3715 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $59=$newp; //@line 3717 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $60=$59; //@line 3717 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $61=$psize; //@line 3717 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $62=(($60+$61)|0); //@line 3717 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $63=$62; //@line 3717 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $64=(($63+4)|0); //@line 3717 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($64)>>2)]=7; //@line 3717 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $65=$newp; //@line 3718 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $66=$65; //@line 3718 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $67=$psize; //@line 3718 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $68=((($67)+(4))|0); //@line 3718 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $69=(($66+$68)|0); //@line 3718 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $70=$69; //@line 3718 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $71=(($70+4)|0); //@line 3718 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($71)>>2)]=0; //@line 3718 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $72=$cp; //@line 3720 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $73=$2; //@line 3720 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $74=(($73+16)|0); //@line 3720 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $75=HEAPU32[(($74)>>2)]; //@line 3720 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $76=(($72)>>>0) < (($75)>>>0); //@line 3720 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($76) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3720 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $78=$cp; //@line 3721 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $79=$2; //@line 3721 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $80=(($79+16)|0); //@line 3721 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($80)>>2)]=$78; //@line 3721 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 10; break; //@line 3721 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $82=$newmmsize; //@line 3722 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $83=$oldmmsize; //@line 3722 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $84=((($82)-($83))|0); //@line 3722 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $85=$2; //@line 3722 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $86=(($85+432)|0); //@line 3722 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $87=HEAP32[(($86)>>2)]; //@line 3722 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $88=((($87)+($84))|0); //@line 3722 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($86)>>2)]=$88; //@line 3722 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $89=$2; //@line 3722 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $90=(($89+436)|0); //@line 3722 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $91=HEAPU32[(($90)>>2)]; //@line 3722 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $92=(($88)>>>0) > (($91)>>>0); //@line 3722 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($92) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3722 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $94=$2; //@line 3723 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $95=(($94+432)|0); //@line 3723 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $96=HEAP32[(($95)>>2)]; //@line 3723 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $97=$2; //@line 3723 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $98=(($97+436)|0); //@line 3723 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($98)>>2)]=$96; //@line 3723 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 3723 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $100=$newp; //@line 3725 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $1=$100; //@line 3725 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3725 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 13: 
      __label__ = 14; break;
    case 14: 
      $1=0; //@line 3728 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3728 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $104=$1; //@line 3729 "/home/janus/emscripten/system/lib/dlmalloc.c"
      ;
      return $104; //@line 3729 "/home/janus/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_mmap_resize["X"]=1;

function _segment_holding($m, $addr) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $sp;
      $2=$m;
      $3=$addr;
      var $4=$2; //@line 2562 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $5=(($4+444)|0); //@line 2562 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $sp=$5; //@line 2562 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 2563 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $7=$3; //@line 2564 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $8=$sp; //@line 2564 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $9=(($8)|0); //@line 2564 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $10=HEAPU32[(($9)>>2)]; //@line 2564 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $11=(($7)>>>0) >= (($10)>>>0); //@line 2564 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($11) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 2564 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $13=$3; //@line 2564 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $14=$sp; //@line 2564 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $15=(($14)|0); //@line 2564 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $16=HEAP32[(($15)>>2)]; //@line 2564 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $17=$sp; //@line 2564 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $18=(($17+4)|0); //@line 2564 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $19=HEAP32[(($18)>>2)]; //@line 2564 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $20=(($16+$19)|0); //@line 2564 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $21=(($13)>>>0) < (($20)>>>0); //@line 2564 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2564 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $23=$sp; //@line 2565 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $1=$23; //@line 2565 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 2565 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $25=$sp; //@line 2566 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $26=(($25+8)|0); //@line 2566 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $27=HEAP32[(($26)>>2)]; //@line 2566 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $sp=$27; //@line 2566 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $28=(($27)|0)==0; //@line 2566 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($28) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2566 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 7: 
      $1=0; //@line 2567 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 2567 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 8: 
      __label__ = 3; break; //@line 2568 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $32=$1; //@line 2569 "/home/janus/emscripten/system/lib/dlmalloc.c"
      ;
      return $32; //@line 2569 "/home/janus/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _init_top($m, $p, $psize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $offset;
      $1=$m;
      $2=$p;
      $3=$psize;
      var $4=$2; //@line 3736 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $5=$4; //@line 3736 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $6=(($5+8)|0); //@line 3736 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $7=$6; //@line 3736 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $8=$7 & 7; //@line 3736 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $9=(($8)|0)==0; //@line 3736 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3736 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $20 = 0;__label__ = 5; break; //@line 3736 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $12=$2; //@line 3736 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $13=$12; //@line 3736 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $14=(($13+8)|0); //@line 3736 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $15=$14; //@line 3736 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $16=$15 & 7; //@line 3736 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $17=(((8)-($16))|0); //@line 3736 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $18=$17 & 7; //@line 3736 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $20 = $18;__label__ = 5; break; //@line 3736 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $20; //@line 3736 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $offset=$20; //@line 3736 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $21=$2; //@line 3737 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $22=$21; //@line 3737 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $23=$offset; //@line 3737 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $24=(($22+$23)|0); //@line 3737 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $25=$24; //@line 3737 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $2=$25; //@line 3737 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $26=$offset; //@line 3738 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $27=$3; //@line 3738 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $28=((($27)-($26))|0); //@line 3738 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $3=$28; //@line 3738 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $29=$2; //@line 3740 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $30=$1; //@line 3740 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $31=(($30+24)|0); //@line 3740 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($31)>>2)]=$29; //@line 3740 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $32=$3; //@line 3741 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $33=$1; //@line 3741 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $34=(($33+12)|0); //@line 3741 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($34)>>2)]=$32; //@line 3741 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $35=$3; //@line 3742 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $36=$35 | 1; //@line 3742 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $37=$2; //@line 3742 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $38=(($37+4)|0); //@line 3742 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($38)>>2)]=$36; //@line 3742 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $39=$2; //@line 3744 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $40=$39; //@line 3744 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $41=$3; //@line 3744 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $42=(($40+$41)|0); //@line 3744 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $43=$42; //@line 3744 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $44=(($43+4)|0); //@line 3744 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($44)>>2)]=40; //@line 3744 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $45=HEAP32[((((_mparams+16)|0))>>2)]; //@line 3745 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $46=$1; //@line 3745 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $47=(($46+28)|0); //@line 3745 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($47)>>2)]=$45; //@line 3745 "/home/janus/emscripten/system/lib/dlmalloc.c"
      ;
      return; //@line 3746 "/home/janus/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_init_top["X"]=1;

function _mmap_alloc($m, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $mmsize;
      var $mm;
      var $offset;
      var $psize;
      var $p;
      $2=$m;
      $3=$nb;
      var $4=$3; //@line 3672 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $5=((($4)+(24))|0); //@line 3672 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $6=((($5)+(7))|0); //@line 3672 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3672 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $8=((($7)-(1))|0); //@line 3672 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $9=((($6)+($8))|0); //@line 3672 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $10=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3672 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $11=((($10)-(1))|0); //@line 3672 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $12=$11 ^ -1; //@line 3672 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $13=$9 & $12; //@line 3672 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $mmsize=$13; //@line 3672 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $14=$mmsize; //@line 3673 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $15=$3; //@line 3673 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $16=(($14)>>>0) > (($15)>>>0); //@line 3673 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($16) { __label__ = 3; break; } else { __label__ = 14; break; } //@line 3673 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 3: 
      $mm=-1; //@line 3674 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $18=$mm; //@line 3675 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $19=(($18)|0)!=-1; //@line 3675 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($19) { __label__ = 4; break; } else { __label__ = 13; break; } //@line 3675 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $21=$mm; //@line 3676 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $22=(($21+8)|0); //@line 3676 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $23=$22; //@line 3676 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $24=$23 & 7; //@line 3676 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $25=(($24)|0)==0; //@line 3676 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3676 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $35 = 0;__label__ = 7; break; //@line 3676 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $28=$mm; //@line 3676 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $29=(($28+8)|0); //@line 3676 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $30=$29; //@line 3676 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $31=$30 & 7; //@line 3676 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $32=(((8)-($31))|0); //@line 3676 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $33=$32 & 7; //@line 3676 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $35 = $33;__label__ = 7; break; //@line 3676 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $35; //@line 3676 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $offset=$35; //@line 3676 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $36=$mmsize; //@line 3677 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $37=$offset; //@line 3677 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $38=((($36)-($37))|0); //@line 3677 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $39=((($38)-(16))|0); //@line 3677 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $psize=$39; //@line 3677 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $40=$mm; //@line 3678 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $41=$offset; //@line 3678 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $42=(($40+$41)|0); //@line 3678 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $43=$42; //@line 3678 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $p=$43; //@line 3678 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $44=$offset; //@line 3679 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $45=$p; //@line 3679 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $46=(($45)|0); //@line 3679 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($46)>>2)]=$44; //@line 3679 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $47=$psize; //@line 3680 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $48=$p; //@line 3680 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $49=(($48+4)|0); //@line 3680 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($49)>>2)]=$47; //@line 3680 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $50=$p; //@line 3682 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $51=$50; //@line 3682 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $52=$psize; //@line 3682 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $53=(($51+$52)|0); //@line 3682 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $54=$53; //@line 3682 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $55=(($54+4)|0); //@line 3682 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($55)>>2)]=7; //@line 3682 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $56=$p; //@line 3683 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $57=$56; //@line 3683 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $58=$psize; //@line 3683 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $59=((($58)+(4))|0); //@line 3683 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $60=(($57+$59)|0); //@line 3683 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $61=$60; //@line 3683 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $62=(($61+4)|0); //@line 3683 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($62)>>2)]=0; //@line 3683 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $63=$2; //@line 3685 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $64=(($63+16)|0); //@line 3685 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $65=HEAP32[(($64)>>2)]; //@line 3685 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $66=(($65)|0)==0; //@line 3685 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($66) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 3685 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $68=$mm; //@line 3685 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $69=$2; //@line 3685 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $70=(($69+16)|0); //@line 3685 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $71=HEAPU32[(($70)>>2)]; //@line 3685 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $72=(($68)>>>0) < (($71)>>>0); //@line 3685 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($72) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3685 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $74=$mm; //@line 3686 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $75=$2; //@line 3686 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $76=(($75+16)|0); //@line 3686 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($76)>>2)]=$74; //@line 3686 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 10; break; //@line 3686 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $78=$mmsize; //@line 3687 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $79=$2; //@line 3687 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $80=(($79+432)|0); //@line 3687 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $81=HEAP32[(($80)>>2)]; //@line 3687 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $82=((($81)+($78))|0); //@line 3687 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($80)>>2)]=$82; //@line 3687 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $83=$2; //@line 3687 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $84=(($83+436)|0); //@line 3687 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $85=HEAPU32[(($84)>>2)]; //@line 3687 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $86=(($82)>>>0) > (($85)>>>0); //@line 3687 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($86) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3687 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $88=$2; //@line 3688 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $89=(($88+432)|0); //@line 3688 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $90=HEAP32[(($89)>>2)]; //@line 3688 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $91=$2; //@line 3688 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $92=(($91+436)|0); //@line 3688 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($92)>>2)]=$90; //@line 3688 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 3688 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $94=$p; //@line 3691 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $95=$94; //@line 3691 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $96=(($95+8)|0); //@line 3691 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $1=$96; //@line 3691 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3691 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 13: 
      __label__ = 14; break; //@line 3693 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 14: 
      $1=0; //@line 3694 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3694 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $100=$1; //@line 3695 "/home/janus/emscripten/system/lib/dlmalloc.c"
      ;
      return $100; //@line 3695 "/home/janus/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_mmap_alloc["X"]=1;

function _init_bins($m) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $i;
      var $bin;
      $1=$m;
      $i=0; //@line 3752 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 3752 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $3=$i; //@line 3752 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $4=(($3)>>>0) < 32; //@line 3752 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($4) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3752 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $6=$i; //@line 3753 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $7=$6 << 1; //@line 3753 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $8=$1; //@line 3753 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $9=(($8+40)|0); //@line 3753 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $10=(($9+($7<<2))|0); //@line 3753 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $11=$10; //@line 3753 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $12=$11; //@line 3753 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $bin=$12; //@line 3753 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $13=$bin; //@line 3754 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $14=$bin; //@line 3754 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $15=(($14+12)|0); //@line 3754 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($15)>>2)]=$13; //@line 3754 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $16=$bin; //@line 3754 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $17=(($16+8)|0); //@line 3754 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($17)>>2)]=$13; //@line 3754 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 5; break; //@line 3755 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $19=$i; //@line 3752 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $20=((($19)+(1))|0); //@line 3752 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $i=$20; //@line 3752 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 3752 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 6: 
      ;
      return; //@line 3756 "/home/janus/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _internal_realloc($m, $oldmem, $bytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $oldp;
      var $oldsize;
      var $next;
      var $newp;
      var $extra;
      var $nb;
      var $rsize;
      var $remainder;
      var $newsize;
      var $newtopsize;
      var $newtop;
      var $newmem;
      var $oc;
      $2=$m;
      $3=$oldmem;
      $4=$bytes;
      var $5=$4; //@line 4304 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $6=(($5)>>>0) >= 4294967232; //@line 4304 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4304 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $8=___errno(); //@line 4305 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($8)>>2)]=12; //@line 4305 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $1=0; //@line 4306 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 4306 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $10=$3; //@line 4309 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $11=((($10)-(8))|0); //@line 4309 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $12=$11; //@line 4309 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $oldp=$12; //@line 4309 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $13=$oldp; //@line 4310 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $14=(($13+4)|0); //@line 4310 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $15=HEAP32[(($14)>>2)]; //@line 4310 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $16=$15 & -8; //@line 4310 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $oldsize=$16; //@line 4310 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $17=$oldp; //@line 4311 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $18=$17; //@line 4311 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $19=$oldsize; //@line 4311 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $20=(($18+$19)|0); //@line 4311 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $21=$20; //@line 4311 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $next=$21; //@line 4311 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $newp=0; //@line 4312 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $extra=0; //@line 4313 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $22=$oldp; //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $23=$22; //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $24=$2; //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $25=(($24+16)|0); //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $26=HEAPU32[(($25)>>2)]; //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $27=(($23)>>>0) >= (($26)>>>0); //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($27) { __label__ = 5; break; } else { var $47 = 0;__label__ = 8; break; } //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $29=$oldp; //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $30=(($29+4)|0); //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $31=HEAP32[(($30)>>2)]; //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $32=$31 & 3; //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $33=(($32)|0)!=1; //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($33) { __label__ = 6; break; } else { var $47 = 0;__label__ = 8; break; } //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $35=$oldp; //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $36=$35; //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $37=$next; //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $38=$37; //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $39=(($36)>>>0) < (($38)>>>0); //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($39) { __label__ = 7; break; } else { var $47 = 0;__label__ = 8; break; } //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $41=$next; //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $42=(($41+4)|0); //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $43=HEAP32[(($42)>>2)]; //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $44=$43 & 1; //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $45=(($44)|0)!=0; //@line 4317 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $47 = $45;__label__ = 8; break;
    case 8: 
      var $47;
      var $48=(($47)&1);
      var $49=(($48)==(1));
      var $50=(($49)|0)!=0;
      if ($50) { __label__ = 9; break; } else { __label__ = 24; break; }
    case 9: 
      var $52=$4; //@line 4319 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $53=(($52)>>>0) < 11; //@line 4319 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($53) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4319 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $61 = 16;__label__ = 12; break; //@line 4319 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $56=$4; //@line 4319 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $57=((($56)+(4))|0); //@line 4319 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $58=((($57)+(7))|0); //@line 4319 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $59=$58 & -8; //@line 4319 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $61 = $59;__label__ = 12; break; //@line 4319 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $61; //@line 4319 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $nb=$61; //@line 4319 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $62=$oldp; //@line 4320 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $63=(($62+4)|0); //@line 4320 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $64=HEAP32[(($63)>>2)]; //@line 4320 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $65=$64 & 3; //@line 4320 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $66=(($65)|0)==0; //@line 4320 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($66) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4320 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $68=$2; //@line 4321 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $69=$oldp; //@line 4321 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $70=$nb; //@line 4321 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $71=_mmap_resize($68, $69, $70); //@line 4321 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $newp=$71; //@line 4321 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 23; break; //@line 4321 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $73=$oldsize; //@line 4322 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $74=$nb; //@line 4322 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $75=(($73)>>>0) >= (($74)>>>0); //@line 4322 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($75) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 4322 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $77=$oldsize; //@line 4323 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $78=$nb; //@line 4323 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $79=((($77)-($78))|0); //@line 4323 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $rsize=$79; //@line 4323 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $80=$oldp; //@line 4324 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $newp=$80; //@line 4324 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $81=$rsize; //@line 4325 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $82=(($81)>>>0) >= 16; //@line 4325 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($82) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 4325 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $84=$newp; //@line 4326 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $85=$84; //@line 4326 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $86=$nb; //@line 4326 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $87=(($85+$86)|0); //@line 4326 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $88=$87; //@line 4326 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $remainder=$88; //@line 4326 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $89=$newp; //@line 4327 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $90=(($89+4)|0); //@line 4327 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $91=HEAP32[(($90)>>2)]; //@line 4327 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $92=$91 & 1; //@line 4327 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $93=$nb; //@line 4327 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $94=$92 | $93; //@line 4327 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $95=$94 | 2; //@line 4327 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $96=$newp; //@line 4327 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $97=(($96+4)|0); //@line 4327 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($97)>>2)]=$95; //@line 4327 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $98=$newp; //@line 4327 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $99=$98; //@line 4327 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $100=$nb; //@line 4327 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $101=(($99+$100)|0); //@line 4327 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $102=$101; //@line 4327 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $103=(($102+4)|0); //@line 4327 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $104=HEAP32[(($103)>>2)]; //@line 4327 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $105=$104 | 1; //@line 4327 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($103)>>2)]=$105; //@line 4327 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $106=$rsize; //@line 4328 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $107=$106 | 1; //@line 4328 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $108=$107 | 2; //@line 4328 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $109=$remainder; //@line 4328 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $110=(($109+4)|0); //@line 4328 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($110)>>2)]=$108; //@line 4328 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $111=$remainder; //@line 4328 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $112=$111; //@line 4328 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $113=$rsize; //@line 4328 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $114=(($112+$113)|0); //@line 4328 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $115=$114; //@line 4328 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $116=(($115+4)|0); //@line 4328 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $117=HEAP32[(($116)>>2)]; //@line 4328 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $118=$117 | 1; //@line 4328 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($116)>>2)]=$118; //@line 4328 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $119=$remainder; //@line 4329 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $120=$119; //@line 4329 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $121=(($120+8)|0); //@line 4329 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $extra=$121; //@line 4329 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 17; break; //@line 4330 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 17: 
      __label__ = 22; break; //@line 4331 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $124=$next; //@line 4332 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $125=$2; //@line 4332 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $126=(($125+24)|0); //@line 4332 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $127=HEAP32[(($126)>>2)]; //@line 4332 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $128=(($124)|0)==(($127)|0); //@line 4332 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($128) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 4332 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $130=$oldsize; //@line 4332 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $131=$2; //@line 4332 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $132=(($131+12)|0); //@line 4332 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $133=HEAP32[(($132)>>2)]; //@line 4332 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $134=((($130)+($133))|0); //@line 4332 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $135=$nb; //@line 4332 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $136=(($134)>>>0) > (($135)>>>0); //@line 4332 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($136) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 4332 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $138=$oldsize; //@line 4334 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $139=$2; //@line 4334 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $140=(($139+12)|0); //@line 4334 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $141=HEAP32[(($140)>>2)]; //@line 4334 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $142=((($138)+($141))|0); //@line 4334 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $newsize=$142; //@line 4334 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $143=$newsize; //@line 4335 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $144=$nb; //@line 4335 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $145=((($143)-($144))|0); //@line 4335 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $newtopsize=$145; //@line 4335 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $146=$oldp; //@line 4336 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $147=$146; //@line 4336 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $148=$nb; //@line 4336 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $149=(($147+$148)|0); //@line 4336 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $150=$149; //@line 4336 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $newtop=$150; //@line 4336 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $151=$oldp; //@line 4337 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $152=(($151+4)|0); //@line 4337 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $153=HEAP32[(($152)>>2)]; //@line 4337 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $154=$153 & 1; //@line 4337 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $155=$nb; //@line 4337 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $156=$154 | $155; //@line 4337 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $157=$156 | 2; //@line 4337 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $158=$oldp; //@line 4337 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $159=(($158+4)|0); //@line 4337 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($159)>>2)]=$157; //@line 4337 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $160=$oldp; //@line 4337 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $161=$160; //@line 4337 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $162=$nb; //@line 4337 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $163=(($161+$162)|0); //@line 4337 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $164=$163; //@line 4337 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $165=(($164+4)|0); //@line 4337 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $166=HEAP32[(($165)>>2)]; //@line 4337 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $167=$166 | 1; //@line 4337 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($165)>>2)]=$167; //@line 4337 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $168=$newtopsize; //@line 4338 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $169=$168 | 1; //@line 4338 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $170=$newtop; //@line 4338 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $171=(($170+4)|0); //@line 4338 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($171)>>2)]=$169; //@line 4338 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $172=$newtop; //@line 4339 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $173=$2; //@line 4339 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $174=(($173+24)|0); //@line 4339 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($174)>>2)]=$172; //@line 4339 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $175=$newtopsize; //@line 4340 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $176=$2; //@line 4340 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $177=(($176+12)|0); //@line 4340 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($177)>>2)]=$175; //@line 4340 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $178=$oldp; //@line 4341 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $newp=$178; //@line 4341 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4342 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 25; break; //@line 4343 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 24: 
      _abort(); //@line 4345 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4345 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $184=$newp; //@line 4357 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $185=(($184)|0)!=0; //@line 4357 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($185) { __label__ = 26; break; } else { __label__ = 29; break; } //@line 4357 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $187=$extra; //@line 4358 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $188=(($187)|0)!=0; //@line 4358 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($188) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 4358 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $190=$extra; //@line 4359 "/home/janus/emscripten/system/lib/dlmalloc.c"
      _free($190); //@line 4359 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4360 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $192=$newp; //@line 4361 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $193=$192; //@line 4361 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $194=(($193+8)|0); //@line 4361 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $1=$194; //@line 4361 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 4361 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $196=$4; //@line 4364 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $197=_malloc($196); //@line 4364 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $newmem=$197; //@line 4364 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $198=$newmem; //@line 4365 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $199=(($198)|0)!=0; //@line 4365 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($199) { __label__ = 30; break; } else { __label__ = 34; break; } //@line 4365 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $201=$oldsize; //@line 4366 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $202=$oldp; //@line 4366 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $203=(($202+4)|0); //@line 4366 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $204=HEAP32[(($203)>>2)]; //@line 4366 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $205=$204 & 3; //@line 4366 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $206=(($205)|0)==0; //@line 4366 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $207=$206 ? 8 : 4; //@line 4366 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $208=((($201)-($207))|0); //@line 4366 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $oc=$208; //@line 4366 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $209=$newmem; //@line 4367 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $210=$3; //@line 4367 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $211=$oc; //@line 4367 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $212=$4; //@line 4367 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $213=(($211)>>>0) < (($212)>>>0); //@line 4367 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($213) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 4367 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $215=$oc; //@line 4367 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $219 = $215;__label__ = 33; break; //@line 4367 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $217=$4; //@line 4367 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $219 = $217;__label__ = 33; break; //@line 4367 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $219; //@line 4367 "/home/janus/emscripten/system/lib/dlmalloc.c"
      assert($219 % 1 === 0, 'memcpy given ' + $219 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($209, $210, $219, 1); //@line 4367 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $220=$3; //@line 4368 "/home/janus/emscripten/system/lib/dlmalloc.c"
      _free($220); //@line 4368 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 4369 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $222=$newmem; //@line 4370 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $1=$222; //@line 4370 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 4370 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $224=$1; //@line 4374 "/home/janus/emscripten/system/lib/dlmalloc.c"
      ;
      return $224; //@line 4374 "/home/janus/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_internal_realloc["X"]=1;

function _init_mparams() {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $magic;
      var $psize;
      var $gsize;
      var $1=HEAP32[((((_mparams)|0))>>2)]; //@line 2965 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $2=(($1)|0)==0; //@line 2965 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($2) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 2965 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $4=_sysconf(8); //@line 2971 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $psize=$4; //@line 2971 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $5=$psize; //@line 2972 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $gsize=$5; //@line 2972 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $6=$gsize; //@line 2989 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $7=$gsize; //@line 2989 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $8=((($7)-(1))|0); //@line 2989 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $9=$6 & $8; //@line 2989 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $10=(($9)|0)!=0; //@line 2989 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($10) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 2989 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $12=$psize; //@line 2989 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $13=$psize; //@line 2989 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $14=((($13)-(1))|0); //@line 2989 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $15=$12 & $14; //@line 2989 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $16=(($15)|0)!=0; //@line 2989 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2989 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 5: 
      _abort(); //@line 2997 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 2997 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $19=$gsize; //@line 2999 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+8)|0))>>2)]=$19; //@line 2999 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $20=$psize; //@line 3000 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+4)|0))>>2)]=$20; //@line 3000 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+12)|0))>>2)]=-1; //@line 3001 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+16)|0))>>2)]=2097152; //@line 3002 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+20)|0))>>2)]=0; //@line 3004 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $21=HEAP32[((((_mparams+20)|0))>>2)]; //@line 3011 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+440)|0))>>2)]=$21; //@line 3011 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $22=_time(0); //@line 3030 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $23=$22 ^ 1431655765; //@line 3030 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $magic=$23; //@line 3030 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $24=$magic; //@line 3032 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $25=$24 | 8; //@line 3032 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $magic=$25; //@line 3032 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $26=$magic; //@line 3033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $27=$26 & -8; //@line 3033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $magic=$27; //@line 3033 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $28=$magic; //@line 3034 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams)|0))>>2)]=$28; //@line 3034 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break; //@line 3036 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 7: 
      ;
      return 1; //@line 3039 "/home/janus/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _prepend_alloc($m, $newbase, $oldbase, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      var $oldfirst;
      var $psize;
      var $q;
      var $qsize;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F1;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I2;
      var $B3;
      var $F4;
      var $TP5;
      var $H6;
      var $I7;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K8;
      var $C;
      var $F9;
      $1=$m;
      $2=$newbase;
      $3=$oldbase;
      $4=$nb;
      var $5=$2; //@line 3780 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $6=$2; //@line 3780 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $7=(($6+8)|0); //@line 3780 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $8=$7; //@line 3780 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $9=$8 & 7; //@line 3780 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $10=(($9)|0)==0; //@line 3780 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3780 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $20 = 0;__label__ = 5; break; //@line 3780 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $13=$2; //@line 3780 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $14=(($13+8)|0); //@line 3780 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $15=$14; //@line 3780 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $16=$15 & 7; //@line 3780 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $17=(((8)-($16))|0); //@line 3780 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $18=$17 & 7; //@line 3780 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $20 = $18;__label__ = 5; break; //@line 3780 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $20; //@line 3780 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $21=(($5+$20)|0); //@line 3780 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $22=$21; //@line 3780 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $p=$22; //@line 3780 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $23=$3; //@line 3781 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $24=$3; //@line 3781 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $25=(($24+8)|0); //@line 3781 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $26=$25; //@line 3781 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $27=$26 & 7; //@line 3781 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $28=(($27)|0)==0; //@line 3781 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($28) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3781 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $38 = 0;__label__ = 8; break; //@line 3781 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $31=$3; //@line 3781 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $32=(($31+8)|0); //@line 3781 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $33=$32; //@line 3781 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $34=$33 & 7; //@line 3781 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $35=(((8)-($34))|0); //@line 3781 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $36=$35 & 7; //@line 3781 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $38 = $36;__label__ = 8; break; //@line 3781 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $38; //@line 3781 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $39=(($23+$38)|0); //@line 3781 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $40=$39; //@line 3781 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $oldfirst=$40; //@line 3781 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $41=$oldfirst; //@line 3782 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $42=$41; //@line 3782 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $43=$p; //@line 3782 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $44=$43; //@line 3782 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $45=$42; //@line 3782 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $46=$44; //@line 3782 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $47=((($45)-($46))|0); //@line 3782 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $psize=$47; //@line 3782 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $48=$p; //@line 3783 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $49=$48; //@line 3783 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $50=$4; //@line 3783 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $51=(($49+$50)|0); //@line 3783 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $52=$51; //@line 3783 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $q=$52; //@line 3783 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $53=$psize; //@line 3784 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $54=$4; //@line 3784 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $55=((($53)-($54))|0); //@line 3784 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $qsize=$55; //@line 3784 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $56=$4; //@line 3785 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $57=$56 | 1; //@line 3785 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $58=$57 | 2; //@line 3785 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $59=$p; //@line 3785 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $60=(($59+4)|0); //@line 3785 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($60)>>2)]=$58; //@line 3785 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $61=$oldfirst; //@line 3792 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $62=$1; //@line 3792 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $63=(($62+24)|0); //@line 3792 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $64=HEAP32[(($63)>>2)]; //@line 3792 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $65=(($61)|0)==(($64)|0); //@line 3792 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($65) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3792 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $67=$qsize; //@line 3793 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $68=$1; //@line 3793 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $69=(($68+12)|0); //@line 3793 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $70=HEAP32[(($69)>>2)]; //@line 3793 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $71=((($70)+($67))|0); //@line 3793 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($69)>>2)]=$71; //@line 3793 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $tsize=$71; //@line 3793 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $72=$q; //@line 3794 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $73=$1; //@line 3794 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $74=(($73+24)|0); //@line 3794 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($74)>>2)]=$72; //@line 3794 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $75=$tsize; //@line 3795 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $76=$75 | 1; //@line 3795 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $77=$q; //@line 3795 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $78=(($77+4)|0); //@line 3795 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($78)>>2)]=$76; //@line 3795 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 110; break; //@line 3797 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $80=$oldfirst; //@line 3798 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $81=$1; //@line 3798 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $82=(($81+20)|0); //@line 3798 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $83=HEAP32[(($82)>>2)]; //@line 3798 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $84=(($80)|0)==(($83)|0); //@line 3798 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($84) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3798 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $86=$qsize; //@line 3799 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $87=$1; //@line 3799 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $88=(($87+8)|0); //@line 3799 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $89=HEAP32[(($88)>>2)]; //@line 3799 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $90=((($89)+($86))|0); //@line 3799 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($88)>>2)]=$90; //@line 3799 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $dsize=$90; //@line 3799 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $91=$q; //@line 3800 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $92=$1; //@line 3800 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $93=(($92+20)|0); //@line 3800 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($93)>>2)]=$91; //@line 3800 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $94=$dsize; //@line 3801 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $95=$94 | 1; //@line 3801 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $96=$q; //@line 3801 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $97=(($96+4)|0); //@line 3801 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($97)>>2)]=$95; //@line 3801 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $98=$dsize; //@line 3801 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $99=$q; //@line 3801 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $100=$99; //@line 3801 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $101=$dsize; //@line 3801 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $102=(($100+$101)|0); //@line 3801 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $103=$102; //@line 3801 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $104=(($103)|0); //@line 3801 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($104)>>2)]=$98; //@line 3801 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 109; break; //@line 3802 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $106=$oldfirst; //@line 3804 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $107=(($106+4)|0); //@line 3804 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $108=HEAP32[(($107)>>2)]; //@line 3804 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $109=$108 & 3; //@line 3804 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $110=(($109)|0)!=1; //@line 3804 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($110) { __label__ = 73; break; } else { __label__ = 13; break; } //@line 3804 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $112=$oldfirst; //@line 3805 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $113=(($112+4)|0); //@line 3805 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $114=HEAP32[(($113)>>2)]; //@line 3805 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $115=$114 & -8; //@line 3805 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $nsize=$115; //@line 3805 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $116=$nsize; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $117=$116 >>> 3; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $118=(($117)>>>0) < 32; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($118) { __label__ = 14; break; } else { __label__ = 26; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $120=$oldfirst; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $121=(($120+8)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $122=HEAP32[(($121)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F=$122; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $123=$oldfirst; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $124=(($123+12)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $125=HEAP32[(($124)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $B=$125; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $126=$nsize; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $127=$126 >>> 3; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $I=$127; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $128=$F; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $129=$B; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $130=(($128)|0)==(($129)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($130) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $132=$I; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $133=1 << $132; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $134=$133 ^ -1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $135=$1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $136=(($135)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $137=HEAP32[(($136)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $138=$137 & $134; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($136)>>2)]=$138; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 25; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $140=$F; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $141=$I; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $142=$141 << 1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $143=$1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $144=(($143+40)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $145=(($144+($142<<2))|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $146=$145; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $147=$146; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $148=(($140)|0)==(($147)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($148) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $150=$F; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $151=$150; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $152=$1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $153=(($152+16)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $154=HEAPU32[(($153)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $155=(($151)>>>0) >= (($154)>>>0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($155) { __label__ = 18; break; } else { var $176 = 0;__label__ = 21; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $157=$B; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $158=$I; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $159=$158 << 1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $160=$1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $161=(($160+40)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $162=(($161+($159<<2))|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $163=$162; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $164=$163; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $165=(($157)|0)==(($164)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($165) { var $174 = 1;__label__ = 20; break; } else { __label__ = 19; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $167=$B; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $168=$167; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $169=$1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $170=(($169+16)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $171=HEAPU32[(($170)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $172=(($168)>>>0) >= (($171)>>>0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $174 = $172;__label__ = 20; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $174;
      var $176 = $174;__label__ = 21; break;
    case 21: 
      var $176;
      var $177=(($176)&1);
      var $178=(($177)==(1));
      var $179=(($178)|0)!=0;
      if ($179) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $181=$B; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $182=$F; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $183=(($182+12)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($183)>>2)]=$181; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $184=$F; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $185=$B; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $186=(($185+8)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($186)>>2)]=$184; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 24; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 23: 
      _abort(); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 24: 
      __label__ = 25; break;
    case 25: 
      __label__ = 72; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $191=$oldfirst; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $192=$191; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $TP=$192; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $193=$TP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $194=(($193+24)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $195=HEAP32[(($194)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $XP=$195; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $196=$TP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $197=(($196+12)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $198=HEAP32[(($197)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $199=$TP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $200=(($198)|0)!=(($199)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($200) { __label__ = 27; break; } else { __label__ = 31; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $202=$TP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $203=(($202+8)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $204=HEAP32[(($203)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F1=$204; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $205=$TP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $206=(($205+12)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $207=HEAP32[(($206)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$207; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $208=$F1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $209=$208; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $210=$1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $211=(($210+16)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $212=HEAPU32[(($211)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $213=(($209)>>>0) >= (($212)>>>0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $214=(($213)&1); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $215=(($214)==(1)); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $216=(($215)|0)!=0; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($216) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $218=$R; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $219=$F1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $220=(($219+12)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($220)>>2)]=$218; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $221=$F1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $222=$R; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $223=(($222+8)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($223)>>2)]=$221; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 30; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 29: 
      _abort(); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 30: 
      __label__ = 43; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $227=$TP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $228=(($227+16)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $229=(($228+4)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $RP=$229; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $230=HEAP32[(($229)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$230; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $231=(($230)|0)!=0; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($231) { __label__ = 33; break; } else { __label__ = 32; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $233=$TP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $234=(($233+16)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $235=(($234)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $RP=$235; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $236=HEAP32[(($235)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$236; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $237=(($236)|0)!=0; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($237) { __label__ = 33; break; } else { __label__ = 42; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 33: 
      __label__ = 34; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $240=$R; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $241=(($240+16)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $242=(($241+4)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $CP=$242; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $243=HEAP32[(($242)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $244=(($243)|0)!=0; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($244) { var $252 = 1;__label__ = 36; break; } else { __label__ = 35; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $246=$R; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $247=(($246+16)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $248=(($247)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $CP=$248; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $249=HEAP32[(($248)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $250=(($249)|0)!=0; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $252 = $250;__label__ = 36; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $252;
      if ($252) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $254=$CP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $RP=$254; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $255=HEAP32[(($254)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $R=$255; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $257=$RP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $258=$257; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $259=$1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $260=(($259+16)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $261=HEAPU32[(($260)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $262=(($258)>>>0) >= (($261)>>>0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $263=(($262)&1); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $264=(($263)==(1)); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $265=(($264)|0)!=0; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($265) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $267=$RP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($267)>>2)]=0; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 41; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 40: 
      _abort(); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 41: 
      __label__ = 42; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 42: 
      __label__ = 43; break;
    case 43: 
      var $272=$XP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $273=(($272)|0)!=0; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($273) { __label__ = 44; break; } else { __label__ = 71; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $275=$TP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $276=(($275+28)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $277=HEAP32[(($276)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $278=$1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $279=(($278+304)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $280=(($279+($277<<2))|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $H=$280; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $281=$TP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $282=$H; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $283=HEAP32[(($282)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $284=(($281)|0)==(($283)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($284) { __label__ = 45; break; } else { __label__ = 48; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $286=$R; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $287=$H; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($287)>>2)]=$286; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $288=(($286)|0)==0; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($288) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $290=$TP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $291=(($290+28)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $292=HEAP32[(($291)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $293=1 << $292; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $294=$293 ^ -1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $295=$1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $296=(($295+4)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $297=HEAP32[(($296)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $298=$297 & $294; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($296)>>2)]=$298; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 47: 
      __label__ = 55; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $301=$XP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $302=$301; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $303=$1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $304=(($303+16)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $305=HEAPU32[(($304)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $306=(($302)>>>0) >= (($305)>>>0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $307=(($306)&1); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $308=(($307)==(1)); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $309=(($308)|0)!=0; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($309) { __label__ = 49; break; } else { __label__ = 53; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $311=$XP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $312=(($311+16)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $313=(($312)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $314=HEAP32[(($313)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $315=$TP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $316=(($314)|0)==(($315)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($316) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $318=$R; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $319=$XP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $320=(($319+16)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $321=(($320)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($321)>>2)]=$318; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 52; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 51: 
      var $323=$R; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $324=$XP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $325=(($324+16)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $326=(($325+4)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($326)>>2)]=$323; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 52; break;
    case 52: 
      __label__ = 54; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 53: 
      _abort(); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 54: 
      __label__ = 55; break;
    case 55: 
      var $331=$R; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $332=(($331)|0)!=0; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($332) { __label__ = 56; break; } else { __label__ = 70; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $334=$R; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $335=$334; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $336=$1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $337=(($336+16)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $338=HEAPU32[(($337)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $339=(($335)>>>0) >= (($338)>>>0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $340=(($339)&1); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $341=(($340)==(1)); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $342=(($341)|0)!=0; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($342) { __label__ = 57; break; } else { __label__ = 68; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $344=$XP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $345=$R; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $346=(($345+24)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($346)>>2)]=$344; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $347=$TP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $348=(($347+16)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $349=(($348)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $350=HEAP32[(($349)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $C0=$350; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $351=(($350)|0)!=0; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($351) { __label__ = 58; break; } else { __label__ = 62; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $353=$C0; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $354=$353; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $355=$1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $356=(($355+16)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $357=HEAPU32[(($356)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $358=(($354)>>>0) >= (($357)>>>0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $359=(($358)&1); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $360=(($359)==(1)); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $361=(($360)|0)!=0; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($361) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $363=$C0; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $364=$R; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $365=(($364+16)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $366=(($365)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($366)>>2)]=$363; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $367=$R; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $368=$C0; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $369=(($368+24)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($369)>>2)]=$367; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 61; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 60: 
      _abort(); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 61: 
      __label__ = 62; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $373=$TP; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $374=(($373+16)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $375=(($374+4)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $376=HEAP32[(($375)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $C1=$376; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $377=(($376)|0)!=0; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($377) { __label__ = 63; break; } else { __label__ = 67; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $379=$C1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $380=$379; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $381=$1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $382=(($381+16)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $383=HEAPU32[(($382)>>2)]; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $384=(($380)>>>0) >= (($383)>>>0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $385=(($384)&1); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $386=(($385)==(1)); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $387=(($386)|0)!=0; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($387) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 64: 
      var $389=$C1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $390=$R; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $391=(($390+16)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $392=(($391+4)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($392)>>2)]=$389; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $393=$R; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $394=$C1; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $395=(($394+24)|0); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($395)>>2)]=$393; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 66; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 65: 
      _abort(); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 66: 
      __label__ = 67; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 67: 
      __label__ = 69; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 68: 
      _abort(); //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 69: 
      __label__ = 70; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 70: 
      __label__ = 71; break; //@line 3806 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 71: 
      __label__ = 72; break;
    case 72: 
      var $404=$oldfirst; //@line 3807 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $405=$404; //@line 3807 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $406=$nsize; //@line 3807 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $407=(($405+$406)|0); //@line 3807 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $408=$407; //@line 3807 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $oldfirst=$408; //@line 3807 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $409=$nsize; //@line 3808 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $410=$qsize; //@line 3808 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $411=((($410)+($409))|0); //@line 3808 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $qsize=$411; //@line 3808 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 73; break; //@line 3809 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $413=$oldfirst; //@line 3810 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $414=(($413+4)|0); //@line 3810 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $415=HEAP32[(($414)>>2)]; //@line 3810 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $416=$415 & -2; //@line 3810 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($414)>>2)]=$416; //@line 3810 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $417=$qsize; //@line 3810 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $418=$417 | 1; //@line 3810 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $419=$q; //@line 3810 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $420=(($419+4)|0); //@line 3810 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($420)>>2)]=$418; //@line 3810 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $421=$qsize; //@line 3810 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $422=$q; //@line 3810 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $423=$422; //@line 3810 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $424=$qsize; //@line 3810 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $425=(($423+$424)|0); //@line 3810 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $426=$425; //@line 3810 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $427=(($426)|0); //@line 3810 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($427)>>2)]=$421; //@line 3810 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $428=$qsize; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $429=$428 >>> 3; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $430=(($429)>>>0) < 32; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($430) { __label__ = 74; break; } else { __label__ = 81; break; } //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $432=$qsize; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $433=$432 >>> 3; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $I2=$433; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $434=$I2; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $435=$434 << 1; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $436=$1; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $437=(($436+40)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $438=(($437+($435<<2))|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $439=$438; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $440=$439; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $B3=$440; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $441=$B3; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F4=$441; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $442=$1; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $443=(($442)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $444=HEAP32[(($443)>>2)]; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $445=$I2; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $446=1 << $445; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $447=$444 & $446; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $448=(($447)|0)!=0; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($448) { __label__ = 76; break; } else { __label__ = 75; break; } //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 75: 
      var $450=$I2; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $451=1 << $450; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $452=$1; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $453=(($452)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $454=HEAP32[(($453)>>2)]; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $455=$454 | $451; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($453)>>2)]=$455; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 80; break; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 76: 
      var $457=$B3; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $458=(($457+8)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $459=HEAP32[(($458)>>2)]; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $460=$459; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $461=$1; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $462=(($461+16)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $463=HEAPU32[(($462)>>2)]; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $464=(($460)>>>0) >= (($463)>>>0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $465=(($464)&1); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $466=(($465)==(1)); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $467=(($466)|0)!=0; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($467) { __label__ = 77; break; } else { __label__ = 78; break; } //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $469=$B3; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $470=(($469+8)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $471=HEAP32[(($470)>>2)]; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F4=$471; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 79; break; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 78: 
      _abort(); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 79: 
      __label__ = 80; break;
    case 80: 
      var $475=$q; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $476=$B3; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $477=(($476+8)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($477)>>2)]=$475; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $478=$q; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $479=$F4; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $480=(($479+12)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($480)>>2)]=$478; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $481=$F4; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $482=$q; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $483=(($482+8)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($483)>>2)]=$481; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $484=$B3; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $485=$q; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $486=(($485+12)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($486)>>2)]=$484; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 108; break; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 81: 
      var $488=$q; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $489=$488; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $TP5=$489; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $490=$qsize; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $491=$490 >>> 8; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $X=$491; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $492=$X; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $493=(($492)|0)==0; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($493) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 82: 
      $I7=0; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 87; break; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 83: 
      var $496=$X; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $497=(($496)>>>0) > 65535; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($497) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 84: 
      $I7=31; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 86; break; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 85: 
      var $500=$X; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$500; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $501=$Y; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $502=((($501)-(256))|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $503=$502 >>> 16; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $504=$503 & 8; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$504; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $505=$N; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $506=$Y; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $507=$506 << $505; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$507; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $508=((($507)-(4096))|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $509=$508 >>> 16; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $510=$509 & 4; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$510; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $511=$K; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $512=$N; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $513=((($512)+($511))|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$513; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $514=$K; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $515=$Y; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $516=$515 << $514; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$516; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $517=((($516)-(16384))|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $518=$517 >>> 16; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $519=$518 & 2; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$519; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $520=$N; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $521=((($520)+($519))|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$521; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $522=$N; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $523=(((14)-($522))|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $524=$K; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $525=$Y; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $526=$525 << $524; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$526; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $527=$526 >>> 15; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $528=((($523)+($527))|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$528; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $529=$K; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $530=$529 << 1; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $531=$qsize; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $532=$K; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $533=((($532)+(7))|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $534=$531 >>> (($533)>>>0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $535=$534 & 1; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $536=((($530)+($535))|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $I7=$536; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 86; break;
    case 86: 
      __label__ = 87; break;
    case 87: 
      var $539=$I7; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $540=$1; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $541=(($540+304)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $542=(($541+($539<<2))|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $H6=$542; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $543=$I7; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $544=$TP5; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $545=(($544+28)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($545)>>2)]=$543; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $546=$TP5; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $547=(($546+16)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $548=(($547+4)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($548)>>2)]=0; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $549=$TP5; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $550=(($549+16)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $551=(($550)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($551)>>2)]=0; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $552=$1; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $553=(($552+4)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $554=HEAP32[(($553)>>2)]; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $555=$I7; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $556=1 << $555; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $557=$554 & $556; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $558=(($557)|0)!=0; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($558) { __label__ = 89; break; } else { __label__ = 88; break; } //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $560=$I7; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $561=1 << $560; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $562=$1; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $563=(($562+4)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $564=HEAP32[(($563)>>2)]; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $565=$564 | $561; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($563)>>2)]=$565; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $566=$TP5; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $567=$H6; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($567)>>2)]=$566; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $568=$H6; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $569=$568; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $570=$TP5; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $571=(($570+24)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($571)>>2)]=$569; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $572=$TP5; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $573=$TP5; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $574=(($573+12)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($574)>>2)]=$572; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $575=$TP5; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $576=(($575+8)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($576)>>2)]=$572; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 107; break; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $578=$H6; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $579=HEAP32[(($578)>>2)]; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $T=$579; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $580=$qsize; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $581=$I7; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $582=(($581)|0)==31; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($582) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $591 = 0;__label__ = 92; break; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $585=$I7; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $586=$585 >>> 1; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $587=((($586)+(8))|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $588=((($587)-(2))|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $589=(((31)-($588))|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $591 = $589;__label__ = 92; break; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $591; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $592=$580 << $591; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K8=$592; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 93: 
      var $594=$T; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $595=(($594+4)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $596=HEAP32[(($595)>>2)]; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $597=$596 & -8; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $598=$qsize; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $599=(($597)|0)!=(($598)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($599) { __label__ = 94; break; } else { __label__ = 100; break; } //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 94: 
      var $601=$K8; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $602=$601 >>> 31; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $603=$602 & 1; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $604=$T; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $605=(($604+16)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $606=(($605+($603<<2))|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $C=$606; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $607=$K8; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $608=$607 << 1; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K8=$608; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $609=$C; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $610=HEAP32[(($609)>>2)]; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $611=(($610)|0)!=0; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($611) { __label__ = 95; break; } else { __label__ = 96; break; } //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 95: 
      var $613=$C; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $614=HEAP32[(($613)>>2)]; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $T=$614; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 99; break; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 96: 
      var $616=$C; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $617=$616; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $618=$1; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $619=(($618+16)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $620=HEAPU32[(($619)>>2)]; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $621=(($617)>>>0) >= (($620)>>>0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $622=(($621)&1); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $623=(($622)==(1)); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $624=(($623)|0)!=0; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($624) { __label__ = 97; break; } else { __label__ = 98; break; } //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 97: 
      var $626=$TP5; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $627=$C; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($627)>>2)]=$626; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $628=$T; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $629=$TP5; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $630=(($629+24)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($630)>>2)]=$628; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $631=$TP5; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $632=$TP5; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $633=(($632+12)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($633)>>2)]=$631; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $634=$TP5; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $635=(($634+8)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($635)>>2)]=$631; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 106; break; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 98: 
      _abort(); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 99: 
      __label__ = 105; break; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 100: 
      var $639=$T; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $640=(($639+8)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $641=HEAP32[(($640)>>2)]; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F9=$641; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $642=$T; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $643=$642; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $644=$1; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $645=(($644+16)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $646=HEAPU32[(($645)>>2)]; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $647=(($643)>>>0) >= (($646)>>>0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($647) { __label__ = 101; break; } else { var $656 = 0;__label__ = 102; break; } //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 101: 
      var $649=$F9; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $650=$649; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $651=$1; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $652=(($651+16)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $653=HEAPU32[(($652)>>2)]; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $654=(($650)>>>0) >= (($653)>>>0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $656 = $654;__label__ = 102; break;
    case 102: 
      var $656;
      var $657=(($656)&1);
      var $658=(($657)==(1));
      var $659=(($658)|0)!=0;
      if ($659) { __label__ = 103; break; } else { __label__ = 104; break; }
    case 103: 
      var $661=$TP5; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $662=$F9; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $663=(($662+12)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($663)>>2)]=$661; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $664=$T; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $665=(($664+8)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($665)>>2)]=$661; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $666=$F9; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $667=$TP5; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $668=(($667+8)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($668)>>2)]=$666; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $669=$T; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $670=$TP5; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $671=(($670+12)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($671)>>2)]=$669; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $672=$TP5; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $673=(($672+24)|0); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($673)>>2)]=0; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 106; break; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 104: 
      _abort(); //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 105: 
      __label__ = 93; break; //@line 3811 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 106: 
      __label__ = 107; break;
    case 107: 
      __label__ = 108; break;
    case 108: 
      __label__ = 109; break;
    case 109: 
      __label__ = 110; break;
    case 110: 
      var $681=$p; //@line 3816 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $682=$681; //@line 3816 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $683=(($682+8)|0); //@line 3816 "/home/janus/emscripten/system/lib/dlmalloc.c"
      ;
      return $683; //@line 3816 "/home/janus/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_prepend_alloc["X"]=1;

function _add_segment($m, $tbase, $tsize, $mmapped) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $old_top;
      var $oldsp;
      var $old_end;
      var $ssize;
      var $rawsp;
      var $offset;
      var $asp;
      var $csp;
      var $sp;
      var $ss;
      var $tnext;
      var $p;
      var $nfences;
      var $nextp;
      var $q;
      var $psize;
      var $tn;
      var $I;
      var $B;
      var $F;
      var $TP;
      var $H;
      var $I1;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K2;
      var $C;
      var $F3;
      $1=$m;
      $2=$tbase;
      $3=$tsize;
      $4=$mmapped;
      var $5=$1; //@line 3822 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $6=(($5+24)|0); //@line 3822 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[(($6)>>2)]; //@line 3822 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $8=$7; //@line 3822 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $old_top=$8; //@line 3822 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $9=$1; //@line 3823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $10=$old_top; //@line 3823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $11=_segment_holding($9, $10); //@line 3823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $oldsp=$11; //@line 3823 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $12=$oldsp; //@line 3824 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $13=(($12)|0); //@line 3824 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $14=HEAP32[(($13)>>2)]; //@line 3824 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $15=$oldsp; //@line 3824 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $16=(($15+4)|0); //@line 3824 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $17=HEAP32[(($16)>>2)]; //@line 3824 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $18=(($14+$17)|0); //@line 3824 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $old_end=$18; //@line 3824 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $ssize=24; //@line 3825 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $19=$old_end; //@line 3826 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $20=$ssize; //@line 3826 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $21=((($20)+(16))|0); //@line 3826 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $22=((($21)+(7))|0); //@line 3826 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $23=(((-$22))|0); //@line 3826 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $24=(($19+$23)|0); //@line 3826 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $rawsp=$24; //@line 3826 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $25=$rawsp; //@line 3827 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $26=(($25+8)|0); //@line 3827 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $27=$26; //@line 3827 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $28=$27 & 7; //@line 3827 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $29=(($28)|0)==0; //@line 3827 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($29) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3827 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $39 = 0;__label__ = 5; break; //@line 3827 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $32=$rawsp; //@line 3827 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $33=(($32+8)|0); //@line 3827 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $34=$33; //@line 3827 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $35=$34 & 7; //@line 3827 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $36=(((8)-($35))|0); //@line 3827 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $37=$36 & 7; //@line 3827 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $39 = $37;__label__ = 5; break; //@line 3827 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $39; //@line 3827 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $offset=$39; //@line 3827 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $40=$rawsp; //@line 3828 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $41=$offset; //@line 3828 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $42=(($40+$41)|0); //@line 3828 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $asp=$42; //@line 3828 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $43=$asp; //@line 3829 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $44=$old_top; //@line 3829 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $45=(($44+16)|0); //@line 3829 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $46=(($43)>>>0) < (($45)>>>0); //@line 3829 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($46) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3829 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $48=$old_top; //@line 3829 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $52 = $48;__label__ = 8; break; //@line 3829 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $50=$asp; //@line 3829 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $52 = $50;__label__ = 8; break; //@line 3829 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $52; //@line 3829 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $csp=$52; //@line 3829 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $53=$csp; //@line 3830 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $54=$53; //@line 3830 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $sp=$54; //@line 3830 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $55=$sp; //@line 3831 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $56=$55; //@line 3831 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $57=(($56+8)|0); //@line 3831 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $58=$57; //@line 3831 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $ss=$58; //@line 3831 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $59=$sp; //@line 3832 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $60=$59; //@line 3832 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $61=$ssize; //@line 3832 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $62=(($60+$61)|0); //@line 3832 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $63=$62; //@line 3832 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $tnext=$63; //@line 3832 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $64=$tnext; //@line 3833 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $p=$64; //@line 3833 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $nfences=0; //@line 3834 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $65=$1; //@line 3837 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $66=$2; //@line 3837 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $67=$66; //@line 3837 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $68=$3; //@line 3837 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $69=((($68)-(40))|0); //@line 3837 "/home/janus/emscripten/system/lib/dlmalloc.c"
      _init_top($65, $67, $69); //@line 3837 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $70=$ssize; //@line 3841 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $71=$70 | 1; //@line 3841 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $72=$71 | 2; //@line 3841 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $73=$sp; //@line 3841 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $74=(($73+4)|0); //@line 3841 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($74)>>2)]=$72; //@line 3841 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $75=$ss; //@line 3842 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $76=$1; //@line 3842 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $77=(($76+444)|0); //@line 3842 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $78=$75; //@line 3842 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $79=$77; //@line 3842 "/home/janus/emscripten/system/lib/dlmalloc.c"
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[((($78)+(4))>>2)]=HEAP32[((($79)+(4))>>2)];HEAP32[((($78)+(8))>>2)]=HEAP32[((($79)+(8))>>2)];HEAP32[((($78)+(12))>>2)]=HEAP32[((($79)+(12))>>2)]; //@line 3842 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $80=$2; //@line 3843 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $81=$1; //@line 3843 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $82=(($81+444)|0); //@line 3843 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $83=(($82)|0); //@line 3843 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($83)>>2)]=$80; //@line 3843 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $84=$3; //@line 3844 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $85=$1; //@line 3844 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $86=(($85+444)|0); //@line 3844 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $87=(($86+4)|0); //@line 3844 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($87)>>2)]=$84; //@line 3844 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $88=$4; //@line 3845 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $89=$1; //@line 3845 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $90=(($89+444)|0); //@line 3845 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $91=(($90+12)|0); //@line 3845 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($91)>>2)]=$88; //@line 3845 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $92=$ss; //@line 3846 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $93=$1; //@line 3846 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $94=(($93+444)|0); //@line 3846 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $95=(($94+8)|0); //@line 3846 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($95)>>2)]=$92; //@line 3846 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 3849 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $97=$p; //@line 3850 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $98=$97; //@line 3850 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $99=(($98+4)|0); //@line 3850 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $100=$99; //@line 3850 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $nextp=$100; //@line 3850 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $101=$p; //@line 3851 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $102=(($101+4)|0); //@line 3851 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($102)>>2)]=7; //@line 3851 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $103=$nfences; //@line 3852 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $104=((($103)+(1))|0); //@line 3852 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $nfences=$104; //@line 3852 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $105=$nextp; //@line 3853 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $106=(($105+4)|0); //@line 3853 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $107=$106; //@line 3853 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $108=$old_end; //@line 3853 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $109=(($107)>>>0) < (($108)>>>0); //@line 3853 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($109) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3853 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $111=$nextp; //@line 3854 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $p=$111; //@line 3854 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 3854 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 11: 
      __label__ = 13; break; //@line 3856 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 12: 
      __label__ = 9; break; //@line 3857 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $115=$csp; //@line 3861 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $116=$old_top; //@line 3861 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $117=(($115)|0)!=(($116)|0); //@line 3861 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($117) { __label__ = 14; break; } else { __label__ = 50; break; } //@line 3861 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $119=$old_top; //@line 3862 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $120=$119; //@line 3862 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $q=$120; //@line 3862 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $121=$csp; //@line 3863 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $122=$old_top; //@line 3863 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $123=$121; //@line 3863 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $124=$122; //@line 3863 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $125=((($123)-($124))|0); //@line 3863 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $psize=$125; //@line 3863 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $126=$q; //@line 3864 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $127=$126; //@line 3864 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $128=$psize; //@line 3864 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $129=(($127+$128)|0); //@line 3864 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $130=$129; //@line 3864 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $tn=$130; //@line 3864 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $131=$tn; //@line 3865 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $132=(($131+4)|0); //@line 3865 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $133=HEAP32[(($132)>>2)]; //@line 3865 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $134=$133 & -2; //@line 3865 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($132)>>2)]=$134; //@line 3865 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $135=$psize; //@line 3865 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $136=$135 | 1; //@line 3865 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $137=$q; //@line 3865 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $138=(($137+4)|0); //@line 3865 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($138)>>2)]=$136; //@line 3865 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $139=$psize; //@line 3865 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $140=$q; //@line 3865 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $141=$140; //@line 3865 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $142=$psize; //@line 3865 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $143=(($141+$142)|0); //@line 3865 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $144=$143; //@line 3865 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $145=(($144)|0); //@line 3865 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($145)>>2)]=$139; //@line 3865 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $146=$psize; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $147=$146 >>> 3; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $148=(($147)>>>0) < 32; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($148) { __label__ = 15; break; } else { __label__ = 22; break; } //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $150=$psize; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $151=$150 >>> 3; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $I=$151; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $152=$I; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $153=$152 << 1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $154=$1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $155=(($154+40)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $156=(($155+($153<<2))|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $157=$156; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $158=$157; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $B=$158; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $159=$B; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F=$159; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $160=$1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $161=(($160)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $162=HEAP32[(($161)>>2)]; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $163=$I; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $164=1 << $163; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $165=$162 & $164; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $166=(($165)|0)!=0; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($166) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $168=$I; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $169=1 << $168; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $170=$1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $171=(($170)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $172=HEAP32[(($171)>>2)]; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $173=$172 | $169; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($171)>>2)]=$173; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $175=$B; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $176=(($175+8)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $177=HEAP32[(($176)>>2)]; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $178=$177; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $179=$1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $180=(($179+16)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $181=HEAPU32[(($180)>>2)]; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $182=(($178)>>>0) >= (($181)>>>0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $183=(($182)&1); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $184=(($183)==(1)); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $185=(($184)|0)!=0; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($185) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $187=$B; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $188=(($187+8)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $189=HEAP32[(($188)>>2)]; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F=$189; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 19: 
      _abort(); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $193=$q; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $194=$B; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $195=(($194+8)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($195)>>2)]=$193; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $196=$q; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $197=$F; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $198=(($197+12)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($198)>>2)]=$196; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $199=$F; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $200=$q; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $201=(($200+8)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($201)>>2)]=$199; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $202=$B; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $203=$q; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $204=(($203+12)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($204)>>2)]=$202; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $206=$q; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $207=$206; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $TP=$207; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $208=$psize; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $209=$208 >>> 8; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $X=$209; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $210=$X; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $211=(($210)|0)==0; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($211) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 23: 
      $I1=0; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $214=$X; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $215=(($214)>>>0) > 65535; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($215) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 25: 
      $I1=31; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $218=$X; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$218; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $219=$Y; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $220=((($219)-(256))|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $221=$220 >>> 16; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $222=$221 & 8; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$222; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $223=$N; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $224=$Y; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $225=$224 << $223; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$225; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $226=((($225)-(4096))|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $227=$226 >>> 16; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $228=$227 & 4; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$228; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $229=$K; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $230=$N; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $231=((($230)+($229))|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$231; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $232=$K; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $233=$Y; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $234=$233 << $232; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$234; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $235=((($234)-(16384))|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $236=$235 >>> 16; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $237=$236 & 2; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$237; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $238=$N; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $239=((($238)+($237))|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $N=$239; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $240=$N; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $241=(((14)-($240))|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $242=$K; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $243=$Y; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $244=$243 << $242; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $Y=$244; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $245=$244 >>> 15; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $246=((($241)+($245))|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K=$246; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $247=$K; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $248=$247 << 1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $249=$psize; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $250=$K; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $251=((($250)+(7))|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $252=$249 >>> (($251)>>>0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $253=$252 & 1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $254=((($248)+($253))|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $I1=$254; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $257=$I1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $258=$1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $259=(($258+304)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $260=(($259+($257<<2))|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $H=$260; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $261=$I1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $262=$TP; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $263=(($262+28)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($263)>>2)]=$261; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $264=$TP; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $265=(($264+16)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $266=(($265+4)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($266)>>2)]=0; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $267=$TP; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $268=(($267+16)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $269=(($268)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($269)>>2)]=0; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $270=$1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $271=(($270+4)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $272=HEAP32[(($271)>>2)]; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $273=$I1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $274=1 << $273; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $275=$272 & $274; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $276=(($275)|0)!=0; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($276) { __label__ = 30; break; } else { __label__ = 29; break; } //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $278=$I1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $279=1 << $278; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $280=$1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $281=(($280+4)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $282=HEAP32[(($281)>>2)]; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $283=$282 | $279; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($281)>>2)]=$283; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $284=$TP; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $285=$H; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($285)>>2)]=$284; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $286=$H; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $287=$286; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $288=$TP; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $289=(($288+24)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($289)>>2)]=$287; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $290=$TP; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $291=$TP; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $292=(($291+12)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($292)>>2)]=$290; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $293=$TP; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $294=(($293+8)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($294)>>2)]=$290; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $296=$H; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $297=HEAP32[(($296)>>2)]; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $T=$297; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $298=$psize; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $299=$I1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $300=(($299)|0)==31; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($300) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $309 = 0;__label__ = 33; break; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $303=$I1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $304=$303 >>> 1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $305=((($304)+(8))|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $306=((($305)-(2))|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $307=(((31)-($306))|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $309 = $307;__label__ = 33; break; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $309; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $310=$298 << $309; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K2=$310; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $312=$T; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $313=(($312+4)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $314=HEAP32[(($313)>>2)]; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $315=$314 & -8; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $316=$psize; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $317=(($315)|0)!=(($316)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($317) { __label__ = 35; break; } else { __label__ = 41; break; } //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $319=$K2; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $320=$319 >>> 31; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $321=$320 & 1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $322=$T; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $323=(($322+16)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $324=(($323+($321<<2))|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $C=$324; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $325=$K2; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $326=$325 << 1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $K2=$326; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $327=$C; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $328=HEAP32[(($327)>>2)]; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $329=(($328)|0)!=0; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($329) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $331=$C; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $332=HEAP32[(($331)>>2)]; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $T=$332; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 40; break; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $334=$C; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $335=$334; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $336=$1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $337=(($336+16)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $338=HEAPU32[(($337)>>2)]; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $339=(($335)>>>0) >= (($338)>>>0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $340=(($339)&1); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $341=(($340)==(1)); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $342=(($341)|0)!=0; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($342) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $344=$TP; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $345=$C; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($345)>>2)]=$344; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $346=$T; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $347=$TP; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $348=(($347+24)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($348)>>2)]=$346; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $349=$TP; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $350=$TP; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $351=(($350+12)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($351)>>2)]=$349; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $352=$TP; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $353=(($352+8)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($353)>>2)]=$349; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 39: 
      _abort(); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 40: 
      __label__ = 46; break; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $357=$T; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $358=(($357+8)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $359=HEAP32[(($358)>>2)]; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      $F3=$359; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $360=$T; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $361=$360; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $362=$1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $363=(($362+16)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $364=HEAPU32[(($363)>>2)]; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $365=(($361)>>>0) >= (($364)>>>0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      if ($365) { __label__ = 42; break; } else { var $374 = 0;__label__ = 43; break; } //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $367=$F3; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $368=$367; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $369=$1; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $370=(($369+16)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $371=HEAPU32[(($370)>>2)]; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $372=(($368)>>>0) >= (($371)>>>0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $374 = $372;__label__ = 43; break;
    case 43: 
      var $374;
      var $375=(($374)&1);
      var $376=(($375)==(1));
      var $377=(($376)|0)!=0;
      if ($377) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $379=$TP; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $380=$F3; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $381=(($380+12)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($381)>>2)]=$379; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $382=$T; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $383=(($382+8)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($383)>>2)]=$379; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $384=$F3; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $385=$TP; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $386=(($385+8)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($386)>>2)]=$384; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $387=$T; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $388=$TP; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $389=(($388+12)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($389)>>2)]=$387; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $390=$TP; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      var $391=(($390+24)|0); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($391)>>2)]=0; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 45: 
      _abort(); //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 46: 
      __label__ = 34; break; //@line 3866 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 47: 
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      __label__ = 50; break; //@line 3867 "/home/janus/emscripten/system/lib/dlmalloc.c"
    case 50: 
      ;
      return; //@line 3870 "/home/janus/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_add_segment["X"]=1;
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

  
  
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var _stdin=0;
  
  var _stdout=0;
  
  var _stderr=0;
  
  var __impure_ptr=0;var FS={currentPath:"/",nextInode:2,streams:[null],checkStreams:function () {
        for (var i in FS.streams) assert(i >= 0 && i < FS.streams.length); // no keys not in dense span
        for (var i = 0; i < FS.streams.length; i++) assert(typeof FS.streams[i] == 'object'); // no non-null holes in dense span
      },ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        var properties = {isDevice: false, url: url};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror) {
        Browser.ensureObjects();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          // Browser.
          assert('Cannot do synchronous binary XHRs in modern browsers. Use --embed-file or --preload-file in emcc');
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
  
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
  
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        // Allocate these on the stack (and never free, we are called from ATINIT or earlier), to keep their locations low
        _stdin = allocate([1], 'void*', ALLOC_STACK);
        _stdout = allocate([2], 'void*', ALLOC_STACK);
        _stderr = allocate([3], 'void*', ALLOC_STACK);
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        FS.checkStreams();
        assert(FS.streams.length < 1024); // at this early stage, we should not have a large set of file descriptors - just a few
        __impure_ptr = allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_STATIC);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        var path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[((buf)+(i))];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[((buf)+(i))]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (tempDoubleI32[0]=HEAP32[(((varargs)+(argIndex))>>2)],tempDoubleI32[1]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],tempDoubleF64[0]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[(textIndex+1)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[(textIndex+1)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[(textIndex+1)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[(textIndex+1)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[(textIndex+1)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[(textIndex+1)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[(textIndex+1)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[(textIndex+1)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1]); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || nullString;
            var argLength = String_len(arg);
            if (precisionSet) argLength = Math.min(argLength, precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[(arg++)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[((px)+(i))];
        var y = HEAPU8[((py)+(i))];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }

  
  
  var ___dirent_struct_layout=null;function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather that strictly
      // following the POSIX standard.
  
      var mode = HEAP32[((varargs)>>2)];
  
      // Simplify flags.
      var accessMode = oflag & 3;
      var isWrite = accessMode != 0;
      var isRead = accessMode != 1;
      var isCreate = Boolean(oflag & 512);
      var isExistCheck = Boolean(oflag & 2048);
      var isTruncate = Boolean(oflag & 1024);
      var isAppend = Boolean(oflag & 8);
  
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
  
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isCreate || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id = FS.streams.length; // Keep dense
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        FS.streams[id] = {
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        };
      } else {
        FS.streams[id] = {
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        };
      }
      FS.checkStreams();
      return id;
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }

  
  
  
  function _strlen(ptr) {
      return String_len(ptr);
    }function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[(_fputc.ret)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return chr;
      }
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc('\n'.charCodeAt(0), stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }
  
  var _putc=_fputc;
  
  
  
  var ERRNO_MESSAGES={1:"Operation not permitted",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"Input/output error",6:"No such device or address",8:"Exec format error",9:"Bad file descriptor",10:"No child processes",11:"Resource temporarily unavailable",12:"Cannot allocate memory",13:"Permission denied",14:"Bad address",16:"Device or resource busy",17:"File exists",18:"Invalid cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Inappropriate ioctl for device",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read-only file system",31:"Too many links",32:"Broken pipe",33:"Numerical argument out of domain",34:"Numerical result out of range",35:"Resource deadlock avoided",36:"File name too long",37:"No locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many levels of symbolic links",42:"No message of desired type",43:"Identifier removed",60:"Device not a stream",61:"No data available",62:"Timer expired",63:"Out of streams resources",67:"Link has been severed",71:"Protocol error",72:"Multihop attempted",74:"Bad message",75:"Value too large for defined data type",84:"Invalid or incomplete multibyte or wide character",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Protocol not supported",95:"Operation not supported",97:"Address family not supported by protocol",98:"Address already in use",99:"Cannot assign requested address",100:"Network is down",101:"Network is unreachable",102:"Network dropped connection on reset",103:"Software caused connection abort",104:"Connection reset by peer",105:"No buffer space available",106:"Transport endpoint is already connected",107:"Transport endpoint is not connected",110:"Connection timed out",111:"Connection refused",113:"No route to host",114:"Operation already in progress",115:"Operation now in progress",116:"Stale NFS file handle",122:"Disk quota exceeded",125:"Operation canceled",130:"Owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[((strerrbuf)+(i))]=msg.charCodeAt(i)
          }
          HEAP8[((strerrbuf)+(i))]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  
  function ___errno_location() {
      return ___setErrNo.ret;
    }function _perror(s) {
      // void perror(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
      if (s) {
        _puts(s);
        _putc(':'.charCodeAt(0));
        _putc(' '.charCodeAt(0));
      }
      var errnum = HEAP32[((___errno_location())>>2)];
      _puts(_strerror(errnum));
    }

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      return Number(FS.streams[stream] && FS.streams[stream].error);
    }

  
  
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[(buf++)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        for (var i = 0; i < size; i++) {
          HEAP8[((buf)+(i))]=contents[offset + i]
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[(buf++)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[((buf)+(i))]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!FS.streams[stream]) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _read(stream, _fgetc.ret, 1);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[(_fgetc.ret)];
      }
    }function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      if (!FS.streams[stream]) return 0;
      var streamObj = FS.streams[stream];
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != '\n'.charCodeAt(0); i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[((s)+(i))]=byte_
      }
      HEAP8[((s)+(i))]=0
      return s;
    }



  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        FS.streams[fildes] = null;
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }

  function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) return 0;
      var bytesRead = _read(stream, ptr, bytesToRead);
      var streamObj = FS.streams[stream];
      if (bytesRead == -1) {
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        if (bytesRead < bytesToRead) streamObj.eof = true;
        return Math.floor(bytesRead / size);
      }
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
  
  
      exitRuntime();
      ABORT = true;
  
      throw 'exit(' + status + ') called, at ' + new Error().stack;
    }function _exit(status) {
      __exit(status);
    }

  
  function _memcpy(dest, src, num, align) {
      assert(num % 1 === 0, 'memcpy given ' + num + ' bytes to copy. Problem with quantum=1 corrections perhaps?');
      if (num >= 20 && src % 2 == dest % 2) {
        // This is unaligned, but quite large, and potentially alignable, so work hard to get to aligned settings
        if (src % 4 == dest % 4) {
          var stop = src + num;
          while (src % 4) { // no need to check for stop, since we have large num
            HEAP8[dest++] = HEAP8[src++];
          }
          var src4 = src >> 2, dest4 = dest >> 2, stop4 = stop >> 2;
          while (src4 < stop4) {
            HEAP32[dest4++] = HEAP32[src4++];
          }
          src = src4 << 2;
          dest = dest4 << 2;
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
        } else {
          var stop = src + num;
          if (src % 2) { // no need to check for stop, since we have large num
            HEAP8[dest++] = HEAP8[src++];
          }
          var src2 = src >> 1, dest2 = dest >> 1, stop2 = stop >> 1;
          while (src2 < stop2) {
            HEAP16[dest2++] = HEAP16[src2++];
          }
          src = src2 << 1;
          dest = dest2 << 1;
          if (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
        }
      } else {
        while (num--) {
          HEAP8[dest++] = HEAP8[src++];
        }
      }
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
var _setjmp; // stub for _setjmp


  function _isprint(chr) {
      return 0x1F < chr && chr < 0x7F;
    }

  var _isgraph=_isprint;

  function _isupper(chr) {
      return chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0);
    }

  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }

  function _isalnum(chr) {
      return (chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0)) ||
             (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0));
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }

  function _longjmp(env, value) {
      throw { longjmp: true, label: HEAP32[((env)>>2)], value: value || 1 };
    }
var _llvm_va_start; // stub for _llvm_va_start

  function _llvm_va_end() {}

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }

  var _getc=_fgetc;

  function _freopen(filename, mode, stream) {
      // FILE *freopen(const char *restrict filename, const char *restrict mode, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/freopen.html
      if (!filename) {
        if (!FS.streams[stream]) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return 0;
        }
        if (_freopen.buffer) _free(_freopen.buffer);
        filename = intArrayFromString(FS.streams[stream].path);
        filename = allocate(filename, 'i8', ALLOC_NORMAL);
      }
      _fclose(stream);
      return _fopen(filename, mode);
    }

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      if (FS.streams[stream]) {
        c = unSign(c & 0xFF);
        FS.streams[stream].ungotten.push(c);
        return c;
      } else {
        return -1;
      }
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      return Number(FS.streams[stream] && FS.streams[stream].eof);
    }


  var ___errno=___errno_location;

  
  function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == '0'.charCodeAt(0)) {
          if (HEAP8[(str+1)] == 'x'.charCodeAt(0) ||
              HEAP8[(str+1)] == 'X'.charCodeAt(0)) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        ret = [ret>>>0,Math.min(Math.floor((ret)/4294967296), 4294967295)];
      }
  
      return ret;
    }function _strtoul(str, endptr, base) {
      return __parseInt(str, endptr, base, 0, 4294967295, 32, true);  // ULONG_MAX.
    }


  var _floor=Math.floor;

  var _llvm_pow_f64=Math.pow;

  var _abs=Math.abs;

  function _iscntrl(chr) {
      return (0 <= chr && chr <= 0x1F) || chr === 0x7F;
    }

  function _isdigit(chr) {
      return chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0);
    }

  function _isalpha(chr) {
      return (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0));
    }

  function _localeconv() {
      // %struct.timeval = type { char* decimal point, other stuff... }
      // var indexes = Runtime.calculateStructAlignment({ fields: ['i32', 'i32'] });
      var me = _localeconv;
      if (!me.ret) {
        me.ret = allocate([allocate(intArrayFromString('.'), 'i8', ALLOC_NORMAL)], 'i8*', ALLOC_NORMAL); // just decimal point, for now
      }
      return me.ret;
    }

  function _strtod(str, endptr) {
      var origin = str;
  
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      var chr;
      var ret = 0;
  
      // Get whole part.
      var whole = false;
      while(1) {
        chr = HEAP8[(str)];
        if (!_isdigit(chr)) break;
        whole = true;
        ret = ret*10 + chr - '0'.charCodeAt(0);
        str++;
      }
  
      // Get fractional part.
      var fraction = false;
      if (HEAP8[(str)] == '.'.charCodeAt(0)) {
        str++;
        var mul = 1/10;
        while(1) {
          chr = HEAP8[(str)];
          if (!_isdigit(chr)) break;
          fraction = true;
          ret += mul*(chr - '0'.charCodeAt(0));
          mul /= 10;
          str++;
        }
      }
  
      if (!whole && !fraction) {
        if (endptr) {
          HEAP32[((endptr)>>2)]=origin
        }
        return 0;
      }
  
      // Get exponent part.
      chr = HEAP8[(str)];
      if (chr == 'e'.charCodeAt(0) || chr == 'E'.charCodeAt(0)) {
        str++;
        var exponent = 0;
        var expNegative = false;
        chr = HEAP8[(str)];
        if (chr == '-'.charCodeAt(0)) {
          expNegative = true;
          str++;
        } else if (chr == '+'.charCodeAt(0)) {
          str++;
        }
        chr = HEAP8[(str)];
        while(1) {
          if (!_isdigit(chr)) break;
          exponent = exponent*10 + chr - '0'.charCodeAt(0);
          str++;
          chr = HEAP8[(str)];
        }
        if (expNegative) exponent = -exponent;
        ret *= Math.pow(10, exponent);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      return ret * multiplier;
    }

  
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, n - 1);
      for (var i = 0; i < limit; i++) {
        HEAP8[((s)+(i))]=result[i];
      }
      HEAP8[((s)+(i))]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  function _strncpy(pdest, psrc, num) {
      var padding = false, curr;
      for (var i = 0; i < num; i++) {
        curr = padding ? 0 : HEAP8[((psrc)+(i))];
        HEAP8[((pdest)+(i))]=curr
        padding = padding || HEAP8[((psrc)+(i))] == 0;
      }
      return pdest;
    }

  function _strcpy(pdest, psrc) {
      var i = 0;
      do {
        HEAP8[(pdest+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[((psrc)+(i-1))] != 0);
      return pdest;
    }

  function _strcat(pdest, psrc) {
      var len = _strlen(pdest);
      var i = 0;
      do {
        HEAP8[(pdest+len+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[((psrc)+(i-1))] != 0);
      return pdest;
    }

  function _strcspn(pstr, pset) {
      var str = pstr, set, strcurr, setcurr;
      while (1) {
        strcurr = HEAP8[(str)];
        if (!strcurr) return str - pstr;
        set = pset;
        while (1) {
          setcurr = HEAP8[(set)];
          if (!setcurr || setcurr == strcurr) break;
          set++;
        }
        if (setcurr) return str - pstr;
        str++;
      }
    }

  function _strncat(pdest, psrc, num) {
      var len = _strlen(pdest);
      var i = 0;
      while(1) {
        HEAP8[(pdest+len+i)]=HEAP8[(psrc+i)];
        if (HEAP8[((pdest)+(len+i))] == 0) break;
        i ++;
        if (i == num) {
          HEAP8[((pdest)+(len+i))]=0
          break;
        }
      }
      return pdest;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  function _memcmp(p1, p2, num) {
      for (var i = 0; i < num; i++) {
        var v1 = HEAPU8[((p1)+(i))];
        var v2 = HEAPU8[((p2)+(i))];
        if (v1 != v2) return v1 > v2 ? 1 : -1;
      }
      return 0;
    }

  function _toupper(chr) {
      if (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) {
        return chr - 'a'.charCodeAt(0) + 'A'.charCodeAt(0);
      } else {
        return chr;
      }
    }

  function _strpbrk(ptr1, ptr2) {
      var curr;
      var searchSet = {};
      while (1) {
        var curr = HEAP8[(ptr2++)];
        if (!curr) break;
        searchSet[curr] = 1;
      }
      while (1) {
        curr = HEAP8[(ptr1)];
        if (!curr) break;
        if (curr in searchSet) return ptr1;
        ptr1++;
      }
      return 0;
    }

  function _tolower(chr) {
      if (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0)) {
        return chr - 'A'.charCodeAt(0) + 'a'.charCodeAt(0);
      } else {
        return chr;
      }
    }

  function _islower(chr) {
      return chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0);
    }

  function _ispunct(chr) {
      return (chr >= '!'.charCodeAt(0) && chr <= '/'.charCodeAt(0)) ||
             (chr >= ':'.charCodeAt(0) && chr <= '@'.charCodeAt(0)) ||
             (chr >= '['.charCodeAt(0) && chr <= '`'.charCodeAt(0)) ||
             (chr >= '{'.charCodeAt(0) && chr <= '~'.charCodeAt(0));
    }

  function _isxdigit(chr) {
      return (chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0)) ||
             (chr >= 'a'.charCodeAt(0) && chr <= 'f'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'F'.charCodeAt(0));
    }

  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }

  var _strcoll=_strcmp;
var _llvm_dbg_declare; // stub for _llvm_dbg_declare
var _llvm_expect_i32; // stub for _llvm_expect_i32

  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }


  function _memset(ptr, value, num, align) {
      // TODO: make these settings, and in memcpy, {{'s
      if (num >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        var stop = ptr + num;
        while (ptr % 4) { // no need to check for stop, since we have large num
          HEAP8[ptr++] = value;
        }
        if (value < 0) value += 256; // make it unsigned
        var ptr4 = ptr >> 2, stop4 = stop >> 2, value4 = value | (value << 8) | (value << 16) | (value << 24);
        while (ptr4 < stop4) {
          HEAP32[ptr4++] = value4;
        }
        ptr = ptr4 << 2;
        while (ptr < stop) {
          HEAP8[ptr++] = value;
        }
      } else {
        while (num--) {
          HEAP8[ptr++] = value;
        }
      }
    }



  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},pointerLock:false,moduleContextCreatedCallbacks:[],ensureObjects:function () {
        if (Browser.ensured) return;
        Browser.ensured = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
  
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.jpg': 1, '.png': 1, '.bmp': 1 };
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
      },createContext:function (canvas, useWebGL, setInModule) {
        try {
          var ctx = canvas.getContext(useWebGL ? 'experimental-webgl' : '2d');
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },requestFullScreen:function () {
        var canvas = Module['canvas'];
        function fullScreenChange() {
          var isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.requestPointerLock();
            isFullScreen = true;
          }
          if (Module['onFullScreen']) Module['onFullScreen'](isFullScreen);
        }
  
        document.addEventListener('fullscreenchange', fullScreenChange, false);
        document.addEventListener('mozfullscreenchange', fullScreenChange, false);
        document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        addRunDependency('al ' + url);
      }};
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___setErrNo(0);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);

  return _main(argc, argv, 0);
}


var _query_file;
var _stderr;



var _stdin;








var _stdout;













var __str24;


var _lualibs;



















var __str1845;


























var __str395;









var __str9141;

















var _co_funcs;








var _statnames;







var _base_funcs;






















































var _luaB_collectgarbage_opts;







var _luaB_collectgarbage_optsnum;



















var __str13265;














































var _luaX_tokens;

















var _luaO_nilobject_;

var __str546;










var _priority;














var __str16653;













var _strlib;


var __str3685;








































var _dummynode_;


var _tab_funcs;









var __str10757;














var _luaT_typenames;
var _luaT_init_luaT_eventname;




































var __gm_;
var _mparams;
_query_file=allocate(4, "i8", ALLOC_STATIC);
STRING_TABLE.__str=allocate([78,101,101,100,32,53,32,111,114,32,51,32,97,114,103,117,109,101,110,116,115,46,0] /* Need 5 or 3 argument */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1=allocate([45,0] /* -\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2=allocate([114,0] /* r\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3=allocate([73,110,116,101,114,110,97,108,32,101,114,114,111,114,10,0] /* Internal error\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4=allocate([67,97,110,39,116,32,111,112,101,110,32,113,117,101,114,121,32,102,105,108,101,32,40,97,114,103,117,109,101,110,116,32,53,41,10,0] /* Can't open query fil */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5=allocate([69,114,114,111,114,32,108,111,97,100,105,110,103,32,37,115,58,32,37,115,10,0] /* Error loading %s: %s */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6=allocate([70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,37,115,10,0] /* Failed to load %s\0A */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7=allocate([73,110,116,101,114,110,97,108,32,101,114,114,111,114,32,105,110,32,112,114,105,110,116,95,97,110,115,119,101,114,115,0] /* Internal error in pr */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8=allocate([73,110,116,101,114,110,97,108,32,101,114,114,111,114,32,105,110,32,100,108,95,97,115,107,10,0] /* Internal error in dl */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9=allocate([10,0] /* \0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10=allocate([105,110,116,101,114,112,0] /* interp\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11=allocate([46,10,0] /* .\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12=allocate([61,0] /* =\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13=allocate([32,61,32,0] /*  = \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14=allocate([40,0] /* (\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15=allocate([44,32,0] /* , \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16=allocate([41,46,10,0] /* ).\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17=allocate([37,32,84,83,86,32,10,0] /* % TSV \0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18=allocate([37,32,84,83,86,32,0] /* % TSV \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19=allocate([9,0] /* \09\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20=allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21=allocate([62,62,32,0] /* __ \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22=allocate([62,32,0] /* _ \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23=allocate([37,32,81,85,69,82,89,32,37,115,0] /* % QUERY %s\00 */, "i8", ALLOC_STATIC);
__str24=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str25=allocate([102,105,108,101,32,110,97,109,101,32,116,111,111,32,108,111,110,103,10,0] /* file name too long\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26=allocate([37,115,58,37,100,58,37,100,58,32,37,115,10,0] /* %s:%d:%d: %s\0A\00 */, "i8", ALLOC_STATIC);
_lualibs=allocate([0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str128=allocate([100,108,95,112,117,115,104,108,105,116,101,114,97,108,0] /* dl_pushliteral\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str229=allocate([100,108,95,97,100,100,112,114,101,100,0] /* dl_addpred\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str330=allocate([100,108,95,97,100,100,118,97,114,0] /* dl_addvar\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str431=allocate([100,108,95,97,100,100,99,111,110,115,116,0] /* dl_addconst\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str532=allocate([100,108,95,109,97,107,101,108,105,116,101,114,97,108,0] /* dl_makeliteral\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str633=allocate([100,108,95,112,117,115,104,104,101,97,100,0] /* dl_pushhead\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str734=allocate([100,108,95,97,100,100,108,105,116,101,114,97,108,0] /* dl_addliteral\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str835=allocate([100,108,95,109,97,107,101,99,108,97,117,115,101,0] /* dl_makeclause\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str936=allocate([100,108,95,97,115,115,101,114,116,0] /* dl_assert\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1037=allocate([100,108,95,114,101,116,114,97,99,116,0] /* dl_retract\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1138=allocate([100,108,95,97,115,107,0] /* dl_ask\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1239=allocate([110,0] /* n\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1340=allocate([97,114,105,116,121,0] /* arity\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1441=allocate([115,105,122,101,0] /* size\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1542=allocate([110,97,109,101,0] /* name\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1643=allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1744=allocate([110,111,32,101,114,114,111,114,32,109,101,115,115,97,103,101,32,97,118,97,105,108,97,98,108,101,10,0] /* no error message ava */, "i8", ALLOC_STATIC);
STRING_TABLE._datalog_lua_bytes=allocate([45,45,91,91,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,69,109,97,99,115,32,45,42,45,32,109,111,100,101,58,32,108,117,97,32,45,42,45,10,10,68,97,116,97,108,111,103,32,50,46,50,10,10,65,32,115,109,97,108,108,32,68,97,116,97,108,111,103,32,105,110,116,101,114,112,114,101,116,101,114,32,119,114,105,116,116,101,110,32,105,110,32,76,117,97,32,100,101,115,105,103,110,101,100,32,116,111,32,98,101,32,117,115,101,100,32,118,105,97,32,97,10,115,105,109,112,108,101,32,67,32,65,80,73,46,10,10,74,111,104,110,32,68,46,32,82,97,109,115,100,101,108,108,10,67,111,112,121,114,105,103,104,116,32,40,67,41,32,50,48,48,52,32,84,104,101,32,77,73,84,82,69,32,67,111,114,112,111,114,97,116,105,111,110,10,10,84,104,105,115,32,108,105,98,114,97,114,121,32,105,115,32,102,114,101,101,32,115,111,102,116,119,97,114,101,59,32,121,111,117,32,99,97,110,32,114,101,100,105,115,116,114,105,98,117,116,101,32,105,116,32,97,110,100,47,111,114,32,109,111,100,105,102,121,10,105,116,32,117,110,100,101,114,32,116,104,101,32,116,101,114,109,115,32,111,102,32,116,104,101,32,71,78,85,32,76,101,115,115,101,114,32,71,101,110,101,114,97,108,32,80,117,98,108,105,99,32,76,105,99,101,110,115,101,32,97,115,10,112,117,98,108,105,115,104,101,100,32,98,121,32,116,104,101,32,70,114,101,101,32,83,111,102,116,119,97,114,101,32,70,111,117,110,100,97,116,105,111,110,59,32,101,105,116,104,101,114,32,118,101,114,115,105,111,110,32,50,32,111,102,32,116,104,101,10,76,105,99,101,110,115,101,44,32,111,114,32,40,97,116,32,121,111,117,114,32,111,112,116,105,111,110,41,32,97,110,121,32,108,97,116,101,114,32,118,101,114,115,105,111,110,46,10,10,84,104,105,115,32,108,105,98,114,97,114,121,32,105,115,32,100,105,115,116,114,105,98,117,116,101,100,32,105,110,32,116,104,101,32,104,111,112,101,32,116,104,97,116,32,105,116,32,119,105,108,108,32,98,101,32,117,115,101,102,117,108,44,32,98,117,116,10,87,73,84,72,79,85,84,32,65,78,89,32,87,65,82,82,65,78,84,89,59,32,119,105,116,104,111,117,116,32,101,118,101,110,32,116,104,101,32,105,109,112,108,105,101,100,32,119,97,114,114,97,110,116,121,32,111,102,10,77,69,82,67,72,65,78,84,65,66,73,76,73,84,89,32,111,114,32,70,73,84,78,69,83,83,32,70,79,82,32,65,32,80,65,82,84,73,67,85,76,65,82,32,80,85,82,80,79,83,69,46,32,32,83,101,101,32,116,104,101,32,71,78,85,10,76,101,115,115,101,114,32,71,101,110,101,114,97,108,32,80,117,98,108,105,99,32,76,105,99,101,110,115,101,32,102,111,114,32,109,111,114,101,32,100,101,116,97,105,108,115,46,10,10,89,111,117,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,99,101,105,118,101,100,32,97,32,99,111,112,121,32,111,102,32,116,104,101,32,71,78,85,32,76,101,115,115,101,114,32,71,101,110,101,114,97,108,32,80,117,98,108,105,99,10,76,105,99,101,110,115,101,32,97,108,111,110,103,32,119,105,116,104,32,116,104,105,115,32,108,105,98,114,97,114,121,59,32,105,102,32,110,111,116,44,32,119,114,105,116,101,32,116,111,32,116,104,101,32,70,114,101,101,32,83,111,102,116,119,97,114,101,10,70,111,117,110,100,97,116,105,111,110,44,32,73,110,99,46,32,32,53,49,32,70,114,97,110,107,108,105,110,32,83,116,44,32,70,105,102,116,104,32,70,108,111,111,114,44,32,66,111,115,116,111,110,44,32,77,65,32,48,50,49,49,48,45,49,51,48,49,10,85,83,65,10,10,93,93,10,10,45,45,32,84,104,105,115,32,102,105,108,101,32,101,120,112,111,114,116,115,32,105,116,115,32,99,111,110,116,101,110,116,115,32,102,111,114,32,76,117,97,32,117,115,101,114,115,32,105,110,32,112,97,99,107,97,103,101,32,100,97,116,97,108,111,103,46,10,45,45,32,84,104,101,32,112,97,99,107,97,103,101,32,105,115,32,99,114,101,97,116,101,100,32,97,116,32,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,102,105,108,101,46,32,32,65,108,108,32,100,101,102,105,110,105,116,105,111,110,115,10,45,45,32,98,101,102,111,114,101,32,116,104,101,32,101,120,112,111,114,116,115,32,115,104,111,117,108,100,32,98,101,32,108,111,99,97,108,32,100,101,102,105,110,105,116,105,111,110,115,46,10,10,45,45,32,68,65,84,65,32,84,89,80,69,83,10,10,45,45,32,73,110,116,101,114,110,97,108,105,122,101,32,111,98,106,101,99,116,115,32,98,97,115,101,100,32,111,110,32,97,110,32,105,100,101,110,116,105,102,105,101,114,46,10,10,45,45,32,84,111,32,109,97,107,101,32,99,111,109,112,97,114,105,115,111,110,115,32,98,101,116,119,101,101,110,32,105,116,101,109,115,32,111,102,32,116,104,101,32,115,97,109,101,32,116,121,112,101,32,101,102,102,105,99,105,101,110,116,44,32,101,97,99,104,10,45,45,32,105,116,101,109,32,105,115,32,105,110,116,101,114,110,97,108,105,122,101,100,32,115,111,32,116,104,101,114,101,32,105,115,32,97,116,32,109,111,115,116,32,111,110,101,32,111,102,32,116,104,101,109,32,97,115,115,111,99,105,97,116,101,100,10,45,45,32,119,105,116,104,32,97,110,32,105,100,101,110,116,105,102,105,101,114,46,32,32,65,110,32,105,100,101,110,116,105,102,105,101,114,32,105,115,32,97,108,119,97,121,115,32,97,32,115,116,114,105,110,103,46,10,10,45,45,32,70,111,114,32,101,120,97,109,112,108,101,44,32,97,102,116,101,114,32,105,110,116,101,114,110,97,108,105,122,97,116,105,111,110,44,32,116,104,101,114,101,32,105,115,32,111,110,101,32,99,111,110,115,116,97,110,116,32,102,111,114,32,101,97,99,104,10,45,45,32,115,116,114,105,110,103,32,117,115,101,100,32,116,111,32,110,97,109,101,32,97,32,99,111,110,115,116,97,110,116,46,10,10,108,111,99,97,108,32,119,101,97,107,95,109,116,32,61,32,123,95,95,109,111,100,101,32,61,32,34,118,34,125,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,109,107,95,105,110,116,101,114,110,40,109,97,107,101,114,41,10,32,32,32,108,111,99,97,108,32,116,98,108,32,61,32,123,125,10,32,32,32,115,101,116,109,101,116,97,116,97,98,108,101,40,116,98,108,44,32,119,101,97,107,95,109,116,41,10,32,32,32,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,105,110,116,101,114,110,40,105,100,41,10,32,32,32,32,32,32,105,100,32,61,32,116,111,115,116,114,105,110,103,40,105,100,41,10,32,32,32,32,32,32,108,111,99,97,108,32,118,97,108,117,101,32,61,32,116,98,108,91,105,100,93,10,32,32,32,32,32,32,105,102,32,110,111,116,32,118,97,108,117,101,32,116,104,101,110,10,9,32,118,97,108,117,101,32,61,32,109,97,107,101,114,40,105,100,41,10,9,32,116,98,108,91,105,100,93,32,61,32,118,97,108,117,101,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,114,101,116,117,114,110,32,118,97,108,117,101,10,32,32,32,101,110,100,10,32,32,32,114,101,116,117,114,110,32,105,110,116,101,114,110,10,101,110,100,10,10,45,45,32,65,32,116,101,114,109,32,105,115,32,101,105,116,104,101,114,32,97,32,118,97,114,105,97,98,108,101,32,111,114,32,97,32,99,111,110,115,116,97,110,116,46,10,10,45,45,32,86,97,114,105,97,98,108,101,115,32,97,115,32,115,105,109,112,108,101,32,111,98,106,101,99,116,115,46,10,10,108,111,99,97,108,32,86,97,114,32,61,32,123,125,10,86,97,114,46,95,95,105,110,100,101,120,32,61,32,86,97,114,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,109,107,95,118,97,114,40,105,100,41,10,32,32,32,108,111,99,97,108,32,116,98,108,32,61,32,123,105,100,32,61,32,105,100,125,10,32,32,32,114,101,116,117,114,110,32,115,101,116,109,101,116,97,116,97,98,108,101,40,116,98,108,44,32,86,97,114,41,10,101,110,100,10,10,108,111,99,97,108,32,109,97,107,101,95,118,97,114,32,61,32,109,107,95,105,110,116,101,114,110,40,109,107,95,118,97,114,41,10,10,108,111,99,97,108,32,102,114,101,115,104,95,118,97,114,95,115,116,97,116,101,32,61,32,48,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,109,107,95,102,114,101,115,104,95,118,97,114,40,41,10,32,32,32,108,111,99,97,108,32,105,100,32,61,32,116,111,115,116,114,105,110,103,40,102,114,101,115,104,95,118,97,114,95,115,116,97,116,101,41,10,32,32,32,102,114,101,115,104,95,118,97,114,95,115,116,97,116,101,32,61,32,102,114,101,115,104,95,118,97,114,95,115,116,97,116,101,32,43,32,49,32,45,45,32,84,111,32,101,110,115,117,114,101,32,102,114,101,115,104,110,101,115,115,44,10,32,32,32,114,101,116,117,114,110,32,109,107,95,118,97,114,40,105,100,41,59,9,9,45,45,32,100,111,110,39,116,32,105,110,116,101,114,110,32,116,104,105,115,32,118,97,114,105,97,98,108,101,46,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,86,97,114,58,105,115,95,99,111,110,115,116,40,41,10,32,32,32,114,101,116,117,114,110,32,102,97,108,115,101,10,101,110,100,10,10,45,45,32,67,111,110,115,116,97,110,116,115,32,97,115,32,115,105,109,112,108,101,32,111,98,106,101,99,116,115,46,10,10,108,111,99,97,108,32,67,111,110,115,116,32,61,32,123,125,10,67,111,110,115,116,46,95,95,105,110,100,101,120,32,61,32,67,111,110,115,116,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,109,107,95,99,111,110,115,116,40,105,100,41,10,32,32,32,108,111,99,97,108,32,116,98,108,32,61,32,123,105,100,32,61,32,105,100,125,10,32,32,32,114,101,116,117,114,110,32,115,101,116,109,101,116,97,116,97,98,108,101,40,116,98,108,44,32,67,111,110,115,116,41,10,101,110,100,10,10,108,111,99,97,108,32,109,97,107,101,95,99,111,110,115,116,32,61,32,109,107,95,105,110,116,101,114,110,40,109,107,95,99,111,110,115,116,41,10,10,102,117,110,99,116,105,111,110,32,67,111,110,115,116,58,105,115,95,99,111,110,115,116,40,41,10,32,32,32,114,101,116,117,114,110,32,116,114,117,101,10,101,110,100,10,10,45,45,32,80,114,101,100,105,99,97,116,101,32,115,121,109,98,111,108,115,10,10,45,45,32,65,32,112,114,101,100,105,99,97,116,101,32,115,121,109,98,111,108,32,104,97,115,32,97,32,110,97,109,101,44,32,97,110,32,97,114,105,116,121,44,32,97,110,100,32,97,32,100,97,116,97,98,97,115,101,32,116,97,98,108,101,46,32,32,73,116,10,45,45,32,99,97,110,32,97,108,115,111,32,104,97,118,101,32,97,32,102,117,110,99,116,105,111,110,32,117,115,101,100,32,116,111,32,105,109,112,108,101,109,101,110,116,32,97,32,112,114,105,109,105,116,105,118,101,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,109,107,95,112,114,101,100,40,105,100,41,10,32,32,32,114,101,116,117,114,110,32,123,105,100,32,61,32,105,100,44,32,100,98,32,61,32,123,125,125,10,101,110,100,10,10,108,111,99,97,108,32,105,110,116,101,114,110,95,112,114,101,100,32,61,32,109,107,95,105,110,116,101,114,110,40,109,107,95,112,114,101,100,41,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,109,107,95,112,114,101,100,95,105,100,40,112,114,101,100,95,110,97,109,101,44,32,97,114,105,116,121,41,10,32,32,32,114,101,116,117,114,110,32,112,114,101,100,95,110,97,109,101,32,46,46,32,34,47,34,32,46,46,32,97,114,105,116,121,10,101,110,100,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,109,97,107,101,95,112,114,101,100,40,112,114,101,100,95,110,97,109,101,44,32,97,114,105,116,121,41,10,32,32,32,114,101,116,117,114,110,32,105,110,116,101,114,110,95,112,114,101,100,40,109,107,95,112,114,101,100,95,105,100,40,112,114,101,100,95,110,97,109,101,44,32,97,114,105,116,121,41,41,10,101,110,100,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,108,97,115,116,95,115,108,97,115,104,40,115,41,9,45,45,32,82,101,116,117,114,110,115,32,116,104,101,32,108,111,99,97,116,105,111,110,32,111,102,32,116,104,101,32,108,97,115,116,32,115,108,97,115,104,10,32,32,32,108,111,99,97,108,32,105,32,61,32,48,9,9,9,45,45,32,105,110,32,97,32,115,116,114,105,110,103,32,111,114,32,48,46,10,32,32,32,119,104,105,108,101,32,116,114,117,101,32,100,111,10,32,32,32,32,32,32,108,111,99,97,108,32,106,32,61,32,115,116,114,105,110,103,46,102,105,110,100,40,115,44,32,34,47,34,44,32,105,32,43,32,49,41,10,32,32,32,32,32,32,105,102,32,110,111,116,32,106,32,116,104,101,110,10,9,32,114,101,116,117,114,110,32,105,10,32,32,32,32,32,32,101,108,115,101,10,9,32,105,32,61,32,106,10,32,32,32,32,32,32,101,110,100,10,32,32,32,101,110,100,10,101,110,100,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,103,101,116,95,110,97,109,101,40,112,114,101,100,41,10,32,32,32,108,111,99,97,108,32,105,32,61,32,108,97,115,116,95,115,108,97,115,104,40,112,114,101,100,46,105,100,41,10,32,32,32,114,101,116,117,114,110,32,115,116,114,105,110,103,46,115,117,98,40,112,114,101,100,46,105,100,44,32,49,44,32,105,32,45,32,49,41,10,101,110,100,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,103,101,116,95,97,114,105,116,121,40,112,114,101,100,41,10,32,32,32,108,111,99,97,108,32,105,32,61,32,108,97,115,116,95,115,108,97,115,104,40,112,114,101,100,46,105,100,41,10,32,32,32,114,101,116,117,114,110,32,116,111,110,117,109,98,101,114,40,115,116,114,105,110,103,46,115,117,98,40,112,114,101,100,46,105,100,44,32,105,32,43,32,49,41,41,10,101,110,100,10,10,45,45,32,68,117,112,108,105,99,97,116,101,115,32,97,32,112,114,101,100,105,99,97,116,101,46,32,32,85,115,101,100,32,116,111,32,99,108,111,110,101,32,100,97,116,97,98,97,115,101,115,46,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,100,117,112,40,112,114,101,100,41,10,32,32,32,108,111,99,97,108,32,100,98,32,61,32,123,125,10,32,32,32,102,111,114,32,107,44,118,32,105,110,32,112,97,105,114,115,40,112,114,101,100,46,100,98,41,32,100,111,10,32,32,32,32,32,32,100,98,91,107,93,32,61,32,118,10,32,32,32,101,110,100,10,32,32,32,114,101,116,117,114,110,32,123,105,100,32,61,32,112,114,101,100,46,105,100,44,32,100,98,32,61,32,100,98,44,32,112,114,105,109,32,61,32,112,114,101,100,46,112,114,105,109,125,10,101,110,100,10,10,45,45,32,76,105,116,101,114,97,108,115,10,10,45,45,32,65,32,108,105,116,101,114,97,108,32,105,115,32,97,32,112,114,101,100,105,99,97,116,101,32,97,110,100,32,97,32,115,101,113,117,101,110,99,101,32,111,102,32,116,101,114,109,115,44,32,116,104,101,32,110,117,109,98,101,114,32,111,102,10,45,45,32,119,104,105,99,104,32,109,117,115,116,32,109,97,116,99,104,32,116,104,101,32,112,114,101,100,105,99,97,116,101,39,115,32,97,114,105,116,121,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,109,97,107,101,95,108,105,116,101,114,97,108,40,112,114,101,100,95,110,97,109,101,44,32,116,101,114,109,115,41,10,32,32,32,108,111,99,97,108,32,97,114,105,116,121,32,61,32,35,116,101,114,109,115,10,32,32,32,108,111,99,97,108,32,112,114,101,100,32,61,32,109,97,107,101,95,112,114,101,100,40,112,114,101,100,95,110,97,109,101,44,32,97,114,105,116,121,41,10,32,32,32,108,111,99,97,108,32,108,105,116,101,114,97,108,32,61,32,123,112,114,101,100,32,61,32,112,114,101,100,125,10,32,32,32,102,111,114,32,105,61,49,44,97,114,105,116,121,32,100,111,10,32,32,32,32,32,32,108,105,116,101,114,97,108,91,105,93,32,61,32,116,101,114,109,115,91,105,93,10,32,32,32,101,110,100,10,32,32,32,114,101,116,117,114,110,32,108,105,116,101,114,97,108,10,101,110,100,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,97,100,100,95,115,105,122,101,40,115,116,114,41,10,32,32,32,114,101,116,117,114,110,32,116,111,115,116,114,105,110,103,40,115,116,114,105,110,103,46,108,101,110,40,115,116,114,41,41,32,46,46,32,34,58,34,32,46,46,32,115,116,114,10,101,110,100,10,10,45,45,32,65,32,108,105,116,101,114,97,108,39,115,32,105,100,32,105,115,32,99,111,109,112,117,116,101,100,32,111,110,32,100,101,109,97,110,100,44,32,98,117,116,32,116,104,101,110,32,99,97,99,104,101,100,46,32,32,73,116,32,105,115,32,117,115,101,100,10,45,45,32,98,121,32,97,32,99,108,97,117,115,101,32,119,104,101,110,32,99,114,101,97,116,105,110,103,32,105,116,115,32,105,100,46,10,10,45,45,32,84,104,101,32,105,100,39,115,32,101,110,99,111,100,105,110,103,32,101,110,115,117,114,101,115,32,116,104,97,116,32,116,119,111,32,108,105,116,101,114,97,108,115,32,97,114,101,32,115,116,114,117,99,116,117,114,97,108,108,121,32,116,104,101,10,45,45,32,115,97,109,101,32,105,102,32,116,104,101,121,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,105,100,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,103,101,116,95,105,100,40,108,105,116,101,114,97,108,41,10,32,32,32,108,111,99,97,108,32,105,100,32,61,32,108,105,116,101,114,97,108,46,105,100,10,32,32,32,105,102,32,110,111,116,32,105,100,32,116,104,101,110,10,32,32,32,32,32,32,105,100,32,61,32,97,100,100,95,115,105,122,101,40,108,105,116,101,114,97,108,46,112,114,101,100,46,105,100,41,10,32,32,32,32,32,32,102,111,114,32,105,61,49,44,35,108,105,116,101,114,97,108,32,100,111,10,9,32,105,100,32,61,32,105,100,32,46,46,32,97,100,100,95,115,105,122,101,40,108,105,116,101,114,97,108,91,105,93,58,103,101,116,95,105,100,40,41,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,108,105,116,101,114,97,108,46,105,100,32,61,32,105,100,10,32,32,32,101,110,100,10,32,32,32,114,101,116,117,114,110,32,105,100,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,67,111,110,115,116,58,103,101,116,95,105,100,40,41,10,32,32,32,114,101,116,117,114,110,32,34,99,34,32,46,46,32,115,101,108,102,46,105,100,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,86,97,114,58,103,101,116,95,105,100,40,41,10,32,32,32,114,101,116,117,114,110,32,34,118,34,32,46,46,32,115,101,108,102,46,105,100,10,101,110,100,10,10,45,45,32,86,97,114,105,97,110,116,32,116,97,103,10,10,45,45,32,84,119,111,32,108,105,116,101,114,97,108,39,115,32,118,97,114,105,97,110,116,32,116,97,103,115,32,97,114,101,32,116,104,101,32,115,97,109,101,32,105,102,32,116,104,101,114,101,32,105,115,32,97,32,111,110,101,45,116,111,45,111,110,101,10,45,45,32,109,97,112,112,105,110,103,32,111,102,32,118,97,114,105,97,98,108,101,115,32,116,111,32,118,97,114,105,97,98,108,101,115,44,32,115,117,99,104,32,116,104,97,116,32,119,104,101,110,32,116,104,101,32,109,97,112,112,105,110,103,32,105,115,10,45,45,32,97,112,112,108,105,101,100,32,116,111,32,111,110,101,32,108,105,116,101,114,97,108,44,32,116,104,101,32,114,101,115,117,108,116,32,105,115,32,97,32,108,105,116,101,114,97,108,32,116,104,97,116,32,105,115,32,116,104,101,32,115,97,109,101,32,97,115,10,45,45,32,116,104,101,32,111,116,104,101,114,32,111,110,101,44,32,119,104,101,110,32,99,111,109,112,97,114,101,100,32,117,115,105,110,103,32,115,116,114,117,99,116,117,114,97,108,32,101,113,117,97,108,105,116,121,46,32,32,84,104,101,10,45,45,32,118,97,114,105,97,110,116,32,116,97,103,32,105,115,32,117,115,101,100,32,97,115,32,97,32,107,101,121,32,98,121,32,116,104,101,32,115,117,98,103,111,97,108,32,116,97,98,108,101,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,103,101,116,95,116,97,103,40,108,105,116,101,114,97,108,41,10,32,32,32,108,111,99,97,108,32,116,97,103,32,61,32,108,105,116,101,114,97,108,46,116,97,103,10,32,32,32,105,102,32,110,111,116,32,116,97,103,32,116,104,101,110,10,32,32,32,32,32,32,108,111,99,97,108,32,101,110,118,32,61,32,123,125,10,32,32,32,32,32,32,116,97,103,32,61,32,97,100,100,95,115,105,122,101,40,108,105,116,101,114,97,108,46,112,114,101,100,46,105,100,41,10,32,32,32,32,32,32,102,111,114,32,105,61,49,44,35,108,105,116,101,114,97,108,32,100,111,10,9,32,116,97,103,32,61,32,116,97,103,32,46,46,32,97,100,100,95,115,105,122,101,40,108,105,116,101,114,97,108,91,105,93,58,103,101,116,95,116,97,103,40,105,44,32,101,110,118,41,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,108,105,116,101,114,97,108,46,116,97,103,32,61,32,116,97,103,10,32,32,32,101,110,100,10,32,32,32,114,101,116,117,114,110,32,116,97,103,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,67,111,110,115,116,58,103,101,116,95,116,97,103,40,105,44,32,101,110,118,41,10,32,32,32,114,101,116,117,114,110,32,34,99,34,32,46,46,32,115,101,108,102,46,105,100,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,86,97,114,58,103,101,116,95,116,97,103,40,105,44,32,101,110,118,41,10,32,32,32,108,111,99,97,108,32,116,97,103,32,61,32,101,110,118,91,115,101,108,102,93,10,32,32,32,105,102,32,110,111,116,32,116,97,103,32,116,104,101,110,10,32,32,32,32,32,32,116,97,103,32,61,32,34,118,34,32,46,46,32,116,111,115,116,114,105,110,103,40,105,41,10,32,32,32,32,32,32,101,110,118,91,115,101,108,102,93,32,61,32,116,97,103,10,32,32,32,101,110,100,10,32,32,32,114,101,116,117,114,110,32,116,97,103,10,101,110,100,10,10,45,45,32,83,117,98,115,116,105,116,117,116,105,111,110,10,10,45,45,32,65,110,32,101,110,118,105,114,111,110,109,101,110,116,32,105,115,32,97,32,109,97,112,32,102,114,111,109,32,118,97,114,105,97,98,108,101,115,32,116,111,32,116,101,114,109,115,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,115,117,98,115,116,40,108,105,116,101,114,97,108,44,32,101,110,118,41,10,32,32,32,105,102,32,110,111,116,32,110,101,120,116,40,101,110,118,41,32,116,104,101,110,9,45,45,32,70,111,117,110,100,32,97,110,32,101,109,112,116,121,32,109,97,112,46,10,32,32,32,32,32,32,114,101,116,117,114,110,32,108,105,116,101,114,97,108,10,32,32,32,101,110,100,10,32,32,32,108,111,99,97,108,32,97,114,105,116,121,32,61,32,35,108,105,116,101,114,97,108,10,32,32,32,108,111,99,97,108,32,110,101,119,32,61,32,123,112,114,101,100,32,61,32,108,105,116,101,114,97,108,46,112,114,101,100,125,10,32,32,32,102,111,114,32,105,61,49,44,97,114,105,116,121,32,100,111,10,32,32,32,32,32,32,110,101,119,91,105,93,32,61,32,108,105,116,101,114,97,108,91,105,93,58,115,117,98,115,116,40,101,110,118,41,10,32,32,32,101,110,100,10,32,32,32,114,101,116,117,114,110,32,110,101,119,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,67,111,110,115,116,58,115,117,98,115,116,40,101,110,118,41,10,32,32,32,114,101,116,117,114,110,32,115,101,108,102,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,86,97,114,58,115,117,98,115,116,40,101,110,118,41,10,32,32,32,108,111,99,97,108,32,116,101,114,109,32,61,32,101,110,118,91,115,101,108,102,93,10,32,32,32,105,102,32,116,101,114,109,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,116,101,114,109,10,32,32,32,101,108,115,101,10,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,10,32,32,32,101,110,100,10,101,110,100,10,10,45,45,32,83,104,117,102,102,108,101,32,99,114,101,97,116,101,115,32,97,110,32,101,110,118,105,114,111,110,109,101,110,116,32,105,110,32,119,104,105,99,104,32,97,108,108,32,118,97,114,105,97,98,108,101,115,32,97,114,101,32,109,97,112,112,101,100,32,116,111,10,45,45,32,102,114,101,115,104,108,121,32,103,101,110,101,114,97,116,101,100,32,118,97,114,105,97,98,108,101,115,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,115,104,117,102,102,108,101,40,108,105,116,101,114,97,108,44,32,101,110,118,41,10,32,32,32,108,111,99,97,108,32,109,97,112,32,61,32,101,110,118,32,111,114,32,123,125,10,32,32,32,102,111,114,32,105,61,49,44,35,108,105,116,101,114,97,108,32,100,111,10,32,32,32,32,32,32,108,105,116,101,114,97,108,91,105,93,58,115,104,117,102,102,108,101,40,109,97,112,41,10,32,32,32,101,110,100,10,32,32,32,114,101,116,117,114,110,32,109,97,112,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,86,97,114,58,115,104,117,102,102,108,101,40,101,110,118,41,10,32,32,32,105,102,32,110,111,116,32,101,110,118,91,115,101,108,102,93,32,116,104,101,110,10,32,32,32,32,32,32,101,110,118,91,115,101,108,102,93,32,61,32,109,107,95,102,114,101,115,104,95,118,97,114,40,41,10,32,32,32,101,110,100,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,67,111,110,115,116,58,115,104,117,102,102,108,101,40,101,110,118,41,10,101,110,100,10,10,45,45,32,82,101,110,97,109,101,115,32,97,32,108,105,116,101,114,97,108,32,117,115,105,110,103,32,97,110,32,101,110,118,105,114,111,110,109,101,110,116,32,103,101,110,101,114,97,116,101,100,32,98,121,32,115,104,117,102,102,108,101,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,114,101,110,97,109,101,40,108,105,116,101,114,97,108,41,10,32,32,32,114,101,116,117,114,110,32,115,117,98,115,116,40,108,105,116,101,114,97,108,44,32,115,104,117,102,102,108,101,40,108,105,116,101,114,97,108,41,41,10,101,110,100,10,10,45,45,32,85,110,105,102,121,32,116,119,111,32,108,105,116,101,114,97,108,115,46,32,32,84,104,101,32,114,101,115,117,108,116,32,105,115,32,101,105,116,104,101,114,32,97,110,32,101,110,118,105,114,111,110,109,101,110,116,32,111,114,32,110,105,108,46,10,45,45,32,78,105,108,32,105,115,32,114,101,116,117,114,110,101,100,32,119,104,101,110,32,116,104,101,32,116,119,111,32,108,105,116,101,114,97,108,115,32,99,97,110,110,111,116,32,98,101,32,117,110,105,102,105,101,100,46,32,32,87,104,101,110,32,116,104,101,121,10,45,45,32,99,97,110,44,32,97,112,112,108,121,105,110,103,32,116,104,101,32,115,117,98,115,116,105,116,117,116,105,111,110,115,32,100,101,102,105,110,101,100,32,98,121,32,116,104,101,32,101,110,118,105,114,111,110,109,101,110,116,32,111,110,32,98,111,116,104,10,45,45,32,108,105,116,101,114,97,108,115,32,119,105,108,108,32,99,114,101,97,116,101,32,116,119,111,32,108,105,116,101,114,97,108,115,32,116,104,97,116,32,97,114,101,32,115,116,114,117,99,116,117,114,97,108,108,121,32,101,113,117,97,108,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,117,110,105,102,121,40,108,105,116,101,114,97,108,44,32,111,116,104,101,114,41,10,32,32,32,105,102,32,108,105,116,101,114,97,108,46,112,114,101,100,32,126,61,32,111,116,104,101,114,46,112,114,101,100,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,110,105,108,10,32,32,32,101,108,115,101,10,32,32,32,32,32,32,108,111,99,97,108,32,101,110,118,32,61,32,123,125,10,32,32,32,32,32,32,102,111,114,32,105,61,49,44,35,108,105,116,101,114,97,108,32,100,111,10,9,32,108,111,99,97,108,32,108,105,116,101,114,97,108,95,105,32,61,32,108,105,116,101,114,97,108,91,105,93,58,99,104,97,115,101,40,101,110,118,41,10,9,32,108,111,99,97,108,32,111,116,104,101,114,95,105,32,61,32,111,116,104,101,114,91,105,93,58,99,104,97,115,101,40,101,110,118,41,10,9,32,105,102,32,108,105,116,101,114,97,108,95,105,32,126,61,32,111,116,104,101,114,95,105,32,116,104,101,110,10,9,32,32,32,32,101,110,118,32,61,32,108,105,116,101,114,97,108,95,105,58,117,110,105,102,121,40,111,116,104,101,114,95,105,44,32,101,110,118,41,10,9,32,32,32,32,105,102,32,110,111,116,32,101,110,118,32,116,104,101,110,10,9,32,32,32,32,32,32,32,114,101,116,117,114,110,32,101,110,118,10,9,32,32,32,32,101,110,100,10,9,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,114,101,116,117,114,110,32,101,110,118,10,32,32,32,101,110,100,10,101,110,100,10,10,45,45,32,67,104,97,115,101,32,114,101,116,117,114,110,115,32,97,32,99,111,110,115,116,97,110,116,32,111,114,32,97,110,32,117,110,98,111,117,110,100,32,118,97,114,105,97,98,108,101,46,10,10,102,117,110,99,116,105,111,110,32,67,111,110,115,116,58,99,104,97,115,101,40,101,110,118,41,10,32,32,32,114,101,116,117,114,110,32,115,101,108,102,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,86,97,114,58,99,104,97,115,101,40,101,110,118,41,10,32,32,32,108,111,99,97,108,32,116,101,114,109,32,61,32,101,110,118,91,115,101,108,102,93,10,32,32,32,105,102,32,116,101,114,109,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,116,101,114,109,58,99,104,97,115,101,40,101,110,118,41,10,32,32,32,101,108,115,101,10,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,10,32,32,32,101,110,100,10,101,110,100,10,10,45,45,32,84,104,101,32,99,97,115,101,32,97,110,97,108,121,115,105,115,32,102,111,114,32,117,110,105,102,121,105,110,103,32,116,119,111,32,116,101,114,109,115,32,105,115,32,104,97,110,100,108,101,100,32,98,121,32,109,101,116,104,111,100,10,45,45,32,100,105,115,112,97,116,99,104,46,10,10,102,117,110,99,116,105,111,110,32,67,111,110,115,116,58,117,110,105,102,121,40,116,101,114,109,44,32,101,110,118,41,10,32,32,32,114,101,116,117,114,110,32,116,101,114,109,58,117,110,105,102,121,95,99,111,110,115,116,40,115,101,108,102,44,32,101,110,118,41,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,67,111,110,115,116,58,117,110,105,102,121,95,99,111,110,115,116,40,99,111,110,115,116,44,32,101,110,118,41,10,32,32,32,114,101,116,117,114,110,32,110,105,108,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,86,97,114,58,117,110,105,102,121,95,99,111,110,115,116,40,99,111,110,115,116,44,32,101,110,118,41,10,32,32,32,101,110,118,91,115,101,108,102,93,32,61,32,99,111,110,115,116,10,32,32,32,114,101,116,117,114,110,32,101,110,118,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,86,97,114,58,117,110,105,102,121,40,116,101,114,109,44,32,101,110,118,41,10,32,32,32,114,101,116,117,114,110,32,116,101,114,109,58,117,110,105,102,121,95,118,97,114,40,115,101,108,102,44,32,101,110,118,41,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,67,111,110,115,116,58,117,110,105,102,121,95,118,97,114,40,118,97,114,44,32,101,110,118,41,10,32,32,32,114,101,116,117,114,110,32,118,97,114,58,117,110,105,102,121,95,99,111,110,115,116,40,115,101,108,102,44,32,101,110,118,41,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,86,97,114,58,117,110,105,102,121,95,118,97,114,40,118,97,114,44,32,101,110,118,41,10,32,32,32,101,110,118,91,118,97,114,93,32,61,32,115,101,108,102,10,32,32,32,114,101,116,117,114,110,32,101,110,118,10,101,110,100,10,10,45,45,32,68,111,101,115,32,97,32,108,105,116,101,114,97,108,32,104,97,118,101,32,97,32,103,105,118,101,110,32,116,101,114,109,63,32,32,73,110,116,101,114,110,97,108,105,122,105,110,103,32,116,101,114,109,115,32,101,110,115,117,114,101,115,32,97,110,10,45,45,32,101,102,102,105,99,105,101,110,116,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,111,102,32,116,104,105,115,32,111,112,101,114,97,116,105,111,110,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,105,115,95,105,110,40,116,101,114,109,44,32,108,105,116,101,114,97,108,41,10,32,32,32,102,111,114,32,105,61,49,44,35,108,105,116,101,114,97,108,32,100,111,10,32,32,32,32,32,32,105,102,32,108,105,116,101,114,97,108,91,105,93,32,61,61,32,116,101,114,109,32,116,104,101,110,10,9,32,114,101,116,117,114,110,32,116,114,117,101,10,32,32,32,32,32,32,101,110,100,10,32,32,32,101,110,100,10,32,32,32,114,101,116,117,114,110,32,102,97,108,115,101,10,101,110,100,10,10,45,45,32,84,104,101,115,101,32,109,101,116,104,111,100,115,32,97,114,101,32,117,115,101,100,32,116,111,32,104,97,110,100,108,101,32,97,32,115,101,116,32,111,102,32,102,97,99,116,115,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,105,115,95,109,101,109,98,101,114,40,108,105,116,101,114,97,108,44,32,116,98,108,41,10,32,32,32,114,101,116,117,114,110,32,116,98,108,91,103,101,116,95,105,100,40,108,105,116,101,114,97,108,41,93,10,101,110,100,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,97,100,106,111,105,110,40,108,105,116,101,114,97,108,44,32,116,98,108,41,10,32,32,32,116,98,108,91,103,101,116,95,105,100,40,108,105,116,101,114,97,108,41,93,32,61,32,108,105,116,101,114,97,108,10,101,110,100,10,10,45,45,32,67,108,97,117,115,101,115,10,10,45,45,32,65,32,99,108,97,117,115,101,32,104,97,115,32,97,32,104,101,97,100,32,108,105,116,101,114,97,108,44,32,97,110,100,32,97,32,115,101,113,117,101,110,99,101,32,111,102,32,108,105,116,101,114,97,108,115,32,116,104,97,116,32,102,111,114,109,10,45,45,32,105,116,115,32,98,111,100,121,46,32,32,73,102,32,116,104,101,114,101,32,97,114,101,32,110,111,32,108,105,116,101,114,97,108,115,32,105,110,32,105,116,115,32,98,111,100,121,44,32,116,104,101,32,99,108,97,117,115,101,32,105,115,10,45,45,32,99,97,108,108,101,100,32,97,32,102,97,99,116,46,32,32,73,102,32,116,104,101,114,101,32,105,115,32,97,116,32,108,101,97,115,116,32,111,110,101,32,108,105,116,101,114,97,108,32,105,110,32,105,116,115,32,98,111,100,121,44,32,105,116,32,105,115,10,45,45,32,99,97,108,108,101,100,32,97,32,114,117,108,101,46,10,10,45,45,32,65,32,99,108,97,117,115,101,32,97,115,115,101,114,116,115,32,116,104,97,116,32,105,116,115,32,104,101,97,100,32,105,115,32,116,114,117,101,32,105,102,32,101,118,101,114,121,32,108,105,116,101,114,97,108,32,105,110,32,105,116,115,32,98,111,100,121,32,105,115,10,45,45,32,116,114,117,101,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,109,97,107,101,95,99,108,97,117,115,101,40,104,101,97,100,44,32,98,111,100,121,41,10,32,32,32,108,111,99,97,108,32,99,108,97,117,115,101,32,61,32,123,104,101,97,100,32,61,32,104,101,97,100,125,10,32,32,32,102,111,114,32,105,61,49,44,35,98,111,100,121,32,100,111,10,32,32,32,32,32,32,99,108,97,117,115,101,91,105,93,32,61,32,98,111,100,121,91,105,93,10,32,32,32,101,110,100,10,32,32,32,114,101,116,117,114,110,32,99,108,97,117,115,101,10,101,110,100,10,10,45,45,32,65,32,99,108,97,117,115,101,39,115,32,105,100,32,105,115,32,99,111,109,112,117,116,101,100,32,111,110,32,100,101,109,97,110,100,44,32,98,117,116,32,116,104,101,110,32,99,97,99,104,101,100,46,10,10,45,45,32,84,104,101,32,105,100,39,115,32,101,110,99,111,100,105,110,103,32,101,110,115,117,114,101,115,32,116,104,97,116,32,116,119,111,32,99,108,97,117,115,101,115,32,97,114,101,32,115,116,114,117,99,116,117,114,97,108,108,121,32,101,113,117,97,108,10,45,45,32,105,102,32,116,104,101,121,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,105,100,46,32,32,65,32,99,108,97,117,115,101,39,115,32,105,100,32,105,115,32,117,115,101,100,32,97,115,32,97,32,107,101,121,32,105,110,116,111,32,116,104,101,10,45,45,32,99,108,97,117,115,101,32,100,97,116,97,98,97,115,101,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,103,101,116,95,99,108,97,117,115,101,95,105,100,40,99,108,97,117,115,101,41,10,32,32,32,108,111,99,97,108,32,105,100,32,61,32,99,108,97,117,115,101,46,105,100,10,32,32,32,105,102,32,110,111,116,32,105,100,32,116,104,101,110,10,32,32,32,32,32,32,105,100,32,61,32,97,100,100,95,115,105,122,101,40,103,101,116,95,105,100,40,99,108,97,117,115,101,46,104,101,97,100,41,41,10,32,32,32,32,32,32,102,111,114,32,105,61,49,44,35,99,108,97,117,115,101,32,100,111,10,9,32,105,100,32,61,32,105,100,32,46,46,32,97,100,100,95,115,105,122,101,40,103,101,116,95,105,100,40,99,108,97,117,115,101,91,105,93,41,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,99,108,97,117,115,101,46,105,100,32,61,32,105,100,10,32,32,32,101,110,100,10,32,32,32,114,101,116,117,114,110,32,105,100,10,101,110,100,10,10,45,45,32,67,108,97,117,115,101,32,115,117,98,115,116,105,116,117,116,105,111,110,32,105,110,32,119,104,105,99,104,32,116,104,101,32,115,117,98,115,116,105,116,117,116,105,111,110,32,105,115,32,97,112,112,108,105,101,100,32,116,111,32,101,97,99,104,10,45,45,32,101,97,99,104,32,108,105,116,101,114,97,108,32,116,104,97,116,32,109,97,107,101,115,32,117,112,32,116,104,101,32,99,108,97,117,115,101,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,115,117,98,115,116,95,105,110,95,99,108,97,117,115,101,40,99,108,97,117,115,101,44,32,101,110,118,41,10,32,32,32,105,102,32,110,111,116,32,110,101,120,116,40,101,110,118,41,32,116,104,101,110,9,45,45,32,70,111,117,110,100,32,97,110,32,101,109,112,116,121,32,109,97,112,46,10,32,32,32,32,32,32,114,101,116,117,114,110,32,99,108,97,117,115,101,10,32,32,32,101,110,100,10,32,32,32,108,111,99,97,108,32,110,101,119,32,61,32,123,104,101,97,100,32,61,32,115,117,98,115,116,40,99,108,97,117,115,101,46,104,101,97,100,44,32,101,110,118,41,125,10,32,32,32,102,111,114,32,105,61,49,44,35,99,108,97,117,115,101,32,100,111,10,32,32,32,32,32,32,110,101,119,91,105,93,32,61,32,115,117,98,115,116,40,99,108,97,117,115,101,91,105,93,44,32,101,110,118,41,10,32,32,32,101,110,100,10,32,32,32,114,101,116,117,114,110,32,110,101,119,10,101,110,100,10,10,45,45,32,82,101,110,97,109,101,115,32,116,104,101,32,118,97,114,105,97,98,108,101,115,32,105,110,32,97,32,99,108,97,117,115,101,46,32,32,69,118,101,114,121,32,118,97,114,105,97,98,108,101,32,105,110,32,116,104,101,32,104,101,97,100,32,105,115,10,45,45,32,105,110,32,116,104,101,32,98,111,100,121,44,32,115,111,32,116,104,101,32,104,101,97,100,32,99,97,110,32,98,101,32,105,103,110,111,114,101,100,32,119,104,105,108,101,32,103,101,110,101,114,97,116,105,110,103,32,97,110,10,45,45,32,101,110,118,105,114,111,110,109,101,110,116,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,114,101,110,97,109,101,95,99,108,97,117,115,101,40,99,108,97,117,115,101,41,10,32,32,32,108,111,99,97,108,32,101,110,118,32,61,32,123,125,10,32,32,32,102,111,114,32,105,61,49,44,35,99,108,97,117,115,101,32,100,111,10,32,32,32,32,32,32,101,110,118,32,61,32,115,104,117,102,102,108,101,40,99,108,97,117,115,101,91,105,93,44,32,101,110,118,41,10,32,32,32,101,110,100,10,32,32,32,105,102,32,110,111,116,32,110,101,120,116,40,101,110,118,41,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,99,108,97,117,115,101,10,32,32,32,101,108,115,101,10,32,32,32,32,32,32,114,101,116,117,114,110,32,115,117,98,115,116,95,105,110,95,99,108,97,117,115,101,40,99,108,97,117,115,101,44,32,101,110,118,41,10,32,32,32,101,110,100,10,101,110,100,10,10,45,45,32,65,32,99,108,97,117,115,101,32,105,115,32,115,97,102,101,32,105,102,32,101,118,101,114,121,32,118,97,114,105,97,98,108,101,32,105,110,32,105,116,115,32,104,101,97,100,32,105,115,32,105,110,32,105,116,115,32,98,111,100,121,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,105,115,95,115,97,102,101,40,99,108,97,117,115,101,41,10,32,32,32,102,111,114,32,105,61,49,44,35,99,108,97,117,115,101,46,104,101,97,100,32,100,111,10,32,32,32,32,32,32,105,102,32,110,111,116,32,99,108,97,117,115,101,46,104,101,97,100,91,105,93,58,105,115,95,115,97,102,101,40,99,108,97,117,115,101,41,32,116,104,101,110,10,9,32,114,101,116,117,114,110,32,102,97,108,115,101,10,32,32,32,32,32,32,101,110,100,10,32,32,32,101,110,100,10,32,32,32,114,101,116,117,114,110,32,116,114,117,101,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,67,111,110,115,116,58,105,115,95,115,97,102,101,40,99,108,97,117,115,101,41,10,32,32,32,114,101,116,117,114,110,32,116,114,117,101,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,86,97,114,58,105,115,95,115,97,102,101,40,99,108,97,117,115,101,41,10,32,32,32,102,111,114,32,105,61,49,44,35,99,108,97,117,115,101,32,100,111,10,32,32,32,32,32,32,105,102,32,105,115,95,105,110,40,115,101,108,102,44,32,99,108,97,117,115,101,91,105,93,41,32,116,104,101,110,10,9,32,114,101,116,117,114,110,32,116,114,117,101,10,32,32,32,32,32,32,101,110,100,10,32,32,32,101,110,100,10,32,32,32,114,101,116,117,114,110,32,102,97,108,115,101,10,101,110,100,10,10,45,45,32,68,65,84,65,66,65,83,69,10,10,45,45,32,84,104,101,32,100,97,116,97,98,97,115,101,32,115,116,111,114,101,115,32,112,114,101,100,105,99,97,116,101,115,32,116,104,97,116,32,99,111,110,116,97,105,110,32,99,108,97,117,115,101,115,46,32,32,80,114,101,100,105,99,97,116,101,115,10,45,45,32,110,111,116,32,105,110,32,116,104,101,32,100,97,116,97,98,97,115,101,32,97,114,101,32,115,117,98,106,101,99,116,32,116,111,32,103,97,114,98,97,103,101,32,99,111,108,108,101,99,116,105,111,110,46,10,10,108,111,99,97,108,32,100,98,32,61,32,123,125,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,105,110,115,101,114,116,40,112,114,101,100,41,10,32,32,32,100,98,91,112,114,101,100,46,105,100,93,32,61,32,112,114,101,100,10,32,32,32,114,101,116,117,114,110,32,112,114,101,100,10,101,110,100,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,114,101,109,111,118,101,40,112,114,101,100,41,10,32,32,32,100,98,91,112,114,101,100,46,105,100,93,32,61,32,110,105,108,10,32,32,32,114,101,116,117,114,110,32,112,114,101,100,10,101,110,100,10,10,45,45,32,65,100,100,32,97,32,115,97,102,101,32,99,108,97,117,115,101,32,116,111,32,116,104,101,32,100,97,116,97,98,97,115,101,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,97,115,115,101,114,116,40,99,108,97,117,115,101,41,10,32,32,32,105,102,32,110,111,116,32,105,115,95,115,97,102,101,40,99,108,97,117,115,101,41,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,110,105,108,9,9,45,45,32,65,110,32,117,110,115,97,102,101,32,99,108,97,117,115,101,32,119,97,115,32,100,101,116,101,99,116,101,100,46,10,32,32,32,101,108,115,101,10,32,32,32,32,32,32,108,111,99,97,108,32,112,114,101,100,32,61,32,99,108,97,117,115,101,46,104,101,97,100,46,112,114,101,100,10,32,32,32,32,32,32,105,102,32,110,111,116,32,112,114,101,100,46,112,114,105,109,32,116,104,101,110,9,45,45,32,73,103,110,111,114,101,32,97,115,115,101,114,116,105,111,110,115,32,102,111,114,32,112,114,105,109,105,116,105,118,101,115,46,10,9,32,112,114,101,100,46,100,98,91,103,101,116,95,99,108,97,117,115,101,95,105,100,40,99,108,97,117,115,101,41,93,32,61,32,99,108,97,117,115,101,10,9,32,105,110,115,101,114,116,40,112,114,101,100,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,114,101,116,117,114,110,32,99,108,97,117,115,101,10,32,32,32,101,110,100,10,101,110,100,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,114,101,116,114,97,99,116,40,99,108,97,117,115,101,41,10,32,32,32,108,111,99,97,108,32,112,114,101,100,32,61,32,99,108,97,117,115,101,46,104,101,97,100,46,112,114,101,100,10,32,32,32,112,114,101,100,46,100,98,91,103,101,116,95,99,108,97,117,115,101,95,105,100,40,99,108,97,117,115,101,41,93,32,61,32,110,105,108,10,32,32,32,105,102,32,110,111,116,32,110,101,120,116,40,112,114,101,100,46,100,98,41,32,97,110,100,32,110,111,116,32,112,114,101,100,46,112,114,105,109,32,116,104,101,110,10,32,32,32,32,32,32,114,101,109,111,118,101,40,112,114,101,100,41,10,32,32,32,101,110,100,10,32,32,32,114,101,116,117,114,110,32,99,108,97,117,115,101,10,101,110,100,10,10,45,45,32,68,65,84,65,66,65,83,69,32,67,76,79,78,73,78,71,10,10,45,45,32,65,32,100,97,116,97,98,97,115,101,32,99,97,110,32,98,101,32,115,97,118,101,100,32,97,110,100,32,116,104,101,110,32,108,97,116,101,114,32,114,101,115,116,111,114,101,100,46,32,32,87,105,116,104,32,99,111,112,121,32,97,110,100,10,45,45,32,114,101,118,101,114,116,44,32,111,110,101,32,99,97,110,32,117,115,101,32,111,110,101,32,99,111,112,121,32,111,102,32,97,32,100,97,116,97,98,97,115,101,32,109,117,108,116,105,112,108,101,32,116,105,109,101,115,32,116,111,32,114,101,118,101,114,116,10,45,45,32,116,111,32,97,32,112,114,101,118,105,111,117,115,32,100,97,116,97,98,97,115,101,46,32,32,84,104,101,115,101,32,116,119,111,32,102,117,110,99,116,105,111,110,115,32,97,114,101,32,110,111,116,32,101,120,112,111,115,101,100,32,105,110,32,116,104,101,10,45,45,32,67,32,65,80,73,46,10,10,45,45,32,82,101,116,117,114,110,115,32,97,32,102,114,101,115,104,32,99,111,112,121,32,111,102,32,116,104,101,32,99,117,114,114,101,110,116,32,100,97,116,97,98,97,115,101,32,111,114,32,99,111,112,105,101,115,32,116,104,101,32,111,110,101,10,45,45,32,103,105,118,101,110,32,97,115,32,97,110,32,97,114,103,117,109,101,110,116,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,99,111,112,121,40,115,114,99,41,10,32,32,32,108,111,99,97,108,32,99,108,111,110,101,32,61,32,123,125,10,32,32,32,102,111,114,32,107,44,118,32,105,110,32,112,97,105,114,115,40,115,114,99,32,111,114,32,100,98,41,32,100,111,10,32,32,32,32,32,32,99,108,111,110,101,91,107,93,32,61,32,100,117,112,40,118,41,10,32,32,32,101,110,100,10,32,32,32,114,101,116,117,114,110,32,99,108,111,110,101,10,101,110,100,10,10,45,45,32,82,101,118,101,114,116,115,32,100,97,116,97,108,111,103,32,116,111,32,97,32,112,114,101,118,105,111,117,115,108,121,32,99,108,111,110,101,100,32,100,97,116,97,98,97,115,101,46,32,32,84,104,101,32,100,97,116,97,98,97,115,101,32,105,115,10,45,45,32,99,111,112,105,101,100,32,115,111,32,116,104,97,116,32,116,104,101,32,99,108,111,110,101,32,99,97,110,32,98,101,32,117,115,101,100,32,109,111,114,101,32,116,104,97,110,32,111,110,99,101,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,114,101,118,101,114,116,40,99,108,111,110,101,41,10,32,32,32,100,98,32,61,32,99,111,112,121,40,99,108,111,110,101,41,10,101,110,100,10,10,45,45,32,68,65,84,65,66,65,83,69,32,83,84,79,82,69,10,10,45,45,32,65,32,100,97,116,97,98,97,115,101,32,99,97,110,32,98,101,32,115,97,118,101,100,32,97,110,100,32,116,104,101,110,32,108,97,116,101,114,32,114,101,115,116,111,114,101,100,46,10,10,108,111,99,97,108,32,115,116,111,114,101,32,61,32,123,125,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,115,97,118,101,40,41,10,32,32,32,116,97,98,108,101,46,105,110,115,101,114,116,40,115,116,111,114,101,44,32,99,111,112,121,40,41,41,10,101,110,100,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,114,101,115,116,111,114,101,40,41,10,32,32,32,100,98,32,61,32,116,97,98,108,101,46,114,101,109,111,118,101,40,115,116,111,114,101,41,10,32,32,32,100,98,32,61,32,100,98,32,111,114,32,123,125,10,101,110,100,10,10,45,45,32,80,82,79,86,69,82,10,10,45,45,91,91,10,10,84,104,101,32,114,101,109,97,105,110,105,110,103,32,102,117,110,99,116,105,111,110,115,32,105,110,32,116,104,105,115,32,102,105,108,101,32,105,109,112,108,101,109,101,110,116,32,116,104,101,32,116,97,98,108,101,100,32,108,111,103,105,99,10,112,114,111,103,114,97,109,109,105,110,103,32,97,108,103,111,114,105,116,104,109,32,100,101,115,99,114,105,98,101,100,32,105,110,32,34,69,102,102,105,99,105,101,110,116,32,84,111,112,45,68,111,119,110,32,67,111,109,112,117,116,97,116,105,111,110,32,111,102,10,81,117,101,114,105,101,115,32,117,110,100,101,114,32,116,104,101,32,87,101,108,108,45,70,111,117,110,100,101,100,32,83,101,109,97,110,116,105,99,115,34,44,32,67,104,101,110,44,32,87,46,44,32,83,119,105,102,116,44,32,84,46,44,32,97,110,100,10,87,97,114,114,101,110,44,32,68,46,32,83,46,44,32,74,46,32,76,111,103,105,99,32,80,114,111,103,46,32,86,111,108,46,32,50,52,44,32,78,111,46,32,51,44,32,83,101,112,46,32,49,57,57,53,44,32,112,112,46,32,49,54,49,45,49,57,57,46,10,65,110,111,116,104,101,114,32,105,109,112,111,114,116,97,110,116,32,114,101,102,101,114,101,110,99,101,32,105,115,32,34,84,97,98,108,101,100,32,69,118,97,108,117,97,116,105,111,110,32,119,105,116,104,32,68,101,108,97,121,105,110,103,32,102,111,114,10,71,101,110,101,114,97,108,32,76,111,103,105,99,32,80,114,111,103,114,97,109,115,34,44,32,67,104,101,110,44,32,87,46,44,32,97,110,100,32,87,97,114,114,101,110,44,32,68,46,32,83,46,44,32,74,46,32,65,67,77,44,32,86,111,108,46,32,52,51,44,10,78,111,46,32,49,44,32,74,97,110,46,32,49,57,57,54,44,32,112,112,46,32,50,48,45,55,52,46,10,10,93,93,10,10,45,45,32,84,104,101,32,115,117,98,103,111,97,108,32,116,97,98,108,101,10,10,108,111,99,97,108,32,115,117,98,103,111,97,108,115,10,10,45,45,32,84,104,101,32,115,117,98,103,111,97,108,32,116,97,98,108,101,32,105,115,32,97,32,109,97,112,32,102,114,111,109,32,116,104,101,32,118,97,114,105,97,110,116,32,116,97,103,32,111,102,32,97,32,115,117,98,103,111,97,108,39,115,10,45,45,32,108,105,116,101,114,97,108,32,116,111,32,97,32,115,117,98,103,111,97,108,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,102,105,110,100,40,108,105,116,101,114,97,108,41,10,32,32,32,114,101,116,117,114,110,32,115,117,98,103,111,97,108,115,91,103,101,116,95,116,97,103,40,108,105,116,101,114,97,108,41,93,10,101,110,100,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,109,101,114,103,101,40,115,117,98,103,111,97,108,41,10,32,32,32,115,117,98,103,111,97,108,115,91,103,101,116,95,116,97,103,40,115,117,98,103,111,97,108,46,108,105,116,101,114,97,108,41,93,32,61,32,115,117,98,103,111,97,108,10,101,110,100,10,10,45,45,32,65,32,115,117,98,103,111,97,108,32,105,115,32,116,104,101,32,105,116,101,109,32,116,104,97,116,32,105,115,32,116,97,98,108,101,100,32,98,121,32,116,104,105,115,32,97,108,103,111,114,105,116,104,109,46,10,10,45,45,32,65,32,115,117,98,103,111,97,108,32,104,97,115,32,97,32,108,105,116,101,114,97,108,44,32,97,32,115,101,116,32,111,102,32,102,97,99,116,115,44,32,97,110,100,32,97,110,32,97,114,114,97,121,32,111,102,32,119,97,105,116,101,114,115,46,10,45,45,32,65,32,119,97,105,116,101,114,32,105,115,32,97,32,112,97,105,114,32,99,111,110,116,97,105,110,105,110,103,32,97,32,115,117,98,103,111,97,108,32,97,110,100,32,97,32,99,108,97,117,115,101,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,109,97,107,101,95,115,117,98,103,111,97,108,40,108,105,116,101,114,97,108,41,10,32,32,32,114,101,116,117,114,110,32,123,108,105,116,101,114,97,108,32,61,32,108,105,116,101,114,97,108,44,32,102,97,99,116,115,32,61,32,123,125,44,32,119,97,105,116,101,114,115,32,61,32,123,125,125,10,101,110,100,10,10,45,45,32,82,101,115,111,108,118,101,32,116,104,101,32,115,101,108,101,99,116,101,100,32,108,105,116,101,114,97,108,32,111,102,32,97,32,99,108,97,117,115,101,32,119,105,116,104,32,97,32,108,105,116,101,114,97,108,46,32,32,84,104,101,10,45,45,32,115,101,108,101,99,116,101,100,32,108,105,116,101,114,97,108,32,105,115,32,116,104,101,32,102,105,114,115,116,32,108,105,116,101,114,97,108,32,105,110,32,98,111,100,121,32,111,102,32,97,32,114,117,108,101,46,32,32,73,102,32,116,104,101,10,45,45,32,116,119,111,32,108,105,116,101,114,97,108,115,32,117,110,105,102,121,44,32,97,32,110,101,119,32,99,108,97,117,115,101,32,105,115,32,103,101,110,101,114,97,116,101,100,32,116,104,97,116,32,104,97,115,32,97,32,98,111,100,121,32,119,105,116,104,10,45,45,32,111,110,101,32,108,101,115,115,32,108,105,116,101,114,97,108,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,114,101,115,111,108,118,101,40,99,108,97,117,115,101,44,32,108,105,116,101,114,97,108,41,10,32,32,32,108,111,99,97,108,32,110,32,61,32,35,99,108,97,117,115,101,10,32,32,32,105,102,32,110,32,61,61,32,48,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,110,105,108,10,32,32,32,101,110,100,10,32,32,32,108,111,99,97,108,32,101,110,118,32,61,32,117,110,105,102,121,40,99,108,97,117,115,101,91,49,93,44,32,114,101,110,97,109,101,40,108,105,116,101,114,97,108,41,41,10,32,32,32,105,102,32,110,111,116,32,101,110,118,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,110,105,108,10,32,32,32,101,110,100,10,32,32,32,110,32,61,32,110,32,45,32,49,10,32,32,32,108,111,99,97,108,32,110,101,119,32,61,32,123,104,101,97,100,32,61,32,115,117,98,115,116,40,99,108,97,117,115,101,46,104,101,97,100,44,32,101,110,118,41,125,10,32,32,32,102,111,114,32,105,61,49,44,110,32,100,111,10,32,32,32,32,32,32,110,101,119,91,105,93,32,61,32,115,117,98,115,116,40,99,108,97,117,115,101,91,105,32,43,32,49,93,44,32,101,110,118,41,10,32,32,32,101,110,100,10,32,32,32,114,101,116,117,114,110,32,110,101,119,10,101,110,100,10,10,45,45,32,83,116,111,114,101,32,97,32,102,97,99,116,44,32,97,110,100,32,105,110,102,111,114,109,32,97,108,108,32,119,97,105,116,101,114,115,32,111,102,32,116,104,101,32,102,97,99,116,32,116,111,111,46,10,10,108,111,99,97,108,32,102,97,99,116,44,32,114,117,108,101,44,32,97,100,100,95,99,108,97,117,115,101,44,32,115,101,97,114,99,104,10,10,102,117,110,99,116,105,111,110,32,102,97,99,116,40,115,117,98,103,111,97,108,44,32,108,105,116,101,114,97,108,41,10,32,32,32,105,102,32,110,111,116,32,105,115,95,109,101,109,98,101,114,40,108,105,116,101,114,97,108,44,32,115,117,98,103,111,97,108,46,102,97,99,116,115,41,32,116,104,101,110,10,32,32,32,32,32,32,97,100,106,111,105,110,40,108,105,116,101,114,97,108,44,32,115,117,98,103,111,97,108,46,102,97,99,116,115,41,10,32,32,32,32,32,32,102,111,114,32,105,61,49,44,35,115,117,98,103,111,97,108,46,119,97,105,116,101,114,115,32,100,111,10,9,32,108,111,99,97,108,32,119,97,105,116,101,114,32,61,32,115,117,98,103,111,97,108,46,119,97,105,116,101,114,115,91,105,93,10,9,32,108,111,99,97,108,32,114,101,115,111,108,118,101,110,116,32,61,32,114,101,115,111,108,118,101,40,119,97,105,116,101,114,46,99,108,97,117,115,101,44,32,108,105,116,101,114,97,108,41,10,9,32,105,102,32,114,101,115,111,108,118,101,110,116,32,116,104,101,110,10,9,32,32,32,32,97,100,100,95,99,108,97,117,115,101,40,119,97,105,116,101,114,46,115,117,98,103,111,97,108,44,32,114,101,115,111,108,118,101,110,116,41,10,9,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,101,110,100,10,101,110,100,10,10,45,45,32,85,115,101,32,97,32,110,101,119,108,121,32,100,101,114,105,118,101,100,32,114,117,108,101,46,10,10,102,117,110,99,116,105,111,110,32,114,117,108,101,40,115,117,98,103,111,97,108,44,32,99,108,97,117,115,101,44,32,115,101,108,101,99,116,101,100,41,10,32,32,32,108,111,99,97,108,32,115,103,32,61,32,102,105,110,100,40,115,101,108,101,99,116,101,100,41,10,32,32,32,105,102,32,115,103,32,116,104,101,110,10,32,32,32,32,32,32,116,97,98,108,101,46,105,110,115,101,114,116,40,115,103,46,119,97,105,116,101,114,115,44,32,123,115,117,98,103,111,97,108,32,61,32,115,117,98,103,111,97,108,44,32,99,108,97,117,115,101,32,61,32,99,108,97,117,115,101,125,41,10,32,32,32,32,32,32,108,111,99,97,108,32,116,111,100,111,32,61,32,123,125,10,32,32,32,32,32,32,102,111,114,32,105,100,44,102,97,99,116,32,105,110,32,112,97,105,114,115,40,115,103,46,102,97,99,116,115,41,32,100,111,10,9,32,108,111,99,97,108,32,114,101,115,111,108,118,101,110,116,32,61,32,114,101,115,111,108,118,101,40,99,108,97,117,115,101,44,32,102,97,99,116,41,10,9,32,105,102,32,114,101,115,111,108,118,101,110,116,32,116,104,101,110,10,9,32,32,32,32,116,97,98,108,101,46,105,110,115,101,114,116,40,116,111,100,111,44,32,114,101,115,111,108,118,101,110,116,41,10,9,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,102,111,114,32,105,61,49,44,35,116,111,100,111,32,100,111,10,9,32,97,100,100,95,99,108,97,117,115,101,40,115,117,98,103,111,97,108,44,32,116,111,100,111,91,105,93,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,101,108,115,101,10,32,32,32,32,32,32,115,103,32,61,32,109,97,107,101,95,115,117,98,103,111,97,108,40,115,101,108,101,99,116,101,100,41,10,32,32,32,32,32,32,116,97,98,108,101,46,105,110,115,101,114,116,40,115,103,46,119,97,105,116,101,114,115,44,32,123,115,117,98,103,111,97,108,32,61,32,115,117,98,103,111,97,108,44,32,99,108,97,117,115,101,32,61,32,99,108,97,117,115,101,125,41,10,32,32,32,32,32,32,109,101,114,103,101,40,115,103,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,97,114,99,104,40,115,103,41,10,32,32,32,101,110,100,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,97,100,100,95,99,108,97,117,115,101,40,115,117,98,103,111,97,108,44,32,99,108,97,117,115,101,41,10,32,32,32,105,102,32,35,99,108,97,117,115,101,32,61,61,32,48,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,102,97,99,116,40,115,117,98,103,111,97,108,44,32,99,108,97,117,115,101,46,104,101,97,100,41,10,32,32,32,101,108,115,101,10,32,32,32,32,32,32,114,101,116,117,114,110,32,114,117,108,101,40,115,117,98,103,111,97,108,44,32,99,108,97,117,115,101,44,32,99,108,97,117,115,101,91,49,93,41,10,32,32,32,101,110,100,10,101,110,100,10,10,45,45,32,83,101,97,114,99,104,32,102,111,114,32,100,101,114,105,118,97,116,105,111,110,115,32,111,102,32,116,104,101,32,108,105,116,101,114,97,108,32,97,115,115,111,99,105,97,116,101,100,32,119,105,116,104,32,116,104,105,115,32,115,117,98,103,111,97,108,46,10,10,102,117,110,99,116,105,111,110,32,115,101,97,114,99,104,40,115,117,98,103,111,97,108,41,10,32,32,32,108,111,99,97,108,32,108,105,116,101,114,97,108,32,61,32,115,117,98,103,111,97,108,46,108,105,116,101,114,97,108,10,32,32,32,105,102,32,108,105,116,101,114,97,108,46,112,114,101,100,46,112,114,105,109,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,108,105,116,101,114,97,108,46,112,114,101,100,46,112,114,105,109,40,108,105,116,101,114,97,108,44,32,115,117,98,103,111,97,108,41,10,32,32,32,101,108,115,101,10,32,32,32,32,32,32,102,111,114,32,105,100,44,99,108,97,117,115,101,32,105,110,32,112,97,105,114,115,40,108,105,116,101,114,97,108,46,112,114,101,100,46,100,98,41,32,100,111,10,9,32,108,111,99,97,108,32,114,101,110,97,109,101,100,32,61,32,114,101,110,97,109,101,95,99,108,97,117,115,101,40,99,108,97,117,115,101,41,10,9,32,108,111,99,97,108,32,101,110,118,32,61,32,117,110,105,102,121,40,108,105,116,101,114,97,108,44,32,114,101,110,97,109,101,100,46,104,101,97,100,41,10,9,32,105,102,32,101,110,118,32,116,104,101,110,10,9,32,32,32,32,97,100,100,95,99,108,97,117,115,101,40,115,117,98,103,111,97,108,44,32,115,117,98,115,116,95,105,110,95,99,108,97,117,115,101,40,114,101,110,97,109,101,100,44,32,101,110,118,41,41,10,9,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,101,110,100,10,101,110,100,10,10,45,45,32,83,101,116,115,32,117,112,32,97,110,100,32,99,97,108,108,115,32,116,104,101,32,115,117,98,103,111,97,108,32,115,101,97,114,99,104,32,112,114,111,99,101,100,117,114,101,44,32,97,110,100,32,116,104,101,110,32,101,120,116,114,97,99,116,115,10,45,45,32,116,104,101,32,97,110,115,119,101,114,115,32,105,110,116,111,32,97,110,32,101,97,115,105,108,121,32,117,115,101,100,32,116,97,98,108,101,46,32,32,84,104,101,32,116,97,98,108,101,32,104,97,115,32,116,104,101,32,110,97,109,101,32,111,102,10,45,45,32,116,104,101,32,112,114,101,100,105,99,97,116,101,44,32,116,104,101,32,112,114,101,100,105,99,97,116,101,39,115,32,97,114,105,116,121,44,32,97,110,100,32,97,110,32,97,114,114,97,121,32,111,102,32,99,111,110,115,116,97,110,116,10,45,45,32,116,101,114,109,115,32,102,111,114,32,101,97,99,104,32,97,110,115,119,101,114,46,32,32,73,102,32,116,104,101,114,101,32,97,114,101,32,110,111,32,97,110,115,119,101,114,115,44,32,110,105,108,32,105,115,32,114,101,116,117,114,110,101,100,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,97,115,107,40,108,105,116,101,114,97,108,41,10,32,32,32,115,117,98,103,111,97,108,115,32,61,32,123,125,10,32,32,32,108,111,99,97,108,32,115,117,98,103,111,97,108,32,61,32,109,97,107,101,95,115,117,98,103,111,97,108,40,108,105,116,101,114,97,108,41,10,32,32,32,109,101,114,103,101,40,115,117,98,103,111,97,108,41,10,32,32,32,115,101,97,114,99,104,40,115,117,98,103,111,97,108,41,10,32,32,32,115,117,98,103,111,97,108,115,32,61,32,110,105,108,10,32,32,32,108,111,99,97,108,32,97,110,115,119,101,114,115,32,61,32,123,125,10,32,32,32,102,111,114,32,105,100,44,108,105,116,101,114,97,108,32,105,110,32,112,97,105,114,115,40,115,117,98,103,111,97,108,46,102,97,99,116,115,41,32,100,111,10,32,32,32,32,32,32,108,111,99,97,108,32,97,110,115,119,101,114,32,61,32,123,125,10,32,32,32,32,32,32,102,111,114,32,105,61,49,44,35,108,105,116,101,114,97,108,32,100,111,32,45,45,32,69,97,99,104,32,116,101,114,109,32,105,110,32,97,110,32,97,110,115,119,101,114,32,119,105,108,108,32,98,101,10,9,32,116,97,98,108,101,46,105,110,115,101,114,116,40,97,110,115,119,101,114,44,32,108,105,116,101,114,97,108,91,105,93,46,105,100,41,32,45,45,32,97,32,99,111,110,115,116,97,110,116,46,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,116,97,98,108,101,46,105,110,115,101,114,116,40,97,110,115,119,101,114,115,44,32,97,110,115,119,101,114,41,10,32,32,32,101,110,100,10,32,32,32,105,102,32,35,97,110,115,119,101,114,115,32,62,32,48,32,116,104,101,110,10,32,32,32,32,32,32,97,110,115,119,101,114,115,46,110,97,109,101,32,61,32,103,101,116,95,110,97,109,101,40,108,105,116,101,114,97,108,46,112,114,101,100,41,10,32,32,32,32,32,32,97,110,115,119,101,114,115,46,97,114,105,116,121,32,61,32,103,101,116,95,97,114,105,116,121,40,108,105,116,101,114,97,108,46,112,114,101,100,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,97,110,115,119,101,114,115,10,32,32,32,101,108,115,101,10,32,32,32,32,32,32,114,101,116,117,114,110,32,110,105,108,10,32,32,32,101,110,100,10,101,110,100,10,10,45,45,32,80,82,73,77,73,84,73,86,69,83,10,10,45,45,91,91,10,10,65,32,112,114,105,109,105,116,105,118,101,32,112,114,101,100,105,99,97,116,101,44,32,97,108,115,111,32,99,97,108,108,101,100,32,97,32,98,117,105,108,116,45,105,110,32,112,114,101,100,105,99,97,116,101,44,32,105,115,10,105,109,112,108,101,109,101,110,116,101,100,32,98,121,32,99,111,100,101,46,32,32,65,115,115,101,114,116,105,111,110,115,32,97,98,111,117,116,32,97,32,112,114,105,109,105,116,105,118,101,32,112,114,101,100,105,99,97,116,101,32,97,114,101,10,105,103,110,111,114,101,100,44,32,97,115,32,116,104,101,32,99,111,100,101,32,116,97,107,101,115,32,112,114,101,99,101,100,101,110,99,101,46,32,32,85,115,101,32,116,104,101,32,109,97,107,101,95,112,114,101,100,32,102,117,110,99,116,105,111,110,32,116,111,10,97,99,99,101,115,115,32,97,32,112,114,105,109,105,116,105,118,101,32,98,121,32,110,97,109,101,46,10,10,84,104,101,32,98,101,104,97,118,105,111,114,32,111,102,32,97,32,112,114,105,109,105,116,105,118,101,32,112,114,101,100,105,99,97,116,101,32,105,115,32,100,101,102,105,110,101,100,32,98,121,32,97,100,100,105,110,103,32,97,32,102,117,110,99,116,105,111,110,10,116,111,32,116,104,101,32,112,114,101,100,105,99,97,116,101,39,115,32,112,114,105,109,32,102,105,101,108,100,46,32,32,84,104,101,32,102,117,110,99,116,105,111,110,32,116,97,107,101,115,32,97,32,108,105,116,101,114,97,108,32,97,110,100,32,97,10,115,117,98,103,111,97,108,46,32,32,84,104,101,32,116,121,112,105,99,97,108,32,112,114,105,109,105,116,105,118,101,32,100,101,114,105,118,101,115,32,97,32,115,101,116,32,111,102,32,102,97,99,116,115,32,102,114,111,109,32,116,104,101,10,108,105,116,101,114,97,108,44,32,97,110,100,32,102,111,114,32,101,97,99,104,32,100,101,114,105,118,101,100,32,102,97,99,116,32,102,44,32,114,101,112,111,114,116,115,32,116,104,101,32,114,101,115,117,108,116,32,98,121,32,105,110,118,111,107,105,110,103,10,102,97,99,116,40,115,117,98,103,111,97,108,44,32,102,41,46,10,10,84,104,101,32,101,113,117,97,108,115,32,112,114,105,109,105,116,105,118,101,32,100,101,102,105,110,101,100,32,98,101,108,111,119,32,105,115,32,112,114,111,116,101,99,116,101,100,32,102,114,111,109,32,103,97,114,97,103,101,32,99,111,108,108,101,99,116,105,111,110,10,98,101,99,97,117,115,101,32,116,104,101,32,112,114,105,109,105,116,105,118,101,32,105,115,32,98,111,117,110,100,32,116,111,32,97,32,108,111,99,97,108,32,118,97,114,105,97,98,108,101,46,32,32,65,32,112,114,105,109,105,116,105,118,101,32,110,111,116,10,115,116,111,114,101,100,32,105,110,32,97,32,76,117,97,32,100,97,116,97,32,115,116,114,117,99,116,117,114,101,32,99,97,110,32,98,101,32,112,114,111,116,101,99,116,101,100,32,98,121,32,101,110,116,101,114,105,110,103,32,105,116,32,105,110,116,111,10,116,104,101,32,112,114,101,100,105,99,97,116,101,32,100,97,116,97,98,97,115,101,32,117,115,101,100,32,98,121,32,97,115,115,101,114,116,32,97,110,100,32,114,101,116,114,97,99,116,46,32,32,70,111,114,32,112,114,105,109,105,116,105,118,101,115,10,99,114,101,97,116,101,100,32,102,114,111,109,32,67,44,32,112,114,111,116,101,99,116,105,111,110,32,109,97,121,32,98,101,32,112,114,111,118,105,100,101,100,32,98,121,32,101,110,116,101,114,105,110,103,32,116,104,101,32,112,114,101,100,105,99,97,116,101,10,105,110,116,111,32,116,104,101,32,76,117,97,32,114,101,103,105,115,116,114,121,46,10,10,85,115,101,32,116,104,101,32,97,100,100,95,105,116,101,114,95,112,114,105,109,32,102,117,110,99,116,105,111,110,32,116,111,32,97,100,100,32,97,32,112,114,105,109,105,116,105,118,101,32,112,114,101,100,105,99,97,116,101,32,116,104,97,116,32,99,97,110,10,100,101,102,105,110,101,100,32,98,121,32,97,110,32,105,116,101,114,97,116,111,114,32,119,104,105,99,104,32,119,104,101,110,32,103,105,118,101,110,32,97,32,108,105,116,101,114,97,108,44,32,103,101,110,101,114,97,116,101,115,32,97,10,115,101,113,117,101,110,99,101,32,111,102,32,97,110,115,119,101,114,115,44,32,101,97,99,104,32,97,110,115,119,101,114,32,98,101,105,110,103,32,97,110,32,97,114,114,97,121,32,111,102,32,115,116,114,105,110,103,115,32,111,114,32,110,117,109,98,101,114,115,46,10,10,93,93,10,10,45,45,32,79,116,104,101,114,32,112,97,114,116,115,32,111,102,32,116,104,101,32,68,97,116,97,108,111,103,32,115,121,115,116,101,109,32,100,101,112,101,110,100,32,111,110,32,116,104,101,32,101,113,117,97,108,105,116,121,32,112,114,105,109,105,116,105,118,101,44,10,45,45,32,115,111,32,99,97,114,101,102,117,108,108,121,32,99,111,110,115,105,100,101,114,32,97,110,121,32,109,111,100,105,102,105,99,97,116,105,111,110,115,32,116,111,32,105,116,46,10,10,100,111,9,9,9,9,45,45,32,101,113,117,97,108,115,32,112,114,105,109,105,116,105,118,101,10,32,32,32,108,111,99,97,108,32,98,105,110,97,114,121,95,101,113,117,97,108,115,95,112,114,101,100,32,61,32,109,97,107,101,95,112,114,101,100,40,34,61,34,44,32,50,41,10,10,32,32,32,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,101,113,117,97,108,115,95,112,114,105,109,105,116,105,118,101,40,108,105,116,101,114,97,108,44,32,115,117,98,103,111,97,108,41,10,32,32,32,32,32,32,108,111,99,97,108,32,120,32,61,32,108,105,116,101,114,97,108,91,49,93,10,32,32,32,32,32,32,108,111,99,97,108,32,121,32,61,32,108,105,116,101,114,97,108,91,50,93,10,32,32,32,32,32,32,108,111,99,97,108,32,101,110,118,32,61,32,120,58,117,110,105,102,121,40,121,44,32,123,125,41,45,45,32,66,111,116,104,32,116,101,114,109,115,32,109,117,115,116,32,117,110,105,102,121,44,10,32,32,32,32,32,32,105,102,32,101,110,118,32,116,104,101,110,9,9,45,45,32,97,110,100,32,97,116,32,108,101,97,115,116,32,111,110,101,32,111,102,32,116,104,101,109,10,9,32,120,32,61,32,120,58,115,117,98,115,116,40,101,110,118,41,9,45,45,32,109,117,115,116,32,98,101,32,97,32,99,111,110,115,116,97,110,116,46,10,9,32,121,32,61,32,121,58,115,117,98,115,116,40,101,110,118,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,114,101,116,117,114,110,32,120,58,101,113,117,97,108,115,95,112,114,105,109,105,116,105,118,101,40,121,44,32,115,117,98,103,111,97,108,41,10,32,32,32,101,110,100,10,10,32,32,32,102,117,110,99,116,105,111,110,32,86,97,114,58,101,113,117,97,108,115,95,112,114,105,109,105,116,105,118,101,40,116,101,114,109,44,32,115,117,98,103,111,97,108,41,10,32,32,32,101,110,100,10,10,32,32,32,102,117,110,99,116,105,111,110,32,67,111,110,115,116,58,101,113,117,97,108,115,95,112,114,105,109,105,116,105,118,101,40,116,101,114,109,44,32,115,117,98,103,111,97,108,41,10,32,32,32,32,32,32,105,102,32,115,101,108,102,32,61,61,32,116,101,114,109,32,116,104,101,110,9,45,45,32,66,111,116,104,32,116,101,114,109,115,32,97,114,101,32,99,111,110,115,116,97,110,116,32,97,110,100,32,101,113,117,97,108,46,10,9,32,108,111,99,97,108,32,108,105,116,101,114,97,108,32,61,32,123,112,114,101,100,32,61,32,98,105,110,97,114,121,95,101,113,117,97,108,115,95,112,114,101,100,44,32,115,101,108,102,44,32,115,101,108,102,125,10,9,32,114,101,116,117,114,110,32,102,97,99,116,40,115,117,98,103,111,97,108,44,32,108,105,116,101,114,97,108,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,101,110,100,10,10,32,32,32,98,105,110,97,114,121,95,101,113,117,97,108,115,95,112,114,101,100,46,112,114,105,109,32,61,32,101,113,117,97,108,115,95,112,114,105,109,105,116,105,118,101,10,101,110,100,10,10,45,45,32,68,111,101,115,32,97,32,108,105,116,101,114,97,108,32,117,110,105,102,121,32,119,105,116,104,32,97,110,32,102,97,99,116,32,107,110,111,119,110,32,116,111,32,99,111,110,116,97,105,110,32,111,110,108,121,32,99,111,110,115,116,97,110,116,10,45,45,32,116,101,114,109,115,63,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,109,97,116,99,104,40,108,105,116,101,114,97,108,44,32,102,97,99,116,41,10,32,32,32,108,111,99,97,108,32,101,110,118,32,61,32,123,125,10,32,32,32,102,111,114,32,105,61,49,44,35,108,105,116,101,114,97,108,32,100,111,10,32,32,32,32,32,32,105,102,32,108,105,116,101,114,97,108,91,105,93,32,126,61,32,102,97,99,116,91,105,93,32,116,104,101,110,10,9,32,101,110,118,32,61,32,108,105,116,101,114,97,108,91,105,93,58,109,97,116,99,104,40,102,97,99,116,91,105,93,44,32,101,110,118,41,10,9,32,105,102,32,110,111,116,32,101,110,118,32,116,104,101,110,10,9,32,32,32,32,114,101,116,117,114,110,32,101,110,118,10,9,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,101,110,100,10,32,32,32,114,101,116,117,114,110,32,101,110,118,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,67,111,110,115,116,58,109,97,116,99,104,40,99,111,110,115,116,44,32,101,110,118,41,10,32,32,32,114,101,116,117,114,110,32,110,105,108,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,86,97,114,58,109,97,116,99,104,40,99,111,110,115,116,44,32,101,110,118,41,10,32,32,32,108,111,99,97,108,32,116,101,114,109,32,61,32,101,110,118,91,115,101,108,102,93,10,32,32,32,105,102,32,110,111,116,32,116,101,114,109,32,116,104,101,110,10,32,32,32,32,32,32,101,110,118,91,115,101,108,102,93,32,61,32,99,111,110,115,116,10,32,32,32,32,32,32,114,101,116,117,114,110,32,101,110,118,10,32,32,32,101,108,115,101,105,102,32,116,101,114,109,32,61,61,32,99,111,110,115,116,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,101,110,118,10,32,32,32,101,108,115,101,10,32,32,32,32,32,32,114,101,116,117,114,110,32,110,105,108,10,32,32,32,101,110,100,10,101,110,100,10,10,45,45,32,65,100,100,32,97,32,112,114,105,109,105,116,105,118,101,32,116,104,97,116,32,105,115,32,100,101,102,105,110,101,100,32,98,121,32,97,110,32,105,116,101,114,97,116,111,114,46,32,32,87,104,101,110,32,103,105,118,101,110,32,97,10,45,45,32,108,105,116,101,114,97,108,44,32,116,104,101,32,105,116,101,114,97,116,111,114,32,103,101,110,101,114,97,116,101,115,32,97,32,115,101,113,117,101,110,99,101,115,32,111,102,32,97,110,115,119,101,114,115,46,32,32,69,97,99,104,10,45,45,32,97,110,115,119,101,114,32,105,115,32,97,110,32,97,114,114,97,121,46,32,32,69,97,99,104,32,101,108,101,109,101,110,116,32,105,110,32,116,104,101,32,97,114,114,97,121,32,105,115,32,101,105,116,104,101,114,32,97,32,110,117,109,98,101,114,10,45,45,32,111,114,32,97,32,115,116,114,105,110,103,46,32,32,84,104,101,32,108,101,110,103,116,104,32,111,102,32,116,104,101,32,97,114,114,97,121,32,105,115,32,101,113,117,97,108,32,116,111,32,116,104,101,32,97,114,105,116,121,32,111,102,32,116,104,101,10,45,45,32,112,114,101,100,105,99,97,116,101,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,97,100,100,95,105,116,101,114,95,112,114,105,109,40,110,97,109,101,44,32,97,114,105,116,121,44,32,105,116,101,114,41,10,32,32,32,108,111,99,97,108,32,112,114,101,100,32,61,32,109,97,107,101,95,112,114,101,100,40,110,97,109,101,44,32,97,114,105,116,121,41,10,32,32,32,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,112,114,105,109,40,108,105,116,101,114,97,108,44,32,115,117,98,103,111,97,108,41,10,32,32,32,32,32,32,102,111,114,32,116,101,114,109,115,32,105,110,32,105,116,101,114,40,108,105,116,101,114,97,108,41,32,100,111,10,9,32,108,111,99,97,108,32,110,32,61,32,35,116,101,114,109,115,10,9,32,105,102,32,110,32,61,61,32,97,114,105,116,121,32,116,104,101,110,10,9,32,32,32,32,108,111,99,97,108,32,110,101,119,32,61,32,123,112,114,101,100,32,61,32,112,114,101,100,125,10,9,32,32,32,32,102,111,114,32,105,61,49,44,110,32,100,111,10,9,32,32,32,32,32,32,32,110,101,119,91,105,93,32,61,32,109,97,107,101,95,99,111,110,115,116,40,116,101,114,109,115,91,105,93,41,10,9,32,32,32,32,101,110,100,10,9,32,32,32,32,105,102,32,109,97,116,99,104,40,108,105,116,101,114,97,108,44,32,110,101,119,41,32,116,104,101,110,10,9,32,32,32,32,32,32,32,102,97,99,116,40,115,117,98,103,111,97,108,44,32,110,101,119,41,10,9,32,32,32,32,101,110,100,10,9,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,101,110,100,10,32,32,32,112,114,101,100,46,112,114,105,109,32,61,32,112,114,105,109,10,32,32,32,114,101,116,117,114,110,32,105,110,115,101,114,116,40,112,114,101,100,41,10,101,110,100,10,10,45,45,91,91,10,10,45,45,32,69,120,97,109,112,108,101,32,111,102,32,97,32,118,101,114,121,32,115,105,109,112,108,101,32,112,114,105,109,105,116,105,118,101,32,100,101,102,105,110,101,100,32,98,121,32,97,110,32,105,116,101,114,97,116,111,114,46,10,45,45,32,73,116,32,100,101,102,105,110,101,115,32,116,104,101,32,102,97,99,116,32,116,104,114,101,101,40,51,41,46,10,10,97,100,100,95,105,116,101,114,95,112,114,105,109,40,34,116,104,114,101,101,34,44,32,49,44,10,9,32,32,32,32,32,32,102,117,110,99,116,105,111,110,40,108,105,116,101,114,97,108,41,10,9,9,32,114,101,116,117,114,110,32,102,117,110,99,116,105,111,110,40,115,44,32,118,41,10,9,9,9,32,32,32,105,102,32,118,32,116,104,101,110,10,9,9,9,32,32,32,32,32,32,114,101,116,117,114,110,32,110,105,108,10,9,9,9,32,32,32,101,108,115,101,10,9,9,9,32,32,32,32,32,32,114,101,116,117,114,110,32,123,51,125,10,9,9,9,32,32,32,101,110,100,10,9,9,9,101,110,100,10,9,32,32,32,32,32,32,101,110,100,41,10,10,45,45,32,69,120,97,109,112,108,101,32,111,102,32,116,104,101,32,115,117,99,99,101,115,115,111,114,32,112,114,105,109,105,116,105,118,101,46,10,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,115,117,99,99,40,108,105,116,101,114,97,108,41,10,32,32,32,114,101,116,117,114,110,32,102,117,110,99,116,105,111,110,40,115,44,32,118,41,10,9,32,32,32,32,32,105,102,32,118,32,116,104,101,110,10,9,9,114,101,116,117,114,110,32,110,105,108,10,9,32,32,32,32,32,101,108,115,101,10,9,9,108,111,99,97,108,32,120,32,61,32,108,105,116,101,114,97,108,91,49,93,10,9,9,108,111,99,97,108,32,121,32,61,32,108,105,116,101,114,97,108,91,50,93,10,9,9,105,102,32,121,58,105,115,95,99,111,110,115,116,40,41,32,116,104,101,110,10,9,9,32,32,32,108,111,99,97,108,32,106,32,61,32,116,111,110,117,109,98,101,114,40,121,46,105,100,41,10,9,9,32,32,32,105,102,32,106,32,97,110,100,32,106,32,62,61,32,48,32,116,104,101,110,10,9,9,32,32,32,32,32,32,114,101,116,117,114,110,32,123,106,32,43,32,49,44,32,106,125,10,9,9,32,32,32,101,108,115,101,10,9,9,32,32,32,32,32,32,114,101,116,117,114,110,32,110,105,108,10,9,9,32,32,32,101,110,100,10,9,9,101,108,115,101,105,102,32,120,58,105,115,95,99,111,110,115,116,40,41,32,116,104,101,110,10,9,9,32,32,32,108,111,99,97,108,32,105,32,61,32,116,111,110,117,109,98,101,114,40,120,46,105,100,41,10,9,9,32,32,32,105,102,32,105,32,97,110,100,32,105,32,62,32,48,32,116,104,101,110,10,9,9,32,32,32,32,32,32,114,101,116,117,114,110,32,123,105,44,32,105,32,45,32,49,125,10,9,9,32,32,32,101,108,115,101,10,9,9,32,32,32,32,32,32,114,101,116,117,114,110,32,110,105,108,10,9,9,32,32,32,101,110,100,10,9,9,101,108,115,101,10,9,9,32,32,32,114,101,116,117,114,110,32,110,105,108,10,9,9,101,110,100,10,9,32,32,32,32,32,101,110,100,10,9,32,32,101,110,100,10,101,110,100,10,100,97,116,97,108,111,103,46,97,100,100,95,105,116,101,114,95,112,114,105,109,40,34,115,117,99,99,34,44,32,50,44,32,115,117,99,99,41,10,10,45,45,93,93,10,10,45,45,32,69,88,80,79,82,84,69,68,32,70,85,78,67,84,73,79,78,83,10,10,45,45,32,84,104,101,32,67,32,65,80,73,10,10,102,117,110,99,116,105,111,110,32,100,108,95,112,117,115,104,108,105,116,101,114,97,108,40,41,10,32,32,32,114,101,116,117,114,110,32,123,125,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,100,108,95,97,100,100,112,114,101,100,40,116,98,108,44,32,115,116,114,41,10,32,32,32,116,98,108,46,110,97,109,101,32,61,32,115,116,114,59,10,32,32,32,114,101,116,117,114,110,32,116,98,108,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,100,108,95,97,100,100,118,97,114,40,116,98,108,44,32,115,116,114,41,10,32,32,32,116,97,98,108,101,46,105,110,115,101,114,116,40,116,98,108,44,32,109,97,107,101,95,118,97,114,40,115,116,114,41,41,10,32,32,32,114,101,116,117,114,110,32,116,98,108,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,100,108,95,97,100,100,99,111,110,115,116,40,116,98,108,44,32,115,116,114,41,10,32,32,32,116,97,98,108,101,46,105,110,115,101,114,116,40,116,98,108,44,32,109,97,107,101,95,99,111,110,115,116,40,115,116,114,41,41,10,32,32,32,114,101,116,117,114,110,32,116,98,108,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,100,108,95,109,97,107,101,108,105,116,101,114,97,108,40,116,98,108,41,10,32,32,32,116,98,108,46,112,114,101,100,32,61,32,109,97,107,101,95,112,114,101,100,40,116,98,108,46,110,97,109,101,44,32,35,116,98,108,41,10,32,32,32,116,98,108,46,110,97,109,101,32,61,32,110,105,108,10,32,32,32,114,101,116,117,114,110,32,116,98,108,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,100,108,95,112,117,115,104,104,101,97,100,40,108,105,116,101,114,97,108,41,10,32,32,32,114,101,116,117,114,110,32,123,104,101,97,100,32,61,32,108,105,116,101,114,97,108,125,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,100,108,95,97,100,100,108,105,116,101,114,97,108,40,116,98,108,44,32,108,105,116,101,114,97,108,41,10,32,32,32,116,97,98,108,101,46,105,110,115,101,114,116,40,116,98,108,44,32,108,105,116,101,114,97,108,41,10,32,32,32,114,101,116,117,114,110,32,116,98,108,10,101,110,100,10,10,102,117,110,99,116,105,111,110,32,100,108,95,109,97,107,101,99,108,97,117,115,101,40,116,98,108,41,10,32,32,32,114,101,116,117,114,110,32,116,98,108,10,101,110,100,10,10,100,108,95,97,115,115,101,114,116,32,61,32,97,115,115,101,114,116,10,10,100,108,95,114,101,116,114,97,99,116,32,61,32,114,101,116,114,97,99,116,10,10,45,45,32,84,104,105,115,32,67,32,65,80,73,32,102,117,110,99,116,105,111,110,32,105,115,32,109,111,114,101,32,99,111,109,112,108,105,99,97,116,101,100,32,116,104,97,110,32,116,104,101,32,111,116,104,101,114,115,32,98,101,99,97,117,115,101,32,105,116,10,45,45,32,105,115,32,99,111,109,112,117,116,105,110,103,32,116,104,101,32,116,111,116,97,108,32,115,105,122,101,32,111,102,32,116,104,101,32,99,104,97,114,97,99,116,101,114,32,97,114,114,97,121,32,116,104,97,116,32,119,105,108,108,32,98,101,10,45,45,32,97,108,108,111,99,97,116,101,100,32,98,121,32,116,104,101,32,67,32,114,111,117,116,105,110,101,32,117,115,105,110,103,32,116,104,105,115,32,102,117,110,99,116,105,111,110,46,32,32,84,104,101,32,99,104,97,114,97,99,116,101,114,10,45,45,32,97,114,114,97,121,32,109,117,115,116,32,104,97,118,101,32,114,111,111,109,32,102,111,114,32,116,104,101,32,112,114,101,100,105,99,97,116,101,32,97,110,100,32,97,108,108,32,111,102,32,116,104,101,32,99,111,110,115,116,97,110,116,10,45,45,32,116,101,114,109,115,32,105,110,32,116,104,101,32,97,110,115,119,101,114,46,32,32,69,97,99,104,32,105,116,101,109,32,97,108,115,111,32,110,101,101,100,115,32,114,111,111,109,32,102,111,114,32,116,104,101,32,122,101,114,111,10,45,45,32,99,104,97,114,97,99,116,101,114,32,117,115,101,100,32,116,111,32,116,101,114,109,105,110,97,116,101,32,101,97,99,104,32,115,116,114,105,110,103,46,10,10,102,117,110,99,116,105,111,110,32,100,108,95,97,115,107,40,108,105,116,101,114,97,108,41,10,32,32,32,108,111,99,97,108,32,97,110,115,119,101,114,115,32,61,32,97,115,107,40,108,105,116,101,114,97,108,41,10,32,32,32,105,102,32,110,111,116,32,97,110,115,119,101,114,115,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,97,110,115,119,101,114,115,10,32,32,32,101,110,100,10,32,32,32,108,111,99,97,108,32,110,32,61,32,35,97,110,115,119,101,114,115,10,32,32,32,108,111,99,97,108,32,97,114,105,116,121,32,61,32,97,110,115,119,101,114,115,46,97,114,105,116,121,10,32,32,32,108,111,99,97,108,32,115,105,122,101,32,61,32,115,116,114,105,110,103,46,108,101,110,40,97,110,115,119,101,114,115,46,110,97,109,101,41,32,43,32,49,10,32,32,32,102,111,114,32,105,61,49,44,110,32,100,111,10,32,32,32,32,32,32,108,111,99,97,108,32,97,110,115,119,101,114,32,61,32,97,110,115,119,101,114,115,91,105,93,10,32,32,32,32,32,32,102,111,114,32,106,61,49,44,97,114,105,116,121,32,100,111,10,9,32,115,105,122,101,32,61,32,115,105,122,101,32,43,32,115,116,114,105,110,103,46,108,101,110,40,97,110,115,119,101,114,91,106,93,41,32,43,32,49,10,32,32,32,32,32,32,101,110,100,10,32,32,32,101,110,100,10,32,32,32,97,110,115,119,101,114,115,46,115,105,122,101,32,61,32,115,105,122,101,10,32,32,32,97,110,115,119,101,114,115,46,110,32,61,32,110,9,9,45,45,32,72,97,99,107,32,116,111,32,104,97,110,100,32,98,97,99,107,32,116,104,101,32,115,105,122,101,10,32,32,32,114,101,116,117,114,110,32,97,110,115,119,101,114,115,10,101,110,100,10,10,45,45,32,84,104,101,32,76,117,97,32,65,80,73,10,10,100,97,116,97,108,111,103,32,61,32,123,10,32,32,32,109,97,107,101,95,118,97,114,32,61,32,109,97,107,101,95,118,97,114,44,10,32,32,32,109,97,107,101,95,99,111,110,115,116,32,61,32,109,97,107,101,95,99,111,110,115,116,44,10,32,32,32,109,97,107,101,95,112,114,101,100,32,61,32,109,97,107,101,95,112,114,101,100,44,10,32,32,32,103,101,116,95,110,97,109,101,32,61,32,103,101,116,95,110,97,109,101,44,10,32,32,32,103,101,116,95,97,114,105,116,121,32,61,32,103,101,116,95,97,114,105,116,121,44,10,32,32,32,109,97,107,101,95,108,105,116,101,114,97,108,32,61,32,109,97,107,101,95,108,105,116,101,114,97,108,44,10,32,32,32,109,97,107,101,95,99,108,97,117,115,101,32,61,32,109,97,107,101,95,99,108,97,117,115,101,44,10,32,32,32,105,110,115,101,114,116,32,61,32,105,110,115,101,114,116,44,10,32,32,32,114,101,109,111,118,101,32,61,32,114,101,109,111,118,101,44,10,32,32,32,97,115,115,101,114,116,32,61,32,97,115,115,101,114,116,44,10,32,32,32,114,101,116,114,97,99,116,32,61,32,114,101,116,114,97,99,116,44,10,32,32,32,115,97,118,101,32,61,32,115,97,118,101,44,10,32,32,32,114,101,115,116,111,114,101,32,61,32,114,101,115,116,111,114,101,44,10,32,32,32,99,111,112,121,32,61,32,99,111,112,121,44,10,32,32,32,114,101,118,101,114,116,32,61,32,114,101,118,101,114,116,44,10,32,32,32,97,115,107,32,61,32,97,115,107,44,10,32,32,32,97,100,100,95,105,116,101,114,95,112,114,105,109,32,61,32,97,100,100,95,105,116,101,114,95,112,114,105,109,44,10,125,10,10,114,101,116,117,114,110,32,100,97,116,97,108,111,103,10] /* --[[                 */, "i8", ALLOC_STATIC);
STRING_TABLE._datalog_lua_source=allocate([100,97,116,97,108,111,103,46,108,117,97,0] /* datalog.lua\00 */, "i8", ALLOC_STATIC);
__str1845=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str1946=allocate([116,97,98,108,101,0] /* table\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2047=allocate([115,116,114,105,110,103,0] /* string\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str66=allocate([109,105,115,115,105,110,103,32,116,104,101,111,114,121,0] /* missing theory\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str167=allocate([109,105,115,115,105,110,103,32,114,101,97,100,101,114,0] /* missing reader\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str268=allocate([109,105,115,115,105,110,103,32,101,114,114,111,114,32,114,101,112,111,114,116,101,114,0] /* missing error report */, "i8", ALLOC_STATIC);
STRING_TABLE.__str369=allocate([92,37,48,51,111,0] /* \5C%03o\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str470=allocate([108,111,97,100,101,114,46,99,0] /* loader.c\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str571=allocate([117,110,115,97,102,101,32,102,97,99,116,32,97,115,115,101,114,116,101,100,0] /* unsafe fact asserted */, "i8", ALLOC_STATIC);
STRING_TABLE.__str672=allocate([115,121,110,116,97,120,32,101,114,114,111,114,32,119,104,105,108,101,32,101,120,112,101,99,116,105,110,103,32,101,110,100,32,111,102,32,105,110,112,117,116,0] /* syntax error while e */, "i8", ALLOC_STATIC);
STRING_TABLE.__str773=allocate([115,121,110,116,97,120,32,101,114,114,111,114,32,97,102,116,101,114,32,97,32,102,97,99,116,0] /* syntax error after a */, "i8", ALLOC_STATIC);
STRING_TABLE.__str874=allocate([117,110,115,97,102,101,32,114,117,108,101,32,97,115,115,101,114,116,101,100,0] /* unsafe rule asserted */, "i8", ALLOC_STATIC);
STRING_TABLE.__str975=allocate([115,121,110,116,97,120,32,101,114,114,111,114,32,97,102,116,101,114,32,97,32,114,117,108,101,0] /* syntax error after a */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1076=allocate([61,0] /* =\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1177=allocate([115,121,110,116,97,120,32,101,114,114,111,114,32,105,110,32,97,32,116,101,114,109,32,108,105,115,116,0] /* syntax error in a te */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1278=allocate([115,121,110,116,97,120,32,101,114,114,111,114,32,111,102,32,97,32,118,97,114,105,97,98,108,101,32,117,115,101,100,32,97,115,32,97,32,112,114,101,100,105,99,97,116,101,0] /* syntax error of a va */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1379=allocate([115,121,110,116,97,120,32,101,114,114,111,114,32,119,104,105,108,101,32,101,120,112,101,99,116,105,110,103,32,97,110,32,101,113,117,97,108,115,32,115,105,103,110,0] /* syntax error while e */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1480=allocate([115,121,110,116,97,120,32,101,114,114,111,114,32,119,104,105,108,101,32,101,120,112,101,99,116,105,110,103,32,97,32,112,114,101,100,105,99,97,116,101,0] /* syntax error while e */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1581=allocate([115,121,110,116,97,120,32,101,114,114,111,114,32,119,104,105,108,101,32,101,120,112,101,99,116,105,110,103,32,97,32,116,101,114,109,0] /* syntax error while e */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1682=allocate([48,0] /* 0\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1783=allocate([49,0] /* 1\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1884=allocate([101,110,100,32,111,102,32,105,110,112,117,116,32,105,110,32,115,116,114,105,110,103,0] /* end of input in stri */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1985=allocate([110,101,119,108,105,110,101,32,105,110,32,115,116,114,105,110,103,0] /* newline in string\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2086=allocate([105,110,116,101,114,110,97,108,32,101,114,114,111,114,0] /* internal error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str92=allocate([110,111,32,99,97,108,108,105,110,103,32,101,110,118,105,114,111,110,109,101,110,116,0] /* no calling environme */, "i8", ALLOC_STATIC);
STRING_TABLE.__str193=allocate([110,111,32,118,97,108,117,101,0] /* no value\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str294=allocate([63,0] /* ?\00 */, "i8", ALLOC_STATIC);
__str395=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str132=allocate([98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,40,37,115,41,0] /* bad argument #%d (%s */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1133=allocate([110,0] /* n\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2134=allocate([109,101,116,104,111,100,0] /* method\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3135=allocate([99,97,108,108,105,110,103,32,39,37,115,39,32,111,110,32,98,97,100,32,115,101,108,102,32,40,37,115,41,0] /* calling '%s' on bad  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4136=allocate([63,0] /* ?\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5137=allocate([98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,116,111,32,39,37,115,39,32,40,37,115,41,0] /* bad argument #%d to  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6138=allocate([37,115,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,37,115,0] /* %s expected, got %s\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7139=allocate([83,108,0] /* Sl\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8140=allocate([37,115,58,37,100,58,32,0] /* %s:%d: \00 */, "i8", ALLOC_STATIC);
__str9141=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str10142=allocate([105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,115,39,0] /* invalid option '%s'\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11143=allocate([115,116,97,99,107,32,111,118,101,114,102,108,111,119,32,40,37,115,41,0] /* stack overflow (%s)\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12144=allocate([118,97,108,117,101,32,101,120,112,101,99,116,101,100,0] /* value expected\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13145=allocate([95,76,79,65,68,69,68,0] /* _LOADED\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14146=allocate([110,97,109,101,32,99,111,110,102,108,105,99,116,32,102,111,114,32,109,111,100,117,108,101,32,39,37,115,39,0] /* name conflict for mo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15147=allocate([61,115,116,100,105,110,0] /* =stdin\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16148=allocate([64,37,115,0] /* @%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17149=allocate([114,0] /* r\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18150=allocate([111,112,101,110,0] /* open\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19151=allocate([27,76,117,97,0] /* \1BLua\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20152=allocate([114,98,0] /* rb\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21153=allocate([114,101,111,112,101,110,0] /* reopen\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22154=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23155=allocate([80,65,78,73,67,58,32,117,110,112,114,111,116,101,99,116,101,100,32,101,114,114,111,114,32,105,110,32,99,97,108,108,32,116,111,32,76,117,97,32,65,80,73,32,40,37,115,41,10,0] /* PANIC: unprotected e */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24156=allocate([10,0] /* \0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25157=allocate([99,97,110,110,111,116,32,37,115,32,37,115,58,32,37,115,0] /* cannot %s %s: %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str164=allocate([99,111,114,111,117,116,105,110,101,0] /* coroutine\00 */, "i8", ALLOC_STATIC);
_co_funcs=allocate([0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str1165=allocate([99,114,101,97,116,101,0] /* create\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2166=allocate([114,101,115,117,109,101,0] /* resume\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3167=allocate([114,117,110,110,105,110,103,0] /* running\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4168=allocate([115,116,97,116,117,115,0] /* status\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5169=allocate([119,114,97,112,0] /* wrap\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6170=allocate([121,105,101,108,100,0] /* yield\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7171=allocate([116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,116,111,32,114,101,115,117,109,101,0] /* too many arguments t */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8172=allocate([99,97,110,110,111,116,32,114,101,115,117,109,101,32,37,115,32,99,111,114,111,117,116,105,110,101,0] /* cannot resume %s cor */, "i8", ALLOC_STATIC);
_statnames=allocate(16, "i8", ALLOC_STATIC);
STRING_TABLE.__str9173=allocate([116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,32,116,111,32,114,101,115,117,109,101,0] /* too many results to  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10174=allocate([115,117,115,112,101,110,100,101,100,0] /* suspended\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11175=allocate([110,111,114,109,97,108,0] /* normal\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12176=allocate([100,101,97,100,0] /* dead\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13177=allocate([99,111,114,111,117,116,105,110,101,32,101,120,112,101,99,116,101,100,0] /* coroutine expected\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14178=allocate([76,117,97,32,102,117,110,99,116,105,111,110,32,101,120,112,101,99,116,101,100,0] /* Lua function expecte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15179=allocate([95,71,0] /* _G\00 */, "i8", ALLOC_STATIC);
_base_funcs=allocate([0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str16180=allocate([76,117,97,32,53,46,49,0] /* Lua 5.1\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17181=allocate([95,86,69,82,83,73,79,78,0] /* _VERSION\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18182=allocate([105,112,97,105,114,115,0] /* ipairs\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19183=allocate([112,97,105,114,115,0] /* pairs\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20184=allocate([107,118,0] /* kv\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21185=allocate([95,95,109,111,100,101,0] /* __mode\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22186=allocate([110,101,119,112,114,111,120,121,0] /* newproxy\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23187=allocate([98,111,111,108,101,97,110,32,111,114,32,112,114,111,120,121,32,101,120,112,101,99,116,101,100,0] /* boolean or proxy exp */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24188=allocate([97,115,115,101,114,116,0] /* assert\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25189=allocate([99,111,108,108,101,99,116,103,97,114,98,97,103,101,0] /* collectgarbage\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26190=allocate([100,111,102,105,108,101,0] /* dofile\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27191=allocate([101,114,114,111,114,0] /* error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28=allocate([103,99,105,110,102,111,0] /* gcinfo\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29=allocate([103,101,116,102,101,110,118,0] /* getfenv\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30=allocate([103,101,116,109,101,116,97,116,97,98,108,101,0] /* getmetatable\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31=allocate([108,111,97,100,102,105,108,101,0] /* loadfile\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32=allocate([108,111,97,100,0] /* load\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33=allocate([108,111,97,100,115,116,114,105,110,103,0] /* loadstring\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34=allocate([110,101,120,116,0] /* next\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35=allocate([112,99,97,108,108,0] /* pcall\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36=allocate([112,114,105,110,116,0] /* print\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str37=allocate([114,97,119,101,113,117,97,108,0] /* rawequal\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str38=allocate([114,97,119,103,101,116,0] /* rawget\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str39=allocate([114,97,119,115,101,116,0] /* rawset\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str40=allocate([115,101,108,101,99,116,0] /* select\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str41=allocate([115,101,116,102,101,110,118,0] /* setfenv\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str42=allocate([115,101,116,109,101,116,97,116,97,98,108,101,0] /* setmetatable\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str43=allocate([116,111,110,117,109,98,101,114,0] /* tonumber\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str44=allocate([116,111,115,116,114,105,110,103,0] /* tostring\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str45=allocate([116,121,112,101,0] /* type\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str46=allocate([117,110,112,97,99,107,0] /* unpack\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str47=allocate([120,112,99,97,108,108,0] /* xpcall\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str48=allocate([116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,32,116,111,32,117,110,112,97,99,107,0] /* too many results to  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str49=allocate([95,95,116,111,115,116,114,105,110,103,0] /* __tostring\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str50=allocate([116,114,117,101,0] /* true\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str51=allocate([102,97,108,115,101,0] /* false\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str52=allocate([110,105,108,0] /* nil\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str53=allocate([37,115,58,32,37,112,0] /* %s: %p\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str54=allocate([98,97,115,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* base out of range\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str55=allocate([110,105,108,32,111,114,32,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0] /* nil or table expecte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str56=allocate([95,95,109,101,116,97,116,97,98,108,101,0] /* __metatable\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str57=allocate([99,97,110,110,111,116,32,99,104,97,110,103,101,32,97,32,112,114,111,116,101,99,116,101,100,32,109,101,116,97,116,97,98,108,101,0] /* cannot change a prot */, "i8", ALLOC_STATIC);
STRING_TABLE.__str58=allocate([39,115,101,116,102,101,110,118,39,32,99,97,110,110,111,116,32,99,104,97,110,103,101,32,101,110,118,105,114,111,110,109,101,110,116,32,111,102,32,103,105,118,101,110,32,111,98,106,101,99,116,0] /* 'setfenv' cannot cha */, "i8", ALLOC_STATIC);
STRING_TABLE.__str59=allocate([108,101,118,101,108,32,109,117,115,116,32,98,101,32,110,111,110,45,110,101,103,97,116,105,118,101,0] /* level must be non-ne */, "i8", ALLOC_STATIC);
STRING_TABLE.__str60=allocate([105,110,118,97,108,105,100,32,108,101,118,101,108,0] /* invalid level\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str61=allocate([102,0] /* f\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str62=allocate([110,111,32,102,117,110,99,116,105,111,110,32,101,110,118,105,114,111,110,109,101,110,116,32,102,111,114,32,116,97,105,108,32,99,97,108,108,32,97,116,32,108,101,118,101,108,32,37,100,0] /* no function environm */, "i8", ALLOC_STATIC);
STRING_TABLE.__str63=allocate([105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* index out of range\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str64=allocate([39,116,111,115,116,114,105,110,103,39,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,116,111,32,39,112,114,105,110,116,39,0] /* 'tostring' must retu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str65=allocate([9,0] /* \09\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str66192=allocate([10,0] /* \0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str67=allocate([61,40,108,111,97,100,41,0] /* =(load)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str68=allocate([116,111,111,32,109,97,110,121,32,110,101,115,116,101,100,32,102,117,110,99,116,105,111,110,115,0] /* too many nested func */, "i8", ALLOC_STATIC);
STRING_TABLE.__str69=allocate([114,101,97,100,101,114,32,102,117,110,99,116,105,111,110,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,0] /* reader function must */, "i8", ALLOC_STATIC);
_luaB_collectgarbage_opts=allocate(32, "i8", ALLOC_STATIC);
STRING_TABLE.__str70=allocate([115,116,111,112,0] /* stop\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str71=allocate([114,101,115,116,97,114,116,0] /* restart\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str72=allocate([99,111,108,108,101,99,116,0] /* collect\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str73=allocate([99,111,117,110,116,0] /* count\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str74=allocate([115,116,101,112,0] /* step\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str75=allocate([115,101,116,112,97,117,115,101,0] /* setpause\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str76=allocate([115,101,116,115,116,101,112,109,117,108,0] /* setstepmul\00 */, "i8", ALLOC_STATIC);
_luaB_collectgarbage_optsnum=allocate([0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str77=allocate([37,115,0] /* %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str78=allocate([97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,33,0] /* assertion failed!\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str195=allocate([102,117,110,99,116,105,111,110,32,111,114,32,101,120,112,114,101,115,115,105,111,110,32,116,111,111,32,99,111,109,112,108,101,120,0] /* function or expressi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1196=allocate([99,111,100,101,32,115,105,122,101,32,111,118,101,114,102,108,111,119,0] /* code size overflow\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2197=allocate([99,111,110,115,116,97,110,116,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,0] /* constant table overf */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3198=allocate([99,111,110,116,114,111,108,32,115,116,114,117,99,116,117,114,101,32,116,111,111,32,108,111,110,103,0] /* control structure to */, "i8", ALLOC_STATIC);
STRING_TABLE.__str252=allocate([97,116,116,101,109,112,116,32,116,111,32,37,115,32,37,115,32,39,37,115,39,32,40,97,32,37,115,32,118,97,108,117,101,41,0] /* attempt to %s %s '%s */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1253=allocate([97,116,116,101,109,112,116,32,116,111,32,37,115,32,97,32,37,115,32,118,97,108,117,101,0] /* attempt to %s a %s v */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2254=allocate([99,111,110,99,97,116,101,110,97,116,101,0] /* concatenate\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3255=allocate([112,101,114,102,111,114,109,32,97,114,105,116,104,109,101,116,105,99,32,111,110,0] /* perform arithmetic o */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4256=allocate([97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,116,119,111,32,37,115,32,118,97,108,117,101,115,0] /* attempt to compare t */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5257=allocate([97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,37,115,32,119,105,116,104,32,37,115,0] /* attempt to compare % */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6258=allocate([37,115,58,37,100,58,32,37,115,0] /* %s:%d: %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7259=allocate([108,111,99,97,108,0] /* local\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8260=allocate([103,108,111,98,97,108,0] /* global\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9261=allocate([102,105,101,108,100,0] /* field\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10262=allocate([63,0] /* ?\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11263=allocate([117,112,118,97,108,117,101,0] /* upvalue\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12264=allocate([109,101,116,104,111,100,0] /* method\00 */, "i8", ALLOC_STATIC);
__str13265=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str14266=allocate([61,91,67,93,0] /* =[C]\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15267=allocate([67,0] /* C\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16268=allocate([109,97,105,110,0] /* main\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17269=allocate([76,117,97,0] /* Lua\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18270=allocate([116,97,105,108,0] /* tail\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19271=allocate([61,40,116,97,105,108,32,99,97,108,108,41,0] /* =(tail call)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str293=allocate([110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0] /* not enough memory\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1294=allocate([101,114,114,111,114,32,105,110,32,101,114,114,111,114,32,104,97,110,100,108,105,110,103,0] /* error in error handl */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2295=allocate([67,32,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0] /* C stack overflow\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3296=allocate([99,97,110,110,111,116,32,114,101,115,117,109,101,32,110,111,110,45,115,117,115,112,101,110,100,101,100,32,99,111,114,111,117,116,105,110,101,0] /* cannot resume non-su */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4297=allocate([97,116,116,101,109,112,116,32,116,111,32,121,105,101,108,100,32,97,99,114,111,115,115,32,109,101,116,97,109,101,116,104,111,100,47,67,45,99,97,108,108,32,98,111,117,110,100,97,114,121,0] /* attempt to yield acr */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5298=allocate([27,76,117,97,0] /* \1BLua\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6299=allocate([115,116,97,99,107,32,111,118,101,114,102,108,111,119,0] /* stack overflow\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7300=allocate([110,0] /* n\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8301=allocate([99,97,108,108,0] /* call\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str397=allocate([97,110,100,0] /* and\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1398=allocate([98,114,101,97,107,0] /* break\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2399=allocate([100,111,0] /* do\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3400=allocate([101,108,115,101,0] /* else\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4401=allocate([101,108,115,101,105,102,0] /* elseif\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5402=allocate([101,110,100,0] /* end\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6403=allocate([102,97,108,115,101,0] /* false\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7404=allocate([102,111,114,0] /* for\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8405=allocate([102,117,110,99,116,105,111,110,0] /* function\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9406=allocate([105,102,0] /* if\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10407=allocate([105,110,0] /* in\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11408=allocate([108,111,99,97,108,0] /* local\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12409=allocate([110,105,108,0] /* nil\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13410=allocate([110,111,116,0] /* not\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14411=allocate([111,114,0] /* or\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15412=allocate([114,101,112,101,97,116,0] /* repeat\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16413=allocate([114,101,116,117,114,110,0] /* return\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17414=allocate([116,104,101,110,0] /* then\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18415=allocate([116,114,117,101,0] /* true\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19416=allocate([117,110,116,105,108,0] /* until\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20417=allocate([119,104,105,108,101,0] /* while\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21418=allocate([46,46,0] /* ..\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22419=allocate([46,46,46,0] /* ...\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23420=allocate([61,61,0] /* ==\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24421=allocate([62,61,0] /* _=\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25422=allocate([60,61,0] /* _=\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26423=allocate([126,61,0] /* ~=\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27424=allocate([60,110,117,109,98,101,114,62,0] /* _number_\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28425=allocate([60,110,97,109,101,62,0] /* _name_\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29426=allocate([60,115,116,114,105,110,103,62,0] /* _string_\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30427=allocate([60,101,111,102,62,0] /* _eof_\00 */, "i8", ALLOC_STATIC);
_luaX_tokens=allocate(128, "i8", ALLOC_STATIC);
STRING_TABLE.__str31428=allocate([99,104,97,114,40,37,100,41,0] /* char(%d)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32429=allocate([37,99,0] /* %c\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33430=allocate([37,115,58,37,100,58,32,37,115,0] /* %s:%d: %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34431=allocate([37,115,32,110,101,97,114,32,39,37,115,39,0] /* %s near '%s'\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35432=allocate([105,110,118,97,108,105,100,32,108,111,110,103,32,115,116,114,105,110,103,32,100,101,108,105,109,105,116,101,114,0] /* invalid long string  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36433=allocate([46,0] /* .\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str37434=allocate([69,101,0] /* Ee\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str38435=allocate([43,45,0] /* +-\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str39436=allocate([109,97,108,102,111,114,109,101,100,32,110,117,109,98,101,114,0] /* malformed number\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str40437=allocate([108,101,120,105,99,97,108,32,101,108,101,109,101,110,116,32,116,111,111,32,108,111,110,103,0] /* lexical element too  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str41438=allocate([117,110,102,105,110,105,115,104,101,100,32,115,116,114,105,110,103,0] /* unfinished string\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str42439=allocate([101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,32,116,111,111,32,108,97,114,103,101,0] /* escape sequence too  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str43440=allocate([117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,115,116,114,105,110,103,0] /* unfinished long stri */, "i8", ALLOC_STATIC);
STRING_TABLE.__str44441=allocate([117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,99,111,109,109,101,110,116,0] /* unfinished long comm */, "i8", ALLOC_STATIC);
STRING_TABLE.__str45442=allocate([110,101,115,116,105,110,103,32,111,102,32,91,91,46,46,46,93,93,32,105,115,32,100,101,112,114,101,99,97,116,101,100,0] /* nesting of [[...]] i */, "i8", ALLOC_STATIC);
STRING_TABLE.__str46443=allocate([99,104,117,110,107,32,104,97,115,32,116,111,111,32,109,97,110,121,32,108,105,110,101,115,0] /* chunk has too many l */, "i8", ALLOC_STATIC);
STRING_TABLE.__str482=allocate([109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,58,32,98,108,111,99,107,32,116,111,111,32,98,105,103,0] /* memory allocation er */, "i8", ALLOC_STATIC);
_luaO_nilobject_=allocate([0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"i8","i8","i8","i8","i32",0,0,0], ALLOC_STATIC);
STRING_TABLE._luaO_log2_log_2=allocate([0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8] /* \00\01\02\02\03\03\0 */, "i8", ALLOC_STATIC);
__str546=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str1547=allocate([40,110,117,108,108,41,0] /* (null)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2548=allocate([37,112,0] /* %p\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3549=allocate([37,0] /* %\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4550=allocate([46,46,46,0] /* ...\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5551=allocate([10,13,0] /* \0A\0D\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6552=allocate([91,115,116,114,105,110,103,32,34,0] /* [string \22\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7553=allocate([34,93,0] /* \22]\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._luaP_opmodes=allocate([96,113,84,96,80,113,108,49,16,60,84,108,124,124,124,124,124,124,96,96,96,104,34,188,188,188,228,228,84,84,16,98,98,132,20,0,81,80] /* `qT`Pql1\10_Tl|||||| */, "i8", ALLOC_STATIC);
STRING_TABLE.__str637=allocate([115,121,110,116,97,120,32,101,114,114,111,114,0] /* syntax error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1638=allocate([118,97,114,105,97,98,108,101,115,32,105,110,32,97,115,115,105,103,110,109,101,110,116,0] /* variables in assignm */, "i8", ALLOC_STATIC);
_priority=allocate([6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 10, 9, 5, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 1, 1], "i8", ALLOC_STATIC);
STRING_TABLE.__str2639=allocate([99,97,110,110,111,116,32,117,115,101,32,39,46,46,46,39,32,111,117,116,115,105,100,101,32,97,32,118,97,114,97,114,103,32,102,117,110,99,116,105,111,110,0] /* cannot use '...' out */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3640=allocate([115,101,108,102,0] /* self\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4641=allocate([99,111,110,115,116,97,110,116,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,0] /* constant table overf */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5642=allocate([97,114,103,0] /* arg\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6643=allocate([60,110,97,109,101,62,32,111,114,32,39,46,46,46,39,32,101,120,112,101,99,116,101,100,0] /* _name_ or '...' expe */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7644=allocate([108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0] /* local variables\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8645=allocate([116,111,111,32,109,97,110,121,32,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0] /* too many local varia */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9646=allocate([105,116,101,109,115,32,105,110,32,97,32,99,111,110,115,116,114,117,99,116,111,114,0] /* items in a construct */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10647=allocate([109,97,105,110,32,102,117,110,99,116,105,111,110,32,104,97,115,32,109,111,114,101,32,116,104,97,110,32,37,100,32,37,115,0] /* main function has mo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11648=allocate([102,117,110,99,116,105,111,110,32,97,116,32,108,105,110,101,32,37,100,32,104,97,115,32,109,111,114,101,32,116,104,97,110,32,37,100,32,37,115,0] /* function at line %d  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12649=allocate([97,109,98,105,103,117,111,117,115,32,115,121,110,116,97,120,32,40,102,117,110,99,116,105,111,110,32,99,97,108,108,32,120,32,110,101,119,32,115,116,97,116,101,109,101,110,116,41,0] /* ambiguous syntax (fu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13650=allocate([102,117,110,99,116,105,111,110,32,97,114,103,117,109,101,110,116,115,32,101,120,112,101,99,116,101,100,0] /* function arguments e */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14651=allocate([117,110,101,120,112,101,99,116,101,100,32,115,121,109,98,111,108,0] /* unexpected symbol\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15652=allocate([117,112,118,97,108,117,101,115,0] /* upvalues\00 */, "i8", ALLOC_STATIC);
__str16653=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str17654=allocate([110,111,32,108,111,111,112,32,116,111,32,98,114,101,97,107,0] /* no loop to break\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18655=allocate([39,61,39,32,111,114,32,39,105,110,39,32,101,120,112,101,99,116,101,100,0] /* '=' or 'in' expected */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19656=allocate([40,102,111,114,32,103,101,110,101,114,97,116,111,114,41,0] /* (for generator)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20657=allocate([40,102,111,114,32,115,116,97,116,101,41,0] /* (for state)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21658=allocate([40,102,111,114,32,99,111,110,116,114,111,108,41,0] /* (for control)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22659=allocate([40,102,111,114,32,105,110,100,101,120,41,0] /* (for index)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23660=allocate([40,102,111,114,32,108,105,109,105,116,41,0] /* (for limit)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24661=allocate([40,102,111,114,32,115,116,101,112,41,0] /* (for step)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25662=allocate([39,37,115,39,32,101,120,112,101,99,116,101,100,32,40,116,111,32,99,108,111,115,101,32,39,37,115,39,32,97,116,32,108,105,110,101,32,37,100,41,0] /* '%s' expected (to cl */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26663=allocate([39,37,115,39,32,101,120,112,101,99,116,101,100,0] /* '%s' expected\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27664=allocate([99,104,117,110,107,32,104,97,115,32,116,111,111,32,109,97,110,121,32,115,121,110,116,97,120,32,108,101,118,101,108,115,0] /* chunk has too many s */, "i8", ALLOC_STATIC);
STRING_TABLE.__str667=allocate([110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0] /* not enough memory\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str682=allocate([115,116,114,105,110,103,0] /* string\00 */, "i8", ALLOC_STATIC);
_strlib=allocate([0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str1683=allocate([103,109,97,116,99,104,0] /* gmatch\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2684=allocate([103,102,105,110,100,0] /* gfind\00 */, "i8", ALLOC_STATIC);
__str3685=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str4686=allocate([95,95,105,110,100,101,120,0] /* __index\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5687=allocate([98,121,116,101,0] /* byte\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6688=allocate([99,104,97,114,0] /* char\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7689=allocate([100,117,109,112,0] /* dump\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8690=allocate([102,105,110,100,0] /* find\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9691=allocate([102,111,114,109,97,116,0] /* format\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10692=allocate([103,115,117,98,0] /* gsub\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11693=allocate([108,101,110,0] /* len\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12694=allocate([108,111,119,101,114,0] /* lower\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13695=allocate([109,97,116,99,104,0] /* match\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14696=allocate([114,101,112,0] /* rep\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15697=allocate([114,101,118,101,114,115,101,0] /* reverse\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16698=allocate([115,117,98,0] /* sub\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17699=allocate([117,112,112,101,114,0] /* upper\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18700=allocate([94,36,42,43,63,46,40,91,37,45,0] /* ^$_+?.([%-\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19701=allocate([116,111,111,32,109,97,110,121,32,99,97,112,116,117,114,101,115,0] /* too many captures\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20702=allocate([105,110,118,97,108,105,100,32,99,97,112,116,117,114,101,32,105,110,100,101,120,0] /* invalid capture inde */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21703=allocate([117,110,102,105,110,105,115,104,101,100,32,99,97,112,116,117,114,101,0] /* unfinished capture\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22704=allocate([109,105,115,115,105,110,103,32,39,91,39,32,97,102,116,101,114,32,39,37,37,102,39,32,105,110,32,112,97,116,116,101,114,110,0] /* missing '[' after '% */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23705=allocate([109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,101,110,100,115,32,119,105,116,104,32,39,37,37,39,41,0] /* malformed pattern (e */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24706=allocate([109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,109,105,115,115,105,110,103,32,39,93,39,41,0] /* malformed pattern (m */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25707=allocate([117,110,98,97,108,97,110,99,101,100,32,112,97,116,116,101,114,110,0] /* unbalanced pattern\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26708=allocate([105,110,118,97,108,105,100,32,112,97,116,116,101,114,110,32,99,97,112,116,117,114,101,0] /* invalid pattern capt */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27709=allocate([115,116,114,105,110,103,47,102,117,110,99,116,105,111,110,47,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0] /* string/function/tabl */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28710=allocate([105,110,118,97,108,105,100,32,114,101,112,108,97,99,101,109,101,110,116,32,118,97,108,117,101,32,40,97,32,37,115,41,0] /* invalid replacement  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29711=allocate([39,115,116,114,105,110,103,46,103,102,105,110,100,39,32,119,97,115,32,114,101,110,97,109,101,100,32,116,111,32,39,115,116,114,105,110,103,46,103,109,97,116,99,104,39,0] /* 'string.gfind' was r */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30712=allocate([110,111,32,118,97,108,117,101,0] /* no value\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31713=allocate([105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,37,37,99,39,32,116,111,32,39,102,111,114,109,97,116,39,0] /* invalid option '%%%c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32714=allocate([92,114,0] /* \5Cr\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33715=allocate([92,48,48,48,0] /* \5C000\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34716=allocate([108,0] /* l\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35717=allocate([45,43,32,35,48,0] /* -+ #0\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36718=allocate([105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,114,101,112,101,97,116,101,100,32,102,108,97,103,115,41,0] /* invalid format (repe */, "i8", ALLOC_STATIC);
STRING_TABLE.__str37719=allocate([105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,119,105,100,116,104,32,111,114,32,112,114,101,99,105,115,105,111,110,32,116,111,111,32,108,111,110,103,41,0] /* invalid format (widt */, "i8", ALLOC_STATIC);
STRING_TABLE.__str38720=allocate([117,110,97,98,108,101,32,116,111,32,100,117,109,112,32,103,105,118,101,110,32,102,117,110,99,116,105,111,110,0] /* unable to dump given */, "i8", ALLOC_STATIC);
STRING_TABLE.__str39721=allocate([105,110,118,97,108,105,100,32,118,97,108,117,101,0] /* invalid value\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str40722=allocate([115,116,114,105,110,103,32,115,108,105,99,101,32,116,111,111,32,108,111,110,103,0] /* string slice too lon */, "i8", ALLOC_STATIC);
STRING_TABLE.__str725=allocate([116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,110,105,108,0] /* table index is nil\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1726=allocate([116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,78,97,78,0] /* table index is NaN\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2727=allocate([116,97,98,108,101,32,111,118,101,114,102,108,111,119,0] /* table overflow\00 */, "i8", ALLOC_STATIC);
_dummynode_=allocate([0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"i8","i8","i8","i8","i32",0,0,0,"*",0,0,0,"i8","i8","i8","i8","i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str3728=allocate([105,110,118,97,108,105,100,32,107,101,121,32,116,111,32,39,110,101,120,116,39,0] /* invalid key to 'next */, "i8", ALLOC_STATIC);
STRING_TABLE.__str747=allocate([116,97,98,108,101,0] /* table\00 */, "i8", ALLOC_STATIC);
_tab_funcs=allocate([0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 148, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 0, 0, 0, 0, 158, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str1748=allocate([99,111,110,99,97,116,0] /* concat\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2749=allocate([102,111,114,101,97,99,104,0] /* foreach\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3750=allocate([102,111,114,101,97,99,104,105,0] /* foreachi\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4751=allocate([103,101,116,110,0] /* getn\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5752=allocate([109,97,120,110,0] /* maxn\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6753=allocate([105,110,115,101,114,116,0] /* insert\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7754=allocate([114,101,109,111,118,101,0] /* remove\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8755=allocate([115,101,116,110,0] /* setn\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9756=allocate([115,111,114,116,0] /* sort\00 */, "i8", ALLOC_STATIC);
__str10757=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str11758=allocate([105,110,118,97,108,105,100,32,111,114,100,101,114,32,102,117,110,99,116,105,111,110,32,102,111,114,32,115,111,114,116,105,110,103,0] /* invalid order functi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12759=allocate([39,115,101,116,110,39,32,105,115,32,111,98,115,111,108,101,116,101,0] /* 'setn' is obsolete\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13760=allocate([119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,116,111,32,39,105,110,115,101,114,116,39,0] /* wrong number of argu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14761=allocate([105,110,118,97,108,105,100,32,118,97,108,117,101,32,40,37,115,41,32,97,116,32,105,110,100,101,120,32,37,100,32,105,110,32,116,97,98,108,101,32,102,111,114,32,39,99,111,110,99,97,116,39,0] /* invalid value (%s) a */, "i8", ALLOC_STATIC);
STRING_TABLE.__str764=allocate([110,105,108,0] /* nil\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1765=allocate([98,111,111,108,101,97,110,0] /* boolean\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2766=allocate([117,115,101,114,100,97,116,97,0] /* userdata\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3767=allocate([110,117,109,98,101,114,0] /* number\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4768=allocate([115,116,114,105,110,103,0] /* string\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5769=allocate([116,97,98,108,101,0] /* table\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6770=allocate([102,117,110,99,116,105,111,110,0] /* function\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7771=allocate([116,104,114,101,97,100,0] /* thread\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8772=allocate([112,114,111,116,111,0] /* proto\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9773=allocate([117,112,118,97,108,0] /* upval\00 */, "i8", ALLOC_STATIC);
_luaT_typenames=allocate(44, "i8", ALLOC_STATIC);
_luaT_init_luaT_eventname=allocate(68, "i8", ALLOC_STATIC);
STRING_TABLE.__str10776=allocate([95,95,105,110,100,101,120,0] /* __index\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11777=allocate([95,95,110,101,119,105,110,100,101,120,0] /* __newindex\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12778=allocate([95,95,103,99,0] /* __gc\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13779=allocate([95,95,109,111,100,101,0] /* __mode\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14780=allocate([95,95,101,113,0] /* __eq\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15781=allocate([95,95,97,100,100,0] /* __add\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16782=allocate([95,95,115,117,98,0] /* __sub\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17783=allocate([95,95,109,117,108,0] /* __mul\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18784=allocate([95,95,100,105,118,0] /* __div\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19785=allocate([95,95,109,111,100,0] /* __mod\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20786=allocate([95,95,112,111,119,0] /* __pow\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21787=allocate([95,95,117,110,109,0] /* __unm\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22788=allocate([95,95,108,101,110,0] /* __len\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23789=allocate([95,95,108,116,0] /* __lt\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24790=allocate([95,95,108,101,0] /* __le\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25791=allocate([95,95,99,111,110,99,97,116,0] /* __concat\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26792=allocate([95,95,99,97,108,108,0] /* __call\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str854=allocate([27,76,117,97,0] /* \1BLua\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1855=allocate([98,105,110,97,114,121,32,115,116,114,105,110,103,0] /* binary string\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2856=allocate([61,63,0] /* =?\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3857=allocate([99,111,100,101,32,116,111,111,32,100,101,101,112,0] /* code too deep\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4858=allocate([98,97,100,32,99,111,100,101,0] /* bad code\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5859=allocate([117,110,101,120,112,101,99,116,101,100,32,101,110,100,0] /* unexpected end\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6860=allocate([98,97,100,32,99,111,110,115,116,97,110,116,0] /* bad constant\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7861=allocate([98,97,100,32,105,110,116,101,103,101,114,0] /* bad integer\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8862=allocate([37,115,58,32,37,115,32,105,110,32,112,114,101,99,111,109,112,105,108,101,100,32,99,104,117,110,107,0] /* %s: %s in precompile */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9863=allocate([98,97,100,32,104,101,97,100,101,114,0] /* bad header\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str868=allocate([37,46,49,52,103,0] /* %.14g\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1869=allocate([105,110,100,101,120,0] /* index\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2870=allocate([108,111,111,112,32,105,110,32,103,101,116,116,97,98,108,101,0] /* loop in gettable\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3871=allocate([108,111,111,112,32,105,110,32,115,101,116,116,97,98,108,101,0] /* loop in settable\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4872=allocate([115,116,114,105,110,103,32,108,101,110,103,116,104,32,111,118,101,114,102,108,111,119,0] /* string length overfl */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5873=allocate([103,101,116,32,108,101,110,103,116,104,32,111,102,0] /* get length of\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6874=allocate([39,102,111,114,39,32,105,110,105,116,105,97,108,32,118,97,108,117,101,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0] /* 'for' initial value  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7875=allocate([39,102,111,114,39,32,108,105,109,105,116,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0] /* 'for' limit must be  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8876=allocate([39,102,111,114,39,32,115,116,101,112,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0] /* 'for' step must be a */, "i8", ALLOC_STATIC);
__gm_=allocate(468, "i8", ALLOC_STATIC);
_mparams=allocate(24, "i8", ALLOC_STATIC);
HEAP32[((_lualibs)>>2)]=((__str1845)|0);
HEAP32[(((_lualibs)+(8))>>2)]=((STRING_TABLE.__str1946)|0);
HEAP32[(((_lualibs)+(16))>>2)]=((STRING_TABLE.__str2047)|0);
HEAP32[((_co_funcs)>>2)]=((STRING_TABLE.__str1165)|0);
HEAP32[(((_co_funcs)+(8))>>2)]=((STRING_TABLE.__str2166)|0);
HEAP32[(((_co_funcs)+(16))>>2)]=((STRING_TABLE.__str3167)|0);
HEAP32[(((_co_funcs)+(24))>>2)]=((STRING_TABLE.__str4168)|0);
HEAP32[(((_co_funcs)+(32))>>2)]=((STRING_TABLE.__str5169)|0);
HEAP32[(((_co_funcs)+(40))>>2)]=((STRING_TABLE.__str6170)|0);
HEAP32[((_statnames)>>2)]=((STRING_TABLE.__str3167)|0);
HEAP32[(((_statnames)+(4))>>2)]=((STRING_TABLE.__str10174)|0);
HEAP32[(((_statnames)+(8))>>2)]=((STRING_TABLE.__str11175)|0);
HEAP32[(((_statnames)+(12))>>2)]=((STRING_TABLE.__str12176)|0);
HEAP32[((_base_funcs)>>2)]=((STRING_TABLE.__str24188)|0);
HEAP32[(((_base_funcs)+(8))>>2)]=((STRING_TABLE.__str25189)|0);
HEAP32[(((_base_funcs)+(16))>>2)]=((STRING_TABLE.__str26190)|0);
HEAP32[(((_base_funcs)+(24))>>2)]=((STRING_TABLE.__str27191)|0);
HEAP32[(((_base_funcs)+(32))>>2)]=((STRING_TABLE.__str28)|0);
HEAP32[(((_base_funcs)+(40))>>2)]=((STRING_TABLE.__str29)|0);
HEAP32[(((_base_funcs)+(48))>>2)]=((STRING_TABLE.__str30)|0);
HEAP32[(((_base_funcs)+(56))>>2)]=((STRING_TABLE.__str31)|0);
HEAP32[(((_base_funcs)+(64))>>2)]=((STRING_TABLE.__str32)|0);
HEAP32[(((_base_funcs)+(72))>>2)]=((STRING_TABLE.__str33)|0);
HEAP32[(((_base_funcs)+(80))>>2)]=((STRING_TABLE.__str34)|0);
HEAP32[(((_base_funcs)+(88))>>2)]=((STRING_TABLE.__str35)|0);
HEAP32[(((_base_funcs)+(96))>>2)]=((STRING_TABLE.__str36)|0);
HEAP32[(((_base_funcs)+(104))>>2)]=((STRING_TABLE.__str37)|0);
HEAP32[(((_base_funcs)+(112))>>2)]=((STRING_TABLE.__str38)|0);
HEAP32[(((_base_funcs)+(120))>>2)]=((STRING_TABLE.__str39)|0);
HEAP32[(((_base_funcs)+(128))>>2)]=((STRING_TABLE.__str40)|0);
HEAP32[(((_base_funcs)+(136))>>2)]=((STRING_TABLE.__str41)|0);
HEAP32[(((_base_funcs)+(144))>>2)]=((STRING_TABLE.__str42)|0);
HEAP32[(((_base_funcs)+(152))>>2)]=((STRING_TABLE.__str43)|0);
HEAP32[(((_base_funcs)+(160))>>2)]=((STRING_TABLE.__str44)|0);
HEAP32[(((_base_funcs)+(168))>>2)]=((STRING_TABLE.__str45)|0);
HEAP32[(((_base_funcs)+(176))>>2)]=((STRING_TABLE.__str46)|0);
HEAP32[(((_base_funcs)+(184))>>2)]=((STRING_TABLE.__str47)|0);
HEAP32[((_luaB_collectgarbage_opts)>>2)]=((STRING_TABLE.__str70)|0);
HEAP32[(((_luaB_collectgarbage_opts)+(4))>>2)]=((STRING_TABLE.__str71)|0);
HEAP32[(((_luaB_collectgarbage_opts)+(8))>>2)]=((STRING_TABLE.__str72)|0);
HEAP32[(((_luaB_collectgarbage_opts)+(12))>>2)]=((STRING_TABLE.__str73)|0);
HEAP32[(((_luaB_collectgarbage_opts)+(16))>>2)]=((STRING_TABLE.__str74)|0);
HEAP32[(((_luaB_collectgarbage_opts)+(20))>>2)]=((STRING_TABLE.__str75)|0);
HEAP32[(((_luaB_collectgarbage_opts)+(24))>>2)]=((STRING_TABLE.__str76)|0);
HEAP32[((_luaX_tokens)>>2)]=((STRING_TABLE.__str397)|0);
HEAP32[(((_luaX_tokens)+(4))>>2)]=((STRING_TABLE.__str1398)|0);
HEAP32[(((_luaX_tokens)+(8))>>2)]=((STRING_TABLE.__str2399)|0);
HEAP32[(((_luaX_tokens)+(12))>>2)]=((STRING_TABLE.__str3400)|0);
HEAP32[(((_luaX_tokens)+(16))>>2)]=((STRING_TABLE.__str4401)|0);
HEAP32[(((_luaX_tokens)+(20))>>2)]=((STRING_TABLE.__str5402)|0);
HEAP32[(((_luaX_tokens)+(24))>>2)]=((STRING_TABLE.__str6403)|0);
HEAP32[(((_luaX_tokens)+(28))>>2)]=((STRING_TABLE.__str7404)|0);
HEAP32[(((_luaX_tokens)+(32))>>2)]=((STRING_TABLE.__str8405)|0);
HEAP32[(((_luaX_tokens)+(36))>>2)]=((STRING_TABLE.__str9406)|0);
HEAP32[(((_luaX_tokens)+(40))>>2)]=((STRING_TABLE.__str10407)|0);
HEAP32[(((_luaX_tokens)+(44))>>2)]=((STRING_TABLE.__str11408)|0);
HEAP32[(((_luaX_tokens)+(48))>>2)]=((STRING_TABLE.__str12409)|0);
HEAP32[(((_luaX_tokens)+(52))>>2)]=((STRING_TABLE.__str13410)|0);
HEAP32[(((_luaX_tokens)+(56))>>2)]=((STRING_TABLE.__str14411)|0);
HEAP32[(((_luaX_tokens)+(60))>>2)]=((STRING_TABLE.__str15412)|0);
HEAP32[(((_luaX_tokens)+(64))>>2)]=((STRING_TABLE.__str16413)|0);
HEAP32[(((_luaX_tokens)+(68))>>2)]=((STRING_TABLE.__str17414)|0);
HEAP32[(((_luaX_tokens)+(72))>>2)]=((STRING_TABLE.__str18415)|0);
HEAP32[(((_luaX_tokens)+(76))>>2)]=((STRING_TABLE.__str19416)|0);
HEAP32[(((_luaX_tokens)+(80))>>2)]=((STRING_TABLE.__str20417)|0);
HEAP32[(((_luaX_tokens)+(84))>>2)]=((STRING_TABLE.__str21418)|0);
HEAP32[(((_luaX_tokens)+(88))>>2)]=((STRING_TABLE.__str22419)|0);
HEAP32[(((_luaX_tokens)+(92))>>2)]=((STRING_TABLE.__str23420)|0);
HEAP32[(((_luaX_tokens)+(96))>>2)]=((STRING_TABLE.__str24421)|0);
HEAP32[(((_luaX_tokens)+(100))>>2)]=((STRING_TABLE.__str25422)|0);
HEAP32[(((_luaX_tokens)+(104))>>2)]=((STRING_TABLE.__str26423)|0);
HEAP32[(((_luaX_tokens)+(108))>>2)]=((STRING_TABLE.__str27424)|0);
HEAP32[(((_luaX_tokens)+(112))>>2)]=((STRING_TABLE.__str28425)|0);
HEAP32[(((_luaX_tokens)+(116))>>2)]=((STRING_TABLE.__str29426)|0);
HEAP32[(((_luaX_tokens)+(120))>>2)]=((STRING_TABLE.__str30427)|0);
HEAP32[((_strlib)>>2)]=((STRING_TABLE.__str5687)|0);
HEAP32[(((_strlib)+(8))>>2)]=((STRING_TABLE.__str6688)|0);
HEAP32[(((_strlib)+(16))>>2)]=((STRING_TABLE.__str7689)|0);
HEAP32[(((_strlib)+(24))>>2)]=((STRING_TABLE.__str8690)|0);
HEAP32[(((_strlib)+(32))>>2)]=((STRING_TABLE.__str9691)|0);
HEAP32[(((_strlib)+(40))>>2)]=((STRING_TABLE.__str2684)|0);
HEAP32[(((_strlib)+(48))>>2)]=((STRING_TABLE.__str1683)|0);
HEAP32[(((_strlib)+(56))>>2)]=((STRING_TABLE.__str10692)|0);
HEAP32[(((_strlib)+(64))>>2)]=((STRING_TABLE.__str11693)|0);
HEAP32[(((_strlib)+(72))>>2)]=((STRING_TABLE.__str12694)|0);
HEAP32[(((_strlib)+(80))>>2)]=((STRING_TABLE.__str13695)|0);
HEAP32[(((_strlib)+(88))>>2)]=((STRING_TABLE.__str14696)|0);
HEAP32[(((_strlib)+(96))>>2)]=((STRING_TABLE.__str15697)|0);
HEAP32[(((_strlib)+(104))>>2)]=((STRING_TABLE.__str16698)|0);
HEAP32[(((_strlib)+(112))>>2)]=((STRING_TABLE.__str17699)|0);
HEAP32[((_tab_funcs)>>2)]=((STRING_TABLE.__str1748)|0);
HEAP32[(((_tab_funcs)+(8))>>2)]=((STRING_TABLE.__str2749)|0);
HEAP32[(((_tab_funcs)+(16))>>2)]=((STRING_TABLE.__str3750)|0);
HEAP32[(((_tab_funcs)+(24))>>2)]=((STRING_TABLE.__str4751)|0);
HEAP32[(((_tab_funcs)+(32))>>2)]=((STRING_TABLE.__str5752)|0);
HEAP32[(((_tab_funcs)+(40))>>2)]=((STRING_TABLE.__str6753)|0);
HEAP32[(((_tab_funcs)+(48))>>2)]=((STRING_TABLE.__str7754)|0);
HEAP32[(((_tab_funcs)+(56))>>2)]=((STRING_TABLE.__str8755)|0);
HEAP32[(((_tab_funcs)+(64))>>2)]=((STRING_TABLE.__str9756)|0);
HEAP32[((_luaT_typenames)>>2)]=((STRING_TABLE.__str764)|0);
HEAP32[(((_luaT_typenames)+(4))>>2)]=((STRING_TABLE.__str1765)|0);
HEAP32[(((_luaT_typenames)+(8))>>2)]=((STRING_TABLE.__str2766)|0);
HEAP32[(((_luaT_typenames)+(12))>>2)]=((STRING_TABLE.__str3767)|0);
HEAP32[(((_luaT_typenames)+(16))>>2)]=((STRING_TABLE.__str4768)|0);
HEAP32[(((_luaT_typenames)+(20))>>2)]=((STRING_TABLE.__str5769)|0);
HEAP32[(((_luaT_typenames)+(24))>>2)]=((STRING_TABLE.__str6770)|0);
HEAP32[(((_luaT_typenames)+(28))>>2)]=((STRING_TABLE.__str2766)|0);
HEAP32[(((_luaT_typenames)+(32))>>2)]=((STRING_TABLE.__str7771)|0);
HEAP32[(((_luaT_typenames)+(36))>>2)]=((STRING_TABLE.__str8772)|0);
HEAP32[(((_luaT_typenames)+(40))>>2)]=((STRING_TABLE.__str9773)|0);
HEAP32[((_luaT_init_luaT_eventname)>>2)]=((STRING_TABLE.__str10776)|0);
HEAP32[(((_luaT_init_luaT_eventname)+(4))>>2)]=((STRING_TABLE.__str11777)|0);
HEAP32[(((_luaT_init_luaT_eventname)+(8))>>2)]=((STRING_TABLE.__str12778)|0);
HEAP32[(((_luaT_init_luaT_eventname)+(12))>>2)]=((STRING_TABLE.__str13779)|0);
HEAP32[(((_luaT_init_luaT_eventname)+(16))>>2)]=((STRING_TABLE.__str14780)|0);
HEAP32[(((_luaT_init_luaT_eventname)+(20))>>2)]=((STRING_TABLE.__str15781)|0);
HEAP32[(((_luaT_init_luaT_eventname)+(24))>>2)]=((STRING_TABLE.__str16782)|0);
HEAP32[(((_luaT_init_luaT_eventname)+(28))>>2)]=((STRING_TABLE.__str17783)|0);
HEAP32[(((_luaT_init_luaT_eventname)+(32))>>2)]=((STRING_TABLE.__str18784)|0);
HEAP32[(((_luaT_init_luaT_eventname)+(36))>>2)]=((STRING_TABLE.__str19785)|0);
HEAP32[(((_luaT_init_luaT_eventname)+(40))>>2)]=((STRING_TABLE.__str20786)|0);
HEAP32[(((_luaT_init_luaT_eventname)+(44))>>2)]=((STRING_TABLE.__str21787)|0);
HEAP32[(((_luaT_init_luaT_eventname)+(48))>>2)]=((STRING_TABLE.__str22788)|0);
HEAP32[(((_luaT_init_luaT_eventname)+(52))>>2)]=((STRING_TABLE.__str23789)|0);
HEAP32[(((_luaT_init_luaT_eventname)+(56))>>2)]=((STRING_TABLE.__str24790)|0);
HEAP32[(((_luaT_init_luaT_eventname)+(60))>>2)]=((STRING_TABLE.__str25791)|0);
HEAP32[(((_luaT_init_luaT_eventname)+(64))>>2)]=((STRING_TABLE.__str26792)|0);
FUNCTION_TABLE = [0,0,_getbuf,0,_loaderror,0,_getaline,0,_lineerror,0,_f_call,0,_getF,0,_getS,0,_l_alloc,0,_panic,0,_luaB_ipairs,0,_ipairsaux,0,_luaB_pairs,0,_luaB_next,0,_luaB_newproxy,0,_luaB_auxwrap,0,_generic_reader,0,_resume,0,_f_parser,0,_luaU_undump,0,_luaY_parser,0,_f_luaopen,0,_callallgcTM,0,_writer,0,_gmatch_aux,0,_luaopen_base,0,_luaopen_table,0,_luaopen_string,0,_luaB_cocreate,0,_luaB_coresume,0,_luaB_corunning,0,_luaB_costatus,0,_luaB_cowrap,0,_luaB_yield,0,_luaB_assert,0,_luaB_collectgarbage,0,_luaB_dofile,0,_luaB_error,0,_luaB_gcinfo,0,_luaB_getfenv,0,_luaB_getmetatable,0,_luaB_loadfile,0,_luaB_load,0,_luaB_loadstring,0,_luaB_pcall,0,_luaB_print,0,_luaB_rawequal,0,_luaB_rawget,0,_luaB_rawset,0,_luaB_select,0,_luaB_setfenv,0,_luaB_setmetatable,0,_luaB_tonumber,0,_luaB_tostring,0,_luaB_type,0,_luaB_unpack,0,_luaB_xpcall,0,_str_byte,0,_str_char,0,_str_dump,0,_str_find,0,_str_format,0,_gfind_nodef,0,_gmatch,0,_str_gsub,0,_str_len,0,_str_lower,0,_str_match,0,_str_rep,0,_str_reverse,0,_str_sub,0,_str_upper,0,_tconcat,0,_foreach,0,_foreachi,0,_getn,0,_maxn,0,_tinsert,0,_tremove,0,_setn,0,_sort,0]; Module["FUNCTION_TABLE"] = FUNCTION_TABLE;


function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }

  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = run;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

initRuntime();

var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

if (shouldRunNow) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}





  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_main","_loadfile","_interp","_getaline","_lineerror","_print_answers","_print_answers_as_tab_separated_values","_print_answers_as_datalog","_loaderror","_getbuf","_dl_getpred","_dl_getpredlen","_dl_getpredarity","_leave","_dl_open","_dl_lua","_dl_close","_dl_pushlstring","_dl_pushstring","_dl_concat","_dl_pushliteral","_dl_pcall","_dl_addpred","_dl_addvar","_dl_addconst","_dl_makeliteral","_dl_pushhead","_dl_addliteral","_dl_makeclause","_dl_assert","_dl_retract","_dl_free","_dl_ask","_dl_getconst","_dl_getconstlen","_dl_mark","_dl_reset","_dl_load","_initscan","_program","_islidentifier","_dl_putlconst","_dl_putc","_isidstart","_isidpart","_isvarstart","_chk_file_line","_scan","_falsehood","_err","_literal","_rule","_term","_getch","_addstr","_toescape","_isodigit","_toint","_ungetch","_lua_setlevel","_lua_atpanic","_lua_gettop","_addid","_addvar","_isvarpart","_pushstring","_getbuf91","_lua_checkstack","_lua_xmove","_lua_newthread","_lua_settop","_index2adr","_lua_typename","_lua_remove","_lua_insert","_lua_replace","_lua_pushvalue","_lua_type","_lua_iscfunction","_lua_isnumber","_lua_isstring","_lua_rawequal","_lua_lessthan","_lua_tonumber","_lua_tointeger","_lua_toboolean","_lua_pushnil","_lua_pushnumber","_lua_pushinteger","_getcurrenv","_lua_pushboolean","_lua_pushthread","_lua_tolstring","_lua_objlen","_lua_touserdata","_lua_tothread","_lua_topointer","_lua_pushlstring","_lua_pushstring","_lua_pushvfstring","_lua_pushfstring","_lua_pushcclosure","_lua_gettable","_lua_getfield","_lua_rawget","_lua_rawgeti","_lua_createtable","_lua_getmetatable","_lua_getfenv","_lua_settable","_lua_setfield","_lua_rawset","_lua_rawseti","_lua_setmetatable","_lua_setfenv","_lua_call","_lua_pcall","_f_call","_lua_status","_lua_load","_lua_dump","_lua_gc","_lua_error","_lua_next","_lua_concat","_lua_newuserdata","_luaL_argerror","_luaL_error","_luaL_typerror","_luaL_where","_luaL_checkoption","_luaL_optlstring","_luaL_checklstring","_luaL_checkstack","_luaL_checktype","_tag_error","_luaL_checkany","_luaL_checknumber","_luaL_checkinteger","_luaL_optinteger","_luaL_getmetafield","_libsize","_luaL_buffinit","_luaL_callmeta","_luaL_register","_luaL_openlib","_luaL_findtable","_luaL_addlstring","_luaL_pushresult","_luaL_prepbuffer","_emptybuffer","_adjuststack","_luaL_addvalue","_luaL_loadfile","_errfile","_getF","_luaL_loadbuffer","_getS","_luaL_newstate","_l_alloc","_panic","_luaopen_base","_base_open","_luaB_cocreate","_luaB_coresume","_luaB_corunning","_luaB_costatus","_luaB_cowrap","_luaB_yield","_luaB_auxwrap","_auxresume","_costatus","_auxopen","_luaB_ipairs","_ipairsaux","_luaB_pairs","_luaB_next","_luaB_newproxy","_luaB_assert","_luaB_collectgarbage","_luaB_dofile","_luaB_error","_luaB_gcinfo","_luaB_getfenv","_luaB_getmetatable","_luaB_loadfile","_luaB_load","_luaB_loadstring","_luaB_pcall","_luaB_print","_luaB_rawequal","_luaB_rawget","_luaB_rawset","_luaB_select","_luaB_setfenv","_luaB_setmetatable","_luaB_tonumber","_luaB_tostring","_luaB_type","_luaB_unpack","_luaB_xpcall","_getfunc","_load_aux","_generic_reader","_luaK_nil","_luaK_codeABC","_luaK_jump","_luaK_codeABx","_luaK_getlabel","_getjump","_luaK_setoneret","_freereg","_luaK_concat","_luaK_ret","_luaK_patchlist","_luaK_patchtohere","_patchlistaux","_fixjump","_luaK_checkstack","_luaK_reserveregs","_luaK_stringK","_addk","_luaK_numberK","_luaK_setreturns","_luaK_dischargevars","_luaK_exp2nextreg","_freeexp","_isnumeral","_exp2reg","_luaK_exp2anyreg","_luaK_exp2val","_luaK_exp2RK","_nilK","_boolK","_luaK_storevar","_luaK_self","_luaK_goiftrue","_invertjump","_jumponcond","_luaK_indexed","_luaK_prefix","_codearith","_luaK_fixline","_getjumpcontrol","_codenot","_luaK_infix","_luaK_goiffalse","_luaK_posfix","_codecomp","_luaK_code","_luaK_setlist","_dischargejpc","_condjump","_discharge2anyreg","_removevalues","_patchtestreg","_luaG_checkopenop","_lua_getstack","_discharge2reg","_constfolding","_need_value","_code_label","_lua_getinfo","_auxgetinfo","_collectvalidlines","_luaG_checkcode","_symbexec","_isinstack","_getluaproto","_currentpc","_kname","_precheck","_luaG_typeerror","_getobjname","_luaG_runerror","_luaG_concaterror","_luaG_aritherror","_luaG_ordererror","_luaG_errormsg","_addinfo","_currentline","_checkArgMode","_correctstack","_info_tailcall","_funcinfo","_getfuncname","_luaD_seterrorobj","_resetstack","_luaD_rawrunprotected","_luaD_reallocstack","_luaD_reallocCI","_luaD_growstack","_luaD_throw","_luaD_callhook","_luaD_precall","_tryfuncTM","_adjust_varargs","_growCI","_luaD_poscall","_callrethooks","_luaD_call","_lua_resume","_resume_error","_resume","_lua_yield","_luaD_pcall","_restore_stack_limit","_luaD_protectedparser","_f_parser","_luaU_dump","_DumpHeader","_DumpFunction","_DumpString","_DumpInt","_DumpChar","_DumpVector","_DumpConstants","_DumpDebug","_DumpNumber","_DumpBlock","_luaF_newCclosure","_luaF_newLclosure","_luaF_newupval","_luaF_findupval","_luaF_freeupval","_unlinkupval","_luaF_getlocalname","_luaF_close","_luaF_newproto","_luaF_freeproto","_luaF_freeclosure","_luaC_separateudata","_luaC_callGCTM","_GCTM","_luaC_freeall","_luaC_barrierback","_luaC_link","_sweeplist","_luaC_step","_singlestep","_luaC_fullgc","_markroot","_luaC_barrierf","_reallymarkobject","_luaC_linkupval","_markmt","_propagatemark","_atomic","_checkSizes","_remarkupvals","_propagateall","_marktmu","_cleartable","_iscleared","_removeentry","_traversetable","_traverseclosure","_traversestack","_traverseproto","_checkstacksizes","_freeobj","_luaX_init","_luaX_token2str","_luaX_lexerror","_txtToken","_luaX_syntaxerror","_luaX_newstring","_luaX_setinput","_luaX_next","_llex","_luaX_lookahead","_inclinenumber","_skip_sep","_read_long_string","_buffreplace","_read_string","_save","_check_next","_read_numeral","_trydecpoint","_luaM_growaux_","_luaO_int2fb","_luaO_fb2int","_luaO_log2","_luaO_rawequalObj","_luaM_realloc_","_luaM_toobig","_luaO_str2d","_luaO_pushvfstring","_pushstr","_luaO_pushfstring","_luaO_chunkid","_luaY_parser","_block_follow","_open_func","_chunk","_check","_close_func","_enterlevel","_statement","_testnext","_ifstat","_whilestat","_block","_check_match","_forstat","_repeatstat","_funcstat","_localfunc","_localstat","_retstat","_breakstat","_exprstat","_primaryexp","_assignment","_check_conflict","_errorlimit","_checknext","_explist1","_getunopr","_getbinopr","_init_exp","_adjustlocalvars","_adjust_assign","_expr","_subexpr","_simpleexp","_codestring","_constructor","_body","_new_localvar","_parlist","_pushclosure","_str_checkname","_registerlocalvar","_closelistfield","_listfield","_recfield","_lastlistfield","_checkname","_yindex","_prefixexp","_field","_funcargs","_singlevar","_singlevaraux","_searchvar","_markupval","_enterblock","_removevars","_indexupvalue","_funcname","_cond","_leaveblock","_fornum","_forlist","_forbody","_exp1","_error_expected","_test_then_block","_anchor_token","_luaE_newthread","_preinit_state","_stack_init","_luaE_freethread","_freestack","_lua_newstate","_f_luaopen","_close_state","_lua_close","_callallgcTM","_luaS_resize","_luaS_newlstr","_newlstr","_luaS_newudata","_luaopen_string","_createmetatable","_str_byte","_str_char","_str_dump","_str_find","_str_format","_gfind_nodef","_gmatch","_str_gsub","_str_len","_posrelat","_str_lower","_str_match","_str_rep","_str_reverse","_str_sub","_str_upper","_str_find_aux","_lmemfind","_match","_push_captures","_push_onecapture","_start_capture","_end_capture","_matchbalance","_classend","_matchbracketclass","_match_capture","_singlematch","_max_expand","_min_expand","_match_class","_check_capture","_capture_to_close","_add_value","_add_s","_gmatch_aux","_scanformat","_addintlen","_addquoted","_writer","_luaH_next","_findindex","_luaH_resizearray","_resize","_luaH_getstr","_luaH_new","_setarrayvector","_setnodevector","_luaH_free","_luaH_getnum","_hashnum","_luaH_get","_mainposition","_luaH_set","_getfreepos","_numusearray","_computesizes","_arrayindex","_newkey","_luaH_setnum","_luaH_setstr","_luaH_getn","_unbound_search","_rehash","_numusehash","_countint","_luaopen_table","_tconcat","_foreach","_foreachi","_getn","_maxn","_tinsert","_tremove","_setn","_sort","_auxsort","_sort_comp","_set2","_addfield","_luaT_init","_luaT_gettm","_luaT_gettmbyobj","_luaU_undump","_LoadHeader","_LoadFunction","_luaU_header","_error","_LoadString","_LoadInt","_LoadChar","_LoadCode","_LoadConstants","_LoadDebug","_LoadBlock","_LoadNumber","_luaV_tonumber","_luaV_tostring","_luaV_gettable","_callTMres","_luaV_settable","_callTM","_luaV_lessthan","_l_strcmp","_call_orderTM","_luaV_equalval","_get_compTM","_luaV_concat","_call_binTM","_luaV_execute","_luaZ_init","_traceexec","_Arith","_lessequal","_luaZ_fill","_luaZ_lookahead","_luaZ_read","_luaZ_openspace","_malloc","_tmalloc_small","_tmalloc_large","_sys_alloc","_free","_sys_trim","_realloc","_release_unused_segments","_mmap_resize","_segment_holding","_init_top","_mmap_alloc","_init_bins","_internal_realloc","_init_mparams","_prepend_alloc","_add_segment"]


return Module;
};