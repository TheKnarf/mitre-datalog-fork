diff -ur a/datalog.lua b/datalog.lua
--- a/datalog.lua	2012-04-28 17:49:50.493075691 -0400
+++ b/datalog.lua	2012-04-28 17:49:58.002063513 -0400
@@ -5,6 +5,14 @@
 A small Datalog interpreter written in Lua designed to be used via a
 simple C API.
 
+This version uses a small, bounded amount of runtime stack space so
+that deep queries do not cause a Lua stack exhaustion exception.  It
+does so by keeping the information that was on the stack in a table of
+thunks (zero arity functions).  In exchange for protection against
+stack exhaustion exception, there is a performance penalty.  Plus,
+there is currently no limit on the size of the table of thunks, so a
+very deep query will fail by exhausting the Lua heap.
+
 John D. Ramsdell
 Copyright (C) 2004 The MITRE Corporation
 
@@ -604,6 +612,37 @@
    return new
 end
 
+-- A stack of thunks used to delay the evaluation of some expressions
+
+-- The use of thunks protects the search for answers from exhausting
+-- the Lua stack.  The cost of using thunks is performance.
+
+local tasks
+
+-- Schedule a task for later invocation
+
+local function sched(thunk)
+   return table.insert(tasks, thunk)
+end
+
+-- Invoke the scheduled tasks
+
+local function invoke(thunk)
+   tasks = {thunk}
+   while true do
+      local task = table.remove(tasks)
+      if task then
+	 task()
+      else
+	 break
+      end
+   end
+   tasks = nil
+end
+
+-- Thunks are created and stored in the stack in functions fact and
+-- rule.
+
 -- Store a fact, and inform all waiters of the fact too.
 
 local fact, rule, add_clause, search
@@ -611,11 +650,12 @@
 function fact(subgoal, literal)
    if not is_member(literal, subgoal.facts) then
       adjoin(literal, subgoal.facts)
-      for i=1,#subgoal.waiters do
+      for i=#subgoal.waiters,1,-1 do
 	 local waiter = subgoal.waiters[i]
 	 local resolvent = resolve(waiter.clause, literal)
 	 if resolvent then
-	    add_clause(waiter.subgoal, resolvent)
+	    -- Delayed call to add_clause
+	    sched(function () add_clause(waiter.subgoal, resolvent) end)
 	 end
       end
    end
@@ -635,13 +675,15 @@
 	 end
       end
       for i=1,#todo do
-	 add_clause(subgoal, todo[i])
+	 -- Delayed call to add_clause
+	 sched(function () add_clause(subgoal, todo[i]) end)
       end
    else
       sg = make_subgoal(selected)
       table.insert(sg.waiters, {subgoal = subgoal, clause = clause})
       merge(sg)
-      return search(sg)
+      -- Delayed call to search
+      return sched(function () search(sg) end)
    end
 end
 
@@ -679,7 +721,7 @@
    subgoals = {}
    local subgoal = make_subgoal(literal)
    merge(subgoal)
-   search(subgoal)
+   invoke(function () search(subgoal) end)
    subgoals = nil
    local answers = {}
    for id,literal in pairs(subgoal.facts) do
